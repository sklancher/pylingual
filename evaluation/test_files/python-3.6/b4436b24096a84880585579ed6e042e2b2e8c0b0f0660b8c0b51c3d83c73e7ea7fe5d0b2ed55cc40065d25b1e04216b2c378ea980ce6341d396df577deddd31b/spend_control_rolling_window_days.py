"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>   # noqa: E501

    The version of the OpenAPI document: 0.32.0.dev5
    Generated by: https://openapi-generator.tech
"""
from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid
import frozendict
from synctera_client import schemas

class SpendControlRollingWindowDays(schemas.ComposedSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:

        class all_of_1(schemas.DictSchema):

            class MetaOapg:
                required = {'days', 'time_range_type'}

                class properties:

                    class days(schemas.IntSchema):

                        class MetaOapg:
                            inclusive_maximum = 31
                    __annotations__ = {'days': days}
            days: MetaOapg.properties.days
            time_range_type: schemas.AnyTypeSchema

            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal['days']) -> MetaOapg.properties.days:
                ...

            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
                ...

            def __getitem__(self, name: typing.Union[typing_extensions.Literal['days',], str]):
                return super().__getitem__(name)

            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal['days']) -> MetaOapg.properties.days:
                ...

            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
                ...

            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal['days',], str]):
                return super().get_item_oapg(name)

            def __new__(cls, *_args: typing.Union[dict, frozendict.frozendict], days: typing.Union[MetaOapg.properties.days, decimal.Decimal, int], time_range_type: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader], _configuration: typing.Optional[schemas.Configuration]=None, **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes]) -> 'all_of_1':
                return super().__new__(cls, *_args, days=days, time_range_type=time_range_type, _configuration=_configuration, **kwargs)

        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            return [SpendControlTimeRangeType, cls.all_of_1]

    def __new__(cls, *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader], _configuration: typing.Optional[schemas.Configuration]=None, **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes]) -> 'SpendControlRollingWindowDays':
        return super().__new__(cls, *_args, _configuration=_configuration, **kwargs)
from synctera_client.model.spend_control_time_range_type import SpendControlTimeRangeType