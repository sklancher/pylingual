from __future__ import absolute_import, division, print_function
__metaclass__ = type
ANSIBLE_METADATA = {'metadata_version': '1.1', 'status': ['preview'], 'supported_by': 'community'}
DOCUMENTATION = '\n---\nmodule: cp_mgmt_exception_group\nshort_description: Manages exception-group objects on Check Point over Web Services API\ndescription:\n  - Manages exception-group objects on Check Point devices including creating, updating and removing objects.\n  - All operations are performed over Web Services API.\nversion_added: "1.0.0"\nauthor: "Or Soffer (@chkp-orso)"\noptions:\n  name:\n    description:\n      - Object name.\n    type: str\n    required: True\n  applied_profile:\n    description:\n      - The threat profile to apply this group to in the case of apply-on threat-rules-with-specific-profile.\n    type: str\n  applied_threat_rules:\n    description:\n      - The threat rules to apply this group on in the case of apply-on manually-select-threat-rules.\n    type: dict\n    suboptions:\n      add:\n        description:\n          - Adds to collection of values\n        type: list\n        elements: dict\n        suboptions:\n          layer:\n            description:\n              - The layer of the threat rule to which the group is to be attached.\n            type: str\n          name:\n            description:\n              - The name of the threat rule to which the group is to be attached.\n            type: str\n          rule_number:\n            description:\n              - The rule-number of the threat rule to which the group is to be attached.\n            type: str\n          position:\n            description:\n              - Position in the rulebase.\n            type: str\n  apply_on:\n    description:\n      - An exception group can be set to apply on all threat rules, all threat rules which have a specific profile, or those rules manually chosen by the user.\n    type: str\n    choices: [\'all-threat-rules\', \'all-threat-rules-with-specific-profile\', \'manually-select-threat-rules\']\n  tags:\n    description:\n      - Collection of tag identifiers.\n    type: list\n    elements: str\n  color:\n    description:\n      - Color of the object. Should be one of existing colors.\n    type: str\n    choices: [\'aquamarine\', \'black\', \'blue\', \'crete blue\', \'burlywood\', \'cyan\', \'dark green\', \'khaki\', \'orchid\', \'dark orange\', \'dark sea green\',\n             \'pink\', \'turquoise\', \'dark blue\', \'firebrick\', \'brown\', \'forest green\', \'gold\', \'dark gold\', \'gray\', \'dark gray\', \'light green\', \'lemon chiffon\',\n             \'coral\', \'sea green\', \'sky blue\', \'magenta\', \'purple\', \'slate blue\', \'violet red\', \'navy blue\', \'olive\', \'orange\', \'red\', \'sienna\', \'yellow\']\n  comments:\n    description:\n      - Comments string.\n    type: str\n  details_level:\n    description:\n      - The level of detail for some of the fields in the response can vary from showing only the UID value of the object to a fully detailed\n        representation of the object.\n    type: str\n    choices: [\'uid\', \'standard\', \'full\']\n  ignore_warnings:\n    description:\n      - Apply changes ignoring warnings.\n    type: bool\n  ignore_errors:\n    description:\n      - Apply changes ignoring errors. You won\'t be able to publish such a changes. If ignore-warnings flag was omitted - warnings will also be ignored.\n    type: bool\nextends_documentation_fragment: check_point.mgmt.checkpoint_objects\n'
EXAMPLES = '\n- name: add-exception-group\n  cp_mgmt_exception_group:\n    applied_threat_rules.0.layer: MyLayer\n    applied_threat_rules.0.name: MyThreatRule\n    apply_on: manually-select-threat-rules\n    name: exception_group_2\n    state: present\n\n- name: set-exception-group\n  cp_mgmt_exception_group:\n    apply_on: all-threat-rules\n    name: exception_group_2\n    state: present\n    tags: tag3\n\n- name: delete-exception-group\n  cp_mgmt_exception_group:\n    name: exception_group_2\n    state: absent\n'
RETURN = '\ncp_mgmt_exception_group:\n  description: The checkpoint object created or updated.\n  returned: always, except when deleting the object.\n  type: dict\n'
from ansible.module_utils.basic import AnsibleModule
from ansible_collections.check_point.mgmt.plugins.module_utils.checkpoint import checkpoint_argument_spec_for_objects, api_call

def main():
    argument_spec = dict(name=dict(type='str', required=True), applied_profile=dict(type='str'), applied_threat_rules=dict(type='dict', options=dict(add=dict(type='list', elements='dict', options=dict(layer=dict(type='str'), name=dict(type='str'), rule_number=dict(type='str'), position=dict(type='str'))))), apply_on=dict(type='str', choices=['all-threat-rules', 'all-threat-rules-with-specific-profile', 'manually-select-threat-rules']), tags=dict(type='list', elements='str'), color=dict(type='str', choices=['aquamarine', 'black', 'blue', 'crete blue', 'burlywood', 'cyan', 'dark green', 'khaki', 'orchid', 'dark orange', 'dark sea green', 'pink', 'turquoise', 'dark blue', 'firebrick', 'brown', 'forest green', 'gold', 'dark gold', 'gray', 'dark gray', 'light green', 'lemon chiffon', 'coral', 'sea green', 'sky blue', 'magenta', 'purple', 'slate blue', 'violet red', 'navy blue', 'olive', 'orange', 'red', 'sienna', 'yellow']), comments=dict(type='str'), details_level=dict(type='str', choices=['uid', 'standard', 'full']), ignore_warnings=dict(type='bool'), ignore_errors=dict(type='bool'))
    argument_spec.update(checkpoint_argument_spec_for_objects)
    module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=True)
    api_call_object = 'exception-group'
    result = api_call(module, api_call_object)
    module.exit_json(**result)
if __name__ == '__main__':
    main()