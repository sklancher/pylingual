"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six

class V1betaintegrationsintegrationIdUuidIntegration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'id': 'object', 'workspace_id': 'RimeUUID', 'creation_time': 'datetime', 'name': 'str', 'type': 'IntegrationIntegrationType', 'schema': 'IntegrationIntegrationSchema', 'level': 'IntegrationIntegrationLevel'}
    attribute_map = {'id': 'id', 'workspace_id': 'workspaceId', 'creation_time': 'creationTime', 'name': 'name', 'type': 'type', 'schema': 'schema', 'level': 'level'}

    def __init__(self, id=None, workspace_id=None, creation_time=None, name=None, type=None, schema=None, level=None):
        """V1betaintegrationsintegrationIdUuidIntegration - a model defined in Swagger"""
        self._id = None
        self._workspace_id = None
        self._creation_time = None
        self._name = None
        self._type = None
        self._schema = None
        self._level = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if workspace_id is not None:
            self.workspace_id = workspace_id
        if creation_time is not None:
            self.creation_time = creation_time
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if schema is not None:
            self.schema = schema
        if level is not None:
            self.level = level

    @property
    def id(self):
        """Gets the id of this V1betaintegrationsintegrationIdUuidIntegration.  # noqa: E501

        Unique ID of an object in RIME.  # noqa: E501

        :return: The id of this V1betaintegrationsintegrationIdUuidIntegration.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1betaintegrationsintegrationIdUuidIntegration.

        Unique ID of an object in RIME.  # noqa: E501

        :param id: The id of this V1betaintegrationsintegrationIdUuidIntegration.  # noqa: E501
        :type: object
        """
        self._id = id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this V1betaintegrationsintegrationIdUuidIntegration.  # noqa: E501


        :return: The workspace_id of this V1betaintegrationsintegrationIdUuidIntegration.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this V1betaintegrationsintegrationIdUuidIntegration.


        :param workspace_id: The workspace_id of this V1betaintegrationsintegrationIdUuidIntegration.  # noqa: E501
        :type: RimeUUID
        """
        self._workspace_id = workspace_id

    @property
    def creation_time(self):
        """Gets the creation_time of this V1betaintegrationsintegrationIdUuidIntegration.  # noqa: E501


        :return: The creation_time of this V1betaintegrationsintegrationIdUuidIntegration.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this V1betaintegrationsintegrationIdUuidIntegration.


        :param creation_time: The creation_time of this V1betaintegrationsintegrationIdUuidIntegration.  # noqa: E501
        :type: datetime
        """
        self._creation_time = creation_time

    @property
    def name(self):
        """Gets the name of this V1betaintegrationsintegrationIdUuidIntegration.  # noqa: E501


        :return: The name of this V1betaintegrationsintegrationIdUuidIntegration.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1betaintegrationsintegrationIdUuidIntegration.


        :param name: The name of this V1betaintegrationsintegrationIdUuidIntegration.  # noqa: E501
        :type: str
        """
        self._name = name

    @property
    def type(self):
        """Gets the type of this V1betaintegrationsintegrationIdUuidIntegration.  # noqa: E501


        :return: The type of this V1betaintegrationsintegrationIdUuidIntegration.  # noqa: E501
        :rtype: IntegrationIntegrationType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V1betaintegrationsintegrationIdUuidIntegration.


        :param type: The type of this V1betaintegrationsintegrationIdUuidIntegration.  # noqa: E501
        :type: IntegrationIntegrationType
        """
        self._type = type

    @property
    def schema(self):
        """Gets the schema of this V1betaintegrationsintegrationIdUuidIntegration.  # noqa: E501


        :return: The schema of this V1betaintegrationsintegrationIdUuidIntegration.  # noqa: E501
        :rtype: IntegrationIntegrationSchema
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this V1betaintegrationsintegrationIdUuidIntegration.


        :param schema: The schema of this V1betaintegrationsintegrationIdUuidIntegration.  # noqa: E501
        :type: IntegrationIntegrationSchema
        """
        self._schema = schema

    @property
    def level(self):
        """Gets the level of this V1betaintegrationsintegrationIdUuidIntegration.  # noqa: E501


        :return: The level of this V1betaintegrationsintegrationIdUuidIntegration.  # noqa: E501
        :rtype: IntegrationIntegrationLevel
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this V1betaintegrationsintegrationIdUuidIntegration.


        :param level: The level of this V1betaintegrationsintegrationIdUuidIntegration.  # noqa: E501
        :type: IntegrationIntegrationLevel
        """
        self._level = level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(V1betaintegrationsintegrationIdUuidIntegration, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1betaintegrationsintegrationIdUuidIntegration):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other