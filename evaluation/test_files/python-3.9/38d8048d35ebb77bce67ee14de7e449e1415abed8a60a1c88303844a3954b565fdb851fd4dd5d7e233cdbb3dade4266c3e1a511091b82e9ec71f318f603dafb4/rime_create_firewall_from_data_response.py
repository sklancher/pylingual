"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six

class RimeCreateFirewallFromDataResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'stress_test_job': 'RimeJobMetadata', 'firewall': 'RimeFirewall'}
    attribute_map = {'stress_test_job': 'stressTestJob', 'firewall': 'firewall'}

    def __init__(self, stress_test_job=None, firewall=None):
        """RimeCreateFirewallFromDataResponse - a model defined in Swagger"""
        self._stress_test_job = None
        self._firewall = None
        self.discriminator = None
        if stress_test_job is not None:
            self.stress_test_job = stress_test_job
        if firewall is not None:
            self.firewall = firewall

    @property
    def stress_test_job(self):
        """Gets the stress_test_job of this RimeCreateFirewallFromDataResponse.  # noqa: E501


        :return: The stress_test_job of this RimeCreateFirewallFromDataResponse.  # noqa: E501
        :rtype: RimeJobMetadata
        """
        return self._stress_test_job

    @stress_test_job.setter
    def stress_test_job(self, stress_test_job):
        """Sets the stress_test_job of this RimeCreateFirewallFromDataResponse.


        :param stress_test_job: The stress_test_job of this RimeCreateFirewallFromDataResponse.  # noqa: E501
        :type: RimeJobMetadata
        """
        self._stress_test_job = stress_test_job

    @property
    def firewall(self):
        """Gets the firewall of this RimeCreateFirewallFromDataResponse.  # noqa: E501


        :return: The firewall of this RimeCreateFirewallFromDataResponse.  # noqa: E501
        :rtype: RimeFirewall
        """
        return self._firewall

    @firewall.setter
    def firewall(self, firewall):
        """Sets the firewall of this RimeCreateFirewallFromDataResponse.


        :param firewall: The firewall of this RimeCreateFirewallFromDataResponse.  # noqa: E501
        :type: RimeFirewall
        """
        self._firewall = firewall

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(RimeCreateFirewallFromDataResponse, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeCreateFirewallFromDataResponse):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other