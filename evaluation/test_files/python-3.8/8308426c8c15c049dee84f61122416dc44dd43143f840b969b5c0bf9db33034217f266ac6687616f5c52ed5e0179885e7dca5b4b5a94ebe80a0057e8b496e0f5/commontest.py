"""
Module for common project tests

CommonTest usage: make a module 00-import.py in the test/ dir that has only the following line
   from vsc.install.commontest import CommonTest

Running python setup.py test will pick this up and do its magic

@author: Stijn De Weirdt (Ghent University)
"""
import optparse
import os
import pkg_resources
import pprint
import re
import sys
from prospector.run import Prospector
from prospector.config import ProspectorConfig
from distutils import log
from vsc.install.ci import JENKINSFILE, TOX_INI, gen_jenkinsfile, gen_tox_ini
from vsc.install.headers import check_header
from vsc.install.shared_setup import vsc_setup
from vsc.install.testing import TestCase
prospector_version = pkg_resources.get_distribution('prospector').version
PROSPECTOR_USE_LIBS = []
PROSPECTOR_BLACKLIST = ['Locally disabling', 'Useless suppression', "Redefining built-in 'reduce'", 'c-extension-no-member']
PROSPECTOR_WHITELIST = ['E101', 'E111', 'E501', 'E713', 'F811', 'W291', 'arguments-differ', 'assignment-from-no-return', 'backtick', 'bad-indentation', 'bad-whitespace', 'bare-except', 'dangerous-default-value', 'duplicate-key', 'import-star-module-level', 'inconsistent-return-statements', 'indexing-exception', 'line-too-long', 'logging-not-lazy', 'logging-too-few-args', 'logging-too-many-args', 'metaclass-assignment', 'no-member', 'no-value-for-parameter', 'old-ne-operator', 'old-octal-literal', 'old-raise-syntax', 'print-statement', 'raising-string', 'raising-bad-type', 'redefine-in-handler', 'redefined-builtin', 'reimported', 'syntax-error', 'trailing-whitespace', 'undefined', 'unnecessary-semicolon', 'unpacking-in-except', 'unused-argument', 'unused-import', 'unused-variable']
PROSPECTOR_OPTIONS = ['--profile', 'strictness_none.yaml', '--max-line-length', '120', '--absolute-paths', '--no-blending', '--no-external-config', '--die-on-tool-error']
PROSPECTOR_IGNORE_PATHS = []
PROSPECTOR_IGNORE_PATHS_DEFAULTS = ['build']

def prospector_ignore_paths_add(path):
    """Add a path that should be ignored by prospector"""
    PROSPECTOR_IGNORE_PATHS.append(path)

def run_prospector(base_dir, clear_ignore_patterns=False):
    """Run prospector and apply white/blacklists to the results"""
    orig_expand_default = optparse.HelpFormatter.expand_default
    log.info('Using prosector version %s', prospector_version)
    ignore_dirs = ','.join(PROSPECTOR_IGNORE_PATHS + PROSPECTOR_IGNORE_PATHS_DEFAULTS)
    sys.argv = ['fakename']
    sys.argv.extend(PROSPECTOR_OPTIONS + ['--ignore-paths', ignore_dirs])
    log.debug('Prospector ignoring paths: %s', ignore_dirs)
    if PROSPECTOR_USE_LIBS:
        sys.argv.extend(['--uses', ','.join(PROSPECTOR_USE_LIBS)])
    sys.argv.append(base_dir)
    log.debug('prospector commandline %s' % sys.argv)
    config = ProspectorConfig()
    config.libraries = []
    prospector = Prospector(config)
    config.profile.doc_warnings = False
    config.profile.test_warnings = False
    config.profile.autodetect = True
    config.profile.member_warnings = False
    if clear_ignore_patterns:
        config.profile.ignore_patterns = ['.^']
        config.ignores = []
    else:
        append_pattern = '(^|/)\\..+'
        config.profile.ignore_patterns.append(append_pattern)
        config.ignores.append(re.compile(append_pattern))
    config.profile.pylint['options']['enable'] = 'python3'
    log.debug('prospector argv = %s' % sys.argv)
    log.debug('prospector profile from config = %s' % vars(config.profile))
    prospector.execute()
    log.debug('prospector profile form prospector = %s' % vars(prospector.config.profile))
    blacklist = list(map(re.compile, PROSPECTOR_BLACKLIST))
    whitelist = list(map(re.compile, PROSPECTOR_WHITELIST))
    failures = []
    for msg in prospector.get_messages():
        log.debug('prospector message %s' % msg.as_dict())
        if any([bool(reg.search(msg.code) or reg.search(msg.message)) for reg in blacklist]):
            continue
        if any([bool(reg.search(msg.code) or reg.search(msg.message)) for reg in whitelist]):
            failures.append(msg.as_dict())
    optparse.HelpFormatter.expand_default = orig_expand_default
    return failures

def check_autogenerated_ci_config_file(testcase_instance, ci_cfg_fn, expected_contents):
    """Test whether specified CI configuration file is in place, and was auto-generated by vsc-install."""
    testcase_instance.assertTrue(os.path.exists(ci_cfg_fn))
    with open(ci_cfg_fn) as fh:
        current_contents = fh.read()
    ci_cfg_ignore_fn = ci_cfg_fn + '.NOT_AUTOGENERATED_YET'
    if os.path.exists(ci_cfg_ignore_fn):
        error_msg = 'Found %s, so contents of %s is expected to be different ' % (ci_cfg_ignore_fn, ci_cfg_fn)
        error_msg += "from what vsc-install generates (but it's not!): %s" % current_contents
        testcase_instance.assertNotEqual(current_contents, expected_contents, error_msg)
        txt = open(ci_cfg_ignore_fn).read()
        regex = re.compile('https://github.com/hpcugent/vsc-install/issues/[0-9]+')
        error_msg = "Pattern '%s' does not match in contents of %s: %s" % (regex.pattern, ci_cfg_ignore_fn, txt)
        testcase_instance.assertTrue(bool(regex.search(txt)), error_msg)
    else:
        error_msg = 'Contents of %s does not match expected contents, ' % ci_cfg_fn
        error_msg += "you should run 'python -m vsc.install.ci' again to re-generate %s" % ci_cfg_fn
        testcase_instance.assertEqual(current_contents, expected_contents, error_msg)

class CommonTest(TestCase):
    """
    Test class to group common basic tests such as
        - can a module/script be imported
        - simple prospector test
    """
    EXTRA_PKGS = None
    EXCLUDE_PKGS = None
    EXTRA_MODS = None
    EXCLUDE_MODS = None
    EXTRA_SCRIPTS = None
    EXCLUDE_SCRIPTS = None
    CHECK_HEADER = True

    def setUp(self):
        """Cleanup after running a test."""
        self.orig_sys_argv = sys.argv
        self.setup = vsc_setup()
        super(CommonTest, self).setUp()

    def tearDown(self):
        """Cleanup after running a test."""
        sys.argv = self.orig_sys_argv
        super(CommonTest, self).tearDown()

    def _import(self, pkg):
        try:
            __import__(pkg)
        except ImportError as e:
            log.debug('__path__ %s', ['%s = %s' % (name, getattr(mod, '__path__', 'None')) for (name, mod) in sys.modules.items()])
            self.assertFalse(e, msg='import %s failed sys.path %s exception %s' % (pkg, sys.path, e))
        self.assertTrue(pkg in sys.modules, msg='%s in sys.modules after import' % pkg)

    def test_import_packages(self):
        """Try to import each namespace"""
        for pkg in self.setup.generate_packages(extra=self.EXTRA_PKGS, exclude=self.EXCLUDE_PKGS):
            self._import(pkg)
            if self.CHECK_HEADER:
                for fn in self.setup.files_in_packages()['packages'][pkg]:
                    self.assertFalse(check_header(os.path.join(self.setup.REPO_BASE_DIR, fn), script=False, write=False), msg='check_header of %s' % fn)

    def test_import_modules(self):
        """Try to import each module"""
        for modname in self.setup.generate_modules(extra=self.EXTRA_MODS, exclude=self.EXCLUDE_MODS):
            self._import(modname)

    def test_importscripts(self):
        """Try to import each python script as a module"""
        for scr in self.setup.generate_scripts(extra=self.EXTRA_SCRIPTS, exclude=self.EXCLUDE_SCRIPTS):
            if not scr.endswith('.py'):
                continue
            self._import(os.path.basename(scr)[:-len('.py')])
            if self.CHECK_HEADER:
                self.assertFalse(check_header(os.path.join(self.setup.REPO_BASE_DIR, scr), script=True, write=False), msg='check_header of %s' % scr)

    def test_prospector(self):
        """Test prospector failures"""
        failures = run_prospector(self.setup.REPO_BASE_DIR)
        self.assertFalse(failures, 'prospector failures: %s' % pprint.pformat(failures))

    def test_jenkinsfile(self):
        """Test whether Jenkinsfile is in place, and was auto-generated by vsc-install."""
        check_autogenerated_ci_config_file(self, JENKINSFILE, gen_jenkinsfile())

    def test_tox_ini(self):
        """Test whether tox.ini is in place, and was auto-generated by vsc-install."""
        check_autogenerated_ci_config_file(self, TOX_INI, gen_tox_ini())