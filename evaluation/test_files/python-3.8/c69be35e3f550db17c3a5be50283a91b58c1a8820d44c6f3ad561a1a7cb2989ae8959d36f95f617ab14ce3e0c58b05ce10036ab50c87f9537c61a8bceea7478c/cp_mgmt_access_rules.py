from __future__ import absolute_import, division, print_function
__metaclass__ = type
ANSIBLE_METADATA = {'metadata_version': '1.1', 'status': ['preview'], 'supported_by': 'community'}
DOCUMENTATION = '\n---\nmodule: cp_mgmt_access_rules\nshort_description: Manages access-rules objects on Check Point over Web Services API\ndescription:\n  - Manages access-rules objects on Check Point devices including creating, updating and removing objects.\n  - All operations are performed over Web Services API.\nversion_added: "2.2.0"\nauthor: "Shiran Golzar (@chkp-shirango)"\noptions:\n  layer:\n    description:\n      - Layer that the rule belongs to identified by the name or UID.\n    type: str\n    required: true\n  rules:\n    description:\n      - List of rules.\n    type: list\n    elements: dict\n    required: true\n    suboptions:\n      name:\n        description:\n          - Object name.\n        type: str\n        required: True\n      action:\n        description:\n          - a "Accept", "Drop", "Ask", "Inform", "Reject", "User Auth", "Client Auth", "Apply Layer".\n        type: str\n      action_settings:\n        description:\n          - Action settings.\n        type: dict\n        suboptions:\n          enable_identity_captive_portal:\n            description:\n              - N/A\n            type: bool\n          limit:\n            description:\n              - N/A\n            type: str\n      content:\n        description:\n          - List of processed file types that this rule applies on.\n        type: list\n        elements: dict\n      content_direction:\n        description:\n          - On which direction the file types processing is applied.\n        type: str\n        choices: [\'any\', \'up\', \'down\']\n      content_negate:\n        description:\n          - True if negate is set for data.\n        type: bool\n      custom_fields:\n        description:\n          - Custom fields.\n        type: dict\n        suboptions:\n          field_1:\n            description:\n              - First custom field.\n            type: str\n          field_2:\n            description:\n              - Second custom field.\n            type: str\n          field_3:\n            description:\n              - Third custom field.\n            type: str\n      destination:\n        description:\n          - Collection of Network objects identified by the name or UID.\n        type: list\n        elements: str\n      destination_negate:\n        description:\n          - True if negate is set for destination.\n        type: bool\n      enabled:\n        description:\n          - Enable/Disable the rule.\n        type: bool\n      inline_layer:\n        description:\n          - Inline Layer identified by the name or UID. Relevant only if "Action" was set to "Apply Layer".\n        type: str\n      install_on:\n        description:\n          - Which Gateways identified by the name or UID to install the policy on.\n        type: list\n        elements: str\n      service:\n        description:\n          - Collection of Network objects identified by the name or UID.\n        type: list\n        elements: str\n      service_negate:\n        description:\n          - True if negate is set for service.\n        type: bool\n      source:\n        description:\n          - Collection of Network objects identified by the name or UID.\n        type: list\n        elements: str\n      source_negate:\n        description:\n          - True if negate is set for source.\n        type: bool\n      time:\n        description:\n          - List of time objects. For example, "Weekend", "Off-Work", "Every-Day".\n        type: list\n        elements: str\n      track:\n        description:\n          - Track Settings.\n        type: dict\n        suboptions:\n          accounting:\n            description:\n              - Turns accounting for track on and off.\n            type: bool\n          alert:\n            description:\n              - Type of alert for the track.\n            type: str\n            choices: [\'none\', \'alert\', \'snmp\', \'mail\', \'user alert 1\', \'user alert 2\', \'user alert 3\']\n          enable_firewall_session:\n            description:\n              - Determine whether to generate session log to firewall only connections.\n            type: bool\n          per_connection:\n            description:\n              - Determines whether to perform the log per connection.\n            type: bool\n          per_session:\n            description:\n              - Determines whether to perform the log per session.\n            type: bool\n          type:\n            description:\n              - a "Log", "Extended Log", "Detailed  Log", "None".\n            type: str\n      user_check:\n        description:\n          - User check settings.\n        type: dict\n        suboptions:\n          confirm:\n            description:\n              - N/A\n            type: str\n            choices: [\'per rule\', \'per category\', \'per application/site\', \'per data type\']\n          custom_frequency:\n            description:\n              - N/A\n            type: dict\n            suboptions:\n              every:\n                description:\n                  - N/A\n                type: int\n              unit:\n                description:\n                  - N/A\n                type: str\n                choices: [\'hours\', \'days\', \'weeks\', \'months\']\n          frequency:\n            description:\n              - N/A\n            type: str\n            choices: [\'once a day\', \'once a week\', \'once a month\', \'custom frequency...\']\n          interaction:\n            description:\n              - N/A\n            type: str\n      vpn:\n        description:\n          - Communities or Directional.\n        type: list\n        elements: dict\n        suboptions:\n          community:\n            description:\n              - List of community name or UID.\n            type: list\n            elements: dict\n          directional:\n            description:\n              - Communities directional match condition.\n            type: list\n            elements: dict\n            suboptions:\n              from:\n                description:\n                  - From community name or UID.\n                type: str\n              to:\n                description:\n                  - To community name or UID.\n                type: str\n      comments:\n        description:\n          - Comments string.\n        type: str\n      details_level:\n        description:\n          - The level of detail for some of the fields in the response can vary from showing only the UID value of the object to a fully detailed\n            representation of the object.\n        type: str\n        choices: [\'uid\', \'standard\', \'full\']\n      ignore_warnings:\n        description:\n          - Apply changes ignoring warnings.\n        type: bool\n      ignore_errors:\n        description:\n          - Apply changes ignoring errors. You won\'t be able to publish such a changes. If ignore-warnings flag was omitted - warnings will also be ignored.\n        type: bool\n      state:\n        description:\n          - State of the access rule (present or absent). Defaults to present.\n        type: str\n        default: present\n        choices:\n          - \'present\'\n          - \'absent\'\n  details_level:\n    description:\n      - The level of detail for some of the fields in the response can vary from showing only the UID value of the object to a fully detailed\n        representation of the object.\n    type: str\n    choices: [\'uid\', \'standard\', \'full\']\nextends_documentation_fragment: check_point.mgmt.checkpoint_objects_action_module\n'
EXAMPLES = '\n- name: add-access-rules\n  cp_mgmt_access_rules:\n    rules:\n      - name: Rule 1\n        service:\n        - SMTP\n        - AOL\n        state: present\n      - name: Rule 2\n        service:\n        - SMTP\n        state: present\n    layer: Network\n    auto_publish_session: true\n'
RETURN = '\ncp_mgmt_access_rules:\n  description: The checkpoint object created or updated.\n  returned: always, except when deleting the object.\n  type: dict\n'
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.connection import Connection
from ansible_collections.check_point.mgmt.plugins.module_utils.checkpoint import checkpoint_argument_spec_for_action_module

def main():
    argument_spec = dict(rules=dict(type='list', required=True, elements='dict', options=dict(name=dict(type='str', required=True), action=dict(type='str'), action_settings=dict(type='dict', options=dict(enable_identity_captive_portal=dict(type='bool'), limit=dict(type='str'))), content=dict(type='list', elements='dict'), content_direction=dict(type='str', choices=['any', 'up', 'down']), content_negate=dict(type='bool'), custom_fields=dict(type='dict', options=dict(field_1=dict(type='str'), field_2=dict(type='str'), field_3=dict(type='str'))), destination=dict(type='list', elements='str'), destination_negate=dict(type='bool'), enabled=dict(type='bool'), inline_layer=dict(type='str'), install_on=dict(type='list', elements='str'), service=dict(type='list', elements='str'), service_negate=dict(type='bool'), source=dict(type='list', elements='str'), source_negate=dict(type='bool'), time=dict(type='list', elements='str'), track=dict(type='dict', options=dict(accounting=dict(type='bool'), alert=dict(type='str', choices=['none', 'alert', 'snmp', 'mail', 'user alert 1', 'user alert 2', 'user alert 3']), enable_firewall_session=dict(type='bool'), per_connection=dict(type='bool'), per_session=dict(type='bool'), type=dict(type='str'))), user_check=dict(type='dict', options=dict(confirm=dict(type='str', choices=['per rule', 'per category', 'per application/site', 'per data type']), custom_frequency=dict(type='dict', options=dict(every=dict(type='int'), unit=dict(type='str', choices=['hours', 'days', 'weeks', 'months']))), frequency=dict(type='str', choices=['once a day', 'once a week', 'once a month', 'custom frequency...']), interaction=dict(type='str'))), vpn=dict(type='list', elements='dict', options=dict(community=dict(type='list', elements='dict'), directional=dict(type='list', elements='dict', options=dict(to=dict(type='str'))))), comments=dict(type='str'), details_level=dict(type='str', choices=['uid', 'standard', 'full']), ignore_warnings=dict(type='bool'), ignore_errors=dict(type='bool'), state=dict(type='str', choices=['present', 'absent'], default='present'))), layer=dict(type='str', required=True), details_level=dict(type='str', choices=['uid', 'standard', 'full']))
    argument_spec['rules']['options']['vpn']['options']['directional']['options']['from'] = dict(type='str')
    argument_spec.update(checkpoint_argument_spec_for_action_module)
    module = AnsibleModule(argument_spec=argument_spec)
    module.exit_json()
if __name__ == '__main__':
    main()