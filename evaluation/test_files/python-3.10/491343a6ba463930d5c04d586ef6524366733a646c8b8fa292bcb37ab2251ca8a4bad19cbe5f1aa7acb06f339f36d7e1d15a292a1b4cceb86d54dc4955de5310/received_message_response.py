"""
    Martlet Organization API

    Create/maintain organizations, access keys, addresses and permissions.   # noqa: E501

    OpenAPI spec version: 0.142.0
    Contact: apiteam@bmbix.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six

class ReceivedMessageResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'received_message': 'ReceivedMessage'}
    attribute_map = {'received_message': 'received_message'}

    def __init__(self, received_message=None):
        """ReceivedMessageResponse - a model defined in Swagger"""
        self._received_message = None
        self.discriminator = None
        if received_message is not None:
            self.received_message = received_message

    @property
    def received_message(self):
        """Gets the received_message of this ReceivedMessageResponse.  # noqa: E501


        :return: The received_message of this ReceivedMessageResponse.  # noqa: E501
        :rtype: ReceivedMessage
        """
        return self._received_message

    @received_message.setter
    def received_message(self, received_message):
        """Sets the received_message of this ReceivedMessageResponse.


        :param received_message: The received_message of this ReceivedMessageResponse.  # noqa: E501
        :type: ReceivedMessage
        """
        self._received_message = received_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(ReceivedMessageResponse, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReceivedMessageResponse):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other