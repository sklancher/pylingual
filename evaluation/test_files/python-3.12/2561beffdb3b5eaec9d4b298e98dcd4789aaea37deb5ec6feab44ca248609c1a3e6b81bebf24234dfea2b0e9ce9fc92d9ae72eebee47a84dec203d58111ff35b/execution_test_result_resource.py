"""
    Katalon TestOps API reference

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""
import re
import sys
import nulltype
from testops_api.model_utils import ApiTypeError, ModelComposed, ModelNormal, ModelSimple, cached_property, change_keys_js_to_python, convert_js_args_to_python_args, date, datetime, file_type, none_type, validate_get_composed_info

def lazy_import():
    from testops_api.model.execution_resource import ExecutionResource
    from testops_api.model.execution_test_result_identify_resource import ExecutionTestResultIdentifyResource
    from testops_api.model.execution_test_suite_resource import ExecutionTestSuiteResource
    from testops_api.model.external_issue_resource import ExternalIssueResource
    from testops_api.model.file_resource import FileResource
    from testops_api.model.incident_resource import IncidentResource
    from testops_api.model.platform_resource import PlatformResource
    from testops_api.model.test_case_resource import TestCaseResource
    from testops_api.model.test_result_assertion_failed_resource import TestResultAssertionFailedResource
    from testops_api.model.test_suite_resource import TestSuiteResource
    from testops_api.model.user_resource import UserResource
    globals()['ExecutionResource'] = ExecutionResource
    globals()['ExecutionTestResultIdentifyResource'] = ExecutionTestResultIdentifyResource
    globals()['ExecutionTestSuiteResource'] = ExecutionTestSuiteResource
    globals()['ExternalIssueResource'] = ExternalIssueResource
    globals()['FileResource'] = FileResource
    globals()['IncidentResource'] = IncidentResource
    globals()['PlatformResource'] = PlatformResource
    globals()['TestCaseResource'] = TestCaseResource
    globals()['TestResultAssertionFailedResource'] = TestResultAssertionFailedResource
    globals()['TestSuiteResource'] = TestSuiteResource
    globals()['UserResource'] = UserResource

class ExecutionTestResultResource(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """
    allowed_values = {('status',): {'PASSED': 'PASSED', 'FAILED': 'FAILED', 'ERROR': 'ERROR', 'INCOMPLETE': 'INCOMPLETE', 'RUNNING': 'RUNNING', 'SKIPPED': 'SKIPPED', 'NOT_RUN': 'NOT_RUN'}, ('failed_test_result_category',): {'APPLICATION': 'APPLICATION', 'AUTOMATION': 'AUTOMATION', 'ENVIRONMENT': 'ENVIRONMENT', 'UNKNOWN': 'UNKNOWN'}, ('original_status',): {'PASSED': 'PASSED', 'FAILED': 'FAILED', 'ERROR': 'ERROR', 'INCOMPLETE': 'INCOMPLETE', 'RUNNING': 'RUNNING', 'SKIPPED': 'SKIPPED', 'NOT_RUN': 'NOT_RUN'}}
    validations = {}
    additional_properties_type = None
    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {'id': (int,), 'test_case': (TestCaseResource,), 'execution': (ExecutionResource,), 'platform': (PlatformResource,), 'status': (str,), 'same_status_period': (int,), 'error_details_id': (int,), 'stdout_id': (int,), 'description_id': (int,), 'log_id': (int,), 'attachments': ([FileResource],), 'test_result_assertions_failed': ([TestResultAssertionFailedResource],), 'start_time': (datetime,), 'end_time': (datetime,), 'duration': (int,), 'same_failure_results': ([ExecutionTestResultIdentifyResource],), 'test_suite': (TestSuiteResource,), 'execution_test_suite': (ExecutionTestSuiteResource,), 'incidents': ([IncidentResource],), 'profile': (str,), 'has_comment': (bool,), 'error_message': (str,), 'error_detail': (str,), 'web_url': (str,), 'external_issues': ([ExternalIssueResource],), 'failed_test_result_category': (str,), 'total_test_object': (int,), 'total_defects': (int,), 'total_assertion': (int,), 'passed_assertion': (int,), 'failed_assertion': (int,), 'retried': (bool,), 'last_retry_test_id': (int,), 'current_retry': (int,), 'original_status': (str,), 'last_changed_by': (UserResource,), 'error_keyword': (str,), 'status_edited': (bool,), 'url_id': (str,)}

    @cached_property
    def discriminator():
        return None
    attribute_map = {'id': 'id', 'test_case': 'testCase', 'execution': 'execution', 'platform': 'platform', 'status': 'status', 'same_status_period': 'sameStatusPeriod', 'error_details_id': 'errorDetailsId', 'stdout_id': 'stdoutId', 'description_id': 'descriptionId', 'log_id': 'logId', 'attachments': 'attachments', 'test_result_assertions_failed': 'testResultAssertionsFailed', 'start_time': 'startTime', 'end_time': 'endTime', 'duration': 'duration', 'same_failure_results': 'sameFailureResults', 'test_suite': 'testSuite', 'execution_test_suite': 'executionTestSuite', 'incidents': 'incidents', 'profile': 'profile', 'has_comment': 'hasComment', 'error_message': 'errorMessage', 'error_detail': 'errorDetail', 'web_url': 'webUrl', 'external_issues': 'externalIssues', 'failed_test_result_category': 'failedTestResultCategory', 'total_test_object': 'totalTestObject', 'total_defects': 'totalDefects', 'total_assertion': 'totalAssertion', 'passed_assertion': 'passedAssertion', 'failed_assertion': 'failedAssertion', 'retried': 'retried', 'last_retry_test_id': 'lastRetryTestId', 'current_retry': 'currentRetry', 'original_status': 'originalStatus', 'last_changed_by': 'lastChangedBy', 'error_keyword': 'errorKeyword', 'status_edited': 'statusEdited', 'url_id': 'urlId'}
    _composed_schemas = {}
    required_properties = set(['_data_store', '_check_type', '_spec_property_naming', '_path_to_item', '_configuration', '_visited_composed_classes'])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):
        """ExecutionTestResultResource - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (int): [optional]  # noqa: E501
            test_case (TestCaseResource): [optional]  # noqa: E501
            execution (ExecutionResource): [optional]  # noqa: E501
            platform (PlatformResource): [optional]  # noqa: E501
            status (str): [optional]  # noqa: E501
            same_status_period (int): [optional]  # noqa: E501
            error_details_id (int): [optional]  # noqa: E501
            stdout_id (int): [optional]  # noqa: E501
            description_id (int): [optional]  # noqa: E501
            log_id (int): [optional]  # noqa: E501
            attachments ([FileResource]): [optional]  # noqa: E501
            test_result_assertions_failed ([TestResultAssertionFailedResource]): [optional]  # noqa: E501
            start_time (datetime): [optional]  # noqa: E501
            end_time (datetime): [optional]  # noqa: E501
            duration (int): [optional]  # noqa: E501
            same_failure_results ([ExecutionTestResultIdentifyResource]): [optional]  # noqa: E501
            test_suite (TestSuiteResource): [optional]  # noqa: E501
            execution_test_suite (ExecutionTestSuiteResource): [optional]  # noqa: E501
            incidents ([IncidentResource]): [optional]  # noqa: E501
            profile (str): [optional]  # noqa: E501
            has_comment (bool): [optional]  # noqa: E501
            error_message (str): [optional]  # noqa: E501
            error_detail (str): [optional]  # noqa: E501
            web_url (str): [optional]  # noqa: E501
            external_issues ([ExternalIssueResource]): [optional]  # noqa: E501
            failed_test_result_category (str): [optional]  # noqa: E501
            total_test_object (int): [optional]  # noqa: E501
            total_defects (int): [optional]  # noqa: E501
            total_assertion (int): [optional]  # noqa: E501
            passed_assertion (int): [optional]  # noqa: E501
            failed_assertion (int): [optional]  # noqa: E501
            retried (bool): [optional]  # noqa: E501
            last_retry_test_id (int): [optional]  # noqa: E501
            current_retry (int): [optional]  # noqa: E501
            original_status (str): [optional]  # noqa: E501
            last_changed_by (UserResource): [optional]  # noqa: E501
            error_keyword (str): [optional]  # noqa: E501
            status_edited (bool): [optional]  # noqa: E501
            url_id (str): [optional]  # noqa: E501
        """
        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())
        if args:
            raise ApiTypeError('Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments.' % (args, self.__class__.__name__), path_to_item=_path_to_item, valid_classes=(self.__class__,))
        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and self._configuration is not None and self._configuration.discard_unknown_keys and (self.additional_properties_type is None):
                continue
            setattr(self, var_name, var_value)