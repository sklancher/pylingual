import shutil
import unittest
from sqlalchemy import *
from sqlalchemy.dialects.sqlite import *
from sqlalchemy.orm import declarative_base
from src.fastapi_quickcrud_codegen.db_model import DbModel
from src.fastapi_quickcrud_codegen.misc.type import CrudMethods
from src.fastapi_quickcrud_codegen import crud_router_builder
from test.misc.common import *
Base = declarative_base()
metadata = Base.metadata

class SampleTable(Base):
    primary_key_of_table = 'primary_key'
    unique_fields = ['primary_key', 'int4_value', 'float4_value']
    __tablename__ = 'test_build_myself_memory'
    __table_args__ = (UniqueConstraint('primary_key', 'int4_value', 'float4_value'),)
    primary_key = Column(Integer, primary_key=True, autoincrement=True)
    bool_value = Column(Boolean, nullable=False, default=False)
    bytea_value = Column(LargeBinary)
    char_value = Column(CHAR(10, collation='NOCASE'))
    date_value = Column(Date)
    float4_value = Column(Float, nullable=False)
    float8_value = Column(Float(53), nullable=False, default=10.1)
    int2_value = Column(SmallInteger, nullable=False)
    int4_value = Column(Integer, nullable=False)
    int8_value = Column(BigInteger, default=99)
    text_value = Column(Text)
    time_value = Column(Time)
    timestamp_value = Column(DateTime)
    timestamptz_value = Column(DateTime(True))
    timetz_value = Column(Time(True))
    varchar_value = Column(String)

class SampleTableTwo(Base):
    primary_key_of_table = 'primary_key'
    unique_fields = ['primary_key']
    __tablename__ = 'test_build_myself_memory_two'
    __table_args__ = (UniqueConstraint('primary_key'),)
    primary_key = Column(Integer, primary_key=True, autoincrement=True)
    bool_value = Column(Boolean, nullable=False, default=False)
    bytea_value = Column(LargeBinary)

class Testing(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        is_async = True
        if is_async:
            database_url = 'sqlite+aiosqlite://'
        else:
            database_url = 'sqlite://'
        model_list = [DbModel(db_model=SampleTable, prefix='/my_first_api', tags=['sample api'], exclude_columns=['bytea_value'], crud_methods=[CrudMethods.DELETE_ONE]), DbModel(db_model=SampleTableTwo, prefix='/my_second_api', tags=['sample api'], exclude_columns=['bytea_value'], crud_methods=[CrudMethods.DELETE_ONE])]
        crud_router_builder(db_model_list=model_list, is_async=is_async, database_url=database_url)

    @classmethod
    def tearDownClass(cls):
        shutil.rmtree(template_root_directory)

    def test_hardcode(self):
        hard_code_validate()

    def test_project_generation(self):
        app_expected = 'import uvicorn\nfrom fastapi import FastAPI\n\nfrom route.test_build_myself_memory import api as test_build_myself_memory_router\nfrom route.test_build_myself_memory_two import api as test_build_myself_memory_two_router\napp = FastAPI()\n\n[app.include_router(api_route) for api_route in [\ntest_build_myself_memory_router,test_build_myself_memory_two_router,\n]]\n\nuvicorn.run(app, host="0.0.0.0", port=8000)'
        validate_app(expected=app_expected)
        common_sql_session_expected = 'import asyncio\nfrom typing import Generator\n\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.asyncio import create_async_engine, AsyncSession\nfrom sqlalchemy.orm import declarative_base, sessionmaker\nfrom sqlalchemy.pool import StaticPool\n\nfrom model.test_build_myself_memory import SampleTable\nfrom model.test_build_myself_memory_two import SampleTableTwo\n\nSQLALCHEMY_DATABASE_URL = f"sqlite+aiosqlite://"\n\nengine = create_async_engine(SQLALCHEMY_DATABASE_URL,\n                             future=True,\n                             echo=True,\n                             pool_pre_ping=True,\n                             pool_recycle=7200,\n                             connect_args={"check_same_thread": False}, \n                             poolclass=StaticPool)\nsession = sessionmaker(autocommit=False,\n                       autoflush=False,\n                       bind=engine,\n                       class_=AsyncSession)\n\n\nasync def db_session():\n    async with session() as _session:\n        yield _session\n        await _session.commit()\n\n\nasync def create_table(engine, model):\n    async with engine.begin() as conn:\n        await conn.run_sync(model._sa_registry.metadata.create_all)\n\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(create_table(engine, SampleTable))\nloop.run_until_complete(create_table(engine, SampleTableTwo))\n'
        validate_common_sql_session(common_sql_session_expected)
        model_test_build_myself_memory_two_expected = 'from dataclasses import dataclass, field\nfrom datetime import date, datetime, time, timedelta\nfrom decimal import Decimal\nfrom typing import List, NewType, Optional, Union\nimport pydantic, uuid\nfrom pydantic import BaseModel\nfrom fastapi import Body, Query\nfrom sqlalchemy import *\nfrom sqlalchemy.dialects.sqlite import *\nfrom common.utils import ExcludeUnsetBaseModel, filter_none, value_of_list_to_str\nfrom common.db import Base\nfrom common.typing import ExtraFieldTypePrefix, ItemComparisonOperators, MatchingPatternInStringBase, PGSQLMatchingPatternInString, RangeFromComparisonOperators, RangeToComparisonOperators\n\nPRIMARY_KEY_NAME = "primary_key"\nUNIQUE_LIST = "primary_key"\n    \n\nclass SampleTableTwo(Base):\n    primary_key_of_table = "primary_key"\n    unique_fields = [\'primary_key\']\n    __tablename__ = \'test_build_myself_memory_two\'\n    __table_args__ = (\n        UniqueConstraint(\'primary_key\'),\n    )\n    primary_key = Column(Integer, primary_key=True, autoincrement=True)\n    bool_value = Column(Boolean, nullable=False, default=False)\n    bytea_value = Column(LargeBinary)\n\n\n@dataclass\nclass SampleTableTwoPrimaryKeyModel:\n    primary_key: int = Query(None, description=None)\n\n\n@dataclass\nclass SampleTableTwoDeleteOneRequestQueryModel:\n    bool_value____list_____comparison_operator: Optional[ItemComparisonOperators] = Query(ItemComparisonOperators.In, description=None)\n    bool_value____list: Optional[List[bool]] = Query(None, description=None)\n\n    def __post_init__(self):\n        """\n        auto gen by FastApi quick CRUD\n        """\n        filter_none(self)\n\n\nclass SampleTableTwoDeleteOneResponseModel(BaseModel):\n    """\n    auto gen by FastApi quick CRUD\n    """\n    primary_key: int = Body(None)\n    bool_value: bool = Body(False)\n\n    class Config:\n        orm_mode = True\n\n\n'
        validate_model('test_build_myself_memory_two', model_test_build_myself_memory_two_expected)
        model_test_build_myself_memory_expected = 'from dataclasses import dataclass, field\nfrom datetime import date, datetime, time, timedelta\nfrom decimal import Decimal\nfrom typing import List, NewType, Optional, Union\nimport pydantic, uuid\nfrom pydantic import BaseModel\nfrom fastapi import Body, Query\nfrom sqlalchemy import *\nfrom sqlalchemy.dialects.sqlite import *\nfrom common.utils import ExcludeUnsetBaseModel, filter_none, value_of_list_to_str\nfrom common.db import Base\nfrom common.typing import ExtraFieldTypePrefix, ItemComparisonOperators, MatchingPatternInStringBase, PGSQLMatchingPatternInString, RangeFromComparisonOperators, RangeToComparisonOperators\n\nPRIMARY_KEY_NAME = "primary_key"\nUNIQUE_LIST = "primary_key", "int4_value", "float4_value"\n    \n\nclass SampleTable(Base):\n    primary_key_of_table = "primary_key"\n    unique_fields = [\'primary_key\', \'int4_value\', \'float4_value\']\n    __tablename__ = \'test_build_myself_memory\'\n    __table_args__ = (\n        UniqueConstraint(\'primary_key\', \'int4_value\', \'float4_value\'),\n    )\n    primary_key = Column(Integer, primary_key=True, autoincrement=True)\n    bool_value = Column(Boolean, nullable=False, default=False)\n    bytea_value = Column(LargeBinary)\n    char_value = Column(CHAR(10, collation=\'NOCASE\'))\n    date_value = Column(Date)\n    float4_value = Column(Float, nullable=False)\n    float8_value = Column(Float(53), nullable=False, default=10.10)\n    int2_value = Column(SmallInteger, nullable=False)\n    int4_value = Column(Integer, nullable=False)\n    int8_value = Column(BigInteger, default=99)\n    text_value = Column(Text)\n    time_value = Column(Time)\n    timestamp_value = Column(DateTime)\n    timestamptz_value = Column(DateTime(True))\n    timetz_value = Column(Time(True))\n    varchar_value = Column(String)\n\n\n@dataclass\nclass SampleTablePrimaryKeyModel:\n    primary_key: int = Query(None, description=None)\n\n\n@dataclass\nclass SampleTableDeleteOneRequestQueryModel:\n    bool_value____list_____comparison_operator: Optional[ItemComparisonOperators] = Query(ItemComparisonOperators.In, description=None)\n    bool_value____list: Optional[List[bool]] = Query(None, description=None)\n    char_value____str_____matching_pattern: Optional[List[MatchingPatternInStringBase]] = Query([MatchingPatternInStringBase.case_sensitive], description=None)\n    char_value____str: Optional[List[str]] = Query(None, description=None)\n    char_value____list_____comparison_operator: Optional[ItemComparisonOperators] = Query(ItemComparisonOperators.In, description=None)\n    char_value____list: Optional[List[str]] = Query(None, description=None)\n    date_value____from_____comparison_operator: Optional[RangeFromComparisonOperators] = Query(RangeFromComparisonOperators.Greater_than_or_equal_to, description=None)\n    date_value____to_____comparison_operator: Optional[RangeToComparisonOperators] = Query(RangeToComparisonOperators.Less_than.Less_than_or_equal_to, description=None)\n    date_value____from: Optional[NewType(ExtraFieldTypePrefix.From, date)] = Query(None, description=None)\n    date_value____to: Optional[NewType(ExtraFieldTypePrefix.To, date)] = Query(None, description=None)\n    date_value____list_____comparison_operator: Optional[ItemComparisonOperators] = Query(ItemComparisonOperators.In, description=None)\n    date_value____list: Optional[List[date]] = Query(None, description=None)\n    float4_value____from_____comparison_operator: Optional[RangeFromComparisonOperators] = Query(RangeFromComparisonOperators.Greater_than_or_equal_to, description=None)\n    float4_value____to_____comparison_operator: Optional[RangeToComparisonOperators] = Query(RangeToComparisonOperators.Less_than.Less_than_or_equal_to, description=None)\n    float4_value____from: Optional[NewType(ExtraFieldTypePrefix.From, float)] = Query(None, description=None)\n    float4_value____to: Optional[NewType(ExtraFieldTypePrefix.To, float)] = Query(None, description=None)\n    float4_value____list_____comparison_operator: Optional[ItemComparisonOperators] = Query(ItemComparisonOperators.In, description=None)\n    float4_value____list: Optional[List[float]] = Query(None, description=None)\n    float8_value____from_____comparison_operator: Optional[RangeFromComparisonOperators] = Query(RangeFromComparisonOperators.Greater_than_or_equal_to, description=None)\n    float8_value____to_____comparison_operator: Optional[RangeToComparisonOperators] = Query(RangeToComparisonOperators.Less_than.Less_than_or_equal_to, description=None)\n    float8_value____from: Optional[NewType(ExtraFieldTypePrefix.From, float)] = Query(None, description=None)\n    float8_value____to: Optional[NewType(ExtraFieldTypePrefix.To, float)] = Query(None, description=None)\n    float8_value____list_____comparison_operator: Optional[ItemComparisonOperators] = Query(ItemComparisonOperators.In, description=None)\n    float8_value____list: Optional[List[float]] = Query(None, description=None)\n    int2_value____from_____comparison_operator: Optional[RangeFromComparisonOperators] = Query(RangeFromComparisonOperators.Greater_than_or_equal_to, description=None)\n    int2_value____to_____comparison_operator: Optional[RangeToComparisonOperators] = Query(RangeToComparisonOperators.Less_than.Less_than_or_equal_to, description=None)\n    int2_value____from: Optional[NewType(ExtraFieldTypePrefix.From, int)] = Query(None, description=None)\n    int2_value____to: Optional[NewType(ExtraFieldTypePrefix.To, int)] = Query(None, description=None)\n    int2_value____list_____comparison_operator: Optional[ItemComparisonOperators] = Query(ItemComparisonOperators.In, description=None)\n    int2_value____list: Optional[List[int]] = Query(None, description=None)\n    int4_value____from_____comparison_operator: Optional[RangeFromComparisonOperators] = Query(RangeFromComparisonOperators.Greater_than_or_equal_to, description=None)\n    int4_value____to_____comparison_operator: Optional[RangeToComparisonOperators] = Query(RangeToComparisonOperators.Less_than.Less_than_or_equal_to, description=None)\n    int4_value____from: Optional[NewType(ExtraFieldTypePrefix.From, int)] = Query(None, description=None)\n    int4_value____to: Optional[NewType(ExtraFieldTypePrefix.To, int)] = Query(None, description=None)\n    int4_value____list_____comparison_operator: Optional[ItemComparisonOperators] = Query(ItemComparisonOperators.In, description=None)\n    int4_value____list: Optional[List[int]] = Query(None, description=None)\n    int8_value____from_____comparison_operator: Optional[RangeFromComparisonOperators] = Query(RangeFromComparisonOperators.Greater_than_or_equal_to, description=None)\n    int8_value____to_____comparison_operator: Optional[RangeToComparisonOperators] = Query(RangeToComparisonOperators.Less_than.Less_than_or_equal_to, description=None)\n    int8_value____from: Optional[NewType(ExtraFieldTypePrefix.From, int)] = Query(None, description=None)\n    int8_value____to: Optional[NewType(ExtraFieldTypePrefix.To, int)] = Query(None, description=None)\n    int8_value____list_____comparison_operator: Optional[ItemComparisonOperators] = Query(ItemComparisonOperators.In, description=None)\n    int8_value____list: Optional[List[int]] = Query(None, description=None)\n    text_value____str_____matching_pattern: Optional[List[MatchingPatternInStringBase]] = Query([MatchingPatternInStringBase.case_sensitive], description=None)\n    text_value____str: Optional[List[str]] = Query(None, description=None)\n    text_value____list_____comparison_operator: Optional[ItemComparisonOperators] = Query(ItemComparisonOperators.In, description=None)\n    text_value____list: Optional[List[str]] = Query(None, description=None)\n    time_value____from_____comparison_operator: Optional[RangeFromComparisonOperators] = Query(RangeFromComparisonOperators.Greater_than_or_equal_to, description=None)\n    time_value____to_____comparison_operator: Optional[RangeToComparisonOperators] = Query(RangeToComparisonOperators.Less_than.Less_than_or_equal_to, description=None)\n    time_value____from: Optional[NewType(ExtraFieldTypePrefix.From, time)] = Query(None, description=None)\n    time_value____to: Optional[NewType(ExtraFieldTypePrefix.To, time)] = Query(None, description=None)\n    time_value____list_____comparison_operator: Optional[ItemComparisonOperators] = Query(ItemComparisonOperators.In, description=None)\n    time_value____list: Optional[List[time]] = Query(None, description=None)\n    timestamp_value____from_____comparison_operator: Optional[RangeFromComparisonOperators] = Query(RangeFromComparisonOperators.Greater_than_or_equal_to, description=None)\n    timestamp_value____to_____comparison_operator: Optional[RangeToComparisonOperators] = Query(RangeToComparisonOperators.Less_than.Less_than_or_equal_to, description=None)\n    timestamp_value____from: Optional[NewType(ExtraFieldTypePrefix.From, datetime)] = Query(None, description=None)\n    timestamp_value____to: Optional[NewType(ExtraFieldTypePrefix.To, datetime)] = Query(None, description=None)\n    timestamp_value____list_____comparison_operator: Optional[ItemComparisonOperators] = Query(ItemComparisonOperators.In, description=None)\n    timestamp_value____list: Optional[List[datetime]] = Query(None, description=None)\n    timestamptz_value____from_____comparison_operator: Optional[RangeFromComparisonOperators] = Query(RangeFromComparisonOperators.Greater_than_or_equal_to, description=None)\n    timestamptz_value____to_____comparison_operator: Optional[RangeToComparisonOperators] = Query(RangeToComparisonOperators.Less_than.Less_than_or_equal_to, description=None)\n    timestamptz_value____from: Optional[NewType(ExtraFieldTypePrefix.From, datetime)] = Query(None, description=None)\n    timestamptz_value____to: Optional[NewType(ExtraFieldTypePrefix.To, datetime)] = Query(None, description=None)\n    timestamptz_value____list_____comparison_operator: Optional[ItemComparisonOperators] = Query(ItemComparisonOperators.In, description=None)\n    timestamptz_value____list: Optional[List[datetime]] = Query(None, description=None)\n    timetz_value____from_____comparison_operator: Optional[RangeFromComparisonOperators] = Query(RangeFromComparisonOperators.Greater_than_or_equal_to, description=None)\n    timetz_value____to_____comparison_operator: Optional[RangeToComparisonOperators] = Query(RangeToComparisonOperators.Less_than.Less_than_or_equal_to, description=None)\n    timetz_value____from: Optional[NewType(ExtraFieldTypePrefix.From, time)] = Query(None, description=None)\n    timetz_value____to: Optional[NewType(ExtraFieldTypePrefix.To, time)] = Query(None, description=None)\n    timetz_value____list_____comparison_operator: Optional[ItemComparisonOperators] = Query(ItemComparisonOperators.In, description=None)\n    timetz_value____list: Optional[List[time]] = Query(None, description=None)\n    varchar_value____str_____matching_pattern: Optional[List[MatchingPatternInStringBase]] = Query([MatchingPatternInStringBase.case_sensitive], description=None)\n    varchar_value____str: Optional[List[str]] = Query(None, description=None)\n    varchar_value____list_____comparison_operator: Optional[ItemComparisonOperators] = Query(ItemComparisonOperators.In, description=None)\n    varchar_value____list: Optional[List[str]] = Query(None, description=None)\n\n    def __post_init__(self):\n        """\n        auto gen by FastApi quick CRUD\n        """\n        filter_none(self)\n\n\nclass SampleTableDeleteOneResponseModel(BaseModel):\n    """\n    auto gen by FastApi quick CRUD\n    """\n    primary_key: int = Body(None)\n    bool_value: bool = Body(False)\n    char_value: str = Body(None)\n    date_value: date = Body(None)\n    float4_value: float = Body(...)\n    float8_value: float = Body(10.1)\n    int2_value: int = Body(...)\n    int4_value: int = Body(...)\n    int8_value: int = Body(99)\n    text_value: str = Body(None)\n    time_value: time = Body(None)\n    timestamp_value: datetime = Body(None)\n    timestamptz_value: datetime = Body(None)\n    timetz_value: time = Body(None)\n    varchar_value: str = Body(None)\n\n    class Config:\n        orm_mode = True\n\n\n'
        validate_model('test_build_myself_memory', model_test_build_myself_memory_expected)
        route_test_build_myself_memory_two_expected = 'from http import HTTPStatus\nfrom typing import List, Union\nfrom sqlalchemy import and_, select\nfrom fastapi import APIRouter, Depends, Response\nfrom sqlalchemy.sql.elements import BinaryExpression\nfrom common.utils import find_query_builder\nfrom common.sql_session import db_session\nfrom pydantic import parse_obj_as\nfrom model.test_build_myself_memory_two import SampleTableTwo, SampleTableTwoDeleteOneRequestQueryModel, SampleTableTwoDeleteOneResponseModel, SampleTableTwoPrimaryKeyModel\n\napi = APIRouter(tags=[\'sample api\'],prefix="/my_second_api")\n\n\n@api.delete("/{primary_key}", status_code=200, response_model=SampleTableTwoDeleteOneResponseModel)\nasync def delete_one_by_primary_key(\n                            response: Response,\n                            primary_key: SampleTableTwoPrimaryKeyModel = Depends(),\n                            extra_query: SampleTableTwoDeleteOneRequestQueryModel = Depends(),\n                            session=Depends(db_session)):\n    model = SampleTableTwo\n\n    filter_args = primary_key.__dict__\n    extra_args = extra_query.__dict__\n    filter_list: List[BinaryExpression] = find_query_builder(param=filter_args,\n                                                                 model=model)\n    if extra_args:\n        filter_list += find_query_builder(param=extra_query.__dict__,\n            model=model)\n    stmt = select(model).where(and_(*filter_list))\n\n    sql_executed_result = await session.execute(stmt)\n    data_instance = sql_executed_result.scalar()\n\n    if not data_instance:\n        return Response(\'specific data not found\', status_code=HTTPStatus.NOT_FOUND, headers={"x-total-count": str(0)})\n\n    await session.delete(data_instance)\n\n    result = parse_obj_as(SampleTableTwoDeleteOneResponseModel, data_instance)\n    response.headers["x-total-count"] = str(1)\n    return result\n\n\n'
        validate_route('test_build_myself_memory_two', route_test_build_myself_memory_two_expected)
        model_test_build_myself_memory_expected = 'from http import HTTPStatus\nfrom typing import List, Union\nfrom sqlalchemy import and_, select\nfrom fastapi import APIRouter, Depends, Response\nfrom sqlalchemy.sql.elements import BinaryExpression\nfrom common.utils import find_query_builder\nfrom common.sql_session import db_session\nfrom pydantic import parse_obj_as\nfrom model.test_build_myself_memory import SampleTable, SampleTableDeleteOneRequestQueryModel, SampleTableDeleteOneResponseModel, SampleTablePrimaryKeyModel\n\napi = APIRouter(tags=[\'sample api\'],prefix="/my_first_api")\n\n\n@api.delete("/{primary_key}", status_code=200, response_model=SampleTableDeleteOneResponseModel)\nasync def delete_one_by_primary_key(\n                            response: Response,\n                            primary_key: SampleTablePrimaryKeyModel = Depends(),\n                            extra_query: SampleTableDeleteOneRequestQueryModel = Depends(),\n                            session=Depends(db_session)):\n    model = SampleTable\n\n    filter_args = primary_key.__dict__\n    extra_args = extra_query.__dict__\n    filter_list: List[BinaryExpression] = find_query_builder(param=filter_args,\n                                                                 model=model)\n    if extra_args:\n        filter_list += find_query_builder(param=extra_query.__dict__,\n            model=model)\n    stmt = select(model).where(and_(*filter_list))\n\n    sql_executed_result = await session.execute(stmt)\n    data_instance = sql_executed_result.scalar()\n\n    if not data_instance:\n        return Response(\'specific data not found\', status_code=HTTPStatus.NOT_FOUND, headers={"x-total-count": str(0)})\n\n    await session.delete(data_instance)\n\n    result = parse_obj_as(SampleTableDeleteOneResponseModel, data_instance)\n    response.headers["x-total-count"] = str(1)\n    return result\n\n\n'
        validate_route('test_build_myself_memory', model_test_build_myself_memory_expected)