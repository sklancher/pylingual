from __future__ import absolute_import, division, print_function
__metaclass__ = type
ANSIBLE_METADATA = {'metadata_version': '1.1', 'status': ['preview'], 'supported_by': 'community'}
DOCUMENTATION = '\n---\nmodule: cp_mgmt_access_rule_facts\nshort_description: Get access-rule objects facts on Check Point over Web Services API\ndescription:\n  - Get access-rule objects facts on Check Point devices.\n  - All operations are performed over Web Services API.\n  - This module handles both operations, get a specific object and get several objects,\n    For getting a specific object use the parameter \'name\'.\nversion_added: "1.0.0"\nauthor: "Or Soffer (@chkp-orso)"\noptions:\n  name:\n    description:\n      - Object name. Should be unique in the domain.\n    type: str\n  layer:\n    description:\n      - Layer that the rule belongs to identified by the name or UID.\n    type: str\n  show_as_ranges:\n    description:\n      - When true, the source, destination and services & applications parameters are displayed as ranges of IP addresses and port numbers rather than\n        network objects.<br /> Objects that are not represented using IP addresses or port numbers are presented as objects.<br /> In addition, the response\n        of each rule does not contain the parameters, source, source-negate, destination, destination-negate, service and service-negate, but instead it\n        contains the parameters, source-ranges, destination-ranges and service-ranges.<br /><br /> Note, Requesting to show rules as ranges is limited up to\n        20 rules per request, otherwise an error is returned. If you wish to request more rules, use the offset and limit parameters to limit your request.\n    type: bool\n  show_hits:\n    description:\n      - N/A\n    type: bool\n  hits_settings:\n    description:\n      - N/A\n    type: dict\n    suboptions:\n      from_date:\n        description:\n          - Format, \'YYYY-MM-DD\', \'YYYY-mm-ddThh:mm:ss\'.\n        type: str\n      target:\n        description:\n          - Target gateway name or UID.\n        type: str\n      to_date:\n        description:\n          - Format, \'YYYY-MM-DD\', \'YYYY-mm-ddThh:mm:ss\'.\n        type: str\n  details_level:\n    description:\n      - The level of detail for some of the fields in the response can vary from showing only the UID value of the object to a fully detailed\n        representation of the object.\n    type: str\n    choices: [\'uid\', \'standard\', \'full\']\n  filter:\n    description:\n      - Search expression to filter the rulebase. The provided text should be exactly the same as it would be given in Smart Console. The logical\n        operators in the expression (\'AND\', \'OR\') should be provided in capital letters. If an operator is not used, the default OR operator applies.\n    type: str\n  filter_settings:\n    description:\n      - Sets filter preferences.\n    type: dict\n    suboptions:\n      search_mode:\n        description:\n          - When set to \'general\', both the Full Text Search and Packet Search are enabled. In this mode, Packet Search will not match on \'Any\'\n            object, a negated cell or a group-with-exclusion. When the search-mode is set to \'packet\', by default, the match on \'Any\' object, a negated cell\n            or a group-with-exclusion are enabled. packet-search-settings may be provided to change the default behavior.\n        type: str\n        choices: [\'general\', \'packet\']\n      packet_search_settings:\n        description:\n          - When \'search-mode\' is set to \'packet\', this object allows to set the packet search preferences.\n        type: dict\n        suboptions:\n          expand_group_members:\n            description:\n              - When true, if the search expression contains a UID or a name of a group object, results will include rules that match on at\n                least one member of the group.\n            type: bool\n          expand_group_with_exclusion_members:\n            description:\n              - When true, if the search expression contains a UID or a name of a group-with-exclusion object, results will include rules that\n                match at least one member of the "include" part and is not a member of the "except" part.\n            type: bool\n          match_on_any:\n            description:\n              - Whether to match on \'Any\' object.\n            type: bool\n          match_on_group_with_exclusion:\n            description:\n              - Whether to match on a group-with-exclusion.\n            type: bool\n          match_on_negate:\n            description:\n              - Whether to match on a negated cell.\n            type: bool\n  limit:\n    description:\n      - No more than that many results will be returned.\n        This parameter is relevant only for getting few objects.\n    type: int\n  offset:\n    description:\n      - Skip that many results before beginning to return them.\n        This parameter is relevant only for getting few objects.\n    type: int\n  order:\n    description:\n      - Sorts results by the given field. By default the results are sorted in the ascending order by name.\n        This parameter is relevant only for getting few objects.\n    type: list\n    elements: dict\n    suboptions:\n      ASC:\n        description:\n          - Sorts results by the given field in ascending order.\n        type: str\n        choices: [\'name\']\n      DESC:\n        description:\n          - Sorts results by the given field in descending order.\n        type: str\n        choices: [\'name\']\n  package:\n    description:\n      - Name of the package.\n    type: str\n  use_object_dictionary:\n    description:\n      - N/A\n    type: bool\n  dereference_group_members:\n    description:\n      - Indicates whether to dereference "members" field by details level for every object in reply.\n    type: bool\n  show_membership:\n    description:\n      - Indicates whether to calculate and show "groups" field for every object in reply.\n    type: bool\nextends_documentation_fragment: check_point.mgmt.checkpoint_facts\n'
EXAMPLES = '\n- name: show-access-rule\n  cp_mgmt_access_rule_facts:\n    layer: Network\n    name: Rule 1\n\n- name: show-access-rulebase\n  cp_mgmt_access_rule_facts:\n    details_level: standard\n    limit: 20\n    name: Network\n    offset: 0\n    use_object_dictionary: true\n'
RETURN = '\nansible_facts:\n  description: The checkpoint object facts.\n  returned: always.\n  type: dict\n'
from ansible.module_utils.basic import AnsibleModule
from ansible_collections.check_point.mgmt.plugins.module_utils.checkpoint import checkpoint_argument_spec_for_facts, api_call_facts_for_rule

def main():
    argument_spec = dict(name=dict(type='str'), layer=dict(type='str'), show_as_ranges=dict(type='bool'), show_hits=dict(type='bool'), hits_settings=dict(type='dict', options=dict(from_date=dict(type='str'), target=dict(type='str'), to_date=dict(type='str'))), details_level=dict(type='str', choices=['uid', 'standard', 'full']), filter=dict(type='str'), filter_settings=dict(type='dict', options=dict(search_mode=dict(type='str', choices=['general', 'packet']), packet_search_settings=dict(type='dict', options=dict(expand_group_members=dict(type='bool'), expand_group_with_exclusion_members=dict(type='bool'), match_on_any=dict(type='bool'), match_on_group_with_exclusion=dict(type='bool'), match_on_negate=dict(type='bool'))))), limit=dict(type='int'), offset=dict(type='int'), order=dict(type='list', elements='dict', options=dict(ASC=dict(type='str', choices=['name']), DESC=dict(type='str', choices=['name']))), package=dict(type='str'), use_object_dictionary=dict(type='bool'), dereference_group_members=dict(type='bool'), show_membership=dict(type='bool'))
    argument_spec.update(checkpoint_argument_spec_for_facts)
    module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=True)
    api_call_object = 'access-rule'
    api_call_object_plural_version = 'access-rulebase'
    result = api_call_facts_for_rule(module, api_call_object, api_call_object_plural_version)
    module.exit_json(ansible_facts=result)
if __name__ == '__main__':
    main()