"""


    Generated by: https://openapi-generator.tech
"""
from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict
from cashfree_lrs_client import api_client, exceptions
from datetime import date, datetime
import decimal
import functools
import io
import re
import typing
import typing_extensions
import uuid
import frozendict
from cashfree_lrs_client import schemas
from cashfree_lrs_client.model.error import Error
from cashfree_lrs_client.model.upload_documents_request import UploadDocumentsRequest
from . import path
OrderIdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict('RequestRequiredPathParams', {'order_id': typing.Union[OrderIdSchema, str]})
RequestOptionalPathParams = typing_extensions.TypedDict('RequestOptionalPathParams', {}, total=False)

class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass
request_path_order_id = api_client.PathParameter(name='order_id', style=api_client.ParameterStyle.SIMPLE, schema=OrderIdSchema, required=True)
SchemaForRequestBodyMultipartFormData = UploadDocumentsRequest
request_body_body = api_client.RequestBody(content={'multipart/form-data': api_client.MediaType(schema=SchemaForRequestBodyMultipartFormData)})
_auth = ['X-Client-ID', 'X-Client-Secret', 'X-API-Version']
SchemaFor200ResponseBodyApplicationJson = schemas.DictSchema

@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[SchemaFor200ResponseBodyApplicationJson,]
    headers: schemas.Unset = schemas.unset
_response_for_200 = api_client.OpenApiResponse(response_cls=ApiResponseFor200, content={'application/json': api_client.MediaType(schema=SchemaFor200ResponseBodyApplicationJson)})
SchemaFor400ResponseBodyApplicationJson = Error

@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[SchemaFor400ResponseBodyApplicationJson,]
    headers: schemas.Unset = schemas.unset
_response_for_400 = api_client.OpenApiResponse(response_cls=ApiResponseFor400, content={'application/json': api_client.MediaType(schema=SchemaFor400ResponseBodyApplicationJson)})
SchemaFor404ResponseBodyApplicationJson = Error

@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[SchemaFor404ResponseBodyApplicationJson,]
    headers: schemas.Unset = schemas.unset
_response_for_404 = api_client.OpenApiResponse(response_cls=ApiResponseFor404, content={'application/json': api_client.MediaType(schema=SchemaFor404ResponseBodyApplicationJson)})
SchemaFor413ResponseBodyApplicationJson = Error

@dataclass
class ApiResponseFor413(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[SchemaFor413ResponseBodyApplicationJson,]
    headers: schemas.Unset = schemas.unset
_response_for_413 = api_client.OpenApiResponse(response_cls=ApiResponseFor413, content={'application/json': api_client.MediaType(schema=SchemaFor413ResponseBodyApplicationJson)})
_status_code_to_response = {'200': _response_for_200, '400': _response_for_400, '404': _response_for_404, '413': _response_for_413}
_all_accept_content_types = ('application/json',)

class BaseApi(api_client.Api):

    @typing.overload
    def _upload_documents_oapg(self, content_type: typing_extensions.Literal['multipart/form-data']=..., body: typing.Union[SchemaForRequestBodyMultipartFormData, schemas.Unset]=schemas.unset, path_params: RequestPathParams=frozendict.frozendict(), accept_content_types: typing.Tuple[str]=_all_accept_content_types, stream: bool=False, timeout: typing.Optional[typing.Union[int, typing.Tuple]]=None, skip_deserialization: typing_extensions.Literal[False]=...) -> typing.Union[ApiResponseFor200,]:
        ...

    @typing.overload
    def _upload_documents_oapg(self, content_type: str=..., body: typing.Union[SchemaForRequestBodyMultipartFormData, schemas.Unset]=schemas.unset, path_params: RequestPathParams=frozendict.frozendict(), accept_content_types: typing.Tuple[str]=_all_accept_content_types, stream: bool=False, timeout: typing.Optional[typing.Union[int, typing.Tuple]]=None, skip_deserialization: typing_extensions.Literal[False]=...) -> typing.Union[ApiResponseFor200,]:
        ...

    @typing.overload
    def _upload_documents_oapg(self, skip_deserialization: typing_extensions.Literal[True], content_type: str=..., body: typing.Union[SchemaForRequestBodyMultipartFormData, schemas.Unset]=schemas.unset, path_params: RequestPathParams=frozendict.frozendict(), accept_content_types: typing.Tuple[str]=_all_accept_content_types, stream: bool=False, timeout: typing.Optional[typing.Union[int, typing.Tuple]]=None) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def _upload_documents_oapg(self, content_type: str=..., body: typing.Union[SchemaForRequestBodyMultipartFormData, schemas.Unset]=schemas.unset, path_params: RequestPathParams=frozendict.frozendict(), accept_content_types: typing.Tuple[str]=_all_accept_content_types, stream: bool=False, timeout: typing.Optional[typing.Union[int, typing.Tuple]]=None, skip_deserialization: bool=...) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization]:
        ...

    def _upload_documents_oapg(self, content_type: str='multipart/form-data', body: typing.Union[SchemaForRequestBodyMultipartFormData, schemas.Unset]=schemas.unset, path_params: RequestPathParams=frozendict.frozendict(), accept_content_types: typing.Tuple[str]=_all_accept_content_types, stream: bool=False, timeout: typing.Optional[typing.Union[int, typing.Tuple]]=None, skip_deserialization: bool=False):
        """
        Upload Documents
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
        _path_params = {}
        for parameter in (request_path_order_id,):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
        for (k, v) in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
        _headers = HTTPHeaderDict()
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        _fields = None
        _body = None
        if body is not schemas.unset:
            serialized_data = request_body_body.serialize(body, content_type)
            _headers.add('Content-Type', content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
        response = self.api_client.call_api(resource_path=used_path, method='post'.upper(), headers=_headers, fields=_fields, body=_body, auth_settings=_auth, stream=stream, timeout=timeout)
        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(status=response.status, reason=response.reason, api_response=api_response)
        return api_response

class UploadDocuments(BaseApi):

    @typing.overload
    def upload_documents(self, content_type: typing_extensions.Literal['multipart/form-data']=..., body: typing.Union[SchemaForRequestBodyMultipartFormData, schemas.Unset]=schemas.unset, path_params: RequestPathParams=frozendict.frozendict(), accept_content_types: typing.Tuple[str]=_all_accept_content_types, stream: bool=False, timeout: typing.Optional[typing.Union[int, typing.Tuple]]=None, skip_deserialization: typing_extensions.Literal[False]=...) -> typing.Union[ApiResponseFor200,]:
        ...

    @typing.overload
    def upload_documents(self, content_type: str=..., body: typing.Union[SchemaForRequestBodyMultipartFormData, schemas.Unset]=schemas.unset, path_params: RequestPathParams=frozendict.frozendict(), accept_content_types: typing.Tuple[str]=_all_accept_content_types, stream: bool=False, timeout: typing.Optional[typing.Union[int, typing.Tuple]]=None, skip_deserialization: typing_extensions.Literal[False]=...) -> typing.Union[ApiResponseFor200,]:
        ...

    @typing.overload
    def upload_documents(self, skip_deserialization: typing_extensions.Literal[True], content_type: str=..., body: typing.Union[SchemaForRequestBodyMultipartFormData, schemas.Unset]=schemas.unset, path_params: RequestPathParams=frozendict.frozendict(), accept_content_types: typing.Tuple[str]=_all_accept_content_types, stream: bool=False, timeout: typing.Optional[typing.Union[int, typing.Tuple]]=None) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def upload_documents(self, content_type: str=..., body: typing.Union[SchemaForRequestBodyMultipartFormData, schemas.Unset]=schemas.unset, path_params: RequestPathParams=frozendict.frozendict(), accept_content_types: typing.Tuple[str]=_all_accept_content_types, stream: bool=False, timeout: typing.Optional[typing.Union[int, typing.Tuple]]=None, skip_deserialization: bool=...) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization]:
        ...

    def upload_documents(self, content_type: str='multipart/form-data', body: typing.Union[SchemaForRequestBodyMultipartFormData, schemas.Unset]=schemas.unset, path_params: RequestPathParams=frozendict.frozendict(), accept_content_types: typing.Tuple[str]=_all_accept_content_types, stream: bool=False, timeout: typing.Optional[typing.Union[int, typing.Tuple]]=None, skip_deserialization: bool=False):
        return self._upload_documents_oapg(body=body, path_params=path_params, content_type=content_type, accept_content_types=accept_content_types, stream=stream, timeout=timeout, skip_deserialization=skip_deserialization)

class ApiForpost(BaseApi):

    @typing.overload
    def post(self, content_type: typing_extensions.Literal['multipart/form-data']=..., body: typing.Union[SchemaForRequestBodyMultipartFormData, schemas.Unset]=schemas.unset, path_params: RequestPathParams=frozendict.frozendict(), accept_content_types: typing.Tuple[str]=_all_accept_content_types, stream: bool=False, timeout: typing.Optional[typing.Union[int, typing.Tuple]]=None, skip_deserialization: typing_extensions.Literal[False]=...) -> typing.Union[ApiResponseFor200,]:
        ...

    @typing.overload
    def post(self, content_type: str=..., body: typing.Union[SchemaForRequestBodyMultipartFormData, schemas.Unset]=schemas.unset, path_params: RequestPathParams=frozendict.frozendict(), accept_content_types: typing.Tuple[str]=_all_accept_content_types, stream: bool=False, timeout: typing.Optional[typing.Union[int, typing.Tuple]]=None, skip_deserialization: typing_extensions.Literal[False]=...) -> typing.Union[ApiResponseFor200,]:
        ...

    @typing.overload
    def post(self, skip_deserialization: typing_extensions.Literal[True], content_type: str=..., body: typing.Union[SchemaForRequestBodyMultipartFormData, schemas.Unset]=schemas.unset, path_params: RequestPathParams=frozendict.frozendict(), accept_content_types: typing.Tuple[str]=_all_accept_content_types, stream: bool=False, timeout: typing.Optional[typing.Union[int, typing.Tuple]]=None) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def post(self, content_type: str=..., body: typing.Union[SchemaForRequestBodyMultipartFormData, schemas.Unset]=schemas.unset, path_params: RequestPathParams=frozendict.frozendict(), accept_content_types: typing.Tuple[str]=_all_accept_content_types, stream: bool=False, timeout: typing.Optional[typing.Union[int, typing.Tuple]]=None, skip_deserialization: bool=...) -> typing.Union[ApiResponseFor200, api_client.ApiResponseWithoutDeserialization]:
        ...

    def post(self, content_type: str='multipart/form-data', body: typing.Union[SchemaForRequestBodyMultipartFormData, schemas.Unset]=schemas.unset, path_params: RequestPathParams=frozendict.frozendict(), accept_content_types: typing.Tuple[str]=_all_accept_content_types, stream: bool=False, timeout: typing.Optional[typing.Union[int, typing.Tuple]]=None, skip_deserialization: bool=False):
        return self._upload_documents_oapg(body=body, path_params=path_params, content_type=content_type, accept_content_types=accept_content_types, stream=stream, timeout=timeout, skip_deserialization=skip_deserialization)