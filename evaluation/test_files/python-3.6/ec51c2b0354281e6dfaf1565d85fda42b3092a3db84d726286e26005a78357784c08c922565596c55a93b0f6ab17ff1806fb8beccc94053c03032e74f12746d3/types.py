import sys
import typing
import mathutils
import bpy
import bl_ui.space_filebrowser
import bl_ui.space_spreadsheet
import bl_ui.properties_data_modifier
import bl_ui.properties_data_armature
import bl_ui.properties_collection
import bl_operators.clip
import bl_operators.constraint
import bl_ui.properties_data_bone
import bl_ui.properties_physics_cloth
import bl_ui.space_node
import bl_ui.space_sequencer
import bl_operators.assets
import bl_ui.space_image
import bl_ui.properties_view_layer
import bl_ui.properties_data_curve
import bl_ui.properties_constraint
import bl_operators.userpref
import bl_ui.properties_physics_dynamicpaint
import bl_ui.space_view3d_toolbar
import bl_operators.object
import bl_ui.properties_data_speaker
import bl_ui.properties_physics_rigidbody_constraint
import bl_ui.properties_mask_common
import bl_ui.properties_particle
import bl_ui.properties_data_camera
import bl_ui.properties_data_curves
import bl_ui.properties_data_empty
import bl_ui.properties_output
import bl_ui.space_toolsystem_toolbar
import bl_ui.properties_data_mesh
import bl_ui.properties_texture
import bl_ui.space_view3d
import bl_ui.space_time
import bl_operators.anim
import bl_ui.space_properties
import bl_ui.space_toolsystem_common
import bl_ui.properties_data_metaball
import bl_operators.view3d
import bl_ui.space_clip
import bl_ui.space_nla
import bl_ui.properties_physics_rigidbody
import bl_operators.presets
import bl_ui.properties_data_lattice
import bl_ui.properties_object
import bl_ui.properties_render
import bl_ui.properties_data_pointcloud
import bl_ui.properties_physics_softbody
import bl_ui.properties_material_gpencil
import bl_ui.space_topbar
import bl_ui.properties_scene
import bl_ui.properties_data_lightprobe
import bl_ui.space_statusbar
import bl_operators.spreadsheet
import bl_ui.properties_physics_common
import bl_ui.space_graph
import bl_ui.space_userpref
import bl_ui.properties_world
import bl_ui.properties_paint_common
import bl_operators.node
import bl_ui.properties_data_volume
import bl_ui.space_outliner
import bl_ui.space_text
import bl_ui.properties_workspace
import bl_ui.space_dopesheet
import bl_ui.properties_physics_field
import bl_ui.properties_physics_fluid
import bl_ui.node_add_menu_geometry
import bl_ui.properties_grease_pencil_common
import bl_ui.properties_freestyle
import bl_operators.freestyle
import bl_ui.space_info
import bl_ui
import bl_ui.properties_data_light
import bl_ui.properties_material
import bl_operators.file
import bl_ui.space_console
import bl_operators.wm
import bl_ui.properties_data_gpencil
import bl_ui.properties_data_shaderfx
GenericType = typing.TypeVar('GenericType')

class bpy_struct:
    """ built-in base class for all classes in bpy.types.
    """
    id_data = None
    ' The `bpy.types.ID` object this datablock is from or None, (not available for all data types)'

    def as_pointer(self) -> int:
        """ Returns the memory address which holds a pointer to Blender's internal data

        :rtype: int
        :return: int (memory address).
        """
        pass

    def driver_add(self, path: str, index: int=-1) -> 'FCurve':
        """ Adds driver(s) to the given property

        :param path: path to the property to drive, analogous to the fcurve's data path.
        :type path: str
        :param index: array index of the property drive. Defaults to -1 for all indices or a single channel if the property is not an array.
        :type index: int
        :rtype: 'FCurve'
        :return: The driver(s) added.
        """
        pass

    def driver_remove(self, path: str, index: int=-1) -> bool:
        """ Remove driver(s) from the given property

        :param path: path to the property to drive, analogous to the fcurve's data path.
        :type path: str
        :param index: array index of the property drive. Defaults to -1 for all indices or a single channel if the property is not an array.
        :type index: int
        :rtype: bool
        :return: Success of driver removal.
        """
        pass

    def get(self, key: str, default: typing.Any=None):
        """ Returns the value of the custom property assigned to key or default when not found (matches Python's dictionary function of the same name).

        :param key: The key associated with the custom property.
        :type key: str
        :param default: Optional argument for the value to return if *key* is not found.
        :type default: typing.Any
        """
        pass

    def id_properties_clear(self):
        """ 

        """
        pass

    def id_properties_ensure(self) -> typing.Any:
        """ 

        :rtype: typing.Any
        :return: the parent group for an RNA struct's custom IDProperties.
        """
        pass

    def id_properties_ui(self, key: typing.Any) -> typing.Any:
        """ 

        :param key:  String name of the property.
        :type key: typing.Any
        :rtype: typing.Any
        :return: Return an object used to manage an IDProperty's UI data.
        """
        pass

    def is_property_hidden(self, property) -> bool:
        """ Check if a property is hidden.

        :rtype: bool
        :return: True when the property is hidden.
        """
        pass

    def is_property_overridable_library(self, property) -> bool:
        """ Check if a property is overridable.

        :rtype: bool
        :return: True when the property is overridable.
        """
        pass

    def is_property_readonly(self, property) -> bool:
        """ Check if a property is readonly.

        :rtype: bool
        :return: True when the property is readonly (not writable).
        """
        pass

    def is_property_set(self, property, ghost: bool=True) -> bool:
        """ Check if a property is set, use for testing operator properties.

        :param ghost: Used for operators that re-run with previous settings. In this case the property is not marked as set, yet the value from the previous execution is used. In rare cases you may want to set this option to false.
        :type ghost: bool
        :rtype: bool
        :return: True when the property has been set.
        """
        pass

    def items(self) -> typing.Any:
        """ Returns the items of this objects custom properties (matches Python's dictionary function of the same name).

        :rtype: typing.Any
        :return: custom property key, value pairs.
        """
        pass

    def keyframe_delete(self, data_path: str, index: int=-1, frame: float='bpy.context.scene.frame_current', group: str='') -> bool:
        """ Remove a keyframe from this properties fcurve.

        :param data_path: path to the property to remove a key, analogous to the fcurve's data path.
        :type data_path: str
        :param index: array index of the property to remove a key. Defaults to -1 removing all indices or a single channel if the property is not an array.
        :type index: int
        :param frame: The frame on which the keyframe is deleted, defaulting to the current frame.
        :type frame: float
        :param group: The name of the group the F-Curve should be added to if it doesn't exist yet.
        :type group: str
        :rtype: bool
        :return: Success of keyframe deletion.
        """
        pass

    def keyframe_insert(self, data_path: str, index: int=-1, frame: float='bpy.context.scene.frame_current', group: str='', options: typing.Any='set()') -> bool:
        """ Insert a keyframe on the property given, adding fcurves and animation data when necessary. This is the most simple example of inserting a keyframe from python. Note that when keying data paths which contain nested properties this must be done from the `ID` subclass, in this case the `Armature` rather than the bone.

        :param data_path: path to the property to key, analogous to the fcurve's data path.
        :type data_path: str
        :param index: array index of the property to key. Defaults to -1 which will key all indices or a single channel if the property is not an array.
        :type index: int
        :param frame: The frame on which the keyframe is inserted, defaulting to the current frame.
        :type frame: float
        :param group: The name of the group the F-Curve should be added to if it doesn't exist yet.
        :type group: str
        :param flag: 
        :type flag: typing.Set
        :param options:  - ``INSERTKEY_NEEDED`` Only insert keyframes where they're needed in the relevant F-Curves. - ``INSERTKEY_VISUAL`` Insert keyframes based on 'visual transforms'. - ``INSERTKEY_XYZ_TO_RGB`` Color for newly added transformation F-Curves (Location, Rotation, Scale) is based on the transform axis. - ``INSERTKEY_REPLACE`` Only replace already existing keyframes. - ``INSERTKEY_AVAILABLE`` Only insert into already existing F-Curves. - ``INSERTKEY_CYCLE_AWARE`` Take cyclic extrapolation into account (Cycle-Aware Keying option).
        :type options: typing.Any
        :rtype: bool
        :return: Success of keyframe insertion.
        """
        pass

    def keys(self) -> typing.Any:
        """ Returns the keys of this objects custom properties (matches Python's dictionary function of the same name).

        :rtype: typing.Any
        :return: custom property keys.
        """
        pass

    def path_from_id(self, property: str='') -> str:
        """ Returns the data path from the ID to this object (string).

        :param property: Optional property name which can be used if the path is to a property of this object.
        :type property: str
        :rtype: str
        :return: `bpy.types.bpy_struct.id_data` to this struct and property (when given).
        """
        pass

    def path_resolve(self, path: str, coerce: typing.Optional[bool]=True):
        """ Returns the property from the path, raise an exception when not found.

        :param path: path which this property resolves.
        :type path: str
        :param coerce: optional argument, when True, the property will be converted into its Python representation.
        :type coerce: typing.Optional[bool]
        """
        pass

    def pop(self, key: str, default: typing.Any=None):
        """ Remove and return the value of the custom property assigned to key or default when not found (matches Python's dictionary function of the same name).

        :param key: The key associated with the custom property.
        :type key: str
        :param default: Optional argument for the value to return if *key* is not found.
        :type default: typing.Any
        """
        pass

    def property_overridable_library_set(self, property, overridable) -> bool:
        """ Define a property as overridable or not (only for custom properties!).

        :rtype: bool
        :return: True when the overridable status of the property was successfully set.
        """
        pass

    def property_unset(self, property):
        """ Unset a property, will use default value afterward.

        """
        pass

    def type_recast(self) -> 'bpy_struct':
        """ Return a new instance, this is needed because types such as textures can be changed at runtime.

        :rtype: 'bpy_struct'
        :return: a new instance of this object with the type initialized again.
        """
        pass

    def values(self) -> typing.Any:
        """ Returns the values of this objects custom properties (matches Python's dictionary function of the same name).

        :rtype: typing.Any
        :return: custom property values.
        """
        pass

    def __getitem__(self, key: typing.Union[int, str]) -> 'typing.Any':
        """ 

        :param key: 
        :type key: typing.Union[int, str]
        :rtype: 'typing.Any'
        """
        pass

    def __setitem__(self, key: typing.Union[int, str], value: 'typing.Any'):
        """ 

        :param key: 
        :type key: typing.Union[int, str]
        :param value: 
        :type value: 'typing.Any'
        """
        pass

    def __delitem__(self, key: typing.Union[int, str]) -> 'typing.Any':
        """ 

        :param key: 
        :type key: typing.Union[int, str]
        :rtype: 'typing.Any'
        """
        pass

class bpy_prop_collection(typing.Generic[GenericType]):
    """ built-in class used for all collections.
    """

    def find(self, key: str) -> int:
        """ Returns the index of a key in a collection or -1 when not found (matches Python's string find function of the same name).

        :param key: The identifier for the collection member.
        :type key: str
        :rtype: int
        :return: index of the key.
        """
        pass

    def foreach_get(self, attr, seq):
        """ This is a function to give fast access to attributes within a collection. Only works for 'basic type' properties (bool, int and float)! Multi-dimensional arrays (like array of vectors) will be flattened into seq.

        """
        pass

    def foreach_set(self, attr, seq):
        """ This is a function to give fast access to attributes within a collection. Only works for 'basic type' properties (bool, int and float)! seq must be uni-dimensional, multi-dimensional arrays (like array of vectors) will be re-created from it.

        """
        pass

    def get(self, key: str, default: typing.Any=None):
        """ Returns the value of the item assigned to key or default when not found (matches Python's dictionary function of the same name).

        :param key: The identifier for the collection member.
        :type key: str
        :param default: Optional argument for the value to return if *key* is not found.
        :type default: typing.Any
        """
        pass

    def items(self) -> typing.List:
        """ Return the identifiers of collection members (matching Python's dict.items() functionality).

        :rtype: typing.List
        :return: (key, value) pairs for each member of this collection.
        """
        pass

    def keys(self) -> typing.List[str]:
        """ Return the identifiers of collection members (matching Python's dict.keys() functionality).

        :rtype: typing.List[str]
        :return: the identifiers for each member of this collection.
        """
        pass

    def values(self) -> typing.List:
        """ Return the values of collection (matching Python's dict.values() functionality).

        :rtype: typing.List
        :return: the members of this collection.
        """
        pass

    def __getitem__(self, key: typing.Union[int, str]) -> 'GenericType':
        """ 

        :param key: 
        :type key: typing.Union[int, str]
        :rtype: 'GenericType'
        """
        pass

    def __setitem__(self, key: typing.Union[int, str], value: 'GenericType'):
        """ 

        :param key: 
        :type key: typing.Union[int, str]
        :param value: 
        :type value: 'GenericType'
        """
        pass

    def __delitem__(self, key: typing.Union[int, str]) -> 'GenericType':
        """ 

        :param key: 
        :type key: typing.Union[int, str]
        :rtype: 'GenericType'
        """
        pass

    def __iter__(self) -> typing.Iterator['GenericType']:
        """ 

        :rtype: typing.Iterator['GenericType']
        """
        pass

    def __next__(self) -> 'GenericType':
        """ 

        :rtype: 'GenericType'
        """
        pass

    def __len__(self) -> int:
        """ 

        :rtype: int
        """
        pass

class bpy_prop_array(typing.Generic[GenericType]):

    def foreach_get(self, attr, seq):
        """ 

        """
        pass

    def foreach_set(self, attr, seq):
        """ 

        """
        pass

    def __getitem__(self, key: typing.Union[int, str]) -> 'GenericType':
        """ 

        :param key: 
        :type key: typing.Union[int, str]
        :rtype: 'GenericType'
        """
        pass

    def __setitem__(self, key: typing.Union[int, str], value: 'GenericType'):
        """ 

        :param key: 
        :type key: typing.Union[int, str]
        :param value: 
        :type value: 'GenericType'
        """
        pass

    def __delitem__(self, key: typing.Union[int, str]) -> 'GenericType':
        """ 

        :param key: 
        :type key: typing.Union[int, str]
        :rtype: 'GenericType'
        """
        pass

    def __iter__(self) -> typing.Iterator['GenericType']:
        """ 

        :rtype: typing.Iterator['GenericType']
        """
        pass

    def __next__(self) -> 'GenericType':
        """ 

        :rtype: 'GenericType'
        """
        pass

    def __len__(self) -> int:
        """ 

        :rtype: int
        """
        pass

class AOV(bpy_struct):
    is_valid: bool = None
    ' Is the name of the AOV conflicting\n\n    :type: bool\n    '
    name: str = None
    ' Name of the AOV\n\n    :type: str\n    '
    type: typing.Union[str, int] = None
    ' Data type of the AOV\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ActionGroup(bpy_struct):
    """ Groups of F-Curves
    """
    channels: bpy_prop_collection['FCurve'] = None
    " F-Curves in this group\n\n    :type: bpy_prop_collection['FCurve']\n    "
    color_set: typing.Union[str, int] = None
    ' Custom color set to use\n\n    :type: typing.Union[str, int]\n    '
    colors: 'ThemeBoneColorSet' = None
    " Copy of the colors associated with the group's color set\n\n    :type: 'ThemeBoneColorSet'\n    "
    is_custom_color_set: bool = None
    ' Color set is user-defined instead of a fixed theme color set\n\n    :type: bool\n    '
    lock: bool = None
    ' Action group is locked\n\n    :type: bool\n    '
    mute: bool = None
    ' Action group is muted\n\n    :type: bool\n    '
    name: str = None
    ' \n\n    :type: str\n    '
    select: bool = None
    ' Action group is selected\n\n    :type: bool\n    '
    show_expanded: bool = None
    ' Action group is expanded except in graph editor\n\n    :type: bool\n    '
    show_expanded_graph: bool = None
    ' Action group is expanded in graph editor\n\n    :type: bool\n    '
    use_pin: bool = None
    ' \n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Addon(bpy_struct):
    """ Python add-ons to be loaded automatically
    """
    module: str = None
    ' Module name\n\n    :type: str\n    '
    preferences: 'AddonPreferences' = None
    " \n\n    :type: 'AddonPreferences'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class AddonPreferences(bpy_struct):
    bl_idname: str = None
    ' \n\n    :type: str\n    '
    layout: 'UILayout' = None
    " \n\n    :type: 'UILayout'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class AnimData(bpy_struct):
    """ Animation data for data-block
    """
    action: 'Action' = None
    " Active Action for this data-block\n\n    :type: 'Action'\n    "
    action_blend_type: typing.Union[str, int] = None
    " Method used for combining Active Action's result with result of NLA stack * ``REPLACE`` Replace -- The strip values replace the accumulated results by amount specified by influence. * ``COMBINE`` Combine -- The strip values are combined with accumulated results by appropriately using addition, multiplication, or quaternion math, based on channel type. * ``ADD`` Add -- Weighted result of strip is added to the accumulated results. * ``SUBTRACT`` Subtract -- Weighted result of strip is removed from the accumulated results. * ``MULTIPLY`` Multiply -- Weighted result of strip is multiplied with the accumulated results.\n\n    :type: typing.Union[str, int]\n    "
    action_extrapolation: typing.Union[str, int] = None
    " Action to take for gaps past the Active Action's range (when evaluating with NLA) * ``NOTHING`` Nothing -- Strip has no influence past its extents. * ``HOLD`` Hold -- Hold the first frame if no previous strips in track, and always hold last frame. * ``HOLD_FORWARD`` Hold Forward -- Only hold last frame.\n\n    :type: typing.Union[str, int]\n    "
    action_influence: float = None
    ' Amount the Active Action contributes to the result of the NLA stack\n\n    :type: float\n    '
    drivers: 'AnimDataDrivers' = None
    " The Drivers/Expressions for this data-block\n\n    :type: 'AnimDataDrivers'\n    "
    nla_tracks: 'NlaTracks' = None
    " NLA Tracks (i.e. Animation Layers)\n\n    :type: 'NlaTracks'\n    "
    use_nla: bool = None
    ' NLA stack is evaluated when evaluating this block\n\n    :type: bool\n    '
    use_pin: bool = None
    ' \n\n    :type: bool\n    '
    use_tweak_mode: bool = None
    ' Whether to enable or disable tweak mode in NLA\n\n    :type: bool\n    '

    def nla_tweak_strip_time_to_scene(self, frame: float, invert: bool=False) -> float:
        """ Convert a time value from the local time of the tweaked strip to scene time, exactly as done by built-in key editing tools. Returns the input time unchanged if not tweaking.

        :param frame: Input time
        :type frame: float
        :param invert: Invert, Convert scene time to action time
        :type invert: bool
        :rtype: float
        :return: Converted time
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class AnimViz(bpy_struct):
    """ Settings for the visualization of motion
    """
    motion_path: 'AnimVizMotionPaths' = None
    " Motion Path settings for visualization\n\n    :type: 'AnimVizMotionPaths'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class AnimVizMotionPaths(bpy_struct):
    """ Motion Path settings for animation visualization
    """
    bake_location: typing.Union[str, int] = None
    ' When calculating Bone Paths, use Head or Tips\n\n    :type: typing.Union[str, int]\n    '
    frame_after: int = None
    " Number of frames to show after the current frame (only for 'Around Current Frame' Onion-skinning method)\n\n    :type: int\n    "
    frame_before: int = None
    " Number of frames to show before the current frame (only for 'Around Current Frame' Onion-skinning method)\n\n    :type: int\n    "
    frame_end: int = None
    " End frame of range of paths to display/calculate (not for 'Around Current Frame' Onion-skinning method)\n\n    :type: int\n    "
    frame_start: int = None
    " Starting frame of range of paths to display/calculate (not for 'Around Current Frame' Onion-skinning method)\n\n    :type: int\n    "
    frame_step: int = None
    " Number of frames between paths shown (not for 'On Keyframes' Onion-skinning method)\n\n    :type: int\n    "
    has_motion_paths: bool = None
    ' Are there any bone paths that will need updating (read-only)\n\n    :type: bool\n    '
    range: typing.Union[str, int] = None
    ' Type of range to calculate for Motion Paths\n\n    :type: typing.Union[str, int]\n    '
    show_frame_numbers: bool = None
    ' Show frame numbers on Motion Paths\n\n    :type: bool\n    '
    show_keyframe_action_all: bool = None
    ' For bone motion paths, search whole Action for keyframes instead of in group with matching name only (is slower)\n\n    :type: bool\n    '
    show_keyframe_highlight: bool = None
    ' Emphasize position of keyframes on Motion Paths\n\n    :type: bool\n    '
    show_keyframe_numbers: bool = None
    ' Show frame numbers of Keyframes on Motion Paths\n\n    :type: bool\n    '
    type: typing.Union[str, int] = None
    ' Type of range to show for Motion Paths\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class AnyType(bpy_struct):
    """ RNA type used for pointers to any possible data
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Area(bpy_struct):
    """ Area in a subdivided screen, containing an editor
    """
    height: int = None
    ' Area height\n\n    :type: int\n    '
    regions: bpy_prop_collection['Region'] = None
    " Regions this area is subdivided in\n\n    :type: bpy_prop_collection['Region']\n    "
    show_menus: bool = None
    ' Show menus in the header\n\n    :type: bool\n    '
    spaces: 'AreaSpaces' = None
    " Spaces contained in this area, the first being the active space (NOTE: Useful for example to restore a previously used 3D view space in a certain area to get the old view orientation)\n\n    :type: 'AreaSpaces'\n    "
    type: typing.Union[str, int] = None
    ' Current editor type for this area\n\n    :type: typing.Union[str, int]\n    '
    ui_type: typing.Union[str, int] = None
    ' Current editor type for this area\n\n    :type: typing.Union[str, int]\n    '
    width: int = None
    ' Area width\n\n    :type: int\n    '
    x: int = None
    ' The window relative vertical location of the area\n\n    :type: int\n    '
    y: int = None
    ' The window relative horizontal location of the area\n\n    :type: int\n    '

    def tag_redraw(self):
        """ tag_redraw

        """
        pass

    def header_text_set(self, text: str):
        """ Set the header status text

        :param text: Text, New string for the header, None clears the text
        :type text: str
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class AssetCatalogPath(bpy_struct):

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class AssetLibraryReference(bpy_struct):
    """ Identifier to refer to the asset library
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class AssetMetaData(bpy_struct):
    """ Additional data stored for an asset data-block
    """
    active_tag: int = None
    ' Index of the tag set for editing\n\n    :type: int\n    '
    author: str = None
    ' Name of the creator of the asset\n\n    :type: str\n    '
    catalog_id: str = None
    " Identifier for the asset's catalog, used by Blender to look up the asset's catalog path. Must be a UUID according to RFC4122\n\n    :type: str\n    "
    catalog_simple_name: str = None
    " Simple name of the asset's catalog, for debugging and data recovery purposes\n\n    :type: str\n    "
    description: str = None
    ' A description of the asset to be displayed for the user\n\n    :type: str\n    '
    tags: 'AssetTags' = None
    " Custom tags (name tokens) for the asset, used for filtering and general asset management\n\n    :type: 'AssetTags'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class AssetTag(bpy_struct):
    """ User defined tag (name token)
    """
    name: str = None
    ' The identifier that makes up this tag\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Attribute(bpy_struct):
    """ Geometry attribute
    """
    data_type: typing.Union[str, int] = None
    ' Type of data stored in attribute\n\n    :type: typing.Union[str, int]\n    '
    domain: typing.Union[str, int] = None
    ' Domain of the Attribute\n\n    :type: typing.Union[str, int]\n    '
    is_internal: bool = None
    ' The attribute is meant for internal use by Blender\n\n    :type: bool\n    '
    name: str = None
    ' Name of the Attribute\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BakeSettings(bpy_struct):
    """ Bake data for a Scene data-block
    """
    cage_extrusion: float = None
    ' Inflate the active object by the specified distance for baking. This helps matching to points nearer to the outside of the selected object meshes\n\n    :type: float\n    '
    cage_object: 'Object' = None
    " Object to use as cage instead of calculating the cage from the active object with cage extrusion\n\n    :type: 'Object'\n    "
    filepath: str = None
    ' Image filepath to use when saving externally\n\n    :type: str\n    '
    height: int = None
    ' Vertical dimension of the baking map\n\n    :type: int\n    '
    image_settings: 'ImageFormatSettings' = None
    " \n\n    :type: 'ImageFormatSettings'\n    "
    margin: int = None
    ' Extends the baked result as a post process filter\n\n    :type: int\n    '
    margin_type: typing.Union[str, int] = None
    ' Algorithm to extend the baked result\n\n    :type: typing.Union[str, int]\n    '
    max_ray_distance: float = None
    ' The maximum ray distance for matching points between the active and selected objects. If zero, there is no limit\n\n    :type: float\n    '
    normal_b: typing.Union[str, int] = None
    ' Axis to bake in blue channel\n\n    :type: typing.Union[str, int]\n    '
    normal_g: typing.Union[str, int] = None
    ' Axis to bake in green channel\n\n    :type: typing.Union[str, int]\n    '
    normal_r: typing.Union[str, int] = None
    ' Axis to bake in red channel\n\n    :type: typing.Union[str, int]\n    '
    normal_space: typing.Union[str, int] = None
    ' Choose normal space for baking\n\n    :type: typing.Union[str, int]\n    '
    pass_filter: typing.Union[typing.Set[int], typing.Set[str]] = None
    ' Passes to include in the active baking pass\n\n    :type: typing.Union[typing.Set[int], typing.Set[str]]\n    '
    save_mode: typing.Union[str, int] = None
    ' Where to save baked image textures\n\n    :type: typing.Union[str, int]\n    '
    target: typing.Union[str, int] = None
    ' Where to output the baked map\n\n    :type: typing.Union[str, int]\n    '
    use_automatic_name: bool = None
    ' Automatically name the output file with the pass type (external only)\n\n    :type: bool\n    '
    use_cage: bool = None
    ' Cast rays to active object from a cage\n\n    :type: bool\n    '
    use_clear: bool = None
    ' Clear Images before baking (internal only)\n\n    :type: bool\n    '
    use_pass_color: bool = None
    ' Color the pass\n\n    :type: bool\n    '
    use_pass_diffuse: bool = None
    ' Add diffuse contribution\n\n    :type: bool\n    '
    use_pass_direct: bool = None
    ' Add direct lighting contribution\n\n    :type: bool\n    '
    use_pass_emit: bool = None
    ' Add emission contribution\n\n    :type: bool\n    '
    use_pass_glossy: bool = None
    ' Add glossy contribution\n\n    :type: bool\n    '
    use_pass_indirect: bool = None
    ' Add indirect lighting contribution\n\n    :type: bool\n    '
    use_pass_transmission: bool = None
    ' Add transmission contribution\n\n    :type: bool\n    '
    use_selected_to_active: bool = None
    ' Bake shading on the surface of selected objects to the active object\n\n    :type: bool\n    '
    use_split_materials: bool = None
    ' Split external images per material (external only)\n\n    :type: bool\n    '
    view_from: typing.Union[str, int] = None
    " Source of reflection ray directions * ``ABOVE_SURFACE`` Above Surface -- Cast rays from above the surface. * ``ACTIVE_CAMERA`` Active Camera -- Use the active camera's position to cast rays.\n\n    :type: typing.Union[str, int]\n    "
    width: int = None
    ' Horizontal dimension of the baking map\n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BezierSplinePoint(bpy_struct):
    """ Bezier curve point with two handles
    """
    co: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Coordinates of the control point\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    handle_left: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Coordinates of the first handle\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    handle_left_type: typing.Union[str, int] = None
    ' Handle types\n\n    :type: typing.Union[str, int]\n    '
    handle_right: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Coordinates of the second handle\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    handle_right_type: typing.Union[str, int] = None
    ' Handle types\n\n    :type: typing.Union[str, int]\n    '
    hide: bool = None
    ' Visibility status\n\n    :type: bool\n    '
    radius: float = None
    ' Radius for beveling\n\n    :type: float\n    '
    select_control_point: bool = None
    ' Control point selection status\n\n    :type: bool\n    '
    select_left_handle: bool = None
    ' Handle 1 selection status\n\n    :type: bool\n    '
    select_right_handle: bool = None
    ' Handle 2 selection status\n\n    :type: bool\n    '
    tilt: float = None
    ' Tilt in 3D View\n\n    :type: float\n    '
    weight_softbody: float = None
    ' Softbody goal weight\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendData(bpy_struct):
    """ Main data structure representing a .blend file and all its data-blocks
    """
    actions: 'BlendDataActions' = None
    " Action data-blocks\n\n    :type: 'BlendDataActions'\n    "
    armatures: 'BlendDataArmatures' = None
    " Armature data-blocks\n\n    :type: 'BlendDataArmatures'\n    "
    brushes: 'BlendDataBrushes' = None
    " Brush data-blocks\n\n    :type: 'BlendDataBrushes'\n    "
    cache_files: 'BlendDataCacheFiles' = None
    " Cache Files data-blocks\n\n    :type: 'BlendDataCacheFiles'\n    "
    cameras: 'BlendDataCameras' = None
    " Camera data-blocks\n\n    :type: 'BlendDataCameras'\n    "
    collections: 'BlendDataCollections' = None
    " Collection data-blocks\n\n    :type: 'BlendDataCollections'\n    "
    curves: 'BlendDataCurves' = None
    " Curve data-blocks\n\n    :type: 'BlendDataCurves'\n    "
    filepath: str = None
    ' Path to the .blend file\n\n    :type: str\n    '
    fonts: 'BlendDataFonts' = None
    " Vector font data-blocks\n\n    :type: 'BlendDataFonts'\n    "
    grease_pencils: 'BlendDataGreasePencils' = None
    " Grease Pencil data-blocks\n\n    :type: 'BlendDataGreasePencils'\n    "
    hair_curves: 'BlendDataHairCurves' = None
    " Hair curve data-blocks\n\n    :type: 'BlendDataHairCurves'\n    "
    images: 'BlendDataImages' = None
    " Image data-blocks\n\n    :type: 'BlendDataImages'\n    "
    is_dirty: bool = None
    ' Have recent edits been saved to disk\n\n    :type: bool\n    '
    is_saved: bool = None
    ' Has the current session been saved to disk as a .blend file\n\n    :type: bool\n    '
    lattices: 'BlendDataLattices' = None
    " Lattice data-blocks\n\n    :type: 'BlendDataLattices'\n    "
    libraries: 'BlendDataLibraries' = None
    " Library data-blocks\n\n    :type: 'BlendDataLibraries'\n    "
    lightprobes: 'BlendDataProbes' = None
    " Light Probe data-blocks\n\n    :type: 'BlendDataProbes'\n    "
    lights: 'BlendDataLights' = None
    " Light data-blocks\n\n    :type: 'BlendDataLights'\n    "
    linestyles: 'BlendDataLineStyles' = None
    " Line Style data-blocks\n\n    :type: 'BlendDataLineStyles'\n    "
    masks: 'BlendDataMasks' = None
    " Masks data-blocks\n\n    :type: 'BlendDataMasks'\n    "
    materials: 'BlendDataMaterials' = None
    " Material data-blocks\n\n    :type: 'BlendDataMaterials'\n    "
    meshes: 'BlendDataMeshes' = None
    " Mesh data-blocks\n\n    :type: 'BlendDataMeshes'\n    "
    metaballs: 'BlendDataMetaBalls' = None
    " Metaball data-blocks\n\n    :type: 'BlendDataMetaBalls'\n    "
    movieclips: 'BlendDataMovieClips' = None
    " Movie Clip data-blocks\n\n    :type: 'BlendDataMovieClips'\n    "
    node_groups: 'BlendDataNodeTrees' = None
    " Node group data-blocks\n\n    :type: 'BlendDataNodeTrees'\n    "
    objects: 'BlendDataObjects' = None
    " Object data-blocks\n\n    :type: 'BlendDataObjects'\n    "
    paint_curves: 'BlendDataPaintCurves' = None
    " Paint Curves data-blocks\n\n    :type: 'BlendDataPaintCurves'\n    "
    palettes: 'BlendDataPalettes' = None
    " Palette data-blocks\n\n    :type: 'BlendDataPalettes'\n    "
    particles: 'BlendDataParticles' = None
    " Particle data-blocks\n\n    :type: 'BlendDataParticles'\n    "
    pointclouds: 'BlendDataPointClouds' = None
    " Point cloud data-blocks\n\n    :type: 'BlendDataPointClouds'\n    "
    scenes: 'BlendDataScenes' = None
    " Scene data-blocks\n\n    :type: 'BlendDataScenes'\n    "
    screens: 'BlendDataScreens' = None
    " Screen data-blocks\n\n    :type: 'BlendDataScreens'\n    "
    shape_keys: bpy_prop_collection['Key'] = None
    " Shape Key data-blocks\n\n    :type: bpy_prop_collection['Key']\n    "
    simulations: 'BlendDataSimulations' = None
    " Simulation data-blocks\n\n    :type: 'BlendDataSimulations'\n    "
    sounds: 'BlendDataSounds' = None
    " Sound data-blocks\n\n    :type: 'BlendDataSounds'\n    "
    speakers: 'BlendDataSpeakers' = None
    " Speaker data-blocks\n\n    :type: 'BlendDataSpeakers'\n    "
    texts: 'BlendDataTexts' = None
    " Text data-blocks\n\n    :type: 'BlendDataTexts'\n    "
    textures: 'BlendDataTextures' = None
    " Texture data-blocks\n\n    :type: 'BlendDataTextures'\n    "
    use_autopack: bool = None
    ' Automatically pack all external data into .blend file\n\n    :type: bool\n    '
    version: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' File format version the .blend file was saved with\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    volumes: 'BlendDataVolumes' = None
    " Volume data-blocks\n\n    :type: 'BlendDataVolumes'\n    "
    window_managers: 'BlendDataWindowManagers' = None
    " Window manager data-blocks\n\n    :type: 'BlendDataWindowManagers'\n    "
    workspaces: 'BlendDataWorkSpaces' = None
    " Workspace data-blocks\n\n    :type: 'BlendDataWorkSpaces'\n    "
    worlds: 'BlendDataWorlds' = None
    " World data-blocks\n\n    :type: 'BlendDataWorlds'\n    "

    def batch_remove(self, ids: typing.Any):
        """ Remove (delete) several IDs at once. WARNING: Considered experimental feature currently. Note that this function is quicker than individual calls to :func:`remove()` (from `bpy.types.BlendData` ID collections), but less safe/versatile (it can break Blender, e.g. by removing all scenes...).

        :param subset: 
        :type subset: typing.Sequence
        :param ids:  Iterables of IDs (types can be mixed).
        :type ids: typing.Any
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def orphans_purge(self):
        """ Remove (delete) all IDs with no user.

        :param do_local_ids: Include unused local IDs in the deletion, defaults to True
        :type do_local_ids: bool
        :param do_linked_ids: Include unused linked IDs in the deletion, defaults to True
        :type do_linked_ids: bool
        :param do_recursive: Recursively check for unused IDs, ensuring no orphaned one remain after a single run of that function, defaults to False
        :type do_recursive: bool
        """
        pass

    def temp_data(self, filepath: str=None) -> 'BlendData':
        """ A context manager that temporarily creates blender file data.

        :param filepath: The file path for the newly temporary data. When None, the path of the currently open file is used.
        :type filepath: str
        :rtype: 'BlendData'
        :return: Blend file data which is freed once the context exists.
        """
        pass

    def user_map(self, subset: typing.Sequence, key_types: typing.Set[str], value_types: typing.Set[str]) -> typing.Dict:
        """ Returns a mapping of all ID data-blocks in current ``bpy.data`` to a set of all datablocks using them. For list of valid set members for key_types & value_types, see: `bpy.types.KeyingSetPath.id_type`.

        :param subset: When passed, only these data-blocks and their users will be included as keys/values in the map.
        :type subset: typing.Sequence
        :param key_types: Filter the keys mapped by ID types.
        :type key_types: typing.Set[str]
        :param value_types: Filter the values in the set by ID types.
        :type value_types: typing.Set[str]
        :rtype: typing.Dict
        :return: `bpy.types.ID` instances, with sets of ID's as their values.
        """
        pass

class BlenderRNA(bpy_struct):
    """ Blender RNA structure definitions
    """
    structs: bpy_prop_collection['Struct'] = None
    " \n\n    :type: bpy_prop_collection['Struct']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BoidRule(bpy_struct):
    name: str = None
    ' Boid rule name\n\n    :type: str\n    '
    type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    use_in_air: bool = None
    ' Use rule when boid is flying\n\n    :type: bool\n    '
    use_on_land: bool = None
    ' Use rule when boid is on land\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BoidSettings(bpy_struct):
    """ Settings for boid physics
    """
    accuracy: float = None
    ' Accuracy of attack\n\n    :type: float\n    '
    active_boid_state: 'BoidRule' = None
    " \n\n    :type: 'BoidRule'\n    "
    active_boid_state_index: int = None
    ' \n\n    :type: int\n    '
    aggression: float = None
    ' Boid will fight this times stronger enemy\n\n    :type: float\n    '
    air_acc_max: float = None
    ' Maximum acceleration in air (relative to maximum speed)\n\n    :type: float\n    '
    air_ave_max: float = None
    ' Maximum angular velocity in air (relative to 180 degrees)\n\n    :type: float\n    '
    air_personal_space: float = None
    ' Radius of boids personal space in air (% of particle size)\n\n    :type: float\n    '
    air_speed_max: float = None
    ' Maximum speed in air\n\n    :type: float\n    '
    air_speed_min: float = None
    ' Minimum speed in air (relative to maximum speed)\n\n    :type: float\n    '
    bank: float = None
    ' Amount of rotation around velocity vector on turns\n\n    :type: float\n    '
    health: float = None
    ' Initial boid health when born\n\n    :type: float\n    '
    height: float = None
    ' Boid height relative to particle size\n\n    :type: float\n    '
    land_acc_max: float = None
    ' Maximum acceleration on land (relative to maximum speed)\n\n    :type: float\n    '
    land_ave_max: float = None
    ' Maximum angular velocity on land (relative to 180 degrees)\n\n    :type: float\n    '
    land_jump_speed: float = None
    ' Maximum speed for jumping\n\n    :type: float\n    '
    land_personal_space: float = None
    ' Radius of boids personal space on land (% of particle size)\n\n    :type: float\n    '
    land_smooth: float = None
    ' How smoothly the boids land\n\n    :type: float\n    '
    land_speed_max: float = None
    ' Maximum speed on land\n\n    :type: float\n    '
    land_stick_force: float = None
    ' How strong a force must be to start effecting a boid on land\n\n    :type: float\n    '
    pitch: float = None
    ' Amount of rotation around side vector\n\n    :type: float\n    '
    range: float = None
    ' Maximum distance from which a boid can attack\n\n    :type: float\n    '
    states: bpy_prop_collection['BoidState'] = None
    " \n\n    :type: bpy_prop_collection['BoidState']\n    "
    strength: float = None
    ' Maximum caused damage on attack per second\n\n    :type: float\n    '
    use_climb: bool = None
    ' Allow boids to climb goal objects\n\n    :type: bool\n    '
    use_flight: bool = None
    ' Allow boids to move in air\n\n    :type: bool\n    '
    use_land: bool = None
    ' Allow boids to move on land\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BoidState(bpy_struct):
    """ Boid state for boid physics
    """
    active_boid_rule: 'BoidRule' = None
    " \n\n    :type: 'BoidRule'\n    "
    active_boid_rule_index: int = None
    ' \n\n    :type: int\n    '
    falloff: float = None
    ' \n\n    :type: float\n    '
    name: str = None
    ' Boid state name\n\n    :type: str\n    '
    rule_fuzzy: float = None
    ' \n\n    :type: float\n    '
    rules: bpy_prop_collection['BoidRule'] = None
    " \n\n    :type: bpy_prop_collection['BoidRule']\n    "
    ruleset_type: typing.Union[str, int] = None
    ' How the rules in the list are evaluated * ``FUZZY`` Fuzzy -- Rules are gone through top to bottom (only the first rule which effect is above fuzziness threshold is evaluated). * ``RANDOM`` Random -- A random rule is selected for each boid. * ``AVERAGE`` Average -- All rules are averaged.\n\n    :type: typing.Union[str, int]\n    '
    volume: float = None
    ' \n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Bone(bpy_struct):
    """ Bone in an Armature data-block
    """
    bbone_curveinx: float = None
    " X-axis handle offset for start of the B-Bone's curve, adjusts curvature\n\n    :type: float\n    "
    bbone_curveinz: float = None
    " Z-axis handle offset for start of the B-Bone's curve, adjusts curvature\n\n    :type: float\n    "
    bbone_curveoutx: float = None
    " X-axis handle offset for end of the B-Bone's curve, adjusts curvature\n\n    :type: float\n    "
    bbone_curveoutz: float = None
    " Z-axis handle offset for end of the B-Bone's curve, adjusts curvature\n\n    :type: float\n    "
    bbone_custom_handle_end: 'Bone' = None
    " Bone that serves as the end handle for the B-Bone curve\n\n    :type: 'Bone'\n    "
    bbone_custom_handle_start: 'Bone' = None
    " Bone that serves as the start handle for the B-Bone curve\n\n    :type: 'Bone'\n    "
    bbone_easein: float = None
    ' Length of first Bezier Handle (for B-Bones only)\n\n    :type: float\n    '
    bbone_easeout: float = None
    ' Length of second Bezier Handle (for B-Bones only)\n\n    :type: float\n    '
    bbone_handle_type_end: typing.Union[str, int] = None
    ' Selects how the end handle of the B-Bone is computed * ``AUTO`` Automatic -- Use connected parent and children to compute the handle. * ``ABSOLUTE`` Absolute -- Use the position of the specified bone to compute the handle. * ``RELATIVE`` Relative -- Use the offset of the specified bone from rest pose to compute the handle. * ``TANGENT`` Tangent -- Use the orientation of the specified bone to compute the handle, ignoring the location.\n\n    :type: typing.Union[str, int]\n    '
    bbone_handle_type_start: typing.Union[str, int] = None
    ' Selects how the start handle of the B-Bone is computed * ``AUTO`` Automatic -- Use connected parent and children to compute the handle. * ``ABSOLUTE`` Absolute -- Use the position of the specified bone to compute the handle. * ``RELATIVE`` Relative -- Use the offset of the specified bone from rest pose to compute the handle. * ``TANGENT`` Tangent -- Use the orientation of the specified bone to compute the handle, ignoring the location.\n\n    :type: typing.Union[str, int]\n    '
    bbone_handle_use_ease_end: bool = None
    " Multiply the B-Bone Ease Out channel by the local Y scale value of the end handle. This is done after the Scale Easing option and isn't affected by it\n\n    :type: bool\n    "
    bbone_handle_use_ease_start: bool = None
    " Multiply the B-Bone Ease In channel by the local Y scale value of the start handle. This is done after the Scale Easing option and isn't affected by it\n\n    :type: bool\n    "
    bbone_handle_use_scale_end: typing.List[bool] = None
    " Multiply B-Bone Scale Out channels by the local scale values of the end handle. This is done after the Scale Easing option and isn't affected by it\n\n    :type: typing.List[bool]\n    "
    bbone_handle_use_scale_start: typing.List[bool] = None
    " Multiply B-Bone Scale In channels by the local scale values of the start handle. This is done after the Scale Easing option and isn't affected by it\n\n    :type: typing.List[bool]\n    "
    bbone_rollin: float = None
    ' Roll offset for the start of the B-Bone, adjusts twist\n\n    :type: float\n    '
    bbone_rollout: float = None
    ' Roll offset for the end of the B-Bone, adjusts twist\n\n    :type: float\n    '
    bbone_scalein: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Scale factors for the start of the B-Bone, adjusts thickness (for tapering effects)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    bbone_scaleout: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Scale factors for the end of the B-Bone, adjusts thickness (for tapering effects)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    bbone_segments: int = None
    ' Number of subdivisions of bone (for B-Bones only)\n\n    :type: int\n    '
    bbone_x: float = None
    ' B-Bone X size\n\n    :type: float\n    '
    bbone_z: float = None
    ' B-Bone Z size\n\n    :type: float\n    '
    children: bpy_prop_collection['Bone'] = None
    " Bones which are children of this bone\n\n    :type: bpy_prop_collection['Bone']\n    "
    envelope_distance: float = None
    ' Bone deformation distance (for Envelope deform only)\n\n    :type: float\n    '
    envelope_weight: float = None
    ' Bone deformation weight (for Envelope deform only)\n\n    :type: float\n    '
    head: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Location of head end of the bone relative to its parent\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    head_local: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Location of head end of the bone relative to armature\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    head_radius: float = None
    ' Radius of head of bone (for Envelope deform only)\n\n    :type: float\n    '
    hide: bool = None
    ' Bone is not visible when it is not in Edit Mode (i.e. in Object or Pose Modes)\n\n    :type: bool\n    '
    hide_select: bool = None
    ' Bone is able to be selected\n\n    :type: bool\n    '
    inherit_scale: typing.Union[str, int] = None
    ' Specifies how the bone inherits scaling from the parent bone * ``FULL`` Full -- Inherit all effects of parent scaling. * ``FIX_SHEAR`` Fix Shear -- Inherit scaling, but remove shearing of the child in the rest orientation. * ``ALIGNED`` Aligned -- Rotate non-uniform parent scaling to align with the child, applying parent X scale to child X axis, and so forth. * ``AVERAGE`` Average -- Inherit uniform scaling representing the overall change in the volume of the parent. * ``NONE`` None -- Completely ignore parent scaling. * ``NONE_LEGACY`` None (Legacy) -- Ignore parent scaling without compensating for parent shear. Replicates the effect of disabling the original Inherit Scale checkbox.\n\n    :type: typing.Union[str, int]\n    '
    layers: typing.List[bool] = None
    ' Layers bone exists in\n\n    :type: typing.List[bool]\n    '
    length: float = None
    ' Length of the bone\n\n    :type: float\n    '
    matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float], typing.Tuple[float, float, float], typing.Tuple[float, float, float]], 'mathutils.Matrix'] = None
    " 3x3 bone matrix\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float], typing.Tuple[float, float, float], typing.Tuple[float, float, float]], 'mathutils.Matrix']\n    "
    matrix_local: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " 4x4 bone matrix relative to armature\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    name: str = None
    ' \n\n    :type: str\n    '
    parent: 'Bone' = None
    " Parent bone (in same Armature)\n\n    :type: 'Bone'\n    "
    select: bool = None
    ' \n\n    :type: bool\n    '
    select_head: bool = None
    ' \n\n    :type: bool\n    '
    select_tail: bool = None
    ' \n\n    :type: bool\n    '
    show_wire: bool = None
    ' Bone is always displayed in wireframe regardless of viewport shading mode (useful for non-obstructive custom bone shapes)\n\n    :type: bool\n    '
    tail: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Location of tail end of the bone relative to its parent\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    tail_local: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Location of tail end of the bone relative to armature\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    tail_radius: float = None
    ' Radius of tail of bone (for Envelope deform only)\n\n    :type: float\n    '
    use_connect: bool = None
    " When bone has a parent, bone's head is stuck to the parent's tail\n\n    :type: bool\n    "
    use_cyclic_offset: bool = None
    " When bone doesn't have a parent, it receives cyclic offset effects (Deprecated)\n\n    :type: bool\n    "
    use_deform: bool = None
    ' Enable Bone to deform geometry\n\n    :type: bool\n    '
    use_endroll_as_inroll: bool = None
    ' Add Roll Out of the Start Handle bone to the Roll In value\n\n    :type: bool\n    '
    use_envelope_multiply: bool = None
    ' When deforming bone, multiply effects of Vertex Group weights with Envelope influence\n\n    :type: bool\n    '
    use_inherit_rotation: bool = None
    ' Bone inherits rotation or scale from parent bone\n\n    :type: bool\n    '
    use_inherit_scale: bool = None
    ' DEPRECATED: Bone inherits scaling from parent bone\n\n    :type: bool\n    '
    use_local_location: bool = None
    ' Bone location is set in local space\n\n    :type: bool\n    '
    use_relative_parent: bool = None
    ' Object children will use relative transform, like deform\n\n    :type: bool\n    '
    use_scale_easing: bool = None
    ' Multiply the final easing values by the Scale In/Out Y factors\n\n    :type: bool\n    '
    basename = None
    " The name of this bone before any '.' character (readonly)"
    center = None
    ' The midpoint between the head and the tail. (readonly)'
    children_recursive = None
    ' A list of all children from this bone. .. note:: Takes ``O(len(bones)**2)`` time. (readonly)'
    children_recursive_basename = None
    ' Returns a chain of children with the same base name as this bone. Only direct chains are supported, forks caused by multiple children with matching base names will terminate the function and not be returned. (readonly)'
    parent_recursive = None
    ' A list of parents, starting with the immediate parent (readonly)'
    vector = None
    ' The direction this bone is pointing. Utility function for (tail - head) (readonly)'
    x_axis = None
    ' Vector pointing down the x-axis of the bone. (readonly)'
    y_axis = None
    ' Vector pointing down the y-axis of the bone. (readonly)'
    z_axis = None
    ' Vector pointing down the z-axis of the bone. (readonly)'

    def evaluate_envelope(self, point: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']) -> float:
        """ Calculate bone envelope at given point

        :param point: Point, Position in 3d space to evaluate
        :type point: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']
        :rtype: float
        :return: Factor, Envelope factor
        """
        pass

    def convert_local_to_pose(self, matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'], matrix_local: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'], parent_matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']=((0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0)), parent_matrix_local: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']=((0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0)), invert: bool=False) -> typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']:
        """ Transform a matrix from Local to Pose space (or back), taking into account options like Inherit Scale and Local Location. Unlike Object.convert_space, this uses custom rest and pose matrices provided by the caller. If the parent matrices are omitted, the bone is assumed to have no parent. This method enables conversions between Local and Pose space for bones in the middle of updating the armature without having to update dependencies after each change, by manually carrying updated matrices in a recursive walk.

        :param matrix: The matrix to transform
        :type matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']
        :param matrix_local: The custom rest matrix of this bone (Bone.matrix_local)
        :type matrix_local: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']
        :param parent_matrix: The custom pose matrix of the parent bone (PoseBone.matrix)
        :type parent_matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']
        :param parent_matrix_local: The custom rest matrix of the parent bone (Bone.matrix_local)
        :type parent_matrix_local: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']
        :param invert: Convert from Pose to Local space
        :type invert: bool
        :rtype: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']
        :return: The transformed matrix
        """
        pass

    @classmethod
    def MatrixFromAxisRoll(cls, axis: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'], roll: float) -> typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float], typing.Tuple[float, float, float], typing.Tuple[float, float, float]], 'mathutils.Matrix']:
        """ Convert the axis + roll representation to a matrix

        :param axis: The main axis of the bone (tail - head)
        :type axis: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']
        :param roll: The roll of the bone
        :type roll: float
        :rtype: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float], typing.Tuple[float, float, float], typing.Tuple[float, float, float]], 'mathutils.Matrix']
        :return: The resulting orientation matrix
        """
        pass

    @classmethod
    def AxisRollFromMatrix(cls, matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float], typing.Tuple[float, float, float], typing.Tuple[float, float, float]], 'mathutils.Matrix'], axis: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float], 'mathutils.Vector']=(0.0, 0.0, 0.0)):
        """ Convert a rotational matrix to the axis + roll representation. Note that the resulting value of the roll may not be as expected if the matrix has shear or negative determinant.

        :param matrix: The orientation matrix of the bone
        :type matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float], typing.Tuple[float, float, float], typing.Tuple[float, float, float]], 'mathutils.Matrix']
        :param axis: The optional override for the axis (finds closest approximation for the matrix)
        :type axis: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float], 'mathutils.Vector']
        """
        pass

    def parent_index(self, parent_test):
        """ The same as 'bone in other_bone.parent_recursive' but saved generating a list.

        """
        pass

    def translate(self, vec):
        """ Utility function to add *vec* to the head and tail of this bone

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BoneGroup(bpy_struct):
    """ Groups of Pose Channels (Bones)
    """
    color_set: typing.Union[str, int] = None
    ' Custom color set to use\n\n    :type: typing.Union[str, int]\n    '
    colors: 'ThemeBoneColorSet' = None
    " Copy of the colors associated with the group's color set\n\n    :type: 'ThemeBoneColorSet'\n    "
    is_custom_color_set: bool = None
    ' Color set is user-defined instead of a fixed theme color set\n\n    :type: bool\n    '
    name: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BoolAttributeValue(bpy_struct):
    """ Bool value in geometry attribute
    """
    value: bool = None
    ' \n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BrushCapabilities(bpy_struct):
    """ Read-only indications of supported operations
    """
    has_overlay: bool = None
    ' \n\n    :type: bool\n    '
    has_random_texture_angle: bool = None
    ' \n\n    :type: bool\n    '
    has_smooth_stroke: bool = None
    ' \n\n    :type: bool\n    '
    has_spacing: bool = None
    ' \n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BrushCapabilitiesImagePaint(bpy_struct):
    """ Read-only indications of supported operations
    """
    has_accumulate: bool = None
    ' \n\n    :type: bool\n    '
    has_color: bool = None
    ' \n\n    :type: bool\n    '
    has_radius: bool = None
    ' \n\n    :type: bool\n    '
    has_space_attenuation: bool = None
    ' \n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BrushCapabilitiesSculpt(bpy_struct):
    """ Read-only indications of which brush operations are supported by the current sculpt tool
    """
    has_accumulate: bool = None
    ' \n\n    :type: bool\n    '
    has_auto_smooth: bool = None
    ' \n\n    :type: bool\n    '
    has_color: bool = None
    ' \n\n    :type: bool\n    '
    has_direction: bool = None
    ' \n\n    :type: bool\n    '
    has_gravity: bool = None
    ' \n\n    :type: bool\n    '
    has_height: bool = None
    ' \n\n    :type: bool\n    '
    has_jitter: bool = None
    ' \n\n    :type: bool\n    '
    has_normal_weight: bool = None
    ' \n\n    :type: bool\n    '
    has_persistence: bool = None
    ' \n\n    :type: bool\n    '
    has_pinch_factor: bool = None
    ' \n\n    :type: bool\n    '
    has_plane_offset: bool = None
    ' \n\n    :type: bool\n    '
    has_rake_factor: bool = None
    ' \n\n    :type: bool\n    '
    has_random_texture_angle: bool = None
    ' \n\n    :type: bool\n    '
    has_sculpt_plane: bool = None
    ' \n\n    :type: bool\n    '
    has_secondary_color: bool = None
    ' \n\n    :type: bool\n    '
    has_smooth_stroke: bool = None
    ' \n\n    :type: bool\n    '
    has_space_attenuation: bool = None
    ' \n\n    :type: bool\n    '
    has_strength_pressure: bool = None
    ' \n\n    :type: bool\n    '
    has_tilt: bool = None
    ' \n\n    :type: bool\n    '
    has_topology_rake: bool = None
    ' \n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BrushCapabilitiesVertexPaint(bpy_struct):
    """ Read-only indications of supported operations
    """
    has_color: bool = None
    ' \n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BrushCapabilitiesWeightPaint(bpy_struct):
    """ Read-only indications of supported operations
    """
    has_weight: bool = None
    ' \n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BrushCurvesSculptSettings(bpy_struct):
    add_amount: int = None
    ' Number of curves added by the Add brush\n\n    :type: int\n    '
    curve_length: float = None
    ' Length of newly added curves when it is not interpolated from other curves\n\n    :type: float\n    '
    density_add_attempts: int = None
    ' How many times the Density brush tries to add a new curve\n\n    :type: int\n    '
    density_mode: typing.Union[str, int] = None
    ' Determines whether the brush adds or removes curves * ``AUTO`` Auto -- Either add or remove curves depending on the minimum distance of the curves under the cursor. * ``ADD`` Add -- Add new curves between existing curves, taking the minimum distance into account. * ``REMOVE`` Remove -- Remove curves whose root points are too close.\n\n    :type: typing.Union[str, int]\n    '
    interpolate_length: bool = None
    ' Use length of the curves in close proximity\n\n    :type: bool\n    '
    interpolate_point_count: bool = None
    ' Use the number of points from the curves in close proximity\n\n    :type: bool\n    '
    interpolate_shape: bool = None
    ' Use shape of the curves in close proximity\n\n    :type: bool\n    '
    minimum_distance: float = None
    ' Goal distance between curve roots for the Density brush\n\n    :type: float\n    '
    minimum_length: float = None
    ' Avoid shrinking curves shorter than this length\n\n    :type: float\n    '
    points_per_curve: int = None
    ' Number of control points in a newly added curve\n\n    :type: int\n    '
    scale_uniform: bool = None
    ' Grow or shrink curves by changing their size uniformly instead of using trimming or extrapolation\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BrushGpencilSettings(bpy_struct):
    """ Settings for grease pencil brush
    """
    active_smooth_factor: float = None
    ' Amount of smoothing while drawing\n\n    :type: float\n    '
    angle: float = None
    ' Direction of the stroke at which brush gives maximal thickness (0° for horizontal)\n\n    :type: float\n    '
    angle_factor: float = None
    " Reduce brush thickness by this factor when stroke is perpendicular to 'Angle' direction\n\n    :type: float\n    "
    aspect: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    brush_draw_mode: typing.Union[str, int] = None
    ' Preselected mode when using this brush * ``ACTIVE`` Active -- Use current mode. * ``MATERIAL`` Material -- Use always material mode. * ``VERTEXCOLOR`` Vertex Color -- Use always Vertex Color mode.\n\n    :type: typing.Union[str, int]\n    '
    caps_type: typing.Union[str, int] = None
    ' The shape of the start and end of the stroke\n\n    :type: typing.Union[str, int]\n    '
    curve_jitter: 'CurveMapping' = None
    " Curve used for the jitter effect\n\n    :type: 'CurveMapping'\n    "
    curve_random_hue: 'CurveMapping' = None
    " Curve used for modulating effect\n\n    :type: 'CurveMapping'\n    "
    curve_random_pressure: 'CurveMapping' = None
    " Curve used for modulating effect\n\n    :type: 'CurveMapping'\n    "
    curve_random_saturation: 'CurveMapping' = None
    " Curve used for modulating effect\n\n    :type: 'CurveMapping'\n    "
    curve_random_strength: 'CurveMapping' = None
    " Curve used for modulating effect\n\n    :type: 'CurveMapping'\n    "
    curve_random_uv: 'CurveMapping' = None
    " Curve used for modulating effect\n\n    :type: 'CurveMapping'\n    "
    curve_random_value: 'CurveMapping' = None
    " Curve used for modulating effect\n\n    :type: 'CurveMapping'\n    "
    curve_sensitivity: 'CurveMapping' = None
    " Curve used for the sensitivity\n\n    :type: 'CurveMapping'\n    "
    curve_strength: 'CurveMapping' = None
    " Curve used for the strength\n\n    :type: 'CurveMapping'\n    "
    dilate: int = None
    ' Number of pixels to expand or contract fill area\n\n    :type: int\n    '
    direction: typing.Union[str, int] = None
    ' * ``ADD`` Add -- Add effect of brush. * ``SUBTRACT`` Subtract -- Subtract effect of brush.\n\n    :type: typing.Union[str, int]\n    '
    eraser_mode: typing.Union[str, int] = None
    ' Eraser Mode * ``SOFT`` Dissolve -- Erase strokes, fading their points strength and thickness. * ``HARD`` Point -- Erase stroke points. * ``STROKE`` Stroke -- Erase entire strokes.\n\n    :type: typing.Union[str, int]\n    '
    eraser_strength_factor: float = None
    ' Amount of erasing for strength\n\n    :type: float\n    '
    eraser_thickness_factor: float = None
    ' Amount of erasing for thickness\n\n    :type: float\n    '
    extend_stroke_factor: float = None
    ' Strokes end extension for closing gaps, use zero to disable\n\n    :type: float\n    '
    fill_direction: typing.Union[str, int] = None
    ' Direction of the fill * ``NORMAL`` Normal -- Fill internal area. * ``INVERT`` Inverted -- Fill inverted area.\n\n    :type: typing.Union[str, int]\n    '
    fill_draw_mode: typing.Union[str, int] = None
    ' Mode to draw boundary limits * ``BOTH`` All -- Use both visible strokes and edit lines as fill boundary limits. * ``STROKE`` Strokes -- Use visible strokes as fill boundary limits. * ``CONTROL`` Edit Lines -- Use edit lines as fill boundary limits.\n\n    :type: typing.Union[str, int]\n    '
    fill_extend_mode: typing.Union[str, int] = None
    ' Types of stroke extensions used for closing gaps * ``EXTEND`` Extend -- Extend strokes in straight lines. * ``RADIUS`` Radius -- Connect endpoints that are close together.\n\n    :type: typing.Union[str, int]\n    '
    fill_factor: float = None
    ' Factor for fill boundary accuracy, higher values are more accurate but slower\n\n    :type: float\n    '
    fill_layer_mode: typing.Union[str, int] = None
    ' Layers used as boundaries * ``VISIBLE`` Visible -- Visible layers. * ``ACTIVE`` Active -- Only active layer. * ``ABOVE`` Layer Above -- Layer above active. * ``BELOW`` Layer Below -- Layer below active. * ``ALL_ABOVE`` All Above -- All layers above active. * ``ALL_BELOW`` All Below -- All layers below active.\n\n    :type: typing.Union[str, int]\n    '
    fill_simplify_level: int = None
    ' Number of simplify steps (large values reduce fill accuracy)\n\n    :type: int\n    '
    fill_threshold: float = None
    ' Threshold to consider color transparent for filling\n\n    :type: float\n    '
    gpencil_paint_icon: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    gpencil_sculpt_icon: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    gpencil_vertex_icon: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    gpencil_weight_icon: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    hardness: float = None
    ' Gradient from the center of Dot and Box strokes (set to 1 for a solid stroke)\n\n    :type: float\n    '
    input_samples: int = None
    ' Generate intermediate points for very fast mouse movements. Set to 0 to disable\n\n    :type: int\n    '
    material: 'Material' = None
    " Material used for strokes drawn using this brush\n\n    :type: 'Material'\n    "
    material_alt: 'Material' = None
    " Material used for secondary uses for this brush\n\n    :type: 'Material'\n    "
    outline_thickness_factor: float = None
    ' Thickness of the outline stroke relative to current brush thickness\n\n    :type: float\n    '
    pen_jitter: float = None
    ' Jitter factor for new strokes\n\n    :type: float\n    '
    pen_smooth_factor: float = None
    ' Amount of smoothing to apply after finish newly created strokes, to reduce jitter/noise\n\n    :type: float\n    '
    pen_smooth_steps: int = None
    ' Number of times to smooth newly created strokes\n\n    :type: int\n    '
    pen_strength: float = None
    ' Color strength for new strokes (affect alpha factor of color)\n\n    :type: float\n    '
    pen_subdivision_steps: int = None
    ' Number of times to subdivide newly created strokes, for less jagged strokes\n\n    :type: int\n    '
    pin_draw_mode: bool = None
    ' Pin the mode to the brush\n\n    :type: bool\n    '
    random_hue_factor: float = None
    ' Random factor to modify original hue\n\n    :type: float\n    '
    random_pressure: float = None
    ' Randomness factor for pressure in new strokes\n\n    :type: float\n    '
    random_saturation_factor: float = None
    ' Random factor to modify original saturation\n\n    :type: float\n    '
    random_strength: float = None
    ' Randomness factor strength in new strokes\n\n    :type: float\n    '
    random_value_factor: float = None
    ' Random factor to modify original value\n\n    :type: float\n    '
    show_fill: bool = None
    ' Show transparent lines to use as boundary for filling\n\n    :type: bool\n    '
    show_fill_boundary: bool = None
    ' Show help lines for filling to see boundaries\n\n    :type: bool\n    '
    show_fill_extend: bool = None
    ' Show help lines for stroke extension\n\n    :type: bool\n    '
    show_lasso: bool = None
    ' Do not display fill color while drawing the stroke\n\n    :type: bool\n    '
    simplify_factor: float = None
    ' Factor of Simplify using adaptive algorithm\n\n    :type: float\n    '
    use_collide_strokes: bool = None
    ' Check if extend lines collide with strokes\n\n    :type: bool\n    '
    use_default_eraser: bool = None
    ' Use this brush when enable eraser with fast switch key\n\n    :type: bool\n    '
    use_edit_position: bool = None
    ' The brush affects the position of the point\n\n    :type: bool\n    '
    use_edit_strength: bool = None
    ' The brush affects the color strength of the point\n\n    :type: bool\n    '
    use_edit_thickness: bool = None
    ' The brush affects the thickness of the point\n\n    :type: bool\n    '
    use_edit_uv: bool = None
    ' The brush affects the UV rotation of the point\n\n    :type: bool\n    '
    use_fill_limit: bool = None
    ' Fill only visible areas in viewport\n\n    :type: bool\n    '
    use_jitter_pressure: bool = None
    ' Use tablet pressure for jitter\n\n    :type: bool\n    '
    use_material_pin: bool = None
    ' Keep material assigned to brush\n\n    :type: bool\n    '
    use_occlude_eraser: bool = None
    ' Erase only strokes visible and not occluded\n\n    :type: bool\n    '
    use_pressure: bool = None
    ' Use tablet pressure\n\n    :type: bool\n    '
    use_random_press_hue: bool = None
    ' Use pressure to modulate randomness\n\n    :type: bool\n    '
    use_random_press_radius: bool = None
    ' Use pressure to modulate randomness\n\n    :type: bool\n    '
    use_random_press_sat: bool = None
    ' Use pressure to modulate randomness\n\n    :type: bool\n    '
    use_random_press_strength: bool = None
    ' Use pressure to modulate randomness\n\n    :type: bool\n    '
    use_random_press_uv: bool = None
    ' Use pressure to modulate randomness\n\n    :type: bool\n    '
    use_random_press_val: bool = None
    ' Use pressure to modulate randomness\n\n    :type: bool\n    '
    use_settings_outline: bool = None
    ' Convert stroke to perimeter\n\n    :type: bool\n    '
    use_settings_postprocess: bool = None
    ' Additional post processing options for new strokes\n\n    :type: bool\n    '
    use_settings_random: bool = None
    ' Random brush settings\n\n    :type: bool\n    '
    use_settings_stabilizer: bool = None
    ' Draw lines with a delay to allow smooth strokes. Press Shift key to override while drawing\n\n    :type: bool\n    '
    use_strength_pressure: bool = None
    ' Use tablet pressure for color strength\n\n    :type: bool\n    '
    use_stroke_random_hue: bool = None
    ' Use randomness at stroke level\n\n    :type: bool\n    '
    use_stroke_random_radius: bool = None
    ' Use randomness at stroke level\n\n    :type: bool\n    '
    use_stroke_random_sat: bool = None
    ' Use randomness at stroke level\n\n    :type: bool\n    '
    use_stroke_random_strength: bool = None
    ' Use randomness at stroke level\n\n    :type: bool\n    '
    use_stroke_random_uv: bool = None
    ' Use randomness at stroke level\n\n    :type: bool\n    '
    use_stroke_random_val: bool = None
    ' Use randomness at stroke level\n\n    :type: bool\n    '
    use_trim: bool = None
    ' Trim intersecting stroke ends\n\n    :type: bool\n    '
    uv_random: float = None
    ' Random factor for auto-generated UV rotation\n\n    :type: float\n    '
    vertex_color_factor: float = None
    ' Factor used to mix vertex color to get final color\n\n    :type: float\n    '
    vertex_mode: typing.Union[str, int] = None
    ' Defines how vertex color affect to the strokes * ``STROKE`` Stroke -- Vertex Color affects to Stroke only. * ``FILL`` Fill -- Vertex Color affects to Fill only. * ``BOTH`` Stroke & Fill -- Vertex Color affects to Stroke and Fill.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ByteColorAttributeValue(bpy_struct):
    """ Color value in geometry attribute
    """
    color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " RGBA color in scene linear color space\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    color_srgb: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " RGBA color in sRGB color space\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ByteIntAttributeValue(bpy_struct):
    """ 8-bit value in geometry attribute
    """
    value: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CacheFileLayer(bpy_struct):
    """ Layer of the cache, used to load or override data from the first the first layer
    """
    filepath: str = None
    ' Path to the archive\n\n    :type: str\n    '
    hide_layer: bool = None
    ' Do not load data from this layer\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CacheObjectPath(bpy_struct):
    """ Path of an object inside of an Alembic archive
    """
    path: str = None
    ' Object path\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CameraBackgroundImage(bpy_struct):
    """ Image and settings for display in the 3D View background
    """
    alpha: float = None
    ' Image opacity to blend the image against the background color\n\n    :type: float\n    '
    clip: 'MovieClip' = None
    " Movie clip displayed and edited in this space\n\n    :type: 'MovieClip'\n    "
    clip_user: 'MovieClipUser' = None
    " Parameters defining which frame of the movie clip is displayed\n\n    :type: 'MovieClipUser'\n    "
    display_depth: typing.Union[str, int] = None
    ' Display under or over everything\n\n    :type: typing.Union[str, int]\n    '
    frame_method: typing.Union[str, int] = None
    ' How the image fits in the camera frame\n\n    :type: typing.Union[str, int]\n    '
    image: 'Image' = None
    " Image displayed and edited in this space\n\n    :type: 'Image'\n    "
    image_user: 'ImageUser' = None
    " Parameters defining which layer, pass and frame of the image is displayed\n\n    :type: 'ImageUser'\n    "
    is_override_data: bool = None
    ' In a local override camera, whether this background image comes from the linked reference camera, or is local to the override\n\n    :type: bool\n    '
    offset: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    rotation: float = None
    ' Rotation for the background image (ortho view only)\n\n    :type: float\n    '
    scale: float = None
    ' Scale the background image\n\n    :type: float\n    '
    show_background_image: bool = None
    ' Show this image as background\n\n    :type: bool\n    '
    show_expanded: bool = None
    ' Show the details in the user interface\n\n    :type: bool\n    '
    show_on_foreground: bool = None
    ' Show this image in front of objects in viewport\n\n    :type: bool\n    '
    source: typing.Union[str, int] = None
    ' Data source used for background\n\n    :type: typing.Union[str, int]\n    '
    use_camera_clip: bool = None
    ' Use movie clip from active scene camera\n\n    :type: bool\n    '
    use_flip_x: bool = None
    ' Flip the background image horizontally\n\n    :type: bool\n    '
    use_flip_y: bool = None
    ' Flip the background image vertically\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CameraDOFSettings(bpy_struct):
    """ Depth of Field settings
    """
    aperture_blades: int = None
    ' Number of blades in aperture for polygonal bokeh (at least 3)\n\n    :type: int\n    '
    aperture_fstop: float = None
    ' F-Stop ratio (lower numbers give more defocus, higher numbers give a sharper image)\n\n    :type: float\n    '
    aperture_ratio: float = None
    ' Distortion to simulate anamorphic lens bokeh\n\n    :type: float\n    '
    aperture_rotation: float = None
    ' Rotation of blades in aperture\n\n    :type: float\n    '
    focus_distance: float = None
    ' Distance to the focus point for depth of field\n\n    :type: float\n    '
    focus_object: 'Object' = None
    " Use this object to define the depth of field focal point\n\n    :type: 'Object'\n    "
    focus_subtarget: str = None
    ' Use this armature bone to define the depth of field focal point\n\n    :type: str\n    '
    use_dof: bool = None
    ' Use Depth of Field\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CameraStereoData(bpy_struct):
    """ Stereoscopy settings for a Camera data-block
    """
    convergence_distance: float = None
    ' The converge point for the stereo cameras (often the distance between a projector and the projection screen)\n\n    :type: float\n    '
    convergence_mode: typing.Union[str, int] = None
    ' * ``OFFAXIS`` Off-Axis -- Off-axis frustums converging in a plane. * ``PARALLEL`` Parallel -- Parallel cameras with no convergence. * ``TOE`` Toe-in -- Rotated cameras, looking at the convergence distance.\n\n    :type: typing.Union[str, int]\n    '
    interocular_distance: float = None
    ' Set the distance between the eyes - the stereo plane distance / 30 should be fine\n\n    :type: float\n    '
    pivot: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    pole_merge_angle_from: float = None
    ' Angle at which interocular distance starts to fade to 0\n\n    :type: float\n    '
    pole_merge_angle_to: float = None
    ' Angle at which interocular distance is 0\n\n    :type: float\n    '
    use_pole_merge: bool = None
    ' Fade interocular distance to 0 after the given cutoff angle\n\n    :type: bool\n    '
    use_spherical_stereo: bool = None
    ' Render every pixel rotating the camera around the middle of the interocular distance\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ChildParticle(bpy_struct):
    """ Child particle interpolated from simulated or edited particles
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ClothCollisionSettings(bpy_struct):
    """ Cloth simulation settings for self collision and collision with other objects
    """
    collection: 'Collection' = None
    " Limit colliders to this Collection\n\n    :type: 'Collection'\n    "
    collision_quality: int = None
    ' How many collision iterations should be done. (higher is better quality but slower)\n\n    :type: int\n    '
    damping: float = None
    ' Amount of velocity lost on collision\n\n    :type: float\n    '
    distance_min: float = None
    ' Minimum distance between collision objects before collision response takes effect\n\n    :type: float\n    '
    friction: float = None
    ' Friction force if a collision happened (higher = less movement)\n\n    :type: float\n    '
    impulse_clamp: float = None
    ' Clamp collision impulses to avoid instability (0.0 to disable clamping)\n\n    :type: float\n    '
    self_distance_min: float = None
    ' Minimum distance between cloth faces before collision response takes effect\n\n    :type: float\n    '
    self_friction: float = None
    ' Friction with self contact\n\n    :type: float\n    '
    self_impulse_clamp: float = None
    ' Clamp collision impulses to avoid instability (0.0 to disable clamping)\n\n    :type: float\n    '
    use_collision: bool = None
    ' Enable collisions with other objects\n\n    :type: bool\n    '
    use_self_collision: bool = None
    ' Enable self collisions\n\n    :type: bool\n    '
    vertex_group_object_collisions: str = None
    ' Triangles with all vertices in this group are not used during object collisions\n\n    :type: str\n    '
    vertex_group_self_collisions: str = None
    ' Triangles with all vertices in this group are not used during self collisions\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ClothSettings(bpy_struct):
    """ Cloth simulation settings for an object
    """
    air_damping: float = None
    ' Air has normally some thickness which slows falling things down\n\n    :type: float\n    '
    bending_damping: float = None
    ' Amount of damping in bending behavior\n\n    :type: float\n    '
    bending_model: typing.Union[str, int] = None
    ' Physical model for simulating bending forces * ``ANGULAR`` Angular -- Cloth model with angular bending springs. * ``LINEAR`` Linear -- Cloth model with linear bending springs (legacy).\n\n    :type: typing.Union[str, int]\n    '
    bending_stiffness: float = None
    ' How much the material resists bending\n\n    :type: float\n    '
    bending_stiffness_max: float = None
    ' Maximum bending stiffness value\n\n    :type: float\n    '
    collider_friction: float = None
    ' \n\n    :type: float\n    '
    compression_damping: float = None
    ' Amount of damping in compression behavior\n\n    :type: float\n    '
    compression_stiffness: float = None
    ' How much the material resists compression\n\n    :type: float\n    '
    compression_stiffness_max: float = None
    ' Maximum compression stiffness value\n\n    :type: float\n    '
    density_strength: float = None
    ' Influence of target density on the simulation\n\n    :type: float\n    '
    density_target: float = None
    ' Maximum density of hair\n\n    :type: float\n    '
    effector_weights: 'EffectorWeights' = None
    " \n\n    :type: 'EffectorWeights'\n    "
    fluid_density: float = None
    ' Density (kg/l) of the fluid contained inside the object, used to create a hydrostatic pressure gradient simulating the weight of the internal fluid, or buoyancy from the surrounding fluid if negative\n\n    :type: float\n    '
    goal_default: float = None
    ' Default Goal (vertex target position) value, when no Vertex Group used\n\n    :type: float\n    '
    goal_friction: float = None
    ' Goal (vertex target position) friction\n\n    :type: float\n    '
    goal_max: float = None
    ' Goal maximum, vertex group weights are scaled to match this range\n\n    :type: float\n    '
    goal_min: float = None
    ' Goal minimum, vertex group weights are scaled to match this range\n\n    :type: float\n    '
    goal_spring: float = None
    ' Goal (vertex target position) spring stiffness\n\n    :type: float\n    '
    gravity: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Gravity or external force vector\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    internal_compression_stiffness: float = None
    ' How much the material resists compression\n\n    :type: float\n    '
    internal_compression_stiffness_max: float = None
    ' Maximum compression stiffness value\n\n    :type: float\n    '
    internal_friction: float = None
    ' \n\n    :type: float\n    '
    internal_spring_max_diversion: float = None
    ' How much the rays used to connect the internal points can diverge from the vertex normal\n\n    :type: float\n    '
    internal_spring_max_length: float = None
    ' The maximum length an internal spring can have during creation. If the distance between internal points is greater than this, no internal spring will be created between these points. A length of zero means that there is no length limit\n\n    :type: float\n    '
    internal_spring_normal_check: bool = None
    ' Require the points the internal springs connect to have opposite normal directions\n\n    :type: bool\n    '
    internal_tension_stiffness: float = None
    ' How much the material resists stretching\n\n    :type: float\n    '
    internal_tension_stiffness_max: float = None
    ' Maximum tension stiffness value\n\n    :type: float\n    '
    mass: float = None
    ' The mass of each vertex on the cloth material\n\n    :type: float\n    '
    pin_stiffness: float = None
    ' Pin (vertex target position) spring stiffness\n\n    :type: float\n    '
    pressure_factor: float = None
    ' Ambient pressure (kPa) that balances out between the inside and outside of the object when it has the target volume\n\n    :type: float\n    '
    quality: int = None
    ' Quality of the simulation in steps per frame (higher is better quality but slower)\n\n    :type: int\n    '
    rest_shape_key: 'ShapeKey' = None
    " Shape key to use the rest spring lengths from\n\n    :type: 'ShapeKey'\n    "
    sewing_force_max: float = None
    ' Maximum sewing force\n\n    :type: float\n    '
    shear_damping: float = None
    ' Amount of damping in shearing behavior\n\n    :type: float\n    '
    shear_stiffness: float = None
    ' How much the material resists shearing\n\n    :type: float\n    '
    shear_stiffness_max: float = None
    ' Maximum shear scaling value\n\n    :type: float\n    '
    shrink_max: float = None
    ' Max amount to shrink cloth by\n\n    :type: float\n    '
    shrink_min: float = None
    ' Factor by which to shrink cloth\n\n    :type: float\n    '
    target_volume: float = None
    ' The mesh volume where the inner/outer pressure will be the same. If set to zero the change in volume will not affect pressure\n\n    :type: float\n    '
    tension_damping: float = None
    ' Amount of damping in stretching behavior\n\n    :type: float\n    '
    tension_stiffness: float = None
    ' How much the material resists stretching\n\n    :type: float\n    '
    tension_stiffness_max: float = None
    ' Maximum tension stiffness value\n\n    :type: float\n    '
    time_scale: float = None
    ' Cloth speed is multiplied by this value\n\n    :type: float\n    '
    uniform_pressure_force: float = None
    ' The uniform pressure that is constantly applied to the mesh, in units of Pressure Scale. Can be negative\n\n    :type: float\n    '
    use_dynamic_mesh: bool = None
    ' Make simulation respect deformations in the base mesh\n\n    :type: bool\n    '
    use_internal_springs: bool = None
    ' Simulate an internal volume structure by creating springs connecting the opposite sides of the mesh\n\n    :type: bool\n    '
    use_pressure: bool = None
    ' Simulate pressure inside a closed cloth mesh\n\n    :type: bool\n    '
    use_pressure_volume: bool = None
    ' Use the Target Volume parameter as the initial volume, instead of calculating it from the mesh itself\n\n    :type: bool\n    '
    use_sewing_springs: bool = None
    ' Pulls loose edges together\n\n    :type: bool\n    '
    vertex_group_bending: str = None
    ' Vertex group for fine control over bending stiffness\n\n    :type: str\n    '
    vertex_group_intern: str = None
    ' Vertex group for fine control over the internal spring stiffness\n\n    :type: str\n    '
    vertex_group_mass: str = None
    ' Vertex Group for pinning of vertices\n\n    :type: str\n    '
    vertex_group_pressure: str = None
    ' Vertex Group for where to apply pressure. Zero weight means no pressure while a weight of one means full pressure. Faces with a vertex that has zero weight will be excluded from the volume calculation\n\n    :type: str\n    '
    vertex_group_shear_stiffness: str = None
    ' Vertex group for fine control over shear stiffness\n\n    :type: str\n    '
    vertex_group_shrink: str = None
    ' Vertex Group for shrinking cloth\n\n    :type: str\n    '
    vertex_group_structural_stiffness: str = None
    ' Vertex group for fine control over structural stiffness\n\n    :type: str\n    '
    voxel_cell_size: float = None
    ' Size of the voxel grid cells for interaction effects\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ClothSolverResult(bpy_struct):
    """ Result of cloth solver iteration
    """
    avg_error: float = None
    ' Average error during substeps\n\n    :type: float\n    '
    avg_iterations: float = None
    ' Average iterations during substeps\n\n    :type: float\n    '
    max_error: float = None
    ' Maximum error during substeps\n\n    :type: float\n    '
    max_iterations: int = None
    ' Maximum iterations during substeps\n\n    :type: int\n    '
    min_error: float = None
    ' Minimum error during substeps\n\n    :type: float\n    '
    min_iterations: int = None
    ' Minimum iterations during substeps\n\n    :type: int\n    '
    status: typing.Union[typing.Set[str], typing.Set[int]] = None
    ' Status of the solver iteration * ``SUCCESS`` Success -- Computation was successful. * ``NUMERICAL_ISSUE`` Numerical Issue -- The provided data did not satisfy the prerequisites. * ``NO_CONVERGENCE`` No Convergence -- Iterative procedure did not converge. * ``INVALID_INPUT`` Invalid Input -- The inputs are invalid, or the algorithm has been improperly called.\n\n    :type: typing.Union[typing.Set[str], typing.Set[int]]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CollisionSettings(bpy_struct):
    """ Collision settings for object in physics simulation
    """
    absorption: float = None
    ' How much of effector force gets lost during collision with this object (in percent)\n\n    :type: float\n    '
    cloth_friction: float = None
    ' Friction for cloth collisions\n\n    :type: float\n    '
    damping: float = None
    ' Amount of damping during collision\n\n    :type: float\n    '
    damping_factor: float = None
    ' Amount of damping during particle collision\n\n    :type: float\n    '
    damping_random: float = None
    ' Random variation of damping\n\n    :type: float\n    '
    friction_factor: float = None
    ' Amount of friction during particle collision\n\n    :type: float\n    '
    friction_random: float = None
    ' Random variation of friction\n\n    :type: float\n    '
    permeability: float = None
    ' Chance that the particle will pass through the mesh\n\n    :type: float\n    '
    stickiness: float = None
    ' Amount of stickiness to surface collision\n\n    :type: float\n    '
    thickness_inner: float = None
    ' Inner face thickness (only used by softbodies)\n\n    :type: float\n    '
    thickness_outer: float = None
    ' Outer face thickness\n\n    :type: float\n    '
    use: bool = None
    ' Enable this objects as a collider for physics systems\n\n    :type: bool\n    '
    use_culling: bool = None
    ' Cloth collision acts with respect to the collider normals (improves penetration recovery)\n\n    :type: bool\n    '
    use_normal: bool = None
    ' Cloth collision impulses act in the direction of the collider normals (more reliable in some cases)\n\n    :type: bool\n    '
    use_particle_kill: bool = None
    ' Kill collided particles\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ColorManagedDisplaySettings(bpy_struct):
    """ Color management specific to display device
    """
    display_device: typing.Union[str, int] = None
    ' Display device name\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ColorManagedInputColorspaceSettings(bpy_struct):
    """ Input color space settings
    """
    is_data: bool = None
    ' Treat image as non-color data without color management, like normal or displacement maps\n\n    :type: bool\n    '
    name: typing.Union[str, int] = None
    ' Color space in the image file, to convert to and from when saving and loading the image\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ColorManagedSequencerColorspaceSettings(bpy_struct):
    """ Input color space settings
    """
    name: typing.Union[str, int] = None
    ' Color space that the sequencer operates in\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ColorManagedViewSettings(bpy_struct):
    """ Color management settings used for displaying images on the display
    """
    curve_mapping: 'CurveMapping' = None
    " Color curve mapping applied before display transform\n\n    :type: 'CurveMapping'\n    "
    exposure: float = None
    ' Exposure (stops) applied before display transform\n\n    :type: float\n    '
    gamma: float = None
    ' Amount of gamma modification applied after display transform\n\n    :type: float\n    '
    look: typing.Union[str, int] = None
    ' Additional transform applied before view transform for artistic needs * ``NONE`` None -- Do not modify image in an artistic manner.\n\n    :type: typing.Union[str, int]\n    '
    use_curve_mapping: bool = None
    ' Use RGB curved for pre-display transformation\n\n    :type: bool\n    '
    view_transform: typing.Union[str, int] = None
    ' View used when converting image to a display space * ``NONE`` None -- Do not perform any color transform on display, use old non-color managed technique for display.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ColorMapping(bpy_struct):
    """ Color mapping settings
    """
    blend_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Blend color to mix with texture output color\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    blend_factor: float = None
    ' \n\n    :type: float\n    '
    blend_type: typing.Union[str, int] = None
    ' Mode used to mix with texture output color\n\n    :type: typing.Union[str, int]\n    '
    brightness: float = None
    ' Adjust the brightness of the texture\n\n    :type: float\n    '
    color_ramp: 'ColorRamp' = None
    " \n\n    :type: 'ColorRamp'\n    "
    contrast: float = None
    ' Adjust the contrast of the texture\n\n    :type: float\n    '
    saturation: float = None
    ' Adjust the saturation of colors in the texture\n\n    :type: float\n    '
    use_color_ramp: bool = None
    ' Toggle color ramp operations\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ColorRamp(bpy_struct):
    """ Color ramp mapping a scalar value to a color
    """
    color_mode: typing.Union[str, int] = None
    ' Set color mode to use for interpolation\n\n    :type: typing.Union[str, int]\n    '
    elements: 'ColorRampElements' = None
    " \n\n    :type: 'ColorRampElements'\n    "
    hue_interpolation: typing.Union[str, int] = None
    ' Set color interpolation\n\n    :type: typing.Union[str, int]\n    '
    interpolation: typing.Union[str, int] = None
    ' Set interpolation between color stops\n\n    :type: typing.Union[str, int]\n    '

    def evaluate(self, position: float) -> typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']:
        """ Evaluate ColorRamp

        :param position: Position, Evaluate ColorRamp at position
        :type position: float
        :rtype: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']
        :return: Color, Color at given position
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ColorRampElement(bpy_struct):
    """ Element defining a color at a position in the color ramp
    """
    alpha: float = None
    ' Set alpha of selected color stop\n\n    :type: float\n    '
    color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Set color of selected color stop\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    position: float = None
    ' Set position of selected color stop\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ConsoleLine(bpy_struct):
    """ Input line for the interactive console
    """
    body: str = None
    ' Text in the line\n\n    :type: str\n    '
    current_character: int = None
    ' \n\n    :type: int\n    '
    type: typing.Union[str, int] = None
    ' Console line type when used in scrollback\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Constraint(bpy_struct):
    """ Constraint modifying the transformation of objects and bones
    """
    active: bool = None
    ' Constraint is the one being edited\n\n    :type: bool\n    '
    enabled: bool = None
    ' Use the results of this constraint\n\n    :type: bool\n    '
    error_location: float = None
    ' Amount of residual error in Blender space unit for constraints that work on position\n\n    :type: float\n    '
    error_rotation: float = None
    ' Amount of residual error in radians for constraints that work on orientation\n\n    :type: float\n    '
    influence: float = None
    ' Amount of influence constraint will have on the final solution\n\n    :type: float\n    '
    is_override_data: bool = None
    ' In a local override object, whether this constraint comes from the linked reference object, or is local to the override\n\n    :type: bool\n    '
    is_valid: bool = None
    ' Constraint has valid settings and can be evaluated\n\n    :type: bool\n    '
    mute: bool = None
    ' Enable/Disable Constraint\n\n    :type: bool\n    '
    name: str = None
    ' Constraint name\n\n    :type: str\n    '
    owner_space: typing.Union[str, int] = None
    ' Space that owner is evaluated in * ``WORLD`` World Space -- The constraint is applied relative to the world coordinate system. * ``CUSTOM`` Custom Space -- The constraint is applied in local space of a custom object/bone/vertex group. * ``POSE`` Pose Space -- The constraint is applied in Pose Space, the object transformation is ignored. * ``LOCAL_WITH_PARENT`` Local With Parent -- The constraint is applied relative to the rest pose local coordinate system of the bone, thus including the parent-induced transformation. * ``LOCAL`` Local Space -- The constraint is applied relative to the local coordinate system of the object.\n\n    :type: typing.Union[str, int]\n    '
    show_expanded: bool = None
    " Constraint's panel is expanded in UI\n\n    :type: bool\n    "
    space_object: 'Object' = None
    " Object for Custom Space\n\n    :type: 'Object'\n    "
    space_subtarget: str = None
    ' Armature bone, mesh or lattice vertex group, ...\n\n    :type: str\n    '
    target_space: typing.Union[str, int] = None
    ' Space that target is evaluated in * ``WORLD`` World Space -- The transformation of the target is evaluated relative to the world coordinate system. * ``CUSTOM`` Custom Space -- The transformation of the target is evaluated relative to a custom object/bone/vertex group. * ``POSE`` Pose Space -- The transformation of the target is only evaluated in the Pose Space, the target armature object transformation is ignored. * ``LOCAL_WITH_PARENT`` Local With Parent -- The transformation of the target bone is evaluated relative to its rest pose local coordinate system, thus including the parent-induced transformation. * ``LOCAL`` Local Space -- The transformation of the target is evaluated relative to its local coordinate system. * ``LOCAL_OWNER_ORIENT`` Local Space (Owner Orientation) -- The transformation of the target bone is evaluated relative to its local coordinate system, followed by a correction for the difference in target and owner rest pose orientations. When applied as local transform to the owner produces the same global motion as the target if the parents are still in rest pose.\n\n    :type: typing.Union[str, int]\n    '
    type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ConstraintTarget(bpy_struct):
    """ Target object for multi-target constraints
    """
    subtarget: str = None
    ' Armature bone, mesh or lattice vertex group, ...\n\n    :type: str\n    '
    target: 'Object' = None
    " Target object\n\n    :type: 'Object'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ConstraintTargetBone(bpy_struct):
    """ Target bone for multi-target constraints
    """
    subtarget: str = None
    ' Target armature bone\n\n    :type: str\n    '
    target: 'Object' = None
    " Target armature\n\n    :type: 'Object'\n    "
    weight: float = None
    ' Blending weight of this bone\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Context(bpy_struct):
    """ Current windowmanager and data context
    """
    area: 'Area' = None
    " \n\n    :type: 'Area'\n    "
    asset_file_handle: 'FileSelectEntry' = None
    " The file of an active asset. Avoid using this, it will be replaced by a proper AssetHandle design\n\n    :type: 'FileSelectEntry'\n    "
    blend_data: 'BlendData' = None
    " \n\n    :type: 'BlendData'\n    "
    collection: 'Collection' = None
    " \n\n    :type: 'Collection'\n    "
    engine: str = None
    ' \n\n    :type: str\n    '
    gizmo_group: 'GizmoGroup' = None
    " \n\n    :type: 'GizmoGroup'\n    "
    layer_collection: 'LayerCollection' = None
    " \n\n    :type: 'LayerCollection'\n    "
    mode: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    preferences: 'Preferences' = None
    " \n\n    :type: 'Preferences'\n    "
    region: 'Region' = None
    " \n\n    :type: 'Region'\n    "
    region_data: 'RegionView3D' = None
    " \n\n    :type: 'RegionView3D'\n    "
    scene: 'Scene' = None
    " \n\n    :type: 'Scene'\n    "
    screen: 'Screen' = None
    " \n\n    :type: 'Screen'\n    "
    space_data: 'Space' = None
    " \n\n    :type: 'Space'\n    "
    tool_settings: 'ToolSettings' = None
    " \n\n    :type: 'ToolSettings'\n    "
    view_layer: 'ViewLayer' = None
    " \n\n    :type: 'ViewLayer'\n    "
    window: 'Window' = None
    " \n\n    :type: 'Window'\n    "
    window_manager: 'WindowManager' = None
    " \n\n    :type: 'WindowManager'\n    "
    workspace: 'WorkSpace' = None
    " \n\n    :type: 'WorkSpace'\n    "
    texture_slot: 'TextureSlot' = None
    " \n\n    :type: 'TextureSlot'\n    "
    world: 'World' = None
    " \n\n    :type: 'World'\n    "
    object: 'Object' = None
    " \n\n    :type: 'Object'\n    "
    mesh: 'Mesh' = None
    " \n\n    :type: 'Mesh'\n    "
    armature: 'Armature' = None
    " \n\n    :type: 'Armature'\n    "
    lattice: 'Lattice' = None
    " \n\n    :type: 'Lattice'\n    "
    curve: 'Curve' = None
    " \n\n    :type: 'Curve'\n    "
    meta_ball: 'MetaBall' = None
    " \n\n    :type: 'MetaBall'\n    "
    light: 'Light' = None
    " \n\n    :type: 'Light'\n    "
    speaker: 'Speaker' = None
    " \n\n    :type: 'Speaker'\n    "
    lightprobe: 'LightProbe' = None
    " \n\n    :type: 'LightProbe'\n    "
    camera: 'Camera' = None
    " \n\n    :type: 'Camera'\n    "
    material: 'Material' = None
    " \n\n    :type: 'Material'\n    "
    material_slot: 'MaterialSlot' = None
    " \n\n    :type: 'MaterialSlot'\n    "
    texture: 'Texture' = None
    " \n\n    :type: 'Texture'\n    "
    texture_user: 'ID' = None
    " \n\n    :type: 'ID'\n    "
    texture_user_property: 'Property' = None
    " \n\n    :type: 'Property'\n    "
    bone: 'Bone' = None
    " \n\n    :type: 'Bone'\n    "
    edit_bone: 'EditBone' = None
    " \n\n    :type: 'EditBone'\n    "
    pose_bone: 'PoseBone' = None
    " \n\n    :type: 'PoseBone'\n    "
    particle_system: 'ParticleSystem' = None
    " \n\n    :type: 'ParticleSystem'\n    "
    particle_system_editable: 'ParticleSystem' = None
    " \n\n    :type: 'ParticleSystem'\n    "
    particle_settings: 'ParticleSettings' = None
    " \n\n    :type: 'ParticleSettings'\n    "
    cloth: 'ClothModifier' = None
    " \n\n    :type: 'ClothModifier'\n    "
    soft_body: 'SoftBodyModifier' = None
    " \n\n    :type: 'SoftBodyModifier'\n    "
    fluid: typing.Any = None
    ' \n\n    :type: typing.Any\n    '
    collision: 'CollisionModifier' = None
    " \n\n    :type: 'CollisionModifier'\n    "
    brush: 'Brush' = None
    " \n\n    :type: 'Brush'\n    "
    dynamic_paint: 'DynamicPaintModifier' = None
    " \n\n    :type: 'DynamicPaintModifier'\n    "
    line_style: 'FreestyleLineStyle' = None
    " \n\n    :type: 'FreestyleLineStyle'\n    "
    gpencil: 'GreasePencil' = None
    " \n\n    :type: 'GreasePencil'\n    "
    curves: 'Curves' = None
    " \n\n    :type: 'Curves'\n    "
    pointcloud: 'PointCloud' = None
    " \n\n    :type: 'PointCloud'\n    "
    volume: 'Volume' = None
    " \n\n    :type: 'Volume'\n    "
    edit_movieclip: 'MovieClip' = None
    " \n\n    :type: 'MovieClip'\n    "
    edit_mask: 'Mask' = None
    " \n\n    :type: 'Mask'\n    "
    active_file: 'FileSelectEntry' = None
    " \n\n    :type: 'FileSelectEntry'\n    "
    selected_files: typing.Sequence['FileSelectEntry'] = None
    " \n\n    :type: typing.Sequence['FileSelectEntry']\n    "
    asset_library_ref: 'AssetLibraryReference' = None
    " \n\n    :type: 'AssetLibraryReference'\n    "
    selected_asset_files: typing.Sequence['FileSelectEntry'] = None
    " \n\n    :type: typing.Sequence['FileSelectEntry']\n    "
    id: 'ID' = None
    " \n\n    :type: 'ID'\n    "
    edit_image: 'Image' = None
    " \n\n    :type: 'Image'\n    "
    selected_nodes: typing.Sequence['Node'] = None
    " \n\n    :type: typing.Sequence['Node']\n    "
    active_node: 'Node' = None
    " \n\n    :type: 'Node'\n    "
    visible_objects: typing.Sequence['Object'] = None
    " \n\n    :type: typing.Sequence['Object']\n    "
    selectable_objects: typing.Sequence['Object'] = None
    " \n\n    :type: typing.Sequence['Object']\n    "
    selected_objects: typing.Sequence['Object'] = None
    " \n\n    :type: typing.Sequence['Object']\n    "
    editable_objects: typing.Sequence['Object'] = None
    " \n\n    :type: typing.Sequence['Object']\n    "
    selected_editable_objects: typing.Sequence['Object'] = None
    " \n\n    :type: typing.Sequence['Object']\n    "
    objects_in_mode: typing.Sequence['Object'] = None
    " \n\n    :type: typing.Sequence['Object']\n    "
    objects_in_mode_unique_data: typing.Sequence['Object'] = None
    " \n\n    :type: typing.Sequence['Object']\n    "
    visible_bones: typing.Sequence['EditBone'] = None
    " \n\n    :type: typing.Sequence['EditBone']\n    "
    editable_bones: typing.Sequence['EditBone'] = None
    " \n\n    :type: typing.Sequence['EditBone']\n    "
    selected_bones: typing.Sequence['EditBone'] = None
    " \n\n    :type: typing.Sequence['EditBone']\n    "
    selected_editable_bones: typing.Sequence['EditBone'] = None
    " \n\n    :type: typing.Sequence['EditBone']\n    "
    visible_pose_bones: typing.Sequence['PoseBone'] = None
    " \n\n    :type: typing.Sequence['PoseBone']\n    "
    selected_pose_bones: typing.Sequence['PoseBone'] = None
    " \n\n    :type: typing.Sequence['PoseBone']\n    "
    selected_pose_bones_from_active_object: typing.Sequence['PoseBone'] = None
    " \n\n    :type: typing.Sequence['PoseBone']\n    "
    active_bone: 'EditBone' = None
    " \n\n    :type: 'EditBone'\n    "
    active_pose_bone: 'PoseBone' = None
    " \n\n    :type: 'PoseBone'\n    "
    active_object: 'Object' = None
    " \n\n    :type: 'Object'\n    "
    edit_object: 'Object' = None
    " \n\n    :type: 'Object'\n    "
    sculpt_object: 'Object' = None
    " \n\n    :type: 'Object'\n    "
    vertex_paint_object: 'Object' = None
    " \n\n    :type: 'Object'\n    "
    weight_paint_object: 'Object' = None
    " \n\n    :type: 'Object'\n    "
    image_paint_object: 'Object' = None
    " \n\n    :type: 'Object'\n    "
    particle_edit_object: 'Object' = None
    " \n\n    :type: 'Object'\n    "
    pose_object: 'Object' = None
    " \n\n    :type: 'Object'\n    "
    active_sequence_strip: 'Sequence' = None
    " \n\n    :type: 'Sequence'\n    "
    sequences: typing.Sequence['Sequence'] = None
    " \n\n    :type: typing.Sequence['Sequence']\n    "
    selected_sequences: typing.Sequence['Sequence'] = None
    " \n\n    :type: typing.Sequence['Sequence']\n    "
    selected_editable_sequences: typing.Sequence['Sequence'] = None
    " \n\n    :type: typing.Sequence['Sequence']\n    "
    active_nla_track: 'NlaTrack' = None
    " \n\n    :type: 'NlaTrack'\n    "
    active_nla_strip: 'NlaStrip' = None
    " \n\n    :type: 'NlaStrip'\n    "
    selected_nla_strips: typing.Sequence['NlaStrip'] = None
    " \n\n    :type: typing.Sequence['NlaStrip']\n    "
    selected_movieclip_tracks: typing.Sequence['MovieTrackingTrack'] = None
    " \n\n    :type: typing.Sequence['MovieTrackingTrack']\n    "
    gpencil_data: 'GreasePencil' = None
    " \n\n    :type: 'GreasePencil'\n    "
    gpencil_data_owner: 'ID' = None
    " \n\n    :type: 'ID'\n    "
    annotation_data: 'GreasePencil' = None
    " \n\n    :type: 'GreasePencil'\n    "
    annotation_data_owner: 'ID' = None
    " \n\n    :type: 'ID'\n    "
    visible_gpencil_layers: typing.Sequence['GPencilLayer'] = None
    " \n\n    :type: typing.Sequence['GPencilLayer']\n    "
    editable_gpencil_layers: typing.Sequence['GPencilLayer'] = None
    " \n\n    :type: typing.Sequence['GPencilLayer']\n    "
    editable_gpencil_strokes: typing.Sequence['GPencilStroke'] = None
    " \n\n    :type: typing.Sequence['GPencilStroke']\n    "
    active_gpencil_layer: typing.Sequence['GPencilLayer'] = None
    " \n\n    :type: typing.Sequence['GPencilLayer']\n    "
    active_gpencil_frame: typing.List = None
    ' \n\n    :type: typing.List\n    '
    active_annotation_layer: 'GPencilLayer' = None
    " \n\n    :type: 'GPencilLayer'\n    "
    active_operator: 'Operator' = None
    " \n\n    :type: 'Operator'\n    "
    active_action: 'Action' = None
    " \n\n    :type: 'Action'\n    "
    selected_visible_actions: typing.Sequence['Action'] = None
    " \n\n    :type: typing.Sequence['Action']\n    "
    selected_editable_actions: typing.Sequence['Action'] = None
    " \n\n    :type: typing.Sequence['Action']\n    "
    visible_fcurves: typing.Sequence['FCurve'] = None
    " \n\n    :type: typing.Sequence['FCurve']\n    "
    editable_fcurves: typing.Sequence['FCurve'] = None
    " \n\n    :type: typing.Sequence['FCurve']\n    "
    selected_visible_fcurves: typing.Sequence['FCurve'] = None
    " \n\n    :type: typing.Sequence['FCurve']\n    "
    selected_editable_fcurves: typing.Sequence['FCurve'] = None
    " \n\n    :type: typing.Sequence['FCurve']\n    "
    active_editable_fcurve: 'FCurve' = None
    " \n\n    :type: 'FCurve'\n    "
    selected_editable_keyframes: typing.Sequence['Keyframe'] = None
    " \n\n    :type: typing.Sequence['Keyframe']\n    "
    ui_list: 'UIList' = None
    " \n\n    :type: 'UIList'\n    "
    edit_text: 'Text' = None
    " \n\n    :type: 'Text'\n    "
    selected_ids: typing.Sequence['ID'] = None
    " \n\n    :type: typing.Sequence['ID']\n    "

    def evaluated_depsgraph_get(self) -> 'Depsgraph':
        """ Get the dependency graph for the current scene and view layer, to access to data-blocks with animation and modifiers applied. If any data-blocks have been edited, the dependency graph will be updated. This invalidates all references to evaluated data-blocks from the dependency graph.

        :rtype: 'Depsgraph'
        :return: Evaluated dependency graph
        """
        pass

    def copy(self):
        """ 

        """
        pass

    def path_resolve(self, path: str, coerce: typing.Optional[bool]=True):
        """ Returns the property from the path, raise an exception when not found.

        :param path: patch which this property resolves.
        :type path: str
        :param coerce: optional argument, when True, the property will be converted into its Python representation.
        :type coerce: typing.Optional[bool]
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def temp_override(self, window: 'Window', area: 'Area', region: 'Region', **keywords) -> 'bpy.context':
        """ Context manager to temporarily override members in the context. Overriding the context can be used to temporarily activate another ``window`` / ``area`` & ``region``, as well as other members such as the ``active_object`` or ``bone``. Notes: - When overriding window, area and regions: the arguments must be consistent, so any region argument that's passed in must be contained by the current area or the area passed in. The same goes for the area needing to be contained in the current window. - Temporary context overrides may be nested, when this is done, members will be added to the existing overrides. - Context members are restored outside the scope of the context-manager. The only exception to this is when the data is no longer available. In the event windowing data was removed (for example), the state of the context is left as-is. While this isn't likely to happen, explicit window operation such as closing windows or loading a new file remove the windowing data that was set before the temporary context was created. Overriding the context can be useful to set the context after loading files (which would otherwise by None). For example: This example shows how it's possible to add an object to the scene in another window.

        :param window: Window override or None.
        :type window: 'Window'
        :param area: Area override or None.
        :type area: 'Area'
        :param region: Region override or None.
        :type region: 'Region'
        :param keywords:  Additional keywords override context members.
        :type keywords: typing.Any
        :rtype: 'bpy.context'
        :return: The context manager .
        """
        pass

class CryptomatteEntry(bpy_struct):
    encoded_hash: float = None
    ' \n\n    :type: float\n    '
    name: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CurveMap(bpy_struct):
    """ Curve in a curve mapping
    """
    points: 'CurveMapPoints' = None
    " \n\n    :type: 'CurveMapPoints'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CurveMapPoint(bpy_struct):
    """ Point of a curve used for a curve mapping
    """
    handle_type: typing.Union[str, int] = None
    ' Curve interpolation at this point: Bezier or vector\n\n    :type: typing.Union[str, int]\n    '
    location: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " X/Y coordinates of the curve point\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    select: bool = None
    ' Selection state of the curve point\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CurveMapping(bpy_struct):
    """ Curve mapping to map color, vector and scalar values to other values using a user defined curve
    """
    black_level: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " For RGB curves, the color that black is mapped to\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    clip_max_x: float = None
    ' \n\n    :type: float\n    '
    clip_max_y: float = None
    ' \n\n    :type: float\n    '
    clip_min_x: float = None
    ' \n\n    :type: float\n    '
    clip_min_y: float = None
    ' \n\n    :type: float\n    '
    curves: bpy_prop_collection['CurveMap'] = None
    " \n\n    :type: bpy_prop_collection['CurveMap']\n    "
    extend: typing.Union[str, int] = None
    ' Extrapolate the curve or extend it horizontally\n\n    :type: typing.Union[str, int]\n    '
    tone: typing.Union[str, int] = None
    ' Tone of the curve\n\n    :type: typing.Union[str, int]\n    '
    use_clip: bool = None
    ' Force the curve view to fit a defined boundary\n\n    :type: bool\n    '
    white_level: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " For RGB curves, the color that white is mapped to\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "

    def update(self):
        """ Update curve mapping after making changes

        """
        pass

    def reset_view(self):
        """ Reset the curve mapping grid to its clipping size

        """
        pass

    def initialize(self):
        """ Initialize curve

        """
        pass

    def evaluate(self, curve: 'CurveMap', position: float) -> float:
        """ Evaluate curve at given location

        :param curve: curve, Curve to evaluate
        :type curve: 'CurveMap'
        :param position: Position, Position to evaluate curve at
        :type position: float
        :rtype: float
        :return: Value, Value of curve at given location
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CurvePaintSettings(bpy_struct):
    corner_angle: float = None
    ' Angles above this are considered corners\n\n    :type: float\n    '
    curve_type: typing.Union[str, int] = None
    ' Type of curve to use for new strokes\n\n    :type: typing.Union[str, int]\n    '
    depth_mode: typing.Union[str, int] = None
    ' Method of projecting depth\n\n    :type: typing.Union[str, int]\n    '
    error_threshold: int = None
    ' Allow deviation for a smoother, less precise line\n\n    :type: int\n    '
    fit_method: typing.Union[str, int] = None
    ' Curve fitting method\n\n    :type: typing.Union[str, int]\n    '
    radius_max: float = None
    " Radius to use when the maximum pressure is applied (or when a tablet isn't used)\n\n    :type: float\n    "
    radius_min: float = None
    ' Minimum radius when the minimum pressure is applied (also the minimum when tapering)\n\n    :type: float\n    '
    radius_taper_end: float = None
    ' Taper factor for the radius of each point along the curve\n\n    :type: float\n    '
    radius_taper_start: float = None
    ' Taper factor for the radius of each point along the curve\n\n    :type: float\n    '
    surface_offset: float = None
    ' Offset the stroke from the surface\n\n    :type: float\n    '
    surface_plane: typing.Union[str, int] = None
    ' Plane for projected stroke * ``NORMAL_VIEW`` Normal/View -- Display perpendicular to the surface. * ``NORMAL_SURFACE`` Normal/Surface -- Display aligned to the surface. * ``VIEW`` View -- Display aligned to the viewport.\n\n    :type: typing.Union[str, int]\n    '
    use_corners_detect: bool = None
    ' Detect corners and use non-aligned handles\n\n    :type: bool\n    '
    use_offset_absolute: bool = None
    " Apply a fixed offset (don't scale by the radius)\n\n    :type: bool\n    "
    use_pressure_radius: bool = None
    ' Map tablet pressure to curve radius\n\n    :type: bool\n    '
    use_stroke_endpoints: bool = None
    ' Use the start of the stroke for the depth\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CurvePoint(bpy_struct):
    """ Curve control point
    """
    index: int = None
    ' Index of this points\n\n    :type: int\n    '
    position: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    radius: float = None
    ' \n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CurveProfile(bpy_struct):
    """ Profile Path editor used to build a profile path
    """
    points: 'CurveProfilePoints' = None
    " Profile control points\n\n    :type: 'CurveProfilePoints'\n    "
    preset: typing.Union[str, int] = None
    ' * ``LINE`` Line -- Default. * ``SUPPORTS`` Support Loops -- Loops on each side of the profile. * ``CORNICE`` Cornice Molding. * ``CROWN`` Crown Molding. * ``STEPS`` Steps -- A number of steps defined by the segments.\n\n    :type: typing.Union[str, int]\n    '
    segments: bpy_prop_collection['CurveProfilePoint'] = None
    " Segments sampled from control points\n\n    :type: bpy_prop_collection['CurveProfilePoint']\n    "
    use_clip: bool = None
    ' Force the path view to fit a defined boundary\n\n    :type: bool\n    '
    use_sample_even_lengths: bool = None
    ' Sample edges with even lengths\n\n    :type: bool\n    '
    use_sample_straight_edges: bool = None
    ' Sample edges with vector handles\n\n    :type: bool\n    '

    def update(self):
        """ Refresh internal data, remove doubles and clip points

        """
        pass

    def reset_view(self):
        """ Reset the curve profile grid to its clipping size

        """
        pass

    def initialize(self, totsegments: int):
        """ Set the number of display segments and fill tables

        :param totsegments: The number of segment values to initialize the segments table with
        :type totsegments: int
        """
        pass

    def evaluate(self, length_portion: float) -> typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']:
        """ Evaluate the at the given portion of the path length

        :param length_portion: Length Portion, Portion of the path length to travel before evaluation
        :type length_portion: float
        :rtype: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']
        :return: Location, The location at the given portion of the profile
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CurveProfilePoint(bpy_struct):
    """ Point of a path used to define a profile
    """
    handle_type_1: typing.Union[str, int] = None
    ' Path interpolation at this point\n\n    :type: typing.Union[str, int]\n    '
    handle_type_2: typing.Union[str, int] = None
    ' Path interpolation at this point\n\n    :type: typing.Union[str, int]\n    '
    location: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " X/Y coordinates of the path point\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    select: bool = None
    ' Selection state of the path point\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CurveSlice(bpy_struct):
    """ A single curve from a curves data-block
    """
    first_point_index: int = None
    " The index of this curve's first control point\n\n    :type: int\n    "
    index: int = None
    ' Index of this curve\n\n    :type: int\n    '
    points: bpy_prop_collection['CurvePoint'] = None
    " Control points of the curve\n\n    :type: bpy_prop_collection['CurvePoint']\n    "
    points_length: int = None
    ' Number of control points in the curve\n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class DashGpencilModifierSegment(bpy_struct):
    """ Configuration for a single dash segment
    """
    dash: int = None
    ' The number of consecutive points from the original stroke to include in this segment\n\n    :type: int\n    '
    gap: int = None
    ' The number of points skipped after this segment\n\n    :type: int\n    '
    material_index: int = None
    ' Use this index on generated segment. -1 means using the existing material\n\n    :type: int\n    '
    name: str = None
    ' Name of the dash segment\n\n    :type: str\n    '
    opacity: float = None
    " The factor to apply to the original point's opacity for the new points\n\n    :type: float\n    "
    radius: float = None
    " The factor to apply to the original point's radius for the new points\n\n    :type: float\n    "
    use_cyclic: bool = None
    ' Enable cyclic on individual stroke dashes\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Depsgraph(bpy_struct):
    ids: bpy_prop_collection['ID'] = None
    " All evaluated data-blocks\n\n    :type: bpy_prop_collection['ID']\n    "
    mode: typing.Union[str, int] = None
    ' Evaluation mode * ``VIEWPORT`` Viewport -- Viewport non-rendered mode. * ``RENDER`` Render -- Render.\n\n    :type: typing.Union[str, int]\n    '
    object_instances: bpy_prop_collection['DepsgraphObjectInstance'] = None
    " All object instances to display or render (Warning: Only use this as an iterator, never as a sequence, and do not keep any references to its items)\n\n    :type: bpy_prop_collection['DepsgraphObjectInstance']\n    "
    objects: bpy_prop_collection['Object'] = None
    " Evaluated objects in the dependency graph\n\n    :type: bpy_prop_collection['Object']\n    "
    scene: 'Scene' = None
    " Original scene dependency graph is built for\n\n    :type: 'Scene'\n    "
    scene_eval: 'Scene' = None
    " Scene at its evaluated state\n\n    :type: 'Scene'\n    "
    updates: bpy_prop_collection['DepsgraphUpdate'] = None
    " Updates to data-blocks\n\n    :type: bpy_prop_collection['DepsgraphUpdate']\n    "
    view_layer: 'ViewLayer' = None
    " Original view layer dependency graph is built for\n\n    :type: 'ViewLayer'\n    "
    view_layer_eval: 'ViewLayer' = None
    " View layer at its evaluated state\n\n    :type: 'ViewLayer'\n    "

    def debug_relations_graphviz(self, filename: str):
        """ debug_relations_graphviz

        :param filename: File Name, Output path for the graphviz debug file
        :type filename: str
        """
        pass

    def debug_stats_gnuplot(self, filename: str, output_filename: str):
        """ debug_stats_gnuplot

        :param filename: File Name, Output path for the gnuplot debug file
        :type filename: str
        :param output_filename: Output File Name, File name where gnuplot script will save the result
        :type output_filename: str
        """
        pass

    def debug_tag_update(self):
        """ debug_tag_update

        """
        pass

    def debug_stats(self) -> str:
        """ Report the number of elements in the Dependency Graph

        :rtype: str
        :return: result
        """
        pass

    def update(self):
        """ Re-evaluate any modified data-blocks, for example for animation or modifiers. This invalidates all references to evaluated data-blocks from this dependency graph.

        """
        pass

    def id_eval_get(self, id: 'ID') -> 'ID':
        """ id_eval_get

        :param id: Original ID to get evaluated complementary part for
        :type id: 'ID'
        :rtype: 'ID'
        :return: Evaluated ID for the given original one
        """
        pass

    def id_type_updated(self, id_type: typing.Union[str, int]) -> bool:
        """ id_type_updated

        :param id_type: ID Type
        :type id_type: typing.Union[str, int]
        :rtype: bool
        :return: Updated, True if any datablock with this type was added, updated or removed
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class DepsgraphObjectInstance(bpy_struct):
    """ Extended information about dependency graph object iterator (Warning: All data here is 'evaluated' one, not original .blend IDs)
    """
    instance_object: 'Object' = None
    " Evaluated object which is being instanced by this iterator\n\n    :type: 'Object'\n    "
    is_instance: bool = None
    ' Denotes if the object is generated by another object\n\n    :type: bool\n    '
    matrix_world: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " Generated transform matrix in world space\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    object: 'Object' = None
    " Evaluated object the iterator points to\n\n    :type: 'Object'\n    "
    orco: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Generated coordinates in parent object space\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    parent: 'Object' = None
    " If the object is an instance, the parent object that generated it\n\n    :type: 'Object'\n    "
    particle_system: 'ParticleSystem' = None
    " Evaluated particle system that this object was instanced from\n\n    :type: 'ParticleSystem'\n    "
    persistent_id: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Persistent identifier for inter-frame matching of objects with motion blur\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    random_id: int = None
    ' Random id for this instance, typically for randomized shading\n\n    :type: int\n    '
    show_particles: bool = None
    ' Particles part of the object should be visible in the render\n\n    :type: bool\n    '
    show_self: bool = None
    ' The object geometry itself should be visible in the render\n\n    :type: bool\n    '
    uv: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " UV coordinates in parent object space\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class DepsgraphUpdate(bpy_struct):
    """ Information about ID that was updated
    """
    id: 'ID' = None
    " Updated data-block\n\n    :type: 'ID'\n    "
    is_updated_geometry: bool = None
    ' Object geometry is updated\n\n    :type: bool\n    '
    is_updated_shading: bool = None
    ' Object shading is updated\n\n    :type: bool\n    '
    is_updated_transform: bool = None
    ' Object transformation is updated\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class DisplaySafeAreas(bpy_struct):
    """ Safe areas used in 3D view and the sequencer
    """
    action: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Safe area for general elements\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    action_center: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Safe area for general elements in a different aspect ratio\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    title: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Safe area for text and graphics\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    title_center: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Safe area for text and graphics in a different aspect ratio\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class DopeSheet(bpy_struct):
    """ Settings for filtering the channels shown in animation editors
    """
    filter_collection: 'Collection' = None
    " Collection that included object should be a member of\n\n    :type: 'Collection'\n    "
    filter_fcurve_name: str = None
    ' F-Curve live filtering string\n\n    :type: str\n    '
    filter_text: str = None
    ' Live filtering string\n\n    :type: str\n    '
    show_armatures: bool = None
    ' Include visualization of armature related animation data\n\n    :type: bool\n    '
    show_cache_files: bool = None
    ' Include visualization of cache file related animation data\n\n    :type: bool\n    '
    show_cameras: bool = None
    ' Include visualization of camera related animation data\n\n    :type: bool\n    '
    show_curves: bool = None
    ' Include visualization of curve related animation data\n\n    :type: bool\n    '
    show_datablock_filters: bool = None
    ' Show options for whether channels related to certain types of data are included\n\n    :type: bool\n    '
    show_expanded_summary: bool = None
    ' Collapse summary when shown, so all other channels get hidden (Dope Sheet editors only)\n\n    :type: bool\n    '
    show_gpencil: bool = None
    ' Include visualization of Grease Pencil related animation data and frames\n\n    :type: bool\n    '
    show_hair_curves: bool = None
    ' Include visualization of hair related animation data\n\n    :type: bool\n    '
    show_hidden: bool = None
    ' Include channels from objects/bone that are not visible\n\n    :type: bool\n    '
    show_lattices: bool = None
    ' Include visualization of lattice related animation data\n\n    :type: bool\n    '
    show_lights: bool = None
    ' Include visualization of light related animation data\n\n    :type: bool\n    '
    show_linestyles: bool = None
    ' Include visualization of Line Style related Animation data\n\n    :type: bool\n    '
    show_materials: bool = None
    ' Include visualization of material related animation data\n\n    :type: bool\n    '
    show_meshes: bool = None
    ' Include visualization of mesh related animation data\n\n    :type: bool\n    '
    show_metaballs: bool = None
    ' Include visualization of metaball related animation data\n\n    :type: bool\n    '
    show_missing_nla: bool = None
    ' Include animation data-blocks with no NLA data (NLA editor only)\n\n    :type: bool\n    '
    show_modifiers: bool = None
    ' Include visualization of animation data related to data-blocks linked to modifiers\n\n    :type: bool\n    '
    show_movieclips: bool = None
    ' Include visualization of movie clip related animation data\n\n    :type: bool\n    '
    show_nodes: bool = None
    ' Include visualization of node related animation data\n\n    :type: bool\n    '
    show_only_errors: bool = None
    ' Only include F-Curves and drivers that are disabled or have errors\n\n    :type: bool\n    '
    show_only_selected: bool = None
    ' Only include channels relating to selected objects and data\n\n    :type: bool\n    '
    show_particles: bool = None
    ' Include visualization of particle related animation data\n\n    :type: bool\n    '
    show_pointclouds: bool = None
    ' Include visualization of point cloud related animation data\n\n    :type: bool\n    '
    show_scenes: bool = None
    ' Include visualization of scene related animation data\n\n    :type: bool\n    '
    show_shapekeys: bool = None
    ' Include visualization of shape key related animation data\n\n    :type: bool\n    '
    show_speakers: bool = None
    ' Include visualization of speaker related animation data\n\n    :type: bool\n    '
    show_summary: bool = None
    " Display an additional 'summary' line (Dope Sheet editors only)\n\n    :type: bool\n    "
    show_textures: bool = None
    ' Include visualization of texture related animation data\n\n    :type: bool\n    '
    show_transforms: bool = None
    ' Include visualization of object-level animation data (mostly transforms)\n\n    :type: bool\n    '
    show_volumes: bool = None
    ' Include visualization of volume related animation data\n\n    :type: bool\n    '
    show_worlds: bool = None
    ' Include visualization of world related animation data\n\n    :type: bool\n    '
    source: 'ID' = None
    " ID-Block representing source data, usually ID_SCE (i.e. Scene)\n\n    :type: 'ID'\n    "
    use_datablock_sort: bool = None
    ' Alphabetically sorts data-blocks - mainly objects in the scene (disable to increase viewport speed)\n\n    :type: bool\n    '
    use_filter_invert: bool = None
    ' Invert filter search\n\n    :type: bool\n    '
    use_multi_word_filter: bool = None
    ' Perform fuzzy/multi-word matching. Warning: May be slow\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Driver(bpy_struct):
    """ Driver for the value of a setting based on an external value
    """
    expression: str = None
    ' Expression to use for Scripted Expression\n\n    :type: str\n    '
    is_simple_expression: bool = None
    ' The scripted expression can be evaluated without using the full python interpreter\n\n    :type: bool\n    '
    is_valid: bool = None
    ' Driver could not be evaluated in past, so should be skipped\n\n    :type: bool\n    '
    type: typing.Union[str, int] = None
    ' Driver type\n\n    :type: typing.Union[str, int]\n    '
    use_self: bool = None
    " Include a 'self' variable in the name-space, so drivers can easily reference the data being modified (object, bone, etc...)\n\n    :type: bool\n    "
    variables: 'ChannelDriverVariables' = None
    " Properties acting as inputs for this driver\n\n    :type: 'ChannelDriverVariables'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class DriverTarget(bpy_struct):
    """ Source of input values for driver variables
    """
    bone_target: str = None
    ' Name of PoseBone to use as target\n\n    :type: str\n    '
    data_path: str = None
    ' RNA Path (from ID-block) to property used\n\n    :type: str\n    '
    id: 'ID' = None
    " ID-block that the specific property used can be found from (id_type property must be set first)\n\n    :type: 'ID'\n    "
    id_type: typing.Union[str, int] = None
    ' Type of ID-block that can be used\n\n    :type: typing.Union[str, int]\n    '
    rotation_mode: typing.Union[str, int] = None
    ' Mode for calculating rotation channel values\n\n    :type: typing.Union[str, int]\n    '
    transform_space: typing.Union[str, int] = None
    " Space in which transforms are used * ``WORLD_SPACE`` World Space -- Transforms include effects of parenting/restpose and constraints. * ``TRANSFORM_SPACE`` Transform Space -- Transforms don't include parenting/restpose or constraints. * ``LOCAL_SPACE`` Local Space -- Transforms include effects of constraints but not parenting/restpose.\n\n    :type: typing.Union[str, int]\n    "
    transform_type: typing.Union[str, int] = None
    ' Driver variable type\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class DriverVariable(bpy_struct):
    """ Variable from some source/target for driver relationship
    """
    is_name_valid: bool = None
    ' Is this a valid name for a driver variable\n\n    :type: bool\n    '
    name: str = None
    ' Name to use in scripted expressions/functions (no spaces or dots are allowed, and must start with a letter)\n\n    :type: str\n    '
    targets: bpy_prop_collection['DriverTarget'] = None
    " Sources of input data for evaluating this variable\n\n    :type: bpy_prop_collection['DriverTarget']\n    "
    type: typing.Union[str, int] = None
    ' Driver variable type * ``SINGLE_PROP`` Single Property -- Use the value from some RNA property. * ``TRANSFORMS`` Transform Channel -- Final transformation value of object or bone. * ``ROTATION_DIFF`` Rotational Difference -- Use the angle between two bones. * ``LOC_DIFF`` Distance -- Distance between two bones or objects.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class DynamicPaintBrushSettings(bpy_struct):
    """ Brush settings
    """
    invert_proximity: bool = None
    ' Proximity falloff is applied inside the volume\n\n    :type: bool\n    '
    paint_alpha: float = None
    ' Paint alpha\n\n    :type: float\n    '
    paint_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of the paint\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    paint_distance: float = None
    ' Maximum distance from brush to mesh surface to affect paint\n\n    :type: float\n    '
    paint_ramp: 'ColorRamp' = None
    " Color ramp used to define proximity falloff\n\n    :type: 'ColorRamp'\n    "
    paint_source: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    paint_wetness: float = None
    ' Paint wetness, visible in wetmap (some effects only affect wet paint)\n\n    :type: float\n    '
    particle_system: 'ParticleSystem' = None
    " The particle system to paint with\n\n    :type: 'ParticleSystem'\n    "
    proximity_falloff: typing.Union[str, int] = None
    ' Proximity falloff type\n\n    :type: typing.Union[str, int]\n    '
    ray_direction: typing.Union[str, int] = None
    " Ray direction to use for projection (if brush object is located in that direction it's painted)\n\n    :type: typing.Union[str, int]\n    "
    smooth_radius: float = None
    ' Smooth falloff added after solid radius\n\n    :type: float\n    '
    smudge_strength: float = None
    ' Smudge effect strength\n\n    :type: float\n    '
    solid_radius: float = None
    ' Radius that will be painted solid\n\n    :type: float\n    '
    use_absolute_alpha: bool = None
    ' Only increase alpha value if paint alpha is higher than existing\n\n    :type: bool\n    '
    use_negative_volume: bool = None
    ' Negate influence inside the volume\n\n    :type: bool\n    '
    use_paint_erase: bool = None
    ' Erase / remove paint instead of adding it\n\n    :type: bool\n    '
    use_particle_radius: bool = None
    ' Use radius from particle settings\n\n    :type: bool\n    '
    use_proximity_project: bool = None
    ' Brush is projected to canvas from defined direction within brush proximity\n\n    :type: bool\n    '
    use_proximity_ramp_alpha: bool = None
    ' Only read color ramp alpha\n\n    :type: bool\n    '
    use_smudge: bool = None
    ' Make this brush to smudge existing paint as it moves\n\n    :type: bool\n    '
    use_velocity_alpha: bool = None
    ' Multiply brush influence by velocity color ramp alpha\n\n    :type: bool\n    '
    use_velocity_color: bool = None
    ' Replace brush color by velocity color ramp\n\n    :type: bool\n    '
    use_velocity_depth: bool = None
    ' Multiply brush intersection depth (displace, waves) by velocity ramp alpha\n\n    :type: bool\n    '
    velocity_max: float = None
    ' Velocity considered as maximum influence (Blender units per frame)\n\n    :type: float\n    '
    velocity_ramp: 'ColorRamp' = None
    " Color ramp used to define brush velocity effect\n\n    :type: 'ColorRamp'\n    "
    wave_clamp: float = None
    ' Maximum level of surface intersection used to influence waves (use 0.0 to disable)\n\n    :type: float\n    '
    wave_factor: float = None
    ' Multiplier for wave influence of this brush\n\n    :type: float\n    '
    wave_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class DynamicPaintCanvasSettings(bpy_struct):
    """ Dynamic Paint canvas settings
    """
    canvas_surfaces: 'DynamicPaintSurfaces' = None
    " Paint surface list\n\n    :type: 'DynamicPaintSurfaces'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class DynamicPaintSurface(bpy_struct):
    """ A canvas surface layer
    """
    brush_collection: 'Collection' = None
    " Only use brush objects from this collection\n\n    :type: 'Collection'\n    "
    brush_influence_scale: float = None
    ' Adjust influence brush objects have on this surface\n\n    :type: float\n    '
    brush_radius_scale: float = None
    ' Adjust radius of proximity brushes or particles for this surface\n\n    :type: float\n    '
    color_dry_threshold: float = None
    ' The wetness level when colors start to shift to the background\n\n    :type: float\n    '
    color_spread_speed: float = None
    ' How fast colors get mixed within wet paint\n\n    :type: float\n    '
    depth_clamp: float = None
    ' Maximum level of depth intersection in object space (use 0.0 to disable)\n\n    :type: float\n    '
    displace_factor: float = None
    ' Strength of displace when applied to the mesh\n\n    :type: float\n    '
    displace_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    dissolve_speed: int = None
    ' Approximately in how many frames should dissolve happen\n\n    :type: int\n    '
    drip_acceleration: float = None
    ' How much surface acceleration affects dripping\n\n    :type: float\n    '
    drip_velocity: float = None
    ' How much surface velocity affects dripping\n\n    :type: float\n    '
    dry_speed: int = None
    ' Approximately in how many frames should drying happen\n\n    :type: int\n    '
    effect_ui: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    effector_weights: 'EffectorWeights' = None
    " \n\n    :type: 'EffectorWeights'\n    "
    frame_end: int = None
    ' Simulation end frame\n\n    :type: int\n    '
    frame_start: int = None
    ' Simulation start frame\n\n    :type: int\n    '
    frame_substeps: int = None
    ' Do extra frames between scene frames to ensure smooth motion\n\n    :type: int\n    '
    image_fileformat: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    image_output_path: str = None
    ' Directory to save the textures\n\n    :type: str\n    '
    image_resolution: int = None
    ' Output image resolution\n\n    :type: int\n    '
    init_color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Initial color of the surface\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    init_color_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    init_layername: str = None
    ' \n\n    :type: str\n    '
    init_texture: 'Texture' = None
    " \n\n    :type: 'Texture'\n    "
    is_active: bool = None
    ' Toggle whether surface is processed or ignored\n\n    :type: bool\n    '
    is_cache_user: bool = None
    ' \n\n    :type: bool\n    '
    name: str = None
    ' Surface name\n\n    :type: str\n    '
    output_name_a: str = None
    ' Name used to save output from this surface\n\n    :type: str\n    '
    output_name_b: str = None
    ' Name used to save output from this surface\n\n    :type: str\n    '
    point_cache: 'PointCache' = None
    " \n\n    :type: 'PointCache'\n    "
    shrink_speed: float = None
    ' How fast shrink effect moves on the canvas surface\n\n    :type: float\n    '
    spread_speed: float = None
    ' How fast spread effect moves on the canvas surface\n\n    :type: float\n    '
    surface_format: typing.Union[str, int] = None
    ' Surface Format\n\n    :type: typing.Union[str, int]\n    '
    surface_type: typing.Union[str, int] = None
    ' Surface Type\n\n    :type: typing.Union[str, int]\n    '
    use_antialiasing: bool = None
    ' Use 5x multisampling to smooth paint edges\n\n    :type: bool\n    '
    use_dissolve: bool = None
    ' Enable to make surface changes disappear over time\n\n    :type: bool\n    '
    use_dissolve_log: bool = None
    ' Use logarithmic dissolve (makes high values to fade faster than low values)\n\n    :type: bool\n    '
    use_drip: bool = None
    ' Process drip effect (drip wet paint to gravity direction)\n\n    :type: bool\n    '
    use_dry_log: bool = None
    ' Use logarithmic drying (makes high values to dry faster than low values)\n\n    :type: bool\n    '
    use_drying: bool = None
    ' Enable to make surface wetness dry over time\n\n    :type: bool\n    '
    use_incremental_displace: bool = None
    ' New displace is added cumulatively on top of existing\n\n    :type: bool\n    '
    use_output_a: bool = None
    ' Save this output layer\n\n    :type: bool\n    '
    use_output_b: bool = None
    ' Save this output layer\n\n    :type: bool\n    '
    use_premultiply: bool = None
    ' Multiply color by alpha (recommended for Blender input)\n\n    :type: bool\n    '
    use_shrink: bool = None
    ' Process shrink effect (shrink paint areas)\n\n    :type: bool\n    '
    use_spread: bool = None
    ' Process spread effect (spread wet paint around surface)\n\n    :type: bool\n    '
    use_wave_open_border: bool = None
    ' Pass waves through mesh edges\n\n    :type: bool\n    '
    uv_layer: str = None
    ' UV map name\n\n    :type: str\n    '
    wave_damping: float = None
    ' Wave damping factor\n\n    :type: float\n    '
    wave_smoothness: float = None
    ' Limit maximum steepness of wave slope between simulation points (use higher values for smoother waves at expense of reduced detail)\n\n    :type: float\n    '
    wave_speed: float = None
    ' Wave propagation speed\n\n    :type: float\n    '
    wave_spring: float = None
    ' Spring force that pulls water level back to zero\n\n    :type: float\n    '
    wave_timescale: float = None
    ' Wave time scaling factor\n\n    :type: float\n    '

    def output_exists(self, object: 'Object', index: int):
        """ Checks if surface output layer of given name exists

        :param object: 
        :type object: 'Object'
        :param index: Index
        :type index: int
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class EditBone(bpy_struct):
    """ Edit mode bone in an armature data-block
    """
    bbone_curveinx: float = None
    " X-axis handle offset for start of the B-Bone's curve, adjusts curvature\n\n    :type: float\n    "
    bbone_curveinz: float = None
    " Z-axis handle offset for start of the B-Bone's curve, adjusts curvature\n\n    :type: float\n    "
    bbone_curveoutx: float = None
    " X-axis handle offset for end of the B-Bone's curve, adjusts curvature\n\n    :type: float\n    "
    bbone_curveoutz: float = None
    " Z-axis handle offset for end of the B-Bone's curve, adjusts curvature\n\n    :type: float\n    "
    bbone_custom_handle_end: 'EditBone' = None
    " Bone that serves as the end handle for the B-Bone curve\n\n    :type: 'EditBone'\n    "
    bbone_custom_handle_start: 'EditBone' = None
    " Bone that serves as the start handle for the B-Bone curve\n\n    :type: 'EditBone'\n    "
    bbone_easein: float = None
    ' Length of first Bezier Handle (for B-Bones only)\n\n    :type: float\n    '
    bbone_easeout: float = None
    ' Length of second Bezier Handle (for B-Bones only)\n\n    :type: float\n    '
    bbone_handle_type_end: typing.Union[str, int] = None
    ' Selects how the end handle of the B-Bone is computed * ``AUTO`` Automatic -- Use connected parent and children to compute the handle. * ``ABSOLUTE`` Absolute -- Use the position of the specified bone to compute the handle. * ``RELATIVE`` Relative -- Use the offset of the specified bone from rest pose to compute the handle. * ``TANGENT`` Tangent -- Use the orientation of the specified bone to compute the handle, ignoring the location.\n\n    :type: typing.Union[str, int]\n    '
    bbone_handle_type_start: typing.Union[str, int] = None
    ' Selects how the start handle of the B-Bone is computed * ``AUTO`` Automatic -- Use connected parent and children to compute the handle. * ``ABSOLUTE`` Absolute -- Use the position of the specified bone to compute the handle. * ``RELATIVE`` Relative -- Use the offset of the specified bone from rest pose to compute the handle. * ``TANGENT`` Tangent -- Use the orientation of the specified bone to compute the handle, ignoring the location.\n\n    :type: typing.Union[str, int]\n    '
    bbone_handle_use_ease_end: bool = None
    " Multiply the B-Bone Ease Out channel by the local Y scale value of the end handle. This is done after the Scale Easing option and isn't affected by it\n\n    :type: bool\n    "
    bbone_handle_use_ease_start: bool = None
    " Multiply the B-Bone Ease In channel by the local Y scale value of the start handle. This is done after the Scale Easing option and isn't affected by it\n\n    :type: bool\n    "
    bbone_handle_use_scale_end: typing.List[bool] = None
    " Multiply B-Bone Scale Out channels by the local scale values of the end handle. This is done after the Scale Easing option and isn't affected by it\n\n    :type: typing.List[bool]\n    "
    bbone_handle_use_scale_start: typing.List[bool] = None
    " Multiply B-Bone Scale In channels by the local scale values of the start handle. This is done after the Scale Easing option and isn't affected by it\n\n    :type: typing.List[bool]\n    "
    bbone_rollin: float = None
    ' Roll offset for the start of the B-Bone, adjusts twist\n\n    :type: float\n    '
    bbone_rollout: float = None
    ' Roll offset for the end of the B-Bone, adjusts twist\n\n    :type: float\n    '
    bbone_scalein: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Scale factors for the start of the B-Bone, adjusts thickness (for tapering effects)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    bbone_scaleout: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Scale factors for the end of the B-Bone, adjusts thickness (for tapering effects)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    bbone_segments: int = None
    ' Number of subdivisions of bone (for B-Bones only)\n\n    :type: int\n    '
    bbone_x: float = None
    ' B-Bone X size\n\n    :type: float\n    '
    bbone_z: float = None
    ' B-Bone Z size\n\n    :type: float\n    '
    envelope_distance: float = None
    ' Bone deformation distance (for Envelope deform only)\n\n    :type: float\n    '
    envelope_weight: float = None
    ' Bone deformation weight (for Envelope deform only)\n\n    :type: float\n    '
    head: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Location of head end of the bone\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    head_radius: float = None
    ' Radius of head of bone (for Envelope deform only)\n\n    :type: float\n    '
    hide: bool = None
    ' Bone is not visible when in Edit Mode\n\n    :type: bool\n    '
    hide_select: bool = None
    ' Bone is able to be selected\n\n    :type: bool\n    '
    inherit_scale: typing.Union[str, int] = None
    ' Specifies how the bone inherits scaling from the parent bone * ``FULL`` Full -- Inherit all effects of parent scaling. * ``FIX_SHEAR`` Fix Shear -- Inherit scaling, but remove shearing of the child in the rest orientation. * ``ALIGNED`` Aligned -- Rotate non-uniform parent scaling to align with the child, applying parent X scale to child X axis, and so forth. * ``AVERAGE`` Average -- Inherit uniform scaling representing the overall change in the volume of the parent. * ``NONE`` None -- Completely ignore parent scaling. * ``NONE_LEGACY`` None (Legacy) -- Ignore parent scaling without compensating for parent shear. Replicates the effect of disabling the original Inherit Scale checkbox.\n\n    :type: typing.Union[str, int]\n    '
    layers: typing.List[bool] = None
    ' Layers bone exists in\n\n    :type: typing.List[bool]\n    '
    length: float = None
    ' Length of the bone. Changing moves the tail end\n\n    :type: float\n    '
    lock: bool = None
    ' Bone is not able to be transformed when in Edit Mode\n\n    :type: bool\n    '
    matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " Matrix combining location and rotation of the bone (head position, direction and roll), in armature space (does not include/support bone's length/size)\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    name: str = None
    ' \n\n    :type: str\n    '
    parent: 'EditBone' = None
    " Parent edit bone (in same Armature)\n\n    :type: 'EditBone'\n    "
    roll: float = None
    ' Bone rotation around head-tail axis\n\n    :type: float\n    '
    select: bool = None
    ' \n\n    :type: bool\n    '
    select_head: bool = None
    ' \n\n    :type: bool\n    '
    select_tail: bool = None
    ' \n\n    :type: bool\n    '
    show_wire: bool = None
    ' Bone is always displayed in wireframe regardless of viewport shading mode (useful for non-obstructive custom bone shapes)\n\n    :type: bool\n    '
    tail: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Location of tail end of the bone\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    tail_radius: float = None
    ' Radius of tail of bone (for Envelope deform only)\n\n    :type: float\n    '
    use_connect: bool = None
    " When bone has a parent, bone's head is stuck to the parent's tail\n\n    :type: bool\n    "
    use_cyclic_offset: bool = None
    " When bone doesn't have a parent, it receives cyclic offset effects (Deprecated)\n\n    :type: bool\n    "
    use_deform: bool = None
    ' Enable Bone to deform geometry\n\n    :type: bool\n    '
    use_endroll_as_inroll: bool = None
    ' Add Roll Out of the Start Handle bone to the Roll In value\n\n    :type: bool\n    '
    use_envelope_multiply: bool = None
    ' When deforming bone, multiply effects of Vertex Group weights with Envelope influence\n\n    :type: bool\n    '
    use_inherit_rotation: bool = None
    ' Bone inherits rotation or scale from parent bone\n\n    :type: bool\n    '
    use_inherit_scale: bool = None
    ' DEPRECATED: Bone inherits scaling from parent bone\n\n    :type: bool\n    '
    use_local_location: bool = None
    ' Bone location is set in local space\n\n    :type: bool\n    '
    use_relative_parent: bool = None
    ' Object children will use relative transform, like deform\n\n    :type: bool\n    '
    use_scale_easing: bool = None
    ' Multiply the final easing values by the Scale In/Out Y factors\n\n    :type: bool\n    '
    basename = None
    " The name of this bone before any '.' character (readonly)"
    center = None
    ' The midpoint between the head and the tail. (readonly)'
    children = None
    ' A list of all the bones children. .. note:: Takes ``O(len(bones))`` time. (readonly)'
    children_recursive = None
    ' A list of all children from this bone. .. note:: Takes ``O(len(bones)**2)`` time. (readonly)'
    children_recursive_basename = None
    ' Returns a chain of children with the same base name as this bone. Only direct chains are supported, forks caused by multiple children with matching base names will terminate the function and not be returned. (readonly)'
    parent_recursive = None
    ' A list of parents, starting with the immediate parent (readonly)'
    vector = None
    ' The direction this bone is pointing. Utility function for (tail - head) (readonly)'
    x_axis = None
    ' Vector pointing down the x-axis of the bone. (readonly)'
    y_axis = None
    ' Vector pointing down the y-axis of the bone. (readonly)'
    z_axis = None
    ' Vector pointing down the z-axis of the bone. (readonly)'

    def align_roll(self, vector: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']):
        """ Align the bone to a local-space roll so the Z axis points in the direction of the vector given

        :param vector: Vector
        :type vector: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']
        """
        pass

    def align_orientation(self, other):
        """ Align this bone to another by moving its tail and settings its roll the length of the other bone is not used.

        """
        pass

    def parent_index(self, parent_test):
        """ The same as 'bone in other_bone.parent_recursive' but saved generating a list.

        """
        pass

    def transform(self, matrix: typing.Union[typing.Sequence[float], 'mathutils.Matrix'], *, scale: bool=True, roll: bool=True):
        """ Transform the the bones head, tail, roll and envelope (when the matrix has a scale component).

        :param matrix: 3x3 or 4x4 transformation matrix.
        :type matrix: typing.Union[typing.Sequence[float], 'mathutils.Matrix']
        :param scale: Scale the bone envelope by the matrix.
        :type scale: bool
        :param roll: Correct the roll to point in the same relative direction to the head and tail.
        :type roll: bool
        """
        pass

    def translate(self, vec):
        """ Utility function to add *vec* to the head and tail of this bone

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class EffectorWeights(bpy_struct):
    """ Effector weights for physics simulation
    """
    all: float = None
    " All effector's weight\n\n    :type: float\n    "
    apply_to_hair_growing: bool = None
    ' Use force fields when growing hair\n\n    :type: bool\n    '
    boid: float = None
    ' Boid effector weight\n\n    :type: float\n    '
    charge: float = None
    ' Charge effector weight\n\n    :type: float\n    '
    collection: 'Collection' = None
    " Limit effectors to this collection\n\n    :type: 'Collection'\n    "
    curve_guide: float = None
    ' Curve guide effector weight\n\n    :type: float\n    '
    drag: float = None
    ' Drag effector weight\n\n    :type: float\n    '
    force: float = None
    ' Force effector weight\n\n    :type: float\n    '
    gravity: float = None
    ' Global gravity weight\n\n    :type: float\n    '
    harmonic: float = None
    ' Harmonic effector weight\n\n    :type: float\n    '
    lennardjones: float = None
    ' Lennard-Jones effector weight\n\n    :type: float\n    '
    magnetic: float = None
    ' Magnetic effector weight\n\n    :type: float\n    '
    smokeflow: float = None
    ' Fluid Flow effector weight\n\n    :type: float\n    '
    texture: float = None
    ' Texture effector weight\n\n    :type: float\n    '
    turbulence: float = None
    ' Turbulence effector weight\n\n    :type: float\n    '
    vortex: float = None
    ' Vortex effector weight\n\n    :type: float\n    '
    wind: float = None
    ' Wind effector weight\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class EnumPropertyItem(bpy_struct):
    """ Definition of a choice in an RNA enum property
    """
    description: str = None
    " Description of the item's purpose\n\n    :type: str\n    "
    icon: typing.Union[str, int] = None
    ' Icon of the item\n\n    :type: typing.Union[str, int]\n    '
    identifier: str = None
    ' Unique name used in the code and scripting\n\n    :type: str\n    '
    name: str = None
    ' Human readable name\n\n    :type: str\n    '
    value: int = None
    ' Value of the item\n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Event(bpy_struct):
    """ Window Manager Event
    """
    alt: bool = None
    ' True when the Alt/Option key is held\n\n    :type: bool\n    '
    ascii: str = None
    ' Single ASCII character for this event\n\n    :type: str\n    '
    ctrl: bool = None
    ' True when the Ctrl key is held\n\n    :type: bool\n    '
    direction: typing.Union[str, int] = None
    ' The direction (only applies to drag events)\n\n    :type: typing.Union[str, int]\n    '
    is_mouse_absolute: bool = None
    ' The last motion event was an absolute input\n\n    :type: bool\n    '
    is_repeat: bool = None
    ' The event is generated by holding a key down\n\n    :type: bool\n    '
    is_tablet: bool = None
    ' The event has tablet data\n\n    :type: bool\n    '
    mouse_prev_press_x: int = None
    ' The window relative horizontal location of the last press event\n\n    :type: int\n    '
    mouse_prev_press_y: int = None
    ' The window relative vertical location of the last press event\n\n    :type: int\n    '
    mouse_prev_x: int = None
    ' The window relative horizontal location of the mouse\n\n    :type: int\n    '
    mouse_prev_y: int = None
    ' The window relative vertical location of the mouse\n\n    :type: int\n    '
    mouse_region_x: int = None
    ' The region relative horizontal location of the mouse\n\n    :type: int\n    '
    mouse_region_y: int = None
    ' The region relative vertical location of the mouse\n\n    :type: int\n    '
    mouse_x: int = None
    ' The window relative horizontal location of the mouse\n\n    :type: int\n    '
    mouse_y: int = None
    ' The window relative vertical location of the mouse\n\n    :type: int\n    '
    oskey: bool = None
    ' True when the Cmd key is held\n\n    :type: bool\n    '
    pressure: float = None
    ' The pressure of the tablet or 1.0 if no tablet present\n\n    :type: float\n    '
    shift: bool = None
    ' True when the Shift key is held\n\n    :type: bool\n    '
    tilt: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " The pressure of the tablet or zeroes if no tablet present\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    type_prev: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    unicode: str = None
    ' Single unicode character for this event\n\n    :type: str\n    '
    value: typing.Union[str, int] = None
    ' The type of event, only applies to some\n\n    :type: typing.Union[str, int]\n    '
    value_prev: typing.Union[str, int] = None
    ' The type of event, only applies to some\n\n    :type: typing.Union[str, int]\n    '
    xr: 'XrEventData' = None
    " XR event data\n\n    :type: 'XrEventData'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FCurve(bpy_struct):
    """ F-Curve defining values of a period of time
    """
    array_index: int = None
    ' Index to the specific property affected by F-Curve if applicable\n\n    :type: int\n    '
    auto_smoothing: typing.Union[str, int] = None
    ' Algorithm used to compute automatic handles\n\n    :type: typing.Union[str, int]\n    '
    color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of the F-Curve in the Graph Editor\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    color_mode: typing.Union[str, int] = None
    " Method used to determine color of F-Curve in Graph Editor * ``AUTO_RAINBOW`` Auto Rainbow -- Cycle through the rainbow, trying to give each curve a unique color. * ``AUTO_RGB`` Auto XYZ to RGB -- Use axis colors for transform and color properties, and auto-rainbow for the rest. * ``AUTO_YRGB`` Auto WXYZ to YRGB -- Use axis colors for XYZ parts of transform, and yellow for the 'W' channel. * ``CUSTOM`` User Defined -- Use custom hand-picked color for F-Curve.\n\n    :type: typing.Union[str, int]\n    "
    data_path: str = None
    ' RNA Path to property affected by F-Curve\n\n    :type: str\n    '
    driver: 'Driver' = None
    " Channel Driver (only set for Driver F-Curves)\n\n    :type: 'Driver'\n    "
    extrapolation: typing.Union[str, int] = None
    ' Method used for evaluating value of F-Curve outside first and last keyframes * ``CONSTANT`` Constant -- Hold values of endpoint keyframes. * ``LINEAR`` Linear -- Use slope of curve leading in/out of endpoint keyframes.\n\n    :type: typing.Union[str, int]\n    '
    group: 'ActionGroup' = None
    " Action Group that this F-Curve belongs to\n\n    :type: 'ActionGroup'\n    "
    hide: bool = None
    ' F-Curve and its keyframes are hidden in the Graph Editor graphs\n\n    :type: bool\n    '
    is_empty: bool = None
    ' True if the curve contributes no animation due to lack of keyframes or useful modifiers, and should be deleted\n\n    :type: bool\n    '
    is_valid: bool = None
    ' False when F-Curve could not be evaluated in past, so should be skipped when evaluating\n\n    :type: bool\n    '
    keyframe_points: 'FCurveKeyframePoints' = None
    " User-editable keyframes\n\n    :type: 'FCurveKeyframePoints'\n    "
    lock: bool = None
    " F-Curve's settings cannot be edited\n\n    :type: bool\n    "
    modifiers: 'FCurveModifiers' = None
    " Modifiers affecting the shape of the F-Curve\n\n    :type: 'FCurveModifiers'\n    "
    mute: bool = None
    ' Disable F-Curve evaluation\n\n    :type: bool\n    '
    sampled_points: bpy_prop_collection['FCurveSample'] = None
    " Sampled animation data\n\n    :type: bpy_prop_collection['FCurveSample']\n    "
    select: bool = None
    ' F-Curve is selected for editing\n\n    :type: bool\n    '

    def evaluate(self, frame: float) -> float:
        """ Evaluate F-Curve

        :param frame: Frame, Evaluate F-Curve at given frame
        :type frame: float
        :rtype: float
        :return: Value, Value of F-Curve specific frame
        """
        pass

    def update(self):
        """ Ensure keyframes are sorted in chronological order and handles are set correctly

        """
        pass

    def range(self) -> typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']:
        """ Get the time extents for F-Curve

        :rtype: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']
        :return: Range, Min/Max values
        """
        pass

    def update_autoflags(self, data: 'AnyType'):
        """ Update FCurve flags set automatically from affected property (currently, integer/discrete flags set when the property is not a float)

        :param data: Data, Data containing the property controlled by given FCurve
        :type data: 'AnyType'
        """
        pass

    def convert_to_samples(self, start: int, end: int):
        """ Convert current FCurve from keyframes to sample points, if necessary

        :param start: Start Frame
        :type start: int
        :param end: End Frame
        :type end: int
        """
        pass

    def convert_to_keyframes(self, start: int, end: int):
        """ Convert current FCurve from sample points to keyframes (linear interpolation), if necessary

        :param start: Start Frame
        :type start: int
        :param end: End Frame
        :type end: int
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FCurveSample(bpy_struct):
    """ Sample point for F-Curve
    """
    co: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Point coordinates\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    select: bool = None
    ' Selection status\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FFmpegSettings(bpy_struct):
    """ FFmpeg related settings for the scene
    """
    audio_bitrate: int = None
    ' Audio bitrate (kb/s)\n\n    :type: int\n    '
    audio_channels: typing.Union[str, int] = None
    ' Audio channel count * ``MONO`` Mono -- Set audio channels to mono. * ``STEREO`` Stereo -- Set audio channels to stereo. * ``SURROUND4`` 4 Channels -- Set audio channels to 4 channels. * ``SURROUND51`` 5.1 Surround -- Set audio channels to 5.1 surround sound. * ``SURROUND71`` 7.1 Surround -- Set audio channels to 7.1 surround sound.\n\n    :type: typing.Union[str, int]\n    '
    audio_codec: typing.Union[str, int] = None
    ' FFmpeg audio codec to use * ``NONE`` No Audio -- Disables audio output, for video-only renders. * ``AAC`` AAC. * ``AC3`` AC3. * ``FLAC`` FLAC. * ``MP2`` MP2. * ``MP3`` MP3. * ``OPUS`` Opus. * ``PCM`` PCM. * ``VORBIS`` Vorbis.\n\n    :type: typing.Union[str, int]\n    '
    audio_mixrate: int = None
    ' Audio samplerate(samples/s)\n\n    :type: int\n    '
    audio_volume: float = None
    ' Audio volume\n\n    :type: float\n    '
    buffersize: int = None
    ' Rate control: buffer size (kb)\n\n    :type: int\n    '
    codec: typing.Union[str, int] = None
    ' FFmpeg codec to use for video output * ``NONE`` No Video -- Disables video output, for audio-only renders. * ``DNXHD`` DNxHD. * ``DV`` DV. * ``FFV1`` FFmpeg video codec #1. * ``FLASH`` Flash Video. * ``H264`` H.264. * ``HUFFYUV`` HuffYUV. * ``MPEG1`` MPEG-1. * ``MPEG2`` MPEG-2. * ``MPEG4`` MPEG-4 (divx). * ``PNG`` PNG. * ``QTRLE`` QT rle / QT Animation. * ``THEORA`` Theora. * ``WEBM`` WebM / VP9. * ``AV1`` AV1.\n\n    :type: typing.Union[str, int]\n    '
    constant_rate_factor: typing.Union[str, int] = None
    ' Constant Rate Factor (CRF); tradeoff between video quality and file size * ``NONE`` Constant Bitrate -- Configure constant bit rate, rather than constant output quality. * ``LOSSLESS`` Lossless. * ``PERC_LOSSLESS`` Perceptually Lossless. * ``HIGH`` High Quality. * ``MEDIUM`` Medium Quality. * ``LOW`` Low Quality. * ``VERYLOW`` Very Low Quality. * ``LOWEST`` Lowest Quality.\n\n    :type: typing.Union[str, int]\n    '
    ffmpeg_preset: typing.Union[str, int] = None
    ' Tradeoff between encoding speed and compression ratio * ``BEST`` Slowest -- Recommended if you have lots of time and want the best compression efficiency. * ``GOOD`` Good -- The default and recommended for most applications. * ``REALTIME`` Realtime -- Recommended for fast encoding.\n\n    :type: typing.Union[str, int]\n    '
    format: typing.Union[str, int] = None
    ' Output file container\n\n    :type: typing.Union[str, int]\n    '
    gopsize: int = None
    ' Distance between key frames, also known as GOP size; influences file size and seekability\n\n    :type: int\n    '
    max_b_frames: int = None
    ' Maximum number of B-frames between non-B-frames; influences file size and seekability\n\n    :type: int\n    '
    maxrate: int = None
    ' Rate control: max rate (kbit/s)\n\n    :type: int\n    '
    minrate: int = None
    ' Rate control: min rate (kbit/s)\n\n    :type: int\n    '
    muxrate: int = None
    ' Mux rate (bits/second)\n\n    :type: int\n    '
    packetsize: int = None
    ' Mux packet size (byte)\n\n    :type: int\n    '
    use_autosplit: bool = None
    ' Autosplit output at 2GB boundary\n\n    :type: bool\n    '
    use_lossless_output: bool = None
    ' Use lossless output for video streams\n\n    :type: bool\n    '
    use_max_b_frames: bool = None
    ' Set a maximum number of B-frames\n\n    :type: bool\n    '
    video_bitrate: int = None
    ' Video bitrate (kbit/s)\n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FModifier(bpy_struct):
    """ Modifier for values of F-Curve
    """
    active: bool = None
    ' F-Curve modifier will show settings in the editor\n\n    :type: bool\n    '
    blend_in: float = None
    ' Number of frames from start frame for influence to take effect\n\n    :type: float\n    '
    blend_out: float = None
    ' Number of frames from end frame for influence to fade out\n\n    :type: float\n    '
    frame_end: float = None
    " Frame that modifier's influence ends (if Restrict Frame Range is in use)\n\n    :type: float\n    "
    frame_start: float = None
    " Frame that modifier's influence starts (if Restrict Frame Range is in use)\n\n    :type: float\n    "
    influence: float = None
    ' Amount of influence F-Curve Modifier will have when not fading in/out\n\n    :type: float\n    '
    is_valid: bool = None
    ' F-Curve Modifier has invalid settings and will not be evaluated\n\n    :type: bool\n    '
    mute: bool = None
    ' Enable F-Curve modifier evaluation\n\n    :type: bool\n    '
    show_expanded: bool = None
    " F-Curve Modifier's panel is expanded in UI\n\n    :type: bool\n    "
    type: typing.Union[str, int] = None
    ' F-Curve Modifier Type\n\n    :type: typing.Union[str, int]\n    '
    use_influence: bool = None
    " F-Curve Modifier's effects will be tempered by a default factor\n\n    :type: bool\n    "
    use_restricted_range: bool = None
    ' F-Curve Modifier is only applied for the specified frame range to help mask off effects in order to chain them\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FModifierEnvelopeControlPoint(bpy_struct):
    """ Control point for envelope F-Modifier
    """
    frame: float = None
    ' Frame this control-point occurs on\n\n    :type: float\n    '
    max: float = None
    ' Upper bound of envelope at this control-point\n\n    :type: float\n    '
    min: float = None
    ' Lower bound of envelope at this control-point\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FaceMap(bpy_struct):
    """ Group of faces, each face can only be part of one map
    """
    index: int = None
    ' Index number of the face map\n\n    :type: int\n    '
    name: str = None
    ' Face map name\n\n    :type: str\n    '
    select: bool = None
    ' Face map selection state (for tools to use)\n\n    :type: bool\n    '

    def add(self, index: typing.Union[bpy_prop_array[int], typing.Sequence[int]]):
        """ Add faces to the face-map

        :param index: List of indices
        :type index: typing.Union[bpy_prop_array[int], typing.Sequence[int]]
        """
        pass

    def remove(self, index: typing.Union[bpy_prop_array[int], typing.Sequence[int]]):
        """ Remove faces from the face-map

        :param index: List of indices
        :type index: typing.Union[bpy_prop_array[int], typing.Sequence[int]]
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FieldSettings(bpy_struct):
    """ Field settings for an object in physics simulation
    """
    apply_to_location: bool = None
    " Affect particle's location\n\n    :type: bool\n    "
    apply_to_rotation: bool = None
    " Affect particle's dynamic rotation\n\n    :type: bool\n    "
    distance_max: float = None
    ' Maximum distance for the field to work\n\n    :type: float\n    '
    distance_min: float = None
    " Minimum distance for the field's fall-off\n\n    :type: float\n    "
    falloff_power: float = None
    ' How quickly strength falls off with distance from the force field\n\n    :type: float\n    '
    falloff_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    flow: float = None
    ' Convert effector force into air flow velocity\n\n    :type: float\n    '
    guide_clump_amount: float = None
    ' Amount of clumping\n\n    :type: float\n    '
    guide_clump_shape: float = None
    ' Shape of clumping\n\n    :type: float\n    '
    guide_free: float = None
    " Guide-free time from particle life's end\n\n    :type: float\n    "
    guide_kink_amplitude: float = None
    ' The amplitude of the offset\n\n    :type: float\n    '
    guide_kink_axis: typing.Union[str, int] = None
    ' Which axis to use for offset\n\n    :type: typing.Union[str, int]\n    '
    guide_kink_frequency: float = None
    ' The frequency of the offset (1/total length)\n\n    :type: float\n    '
    guide_kink_shape: float = None
    ' Adjust the offset to the beginning/end\n\n    :type: float\n    '
    guide_kink_type: typing.Union[str, int] = None
    ' Type of periodic offset on the curve\n\n    :type: typing.Union[str, int]\n    '
    guide_minimum: float = None
    ' The distance from which particles are affected fully\n\n    :type: float\n    '
    harmonic_damping: float = None
    ' Damping of the harmonic force\n\n    :type: float\n    '
    inflow: float = None
    ' Inwards component of the vortex force\n\n    :type: float\n    '
    linear_drag: float = None
    ' Drag component proportional to velocity\n\n    :type: float\n    '
    noise: float = None
    ' Amount of noise for the force strength\n\n    :type: float\n    '
    quadratic_drag: float = None
    ' Drag component proportional to the square of velocity\n\n    :type: float\n    '
    radial_falloff: float = None
    ' Radial falloff power (real gravitational falloff = 2)\n\n    :type: float\n    '
    radial_max: float = None
    ' Maximum radial distance for the field to work\n\n    :type: float\n    '
    radial_min: float = None
    " Minimum radial distance for the field's fall-off\n\n    :type: float\n    "
    rest_length: float = None
    ' Rest length of the harmonic force\n\n    :type: float\n    '
    seed: int = None
    ' Seed of the noise\n\n    :type: int\n    '
    shape: typing.Union[str, int] = None
    ' Which direction is used to calculate the effector force * ``POINT`` Point -- Field originates from the object center. * ``LINE`` Line -- Field originates from the local Z axis of the object. * ``PLANE`` Plane -- Field originates from the local XY plane of the object. * ``SURFACE`` Surface -- Field originates from the surface of the object. * ``POINTS`` Every Point -- Field originates from all of the vertices of the object.\n\n    :type: typing.Union[str, int]\n    '
    size: float = None
    ' Size of the turbulence\n\n    :type: float\n    '
    source_object: 'Object' = None
    " Select domain object of the smoke simulation\n\n    :type: 'Object'\n    "
    strength: float = None
    ' Strength of force field\n\n    :type: float\n    '
    texture: 'Texture' = None
    " Texture to use as force\n\n    :type: 'Texture'\n    "
    texture_mode: typing.Union[str, int] = None
    ' How the texture effect is calculated (RGB and Curl need a RGB texture, else Gradient will be used instead)\n\n    :type: typing.Union[str, int]\n    '
    texture_nabla: float = None
    ' Defines size of derivative offset used for calculating gradient and curl\n\n    :type: float\n    '
    type: typing.Union[str, int] = None
    " Type of field * ``NONE`` None. * ``BOID`` Boid -- Create a force that acts as a boid's predators or target. * ``CHARGE`` Charge -- Spherical forcefield based on the charge of particles, only influences other charge force fields. * ``GUIDE`` Curve Guide -- Create a force along a curve object. * ``DRAG`` Drag -- Create a force that dampens motion. * ``FLUID_FLOW`` Fluid Flow -- Create a force based on fluid simulation velocities. * ``FORCE`` Force -- Radial field toward the center of object. * ``HARMONIC`` Harmonic -- The source of this force field is the zero point of a harmonic oscillator. * ``LENNARDJ`` Lennard-Jones -- Forcefield based on the Lennard-Jones potential. * ``MAGNET`` Magnetic -- Forcefield depends on the speed of the particles. * ``TEXTURE`` Texture -- Force field based on a texture. * ``TURBULENCE`` Turbulence -- Create turbulence with a noise field. * ``VORTEX`` Vortex -- Spiraling force that twists the force object's local Z axis. * ``WIND`` Wind -- Constant force along the force object's local Z axis.\n\n    :type: typing.Union[str, int]\n    "
    use_2d_force: bool = None
    ' Apply force only in 2D\n\n    :type: bool\n    '
    use_absorption: bool = None
    ' Force gets absorbed by collision objects\n\n    :type: bool\n    '
    use_global_coords: bool = None
    ' Use effector/global coordinates for turbulence\n\n    :type: bool\n    '
    use_gravity_falloff: bool = None
    ' Multiply force by 1/distance²\n\n    :type: bool\n    '
    use_guide_path_add: bool = None
    ' Based on distance/falloff it adds a portion of the entire path\n\n    :type: bool\n    '
    use_guide_path_weight: bool = None
    ' Use curve weights to influence the particle influence along the curve\n\n    :type: bool\n    '
    use_max_distance: bool = None
    ' Use a maximum distance for the field to work\n\n    :type: bool\n    '
    use_min_distance: bool = None
    " Use a minimum distance for the field's fall-off\n\n    :type: bool\n    "
    use_multiple_springs: bool = None
    ' Every point is effected by multiple springs\n\n    :type: bool\n    '
    use_object_coords: bool = None
    ' Use object/global coordinates for texture\n\n    :type: bool\n    '
    use_radial_max: bool = None
    ' Use a maximum radial distance for the field to work\n\n    :type: bool\n    '
    use_radial_min: bool = None
    " Use a minimum radial distance for the field's fall-off\n\n    :type: bool\n    "
    use_root_coords: bool = None
    ' Texture coordinates from root particle locations\n\n    :type: bool\n    '
    use_smoke_density: bool = None
    ' Adjust force strength based on smoke density\n\n    :type: bool\n    '
    wind_factor: float = None
    ' How much the force is reduced when acting parallel to a surface, e.g. cloth\n\n    :type: float\n    '
    z_direction: typing.Union[str, int] = None
    ' Effect in full or only positive/negative Z direction\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FileAssetSelectIDFilter(bpy_struct):
    """ Which asset types to show/hide, when browsing an asset library
    """
    experimental_filter_armature: bool = None
    ' Show Armature data-blocks\n\n    :type: bool\n    '
    experimental_filter_brush: bool = None
    ' Show Brushes data-blocks\n\n    :type: bool\n    '
    experimental_filter_cachefile: bool = None
    ' Show Cache File data-blocks\n\n    :type: bool\n    '
    experimental_filter_camera: bool = None
    ' Show Camera data-blocks\n\n    :type: bool\n    '
    experimental_filter_curve: bool = None
    ' Show Curve data-blocks\n\n    :type: bool\n    '
    experimental_filter_curves: bool = None
    ' Show/hide Curves data-blocks\n\n    :type: bool\n    '
    experimental_filter_font: bool = None
    ' Show Font data-blocks\n\n    :type: bool\n    '
    experimental_filter_grease_pencil: bool = None
    ' Show Grease pencil data-blocks\n\n    :type: bool\n    '
    experimental_filter_image: bool = None
    ' Show Image data-blocks\n\n    :type: bool\n    '
    experimental_filter_lattice: bool = None
    ' Show Lattice data-blocks\n\n    :type: bool\n    '
    experimental_filter_light: bool = None
    ' Show Light data-blocks\n\n    :type: bool\n    '
    experimental_filter_light_probe: bool = None
    ' Show Light Probe data-blocks\n\n    :type: bool\n    '
    experimental_filter_linestyle: bool = None
    " Show Freestyle's Line Style data-blocks\n\n    :type: bool\n    "
    experimental_filter_mask: bool = None
    ' Show Mask data-blocks\n\n    :type: bool\n    '
    experimental_filter_mesh: bool = None
    ' Show Mesh data-blocks\n\n    :type: bool\n    '
    experimental_filter_metaball: bool = None
    ' Show Metaball data-blocks\n\n    :type: bool\n    '
    experimental_filter_movie_clip: bool = None
    ' Show Movie Clip data-blocks\n\n    :type: bool\n    '
    experimental_filter_paint_curve: bool = None
    ' Show Paint Curve data-blocks\n\n    :type: bool\n    '
    experimental_filter_palette: bool = None
    ' Show Palette data-blocks\n\n    :type: bool\n    '
    experimental_filter_particle_settings: bool = None
    ' Show Particle Settings data-blocks\n\n    :type: bool\n    '
    experimental_filter_pointcloud: bool = None
    ' Show/hide Point Cloud data-blocks\n\n    :type: bool\n    '
    experimental_filter_scene: bool = None
    ' Show Scene data-blocks\n\n    :type: bool\n    '
    experimental_filter_simulation: bool = None
    ' Show Simulation data-blocks\n\n    :type: bool\n    '
    experimental_filter_sound: bool = None
    ' Show Sound data-blocks\n\n    :type: bool\n    '
    experimental_filter_speaker: bool = None
    ' Show Speaker data-blocks\n\n    :type: bool\n    '
    experimental_filter_text: bool = None
    ' Show Text data-blocks\n\n    :type: bool\n    '
    experimental_filter_texture: bool = None
    ' Show Texture data-blocks\n\n    :type: bool\n    '
    experimental_filter_volume: bool = None
    ' Show/hide Volume data-blocks\n\n    :type: bool\n    '
    experimental_filter_work_space: bool = None
    ' Show workspace data-blocks\n\n    :type: bool\n    '
    filter_action: bool = None
    ' Show Action data-blocks\n\n    :type: bool\n    '
    filter_group: bool = None
    ' Show Collection data-blocks\n\n    :type: bool\n    '
    filter_material: bool = None
    ' Show Material data-blocks\n\n    :type: bool\n    '
    filter_node_tree: bool = None
    ' Show Node Tree data-blocks\n\n    :type: bool\n    '
    filter_object: bool = None
    ' Show Object data-blocks\n\n    :type: bool\n    '
    filter_world: bool = None
    ' Show World data-blocks\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FileBrowserFSMenuEntry(bpy_struct):
    """ File Select Parameters
    """
    icon: int = None
    ' \n\n    :type: int\n    '
    is_valid: bool = None
    ' Whether this path is currently reachable\n\n    :type: bool\n    '
    name: str = None
    ' \n\n    :type: str\n    '
    path: str = None
    ' \n\n    :type: str\n    '
    use_save: bool = None
    ' Whether this path is saved in bookmarks, or generated from OS\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FileSelectEntry(bpy_struct):
    """ A file viewable in the File Browser
    """
    asset_data: 'AssetMetaData' = None
    " Asset data, valid if the file represents an asset\n\n    :type: 'AssetMetaData'\n    "
    id_type: typing.Union[str, int] = None
    " The type of the data-block, if the file represents one ('NONE' otherwise)\n\n    :type: typing.Union[str, int]\n    "
    local_id: 'ID' = None
    " The local data-block this file represents; only valid if that is a data-block in this file\n\n    :type: 'ID'\n    "
    name: str = None
    ' \n\n    :type: str\n    '
    preview_icon_id: int = None
    ' Unique integer identifying the preview of this file as an icon (zero means invalid)\n\n    :type: int\n    '
    relative_path: str = None
    ' Path relative to the directory currently displayed in the File Browser (includes the file name)\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FileSelectIDFilter(bpy_struct):
    """ Which ID types to show/hide, when browsing a library
    """
    category_animation: bool = None
    ' Show animation data\n\n    :type: bool\n    '
    category_environment: bool = None
    ' Show worlds, lights, cameras and speakers\n\n    :type: bool\n    '
    category_geometry: bool = None
    ' Show meshes, curves, lattice, armatures and metaballs data\n\n    :type: bool\n    '
    category_image: bool = None
    ' Show images, movie clips, sounds and masks\n\n    :type: bool\n    '
    category_misc: bool = None
    ' Show other data types\n\n    :type: bool\n    '
    category_object: bool = None
    ' Show objects and collections\n\n    :type: bool\n    '
    category_scene: bool = None
    ' Show scenes\n\n    :type: bool\n    '
    category_shading: bool = None
    " Show materials, nodetrees, textures and Freestyle's linestyles\n\n    :type: bool\n    "
    filter_action: bool = None
    ' Show Action data-blocks\n\n    :type: bool\n    '
    filter_armature: bool = None
    ' Show Armature data-blocks\n\n    :type: bool\n    '
    filter_brush: bool = None
    ' Show Brushes data-blocks\n\n    :type: bool\n    '
    filter_cachefile: bool = None
    ' Show Cache File data-blocks\n\n    :type: bool\n    '
    filter_camera: bool = None
    ' Show Camera data-blocks\n\n    :type: bool\n    '
    filter_curve: bool = None
    ' Show Curve data-blocks\n\n    :type: bool\n    '
    filter_curves: bool = None
    ' Show/hide Curves data-blocks\n\n    :type: bool\n    '
    filter_font: bool = None
    ' Show Font data-blocks\n\n    :type: bool\n    '
    filter_grease_pencil: bool = None
    ' Show Grease pencil data-blocks\n\n    :type: bool\n    '
    filter_group: bool = None
    ' Show Collection data-blocks\n\n    :type: bool\n    '
    filter_image: bool = None
    ' Show Image data-blocks\n\n    :type: bool\n    '
    filter_lattice: bool = None
    ' Show Lattice data-blocks\n\n    :type: bool\n    '
    filter_light: bool = None
    ' Show Light data-blocks\n\n    :type: bool\n    '
    filter_light_probe: bool = None
    ' Show Light Probe data-blocks\n\n    :type: bool\n    '
    filter_linestyle: bool = None
    " Show Freestyle's Line Style data-blocks\n\n    :type: bool\n    "
    filter_mask: bool = None
    ' Show Mask data-blocks\n\n    :type: bool\n    '
    filter_material: bool = None
    ' Show Material data-blocks\n\n    :type: bool\n    '
    filter_mesh: bool = None
    ' Show Mesh data-blocks\n\n    :type: bool\n    '
    filter_metaball: bool = None
    ' Show Metaball data-blocks\n\n    :type: bool\n    '
    filter_movie_clip: bool = None
    ' Show Movie Clip data-blocks\n\n    :type: bool\n    '
    filter_node_tree: bool = None
    ' Show Node Tree data-blocks\n\n    :type: bool\n    '
    filter_object: bool = None
    ' Show Object data-blocks\n\n    :type: bool\n    '
    filter_paint_curve: bool = None
    ' Show Paint Curve data-blocks\n\n    :type: bool\n    '
    filter_palette: bool = None
    ' Show Palette data-blocks\n\n    :type: bool\n    '
    filter_particle_settings: bool = None
    ' Show Particle Settings data-blocks\n\n    :type: bool\n    '
    filter_pointcloud: bool = None
    ' Show/hide Point Cloud data-blocks\n\n    :type: bool\n    '
    filter_scene: bool = None
    ' Show Scene data-blocks\n\n    :type: bool\n    '
    filter_simulation: bool = None
    ' Show Simulation data-blocks\n\n    :type: bool\n    '
    filter_sound: bool = None
    ' Show Sound data-blocks\n\n    :type: bool\n    '
    filter_speaker: bool = None
    ' Show Speaker data-blocks\n\n    :type: bool\n    '
    filter_text: bool = None
    ' Show Text data-blocks\n\n    :type: bool\n    '
    filter_texture: bool = None
    ' Show Texture data-blocks\n\n    :type: bool\n    '
    filter_volume: bool = None
    ' Show/hide Volume data-blocks\n\n    :type: bool\n    '
    filter_work_space: bool = None
    ' Show workspace data-blocks\n\n    :type: bool\n    '
    filter_world: bool = None
    ' Show World data-blocks\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FileSelectParams(bpy_struct):
    """ File Select Parameters
    """
    directory: str = None
    ' Directory displayed in the file browser\n\n    :type: str\n    '
    display_size: typing.Union[str, int] = None
    ' Change the size of the display (width of columns or thumbnails size)\n\n    :type: typing.Union[str, int]\n    '
    display_type: typing.Union[str, int] = None
    ' Display mode for the file list * ``LIST_VERTICAL`` Vertical List -- Display files as a vertical list. * ``LIST_HORIZONTAL`` Horizontal List -- Display files as a horizontal list. * ``THUMBNAIL`` Thumbnails -- Display files as thumbnails.\n\n    :type: typing.Union[str, int]\n    '
    filename: str = None
    ' Active file in the file browser\n\n    :type: str\n    '
    filter_glob: str = None
    " UNIX shell-like filename patterns matching, supports wildcards ('*') and list of patterns separated by ';'\n\n    :type: str\n    "
    filter_id: 'FileSelectIDFilter' = None
    " Which ID types to show/hide, when browsing a library\n\n    :type: 'FileSelectIDFilter'\n    "
    filter_search: str = None
    " Filter by name, supports '*' wildcard\n\n    :type: str\n    "
    recursion_level: typing.Union[str, int] = None
    " Numbers of dirtree levels to show simultaneously * ``NONE`` None -- Only list current directory's content, with no recursion. * ``BLEND`` Blend File -- List .blend files' content. * ``ALL_1`` One Level -- List all sub-directories' content, one level of recursion. * ``ALL_2`` Two Levels -- List all sub-directories' content, two levels of recursion. * ``ALL_3`` Three Levels -- List all sub-directories' content, three levels of recursion.\n\n    :type: typing.Union[str, int]\n    "
    show_details_datetime: bool = None
    ' Show a column listing the date and time of modification for each file\n\n    :type: bool\n    '
    show_details_size: bool = None
    ' Show a column listing the size of each file\n\n    :type: bool\n    '
    show_hidden: bool = None
    ' Show hidden dot files\n\n    :type: bool\n    '
    sort_method: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    title: str = None
    ' Title for the file browser\n\n    :type: str\n    '
    use_filter: bool = None
    ' Enable filtering of files\n\n    :type: bool\n    '
    use_filter_asset_only: bool = None
    ' Hide .blend files items that are not data-blocks with asset metadata\n\n    :type: bool\n    '
    use_filter_backup: bool = None
    ' Show .blend1, .blend2, etc. files\n\n    :type: bool\n    '
    use_filter_blender: bool = None
    ' Show .blend files\n\n    :type: bool\n    '
    use_filter_blendid: bool = None
    ' Show .blend files items (objects, materials, etc.)\n\n    :type: bool\n    '
    use_filter_folder: bool = None
    ' Show folders\n\n    :type: bool\n    '
    use_filter_font: bool = None
    ' Show font files\n\n    :type: bool\n    '
    use_filter_image: bool = None
    ' Show image files\n\n    :type: bool\n    '
    use_filter_movie: bool = None
    ' Show movie files\n\n    :type: bool\n    '
    use_filter_script: bool = None
    ' Show script files\n\n    :type: bool\n    '
    use_filter_sound: bool = None
    ' Show sound files\n\n    :type: bool\n    '
    use_filter_text: bool = None
    ' Show text files\n\n    :type: bool\n    '
    use_filter_volume: bool = None
    ' Show 3D volume files\n\n    :type: bool\n    '
    use_library_browsing: bool = None
    " Whether we may browse blender files' content or not\n\n    :type: bool\n    "
    use_sort_invert: bool = None
    ' Sort items descending, from highest value to lowest\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Float2AttributeValue(bpy_struct):
    """ 2D Vector value in geometry attribute
    """
    vector: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " 2D vector\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FloatAttributeValue(bpy_struct):
    """ Floating-point value in geometry attribute
    """
    value: float = None
    ' \n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FloatColorAttributeValue(bpy_struct):
    """ Color value in geometry attribute
    """
    color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " RGBA color in scene linear color space\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    color_srgb: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " RGBA color in sRGB color space\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FloatVectorAttributeValue(bpy_struct):
    """ Vector value in geometry attribute
    """
    vector: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " 3D vector\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FluidDomainSettings(bpy_struct):
    """ Fluid domain settings
    """
    adapt_margin: int = None
    ' Margin added around fluid to minimize boundary interference\n\n    :type: int\n    '
    adapt_threshold: float = None
    ' Minimum amount of fluid a cell can contain before it is considered empty\n\n    :type: float\n    '
    additional_res: int = None
    ' Maximum number of additional cells\n\n    :type: int\n    '
    alpha: float = None
    ' Buoyant force based on smoke density (higher value results in faster rising smoke)\n\n    :type: float\n    '
    beta: float = None
    ' Buoyant force based on smoke heat (higher value results in faster rising smoke)\n\n    :type: float\n    '
    burning_rate: float = None
    ' Speed of the burning reaction (higher value results in smaller flames)\n\n    :type: float\n    '
    cache_data_format: typing.Union[str, int] = None
    ' Select the file format to be used for caching volumetric data\n\n    :type: typing.Union[str, int]\n    '
    cache_directory: str = None
    ' Directory that contains fluid cache files\n\n    :type: str\n    '
    cache_frame_end: int = None
    ' Frame on which the simulation stops. This is the last frame that will be baked\n\n    :type: int\n    '
    cache_frame_offset: int = None
    ' Frame offset that is used when loading the simulation from the cache. It is not considered when baking the simulation, only when loading it\n\n    :type: int\n    '
    cache_frame_pause_data: int = None
    ' \n\n    :type: int\n    '
    cache_frame_pause_guide: int = None
    ' \n\n    :type: int\n    '
    cache_frame_pause_mesh: int = None
    ' \n\n    :type: int\n    '
    cache_frame_pause_noise: int = None
    ' \n\n    :type: int\n    '
    cache_frame_pause_particles: int = None
    ' \n\n    :type: int\n    '
    cache_frame_start: int = None
    ' Frame on which the simulation starts. This is the first frame that will be baked\n\n    :type: int\n    '
    cache_mesh_format: typing.Union[str, int] = None
    ' Select the file format to be used for caching surface data\n\n    :type: typing.Union[str, int]\n    '
    cache_noise_format: typing.Union[str, int] = None
    ' Select the file format to be used for caching noise data\n\n    :type: typing.Union[str, int]\n    '
    cache_particle_format: typing.Union[str, int] = None
    ' Select the file format to be used for caching particle data\n\n    :type: typing.Union[str, int]\n    '
    cache_resumable: bool = None
    ' Additional data will be saved so that the bake jobs can be resumed after pausing. Because more data will be written to disk it is recommended to avoid enabling this option when baking at high resolutions\n\n    :type: bool\n    '
    cache_type: typing.Union[str, int] = None
    ' Change the cache type of the simulation * ``REPLAY`` Replay -- Use the timeline to bake the scene. * ``MODULAR`` Modular -- Bake every stage of the simulation separately. * ``ALL`` All -- Bake all simulation settings at once.\n\n    :type: typing.Union[str, int]\n    '
    cell_size: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Cell Size\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    cfl_condition: float = None
    ' Maximal velocity per cell (greater CFL numbers will minimize the number of simulation steps and the computation time.)\n\n    :type: float\n    '
    clipping: float = None
    ' Value under which voxels are considered empty space to optimize rendering\n\n    :type: float\n    '
    color_grid: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], 'mathutils.Vector'] = None
    " Smoke color grid\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], 'mathutils.Vector']\n    "
    color_ramp: 'ColorRamp' = None
    " \n\n    :type: 'ColorRamp'\n    "
    color_ramp_field: typing.Union[str, int] = None
    ' Simulation field to color map\n\n    :type: typing.Union[str, int]\n    '
    color_ramp_field_scale: float = None
    ' Multiplier for scaling the selected field to color map\n\n    :type: float\n    '
    delete_in_obstacle: bool = None
    ' Delete fluid inside obstacles\n\n    :type: bool\n    '
    density_grid: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], 'mathutils.Vector'] = None
    " Smoke density grid\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], 'mathutils.Vector']\n    "
    display_interpolation: typing.Union[str, int] = None
    ' Interpolation method to use for smoke/fire volumes in solid mode * ``LINEAR`` Linear -- Good smoothness and speed. * ``CUBIC`` Cubic -- Smoothed high quality interpolation, but slower. * ``CLOSEST`` Closest -- No interpolation.\n\n    :type: typing.Union[str, int]\n    '
    display_thickness: float = None
    ' Thickness of smoke display in the viewport\n\n    :type: float\n    '
    dissolve_speed: int = None
    ' Determine how quickly the smoke dissolves (lower value makes smoke disappear faster)\n\n    :type: int\n    '
    domain_resolution: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Smoke Grid Resolution\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    domain_type: typing.Union[str, int] = None
    ' Change domain type of the simulation * ``GAS`` Gas -- Create domain for gases. * ``LIQUID`` Liquid -- Create domain for liquids.\n\n    :type: typing.Union[str, int]\n    '
    effector_group: 'Collection' = None
    " Limit effectors to this collection\n\n    :type: 'Collection'\n    "
    effector_weights: 'EffectorWeights' = None
    " \n\n    :type: 'EffectorWeights'\n    "
    export_manta_script: bool = None
    ' Generate and export Mantaflow script from current domain settings during bake. This is only needed if you plan to analyze the cache (e.g. view grids, velocity vectors, particles) in Mantaflow directly (outside of Blender) after baking the simulation\n\n    :type: bool\n    '
    flame_grid: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], 'mathutils.Vector'] = None
    " Smoke flame grid\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], 'mathutils.Vector']\n    "
    flame_ignition: float = None
    ' Minimum temperature of the flames (higher value results in faster rising flames)\n\n    :type: float\n    '
    flame_max_temp: float = None
    ' Maximum temperature of the flames (higher value results in faster rising flames)\n\n    :type: float\n    '
    flame_smoke: float = None
    ' Amount of smoke created by burning fuel\n\n    :type: float\n    '
    flame_smoke_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of smoke emitted from burning fuel\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    flame_vorticity: float = None
    ' Additional vorticity for the flames\n\n    :type: float\n    '
    flip_ratio: float = None
    ' PIC/FLIP Ratio. A value of 1.0 will result in a completely FLIP based simulation. Use a lower value for simulations which should produce smaller splashes\n\n    :type: float\n    '
    fluid_group: 'Collection' = None
    " Limit fluid objects to this collection\n\n    :type: 'Collection'\n    "
    force_collection: 'Collection' = None
    " Limit forces to this collection\n\n    :type: 'Collection'\n    "
    fractions_distance: float = None
    ' Determines how far apart fluid and obstacle are (higher values will result in fluid being further away from obstacles, smaller values will let fluid move towards the inside of obstacles)\n\n    :type: float\n    '
    fractions_threshold: float = None
    ' Determines how much fluid is allowed in an obstacle cell (higher values will tag a boundary cell as an obstacle easier and reduce the boundary smoothening effect)\n\n    :type: float\n    '
    gravity: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Gravity in X, Y and Z direction\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    gridlines_cell_filter: typing.Union[str, int] = None
    ' Cell type to be highlighted * ``NONE`` None -- Highlight the cells regardless of their type. * ``FLUID`` Fluid -- Highlight only the cells of type Fluid. * ``OBSTACLE`` Obstacle -- Highlight only the cells of type Obstacle. * ``EMPTY`` Empty -- Highlight only the cells of type Empty. * ``INFLOW`` Inflow -- Highlight only the cells of type Inflow. * ``OUTFLOW`` Outflow -- Highlight only the cells of type Outflow.\n\n    :type: typing.Union[str, int]\n    '
    gridlines_color_field: typing.Union[str, int] = None
    ' Simulation field to color map onto gridlines * ``NONE`` None -- None. * ``FLAGS`` Flags -- Flag grid of the fluid domain. * ``RANGE`` Highlight Range -- Highlight the voxels with values of the color mapped field within the range.\n\n    :type: typing.Union[str, int]\n    '
    gridlines_lower_bound: float = None
    ' Lower bound of the highlighting range\n\n    :type: float\n    '
    gridlines_range_color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color used to highlight the range\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    gridlines_upper_bound: float = None
    ' Upper bound of the highlighting range\n\n    :type: float\n    '
    guide_alpha: float = None
    ' Guiding weight (higher value results in greater lag)\n\n    :type: float\n    '
    guide_beta: int = None
    ' Guiding size (higher value results in larger vortices)\n\n    :type: int\n    '
    guide_parent: 'Object' = None
    " Use velocities from this object for the guiding effect (object needs to have fluid modifier and be of type domain))\n\n    :type: 'Object'\n    "
    guide_source: typing.Union[str, int] = None
    ' Choose where to get guiding velocities from * ``DOMAIN`` Domain -- Use a fluid domain for guiding (domain needs to be baked already so that velocities can be extracted). Guiding domain can be of any type (i.e. gas or liquid). * ``EFFECTOR`` Effector -- Use guiding (effector) objects to create fluid guiding (guiding objects should be animated and baked once set up completely).\n\n    :type: typing.Union[str, int]\n    '
    guide_vel_factor: float = None
    ' Guiding velocity factor (higher value results in greater guiding velocities)\n\n    :type: float\n    '
    has_cache_baked_any: bool = None
    ' \n\n    :type: bool\n    '
    has_cache_baked_data: bool = None
    ' \n\n    :type: bool\n    '
    has_cache_baked_guide: bool = None
    ' \n\n    :type: bool\n    '
    has_cache_baked_mesh: bool = None
    ' \n\n    :type: bool\n    '
    has_cache_baked_noise: bool = None
    ' \n\n    :type: bool\n    '
    has_cache_baked_particles: bool = None
    ' \n\n    :type: bool\n    '
    heat_grid: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], 'mathutils.Vector'] = None
    " Smoke heat grid\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], 'mathutils.Vector']\n    "
    highres_sampling: typing.Union[str, int] = None
    ' Method for sampling the high resolution flow\n\n    :type: typing.Union[str, int]\n    '
    is_cache_baking_any: bool = None
    ' \n\n    :type: bool\n    '
    is_cache_baking_data: bool = None
    ' \n\n    :type: bool\n    '
    is_cache_baking_guide: bool = None
    ' \n\n    :type: bool\n    '
    is_cache_baking_mesh: bool = None
    ' \n\n    :type: bool\n    '
    is_cache_baking_noise: bool = None
    ' \n\n    :type: bool\n    '
    is_cache_baking_particles: bool = None
    ' \n\n    :type: bool\n    '
    mesh_concave_lower: float = None
    ' Lower mesh concavity bound (high values tend to smoothen and fill out concave regions)\n\n    :type: float\n    '
    mesh_concave_upper: float = None
    ' Upper mesh concavity bound (high values tend to smoothen and fill out concave regions)\n\n    :type: float\n    '
    mesh_generator: typing.Union[str, int] = None
    ' Which particle level set generator to use * ``IMPROVED`` Final -- Use improved particle level set (slower but more precise and with mesh smoothening options). * ``UNION`` Preview -- Use union particle level set (faster but lower quality).\n\n    :type: typing.Union[str, int]\n    '
    mesh_particle_radius: float = None
    ' Particle radius factor (higher value results in larger (meshed) particles). Needs to be adjusted after changing the mesh scale\n\n    :type: float\n    '
    mesh_scale: int = None
    ' The mesh simulation is scaled up by this factor (compared to the base resolution of the domain). For best meshing, it is recommended to adjust the mesh particle radius alongside this value\n\n    :type: int\n    '
    mesh_smoothen_neg: int = None
    ' Negative mesh smoothening\n\n    :type: int\n    '
    mesh_smoothen_pos: int = None
    ' Positive mesh smoothening\n\n    :type: int\n    '
    noise_pos_scale: float = None
    ' Scale of noise (higher value results in larger vortices)\n\n    :type: float\n    '
    noise_scale: int = None
    ' The noise simulation is scaled up by this factor (compared to the base resolution of the domain)\n\n    :type: int\n    '
    noise_strength: float = None
    ' Strength of noise\n\n    :type: float\n    '
    noise_time_anim: float = None
    ' Animation time of noise\n\n    :type: float\n    '
    openvdb_cache_compress_type: typing.Union[str, int] = None
    " Compression method to be used * ``ZIP`` Zip -- Effective but slow compression. * ``BLOSC`` Blosc -- Multithreaded compression, similar in size and quality as 'Zip'. * ``NONE`` None -- Do not use any compression.\n\n    :type: typing.Union[str, int]\n    "
    openvdb_data_depth: typing.Union[str, int] = None
    ' Bit depth for fluid particles and grids (lower bit values reduce file size)\n\n    :type: typing.Union[str, int]\n    '
    particle_band_width: float = None
    ' Particle (narrow) band width (higher value results in thicker band and more particles)\n\n    :type: float\n    '
    particle_max: int = None
    ' Maximum number of particles per cell (ensures that each cell has at most this amount of particles)\n\n    :type: int\n    '
    particle_min: int = None
    ' Minimum number of particles per cell (ensures that each cell has at least this amount of particles)\n\n    :type: int\n    '
    particle_number: int = None
    ' Particle number factor (higher value results in more particles)\n\n    :type: int\n    '
    particle_radius: float = None
    ' Particle radius factor. Increase this value if the simulation appears to leak volume, decrease it if the simulation seems to gain volume\n\n    :type: float\n    '
    particle_randomness: float = None
    ' Randomness factor for particle sampling\n\n    :type: float\n    '
    particle_scale: int = None
    ' The particle simulation is scaled up by this factor (compared to the base resolution of the domain)\n\n    :type: int\n    '
    resolution_max: int = None
    ' Resolution used for the fluid domain. Value corresponds to the longest domain side (resolution for other domain sides is calculated automatically)\n\n    :type: int\n    '
    show_gridlines: bool = None
    ' Show gridlines\n\n    :type: bool\n    '
    show_velocity: bool = None
    ' Visualize vector fields\n\n    :type: bool\n    '
    simulation_method: typing.Union[str, int] = None
    ' Change the underlying simulation method * ``FLIP`` FLIP -- Use FLIP as the simulation method (more splashy behavior). * ``APIC`` APIC -- Use APIC as the simulation method (more energetic and stable behavior).\n\n    :type: typing.Union[str, int]\n    '
    slice_axis: typing.Union[str, int] = None
    ' * ``AUTO`` Auto -- Adjust slice direction according to the view direction. * ``X`` X -- Slice along the X axis. * ``Y`` Y -- Slice along the Y axis. * ``Z`` Z -- Slice along the Z axis.\n\n    :type: typing.Union[str, int]\n    '
    slice_depth: float = None
    ' Position of the slice\n\n    :type: float\n    '
    slice_per_voxel: float = None
    ' How many slices per voxel should be generated\n\n    :type: float\n    '
    sndparticle_boundary: typing.Union[str, int] = None
    ' How particles that left the domain are treated * ``DELETE`` Delete -- Delete secondary particles that are inside obstacles or left the domain. * ``PUSHOUT`` Push Out -- Push secondary particles that left the domain back into the domain.\n\n    :type: typing.Union[str, int]\n    '
    sndparticle_bubble_buoyancy: float = None
    ' Amount of buoyancy force that rises bubbles (high value results in bubble movement mainly upwards)\n\n    :type: float\n    '
    sndparticle_bubble_drag: float = None
    ' Amount of drag force that moves bubbles along with the fluid (high value results in bubble movement mainly along with the fluid)\n\n    :type: float\n    '
    sndparticle_combined_export: typing.Union[str, int] = None
    ' Determines which particle systems are created from secondary particles * ``OFF`` Off -- Create a separate particle system for every secondary particle type. * ``SPRAY_FOAM`` Spray + Foam -- Spray and foam particles are saved in the same particle system. * ``SPRAY_BUBBLES`` Spray + Bubbles -- Spray and bubble particles are saved in the same particle system. * ``FOAM_BUBBLES`` Foam + Bubbles -- Foam and bubbles particles are saved in the same particle system. * ``SPRAY_FOAM_BUBBLES`` Spray + Foam + Bubbles -- Create one particle system that contains all three secondary particle types.\n\n    :type: typing.Union[str, int]\n    '
    sndparticle_life_max: float = None
    ' Highest possible particle lifetime\n\n    :type: float\n    '
    sndparticle_life_min: float = None
    ' Lowest possible particle lifetime\n\n    :type: float\n    '
    sndparticle_potential_max_energy: float = None
    ' Upper clamping threshold that indicates the fluid speed where cells no longer emit more particles (higher value results in generally less particles)\n\n    :type: float\n    '
    sndparticle_potential_max_trappedair: float = None
    ' Upper clamping threshold for marking fluid cells where air is trapped (higher value results in less marked cells)\n\n    :type: float\n    '
    sndparticle_potential_max_wavecrest: float = None
    ' Upper clamping threshold for marking fluid cells as wave crests (higher value results in less marked cells)\n\n    :type: float\n    '
    sndparticle_potential_min_energy: float = None
    ' Lower clamping threshold that indicates the fluid speed where cells start to emit particles (lower values result in generally more particles)\n\n    :type: float\n    '
    sndparticle_potential_min_trappedair: float = None
    ' Lower clamping threshold for marking fluid cells where air is trapped (lower value results in more marked cells)\n\n    :type: float\n    '
    sndparticle_potential_min_wavecrest: float = None
    ' Lower clamping threshold for marking fluid cells as wave crests (lower value results in more marked cells)\n\n    :type: float\n    '
    sndparticle_potential_radius: int = None
    ' Radius to compute potential for each cell (higher values are slower but create smoother potential grids)\n\n    :type: int\n    '
    sndparticle_sampling_trappedair: int = None
    ' Maximum number of particles generated per trapped air cell per frame\n\n    :type: int\n    '
    sndparticle_sampling_wavecrest: int = None
    ' Maximum number of particles generated per wave crest cell per frame\n\n    :type: int\n    '
    sndparticle_update_radius: int = None
    ' Radius to compute position update for each particle (higher values are slower but particles move less chaotic)\n\n    :type: int\n    '
    start_point: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Start point\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    surface_tension: float = None
    ' Surface tension of liquid (higher value results in greater hydrophobic behavior)\n\n    :type: float\n    '
    sys_particle_maximum: int = None
    ' Maximum number of fluid particles that are allowed in this simulation\n\n    :type: int\n    '
    temperature_grid: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], 'mathutils.Vector'] = None
    " Smoke temperature grid, range 0 to 1 represents 0 to 1000K\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], 'mathutils.Vector']\n    "
    time_scale: float = None
    ' Adjust simulation speed\n\n    :type: float\n    '
    timesteps_max: int = None
    ' Maximum number of simulation steps to perform for one frame\n\n    :type: int\n    '
    timesteps_min: int = None
    ' Minimum number of simulation steps to perform for one frame\n\n    :type: int\n    '
    use_adaptive_domain: bool = None
    ' Adapt simulation resolution and size to fluid\n\n    :type: bool\n    '
    use_adaptive_timesteps: bool = None
    ' \n\n    :type: bool\n    '
    use_bubble_particles: bool = None
    ' Create bubble particle system\n\n    :type: bool\n    '
    use_collision_border_back: bool = None
    ' Enable collisions with back domain border\n\n    :type: bool\n    '
    use_collision_border_bottom: bool = None
    ' Enable collisions with bottom domain border\n\n    :type: bool\n    '
    use_collision_border_front: bool = None
    ' Enable collisions with front domain border\n\n    :type: bool\n    '
    use_collision_border_left: bool = None
    ' Enable collisions with left domain border\n\n    :type: bool\n    '
    use_collision_border_right: bool = None
    ' Enable collisions with right domain border\n\n    :type: bool\n    '
    use_collision_border_top: bool = None
    ' Enable collisions with top domain border\n\n    :type: bool\n    '
    use_color_ramp: bool = None
    ' Render a simulation field while mapping its voxels values to the colors of a ramp or using a predefined color code\n\n    :type: bool\n    '
    use_diffusion: bool = None
    ' Enable fluid diffusion settings (e.g. viscosity, surface tension)\n\n    :type: bool\n    '
    use_dissolve_smoke: bool = None
    ' Let smoke disappear over time\n\n    :type: bool\n    '
    use_dissolve_smoke_log: bool = None
    ' Dissolve smoke in a logarithmic fashion. Dissolves quickly at first, but lingers longer\n\n    :type: bool\n    '
    use_flip_particles: bool = None
    ' Create liquid particle system\n\n    :type: bool\n    '
    use_foam_particles: bool = None
    ' Create foam particle system\n\n    :type: bool\n    '
    use_fractions: bool = None
    ' Fractional obstacles improve and smoothen the fluid-obstacle boundary\n\n    :type: bool\n    '
    use_guide: bool = None
    ' Enable fluid guiding\n\n    :type: bool\n    '
    use_mesh: bool = None
    ' Enable fluid mesh (using amplification)\n\n    :type: bool\n    '
    use_noise: bool = None
    ' Enable fluid noise (using amplification)\n\n    :type: bool\n    '
    use_slice: bool = None
    ' Perform a single slice of the domain object\n\n    :type: bool\n    '
    use_speed_vectors: bool = None
    ' Caches velocities of mesh vertices. These will be used (automatically) when rendering with motion blur enabled\n\n    :type: bool\n    '
    use_spray_particles: bool = None
    ' Create spray particle system\n\n    :type: bool\n    '
    use_tracer_particles: bool = None
    ' Create tracer particle system\n\n    :type: bool\n    '
    use_viscosity: bool = None
    ' Enable fluid viscosity settings\n\n    :type: bool\n    '
    vector_display_type: typing.Union[str, int] = None
    ' * ``NEEDLE`` Needle -- Display vectors as needles. * ``STREAMLINE`` Streamlines -- Display vectors as streamlines. * ``MAC`` MAC Grid -- Display vector field as MAC grid.\n\n    :type: typing.Union[str, int]\n    '
    vector_field: typing.Union[str, int] = None
    ' Vector field to be represented by the display vectors * ``FLUID_VELOCITY`` Fluid Velocity -- Velocity field of the fluid domain. * ``GUIDE_VELOCITY`` Guide Velocity -- Guide velocity field of the fluid domain. * ``FORCE`` Force -- Force field of the fluid domain.\n\n    :type: typing.Union[str, int]\n    '
    vector_scale: float = None
    ' Multiplier for scaling the vectors\n\n    :type: float\n    '
    vector_scale_with_magnitude: bool = None
    ' Scale vectors with their magnitudes\n\n    :type: bool\n    '
    vector_show_mac_x: bool = None
    ' Show X-component of MAC Grid\n\n    :type: bool\n    '
    vector_show_mac_y: bool = None
    ' Show Y-component of MAC Grid\n\n    :type: bool\n    '
    vector_show_mac_z: bool = None
    ' Show Z-component of MAC Grid\n\n    :type: bool\n    '
    velocity_grid: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], 'mathutils.Vector'] = None
    " Smoke velocity grid\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], 'mathutils.Vector']\n    "
    velocity_scale: float = None
    ' Factor to control the amount of motion blur\n\n    :type: float\n    '
    viscosity_base: float = None
    ' Viscosity setting: value that is multiplied by 10 to the power of (exponent*-1)\n\n    :type: float\n    '
    viscosity_exponent: int = None
    ' Negative exponent for the viscosity value (to simplify entering small values e.g. 5*10^-6)\n\n    :type: int\n    '
    viscosity_value: float = None
    ' Viscosity of liquid (higher values result in more viscous fluids, a value of 0 will still apply some viscosity)\n\n    :type: float\n    '
    vorticity: float = None
    ' Amount of turbulence and rotation in smoke\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FluidEffectorSettings(bpy_struct):
    """ Smoke collision settings
    """
    effector_type: typing.Union[str, int] = None
    ' Change type of effector in the simulation * ``COLLISION`` Collision -- Create collision object. * ``GUIDE`` Guide -- Create guide object.\n\n    :type: typing.Union[str, int]\n    '
    guide_mode: typing.Union[str, int] = None
    ' How to create guiding velocities * ``MAXIMUM`` Maximize -- Compare velocities from previous frame with new velocities from current frame and keep the maximum. * ``MINIMUM`` Minimize -- Compare velocities from previous frame with new velocities from current frame and keep the minimum. * ``OVERRIDE`` Override -- Always write new guide velocities for every frame (each frame only contains current velocities from guiding objects). * ``AVERAGED`` Averaged -- Take average of velocities from previous frame and new velocities from current frame.\n\n    :type: typing.Union[str, int]\n    '
    subframes: int = None
    ' Number of additional samples to take between frames to improve quality of fast moving effector objects\n\n    :type: int\n    '
    surface_distance: float = None
    ' Additional distance around mesh surface to consider as effector\n\n    :type: float\n    '
    use_effector: bool = None
    ' Control when to apply the effector\n\n    :type: bool\n    '
    use_plane_init: bool = None
    ' Treat this object as a planar, unclosed mesh\n\n    :type: bool\n    '
    velocity_factor: float = None
    ' Multiplier of obstacle velocity\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FluidFlowSettings(bpy_struct):
    """ Fluid flow settings
    """
    density: float = None
    ' \n\n    :type: float\n    '
    density_vertex_group: str = None
    ' Name of vertex group which determines surface emission rate\n\n    :type: str\n    '
    flow_behavior: typing.Union[str, int] = None
    ' Change flow behavior in the simulation * ``INFLOW`` Inflow -- Add fluid to simulation. * ``OUTFLOW`` Outflow -- Delete fluid from simulation. * ``GEOMETRY`` Geometry -- Only use given geometry for fluid.\n\n    :type: typing.Union[str, int]\n    '
    flow_source: typing.Union[str, int] = None
    ' Change how fluid is emitted\n\n    :type: typing.Union[str, int]\n    '
    flow_type: typing.Union[str, int] = None
    ' Change type of fluid in the simulation * ``SMOKE`` Smoke -- Add smoke. * ``BOTH`` Fire + Smoke -- Add fire and smoke. * ``FIRE`` Fire -- Add fire. * ``LIQUID`` Liquid -- Add liquid.\n\n    :type: typing.Union[str, int]\n    '
    fuel_amount: float = None
    ' \n\n    :type: float\n    '
    noise_texture: 'Texture' = None
    " Texture that controls emission strength\n\n    :type: 'Texture'\n    "
    particle_size: float = None
    ' Particle size in simulation cells\n\n    :type: float\n    '
    particle_system: 'ParticleSystem' = None
    " Particle systems emitted from the object\n\n    :type: 'ParticleSystem'\n    "
    smoke_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of smoke\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    subframes: int = None
    ' Number of additional samples to take between frames to improve quality of fast moving flows\n\n    :type: int\n    '
    surface_distance: float = None
    ' Controls fluid emission from the mesh surface (higher value results in emission further away from the mesh surface\n\n    :type: float\n    '
    temperature: float = None
    ' Temperature difference to ambient temperature\n\n    :type: float\n    '
    texture_map_type: typing.Union[str, int] = None
    ' Texture mapping type * ``AUTO`` Generated -- Generated coordinates centered to flow object. * ``UV`` UV -- Use UV layer for texture coordinates.\n\n    :type: typing.Union[str, int]\n    '
    texture_offset: float = None
    ' Z-offset of texture mapping\n\n    :type: float\n    '
    texture_size: float = None
    ' Size of texture mapping\n\n    :type: float\n    '
    use_absolute: bool = None
    ' Only allow given density value in emitter area and will not add up\n\n    :type: bool\n    '
    use_inflow: bool = None
    ' Control when to apply fluid flow\n\n    :type: bool\n    '
    use_initial_velocity: bool = None
    ' Fluid has some initial velocity when it is emitted\n\n    :type: bool\n    '
    use_particle_size: bool = None
    ' Set particle size in simulation cells or use nearest cell\n\n    :type: bool\n    '
    use_plane_init: bool = None
    ' Treat this object as a planar and unclosed mesh. Fluid will only be emitted from the mesh surface and based on the surface emission value\n\n    :type: bool\n    '
    use_texture: bool = None
    ' Use a texture to control emission strength\n\n    :type: bool\n    '
    uv_layer: str = None
    ' UV map name\n\n    :type: str\n    '
    velocity_coord: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Additional initial velocity in X, Y and Z direction (added to source velocity)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    velocity_factor: float = None
    ' Multiplier of source velocity passed to fluid (source velocity is non-zero only if object is moving)\n\n    :type: float\n    '
    velocity_normal: float = None
    ' Amount of normal directional velocity\n\n    :type: float\n    '
    velocity_random: float = None
    ' Amount of random velocity\n\n    :type: float\n    '
    volume_density: float = None
    ' Controls fluid emission from within the mesh (higher value results in greater emissions from inside the mesh)\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FreestyleLineSet(bpy_struct):
    """ Line set for associating lines and style parameters
    """
    collection: 'Collection' = None
    " A collection of objects based on which feature edges are selected\n\n    :type: 'Collection'\n    "
    collection_negation: typing.Union[str, int] = None
    ' Specify either inclusion or exclusion of feature edges belonging to a collection of objects * ``INCLUSIVE`` Inclusive -- Select feature edges belonging to some object in the group. * ``EXCLUSIVE`` Exclusive -- Select feature edges not belonging to any object in the group.\n\n    :type: typing.Union[str, int]\n    '
    edge_type_combination: typing.Union[str, int] = None
    ' Specify a logical combination of selection conditions on feature edge types * ``OR`` Logical OR -- Select feature edges satisfying at least one of edge type conditions. * ``AND`` Logical AND -- Select feature edges satisfying all edge type conditions.\n\n    :type: typing.Union[str, int]\n    '
    edge_type_negation: typing.Union[str, int] = None
    ' Specify either inclusion or exclusion of feature edges selected by edge types * ``INCLUSIVE`` Inclusive -- Select feature edges satisfying the given edge type conditions. * ``EXCLUSIVE`` Exclusive -- Select feature edges not satisfying the given edge type conditions.\n\n    :type: typing.Union[str, int]\n    '
    exclude_border: bool = None
    ' Exclude border edges\n\n    :type: bool\n    '
    exclude_contour: bool = None
    ' Exclude contours\n\n    :type: bool\n    '
    exclude_crease: bool = None
    ' Exclude crease edges\n\n    :type: bool\n    '
    exclude_edge_mark: bool = None
    ' Exclude edge marks\n\n    :type: bool\n    '
    exclude_external_contour: bool = None
    ' Exclude external contours\n\n    :type: bool\n    '
    exclude_material_boundary: bool = None
    ' Exclude edges at material boundaries\n\n    :type: bool\n    '
    exclude_ridge_valley: bool = None
    ' Exclude ridges and valleys\n\n    :type: bool\n    '
    exclude_silhouette: bool = None
    ' Exclude silhouette edges\n\n    :type: bool\n    '
    exclude_suggestive_contour: bool = None
    ' Exclude suggestive contours\n\n    :type: bool\n    '
    face_mark_condition: typing.Union[str, int] = None
    ' Specify a feature edge selection condition based on face marks * ``ONE`` One Face -- Select a feature edge if either of its adjacent faces is marked. * ``BOTH`` Both Faces -- Select a feature edge if both of its adjacent faces are marked.\n\n    :type: typing.Union[str, int]\n    '
    face_mark_negation: typing.Union[str, int] = None
    ' Specify either inclusion or exclusion of feature edges selected by face marks * ``INCLUSIVE`` Inclusive -- Select feature edges satisfying the given face mark conditions. * ``EXCLUSIVE`` Exclusive -- Select feature edges not satisfying the given face mark conditions.\n\n    :type: typing.Union[str, int]\n    '
    linestyle: 'FreestyleLineStyle' = None
    " Line style settings\n\n    :type: 'FreestyleLineStyle'\n    "
    name: str = None
    ' Line set name\n\n    :type: str\n    '
    qi_end: int = None
    ' Last QI value of the QI range\n\n    :type: int\n    '
    qi_start: int = None
    ' First QI value of the QI range\n\n    :type: int\n    '
    select_border: bool = None
    ' Select border edges (open mesh edges)\n\n    :type: bool\n    '
    select_by_collection: bool = None
    ' Select feature edges based on a collection of objects\n\n    :type: bool\n    '
    select_by_edge_types: bool = None
    ' Select feature edges based on edge types\n\n    :type: bool\n    '
    select_by_face_marks: bool = None
    ' Select feature edges by face marks\n\n    :type: bool\n    '
    select_by_image_border: bool = None
    ' Select feature edges by image border (less memory consumption)\n\n    :type: bool\n    '
    select_by_visibility: bool = None
    ' Select feature edges based on visibility\n\n    :type: bool\n    '
    select_contour: bool = None
    ' Select contours (outer silhouettes of each object)\n\n    :type: bool\n    '
    select_crease: bool = None
    ' Select crease edges (those between two faces making an angle smaller than the Crease Angle)\n\n    :type: bool\n    '
    select_edge_mark: bool = None
    ' Select edge marks (edges annotated by Freestyle edge marks)\n\n    :type: bool\n    '
    select_external_contour: bool = None
    ' Select external contours (outer silhouettes of occluding and occluded objects)\n\n    :type: bool\n    '
    select_material_boundary: bool = None
    ' Select edges at material boundaries\n\n    :type: bool\n    '
    select_ridge_valley: bool = None
    ' Select ridges and valleys (boundary lines between convex and concave areas of surface)\n\n    :type: bool\n    '
    select_silhouette: bool = None
    ' Select silhouettes (edges at the boundary of visible and hidden faces)\n\n    :type: bool\n    '
    select_suggestive_contour: bool = None
    ' Select suggestive contours (almost silhouette/contour edges)\n\n    :type: bool\n    '
    show_render: bool = None
    ' Enable or disable this line set during stroke rendering\n\n    :type: bool\n    '
    visibility: typing.Union[str, int] = None
    ' Determine how to use visibility for feature edge selection * ``VISIBLE`` Visible -- Select visible feature edges. * ``HIDDEN`` Hidden -- Select hidden feature edges. * ``RANGE`` Quantitative Invisibility -- Select feature edges within a range of quantitative invisibility (QI) values.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FreestyleModuleSettings(bpy_struct):
    """ Style module configuration for specifying a style module
    """
    script: 'Text' = None
    " Python script to define a style module\n\n    :type: 'Text'\n    "
    use: bool = None
    ' Enable or disable this style module during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FreestyleSettings(bpy_struct):
    """ Freestyle settings for a ViewLayer data-block
    """
    as_render_pass: bool = None
    ' Renders Freestyle output to a separate pass instead of overlaying it on the Combined pass\n\n    :type: bool\n    '
    crease_angle: float = None
    ' Angular threshold for detecting crease edges\n\n    :type: float\n    '
    kr_derivative_epsilon: float = None
    ' Kr derivative epsilon for computing suggestive contours\n\n    :type: float\n    '
    linesets: 'Linesets' = None
    " \n\n    :type: 'Linesets'\n    "
    mode: typing.Union[str, int] = None
    ' Select the Freestyle control mode * ``SCRIPT`` Python Scripting -- Advanced mode for using style modules written in Python. * ``EDITOR`` Parameter Editor -- Basic mode for interactive style parameter editing.\n\n    :type: typing.Union[str, int]\n    '
    modules: 'FreestyleModules' = None
    " A list of style modules (to be applied from top to bottom)\n\n    :type: 'FreestyleModules'\n    "
    sphere_radius: float = None
    ' Sphere radius for computing curvatures\n\n    :type: float\n    '
    use_culling: bool = None
    ' If enabled, out-of-view edges are ignored\n\n    :type: bool\n    '
    use_material_boundaries: bool = None
    ' Enable material boundaries\n\n    :type: bool\n    '
    use_ridges_and_valleys: bool = None
    ' Enable ridges and valleys\n\n    :type: bool\n    '
    use_smoothness: bool = None
    ' Take face smoothness into account in view map calculation\n\n    :type: bool\n    '
    use_suggestive_contours: bool = None
    ' Enable suggestive contours\n\n    :type: bool\n    '
    use_view_map_cache: bool = None
    ' Keep the computed view map and avoid recalculating it if mesh geometry is unchanged\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Function(bpy_struct):
    """ RNA function definition
    """
    description: str = None
    " Description of the Function's purpose\n\n    :type: str\n    "
    identifier: str = None
    ' Unique name used in the code and scripting\n\n    :type: str\n    '
    is_registered: bool = None
    ' Function is registered as callback as part of type registration\n\n    :type: bool\n    '
    is_registered_optional: bool = None
    ' Function is optionally registered as callback part of type registration\n\n    :type: bool\n    '
    parameters: bpy_prop_collection['Property'] = None
    " Parameters for the function\n\n    :type: bpy_prop_collection['Property']\n    "
    use_self: bool = None
    ' Function does not pass itself as an argument (becomes a static method in python)\n\n    :type: bool\n    '
    use_self_type: bool = None
    ' Function passes itself type as an argument (becomes a class method in python if use_self is false)\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GPencilEditCurve(bpy_struct):
    """ Edition Curve
    """
    curve_points: bpy_prop_collection['GPencilEditCurvePoint'] = None
    " Curve data points\n\n    :type: bpy_prop_collection['GPencilEditCurvePoint']\n    "
    select: bool = None
    ' Curve is selected for viewport editing\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GPencilEditCurvePoint(bpy_struct):
    """ Bezier curve point with two handles
    """
    co: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Coordinates of the control point\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    handle_left: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Coordinates of the first handle\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    handle_right: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Coordinates of the second handle\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    hide: bool = None
    ' Visibility status\n\n    :type: bool\n    '
    point_index: int = None
    ' Index of the corresponding grease pencil stroke point\n\n    :type: int\n    '
    pressure: float = None
    ' Pressure of the grease pencil stroke point\n\n    :type: float\n    '
    select_control_point: bool = None
    ' Control point selection status\n\n    :type: bool\n    '
    select_left_handle: bool = None
    ' Handle 1 selection status\n\n    :type: bool\n    '
    select_right_handle: bool = None
    ' Handle 2 selection status\n\n    :type: bool\n    '
    strength: float = None
    ' Color intensity (alpha factor) of the grease pencil stroke point\n\n    :type: float\n    '
    uv_factor: float = None
    ' Internal UV factor\n\n    :type: float\n    '
    uv_rotation: float = None
    ' Internal UV factor for dot mode\n\n    :type: float\n    '
    vertex_color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Vertex color of the grease pencil stroke point\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GPencilFrame(bpy_struct):
    """ Collection of related sketches on a particular frame
    """
    frame_number: int = None
    ' The frame on which this sketch appears\n\n    :type: int\n    '
    is_edited: bool = None
    ' Frame is being edited (painted on)\n\n    :type: bool\n    '
    keyframe_type: typing.Union[str, int] = None
    " Type of keyframe * ``KEYFRAME`` Keyframe -- Normal keyframe, e.g. for key poses. * ``BREAKDOWN`` Breakdown -- A breakdown pose, e.g. for transitions between key poses. * ``MOVING_HOLD`` Moving Hold -- A keyframe that is part of a moving hold. * ``EXTREME`` Extreme -- An 'extreme' pose, or some other purpose as needed. * ``JITTER`` Jitter -- A filler or baked keyframe for keying on ones, or some other purpose as needed.\n\n    :type: typing.Union[str, int]\n    "
    select: bool = None
    ' Frame is selected for editing in the Dope Sheet\n\n    :type: bool\n    '
    strokes: 'GPencilStrokes' = None
    " Freehand curves defining the sketch on this frame\n\n    :type: 'GPencilStrokes'\n    "

    def clear(self):
        """ Remove all the grease pencil frame data

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GPencilInterpolateSettings(bpy_struct):
    """ Settings for Grease Pencil interpolation tools
    """
    interpolation_curve: 'CurveMapping' = None
    " Custom curve to control 'sequence' interpolation between Grease Pencil frames\n\n    :type: 'CurveMapping'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GPencilLayer(bpy_struct):
    """ Collection of related sketches
    """
    active_frame: 'GPencilFrame' = None
    " Frame currently being displayed for this layer\n\n    :type: 'GPencilFrame'\n    "
    annotation_hide: bool = None
    ' Set annotation Visibility\n\n    :type: bool\n    '
    annotation_onion_after_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Base color for ghosts after the active frame\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    annotation_onion_after_range: int = None
    ' Maximum number of frames to show after current frame\n\n    :type: int\n    '
    annotation_onion_before_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Base color for ghosts before the active frame\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    annotation_onion_before_range: int = None
    ' Maximum number of frames to show before current frame\n\n    :type: int\n    '
    annotation_opacity: float = None
    ' Annotation Layer Opacity\n\n    :type: float\n    '
    blend_mode: typing.Union[str, int] = None
    ' Blend mode\n\n    :type: typing.Union[str, int]\n    '
    channel_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Custom color for animation channel in Dopesheet\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color for all strokes in this layer\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    frames: 'GPencilFrames' = None
    " Sketches for this layer on different frames\n\n    :type: 'GPencilFrames'\n    "
    hide: bool = None
    ' Set layer Visibility\n\n    :type: bool\n    '
    info: str = None
    ' Layer name\n\n    :type: str\n    '
    is_parented: bool = None
    ' True when the layer parent object is set\n\n    :type: bool\n    '
    is_ruler: bool = None
    ' This is a special ruler layer\n\n    :type: bool\n    '
    line_change: int = None
    ' Thickness change to apply to current strokes (in pixels)\n\n    :type: int\n    '
    location: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Values for change location\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    lock: bool = None
    ' Protect layer from further editing and/or frame changes\n\n    :type: bool\n    '
    lock_frame: bool = None
    ' Lock current frame displayed by layer\n\n    :type: bool\n    '
    lock_material: bool = None
    ' Avoids editing locked materials in the layer\n\n    :type: bool\n    '
    mask_layers: 'GreasePencilMaskLayers' = None
    " List of Masking Layers\n\n    :type: 'GreasePencilMaskLayers'\n    "
    matrix_inverse: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " Parent inverse transformation matrix\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    matrix_inverse_layer: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " Local Layer transformation inverse matrix\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    matrix_layer: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " Local Layer transformation matrix\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    opacity: float = None
    ' Layer Opacity\n\n    :type: float\n    '
    parent: 'Object' = None
    " Parent object\n\n    :type: 'Object'\n    "
    parent_bone: str = None
    ' Name of parent bone in case of a bone parenting relation\n\n    :type: str\n    '
    parent_type: typing.Union[str, int] = None
    ' Type of parent relation * ``OBJECT`` Object -- The layer is parented to an object. * ``ARMATURE`` Armature. * ``BONE`` Bone -- The layer is parented to a bone.\n\n    :type: typing.Union[str, int]\n    '
    pass_index: int = None
    ' Index number for the "Layer Index" pass\n\n    :type: int\n    '
    rotation: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler'] = None
    " Values for changes in rotation\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler']\n    "
    scale: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Values for changes in scale\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    select: bool = None
    ' Layer is selected for editing in the Dope Sheet\n\n    :type: bool\n    '
    show_in_front: bool = None
    ' Make the layer display in front of objects\n\n    :type: bool\n    '
    show_points: bool = None
    ' Show the points which make up the strokes (for debugging purposes)\n\n    :type: bool\n    '
    thickness: int = None
    ' Thickness of annotation strokes\n\n    :type: int\n    '
    tint_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color for tinting stroke colors\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    tint_factor: float = None
    ' Factor of tinting color\n\n    :type: float\n    '
    use_annotation_onion_skinning: bool = None
    ' Display annotation onion skins before and after the current frame\n\n    :type: bool\n    '
    use_lights: bool = None
    ' Enable the use of lights on stroke and fill materials\n\n    :type: bool\n    '
    use_mask_layer: bool = None
    ' The visibility of drawings on this layer is affected by the layers in its masks list\n\n    :type: bool\n    '
    use_onion_skinning: bool = None
    ' Display onion skins before and after the current frame\n\n    :type: bool\n    '
    use_solo_mode: bool = None
    ' In Draw Mode only display layers with keyframe in current frame\n\n    :type: bool\n    '
    use_viewlayer_masks: bool = None
    ' Include the mask layers when rendering the view-layer\n\n    :type: bool\n    '
    vertex_paint_opacity: float = None
    ' Vertex Paint mix factor\n\n    :type: float\n    '
    viewlayer_render: str = None
    ' Only include Layer in this View Layer render output (leave blank to include always)\n\n    :type: str\n    '

    def clear(self):
        """ Remove all the grease pencil layer data

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GPencilLayerMask(bpy_struct):
    """ List of Mask Layers
    """
    hide: bool = None
    ' Set mask Visibility\n\n    :type: bool\n    '
    invert: bool = None
    ' Invert mask\n\n    :type: bool\n    '
    name: str = None
    ' Mask layer name\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GPencilSculptGuide(bpy_struct):
    """ Guides for drawing
    """
    angle: float = None
    ' Direction of lines\n\n    :type: float\n    '
    angle_snap: float = None
    ' Angle snapping\n\n    :type: float\n    '
    location: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Custom reference point for guides\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    reference_object: 'Object' = None
    " Object used for reference point\n\n    :type: 'Object'\n    "
    reference_point: typing.Union[str, int] = None
    ' Type of speed guide * ``CURSOR`` Cursor -- Use cursor as reference point. * ``CUSTOM`` Custom -- Use custom reference point. * ``OBJECT`` Object -- Use object as reference point.\n\n    :type: typing.Union[str, int]\n    '
    spacing: float = None
    ' Guide spacing\n\n    :type: float\n    '
    type: typing.Union[str, int] = None
    ' Type of speed guide * ``CIRCULAR`` Circular -- Use single point to create rings. * ``RADIAL`` Radial -- Use single point as direction. * ``PARALLEL`` Parallel -- Parallel lines. * ``GRID`` Grid -- Grid allows horizontal and vertical lines. * ``ISO`` Isometric -- Grid allows isometric and vertical lines.\n\n    :type: typing.Union[str, int]\n    '
    use_guide: bool = None
    ' Enable speed guides\n\n    :type: bool\n    '
    use_snapping: bool = None
    ' Enable snapping to guides angle or spacing options\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GPencilSculptSettings(bpy_struct):
    """ General properties for Grease Pencil stroke sculpting tools
    """
    guide: 'GPencilSculptGuide' = None
    " \n\n    :type: 'GPencilSculptGuide'\n    "
    intersection_threshold: float = None
    ' Threshold for stroke intersections\n\n    :type: float\n    '
    lock_axis: typing.Union[str, int] = None
    ' * ``VIEW`` View -- Align strokes to current view plane. * ``AXIS_Y`` Front (X-Z) -- Project strokes to plane locked to Y. * ``AXIS_X`` Side (Y-Z) -- Project strokes to plane locked to X. * ``AXIS_Z`` Top (X-Y) -- Project strokes to plane locked to Z. * ``CURSOR`` Cursor -- Align strokes to current 3D cursor orientation.\n\n    :type: typing.Union[str, int]\n    '
    multiframe_falloff_curve: 'CurveMapping' = None
    " Custom curve to control falloff of brush effect by Grease Pencil frames\n\n    :type: 'CurveMapping'\n    "
    thickness_primitive_curve: 'CurveMapping' = None
    " Custom curve to control primitive thickness\n\n    :type: 'CurveMapping'\n    "
    use_automasking_layer_active: bool = None
    ' Affect only the Active Layer\n\n    :type: bool\n    '
    use_automasking_layer_stroke: bool = None
    ' Affect only strokes below the cursor\n\n    :type: bool\n    '
    use_automasking_material_active: bool = None
    ' Affect only the Active Material\n\n    :type: bool\n    '
    use_automasking_material_stroke: bool = None
    ' Affect only strokes below the cursor\n\n    :type: bool\n    '
    use_automasking_stroke: bool = None
    ' Affect only strokes below the cursor\n\n    :type: bool\n    '
    use_multiframe_falloff: bool = None
    ' Use falloff effect when edit in multiframe mode to compute brush effect by frame\n\n    :type: bool\n    '
    use_scale_thickness: bool = None
    ' Scale the stroke thickness when transforming strokes\n\n    :type: bool\n    '
    use_thickness_curve: bool = None
    ' Use curve to define primitive stroke thickness\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GPencilStroke(bpy_struct):
    """ Freehand curve defining part of a sketch
    """
    aspect: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    bound_box_max: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    bound_box_min: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    display_mode: typing.Union[str, int] = None
    " Coordinate space that stroke is in * ``SCREEN`` Screen -- Stroke is in screen-space. * ``3DSPACE`` 3D Space -- Stroke is in 3D-space. * ``2DSPACE`` 2D Space -- Stroke is in 2D-space. * ``2DIMAGE`` 2D Image -- Stroke is in 2D-space (but with special 'image' scaling).\n\n    :type: typing.Union[str, int]\n    "
    edit_curve: 'GPencilEditCurve' = None
    " Temporary data for Edit Curve\n\n    :type: 'GPencilEditCurve'\n    "
    end_cap_mode: typing.Union[str, int] = None
    ' Stroke end extreme cap style\n\n    :type: typing.Union[str, int]\n    '
    hardness: float = None
    ' Amount of gradient along section of stroke\n\n    :type: float\n    '
    has_edit_curve: bool = None
    ' Stroke has Curve data to edit shape\n\n    :type: bool\n    '
    is_nofill_stroke: bool = None
    ' Special stroke to use as boundary for filling areas\n\n    :type: bool\n    '
    line_width: int = None
    ' Thickness of stroke (in pixels)\n\n    :type: int\n    '
    material_index: int = None
    ' Material slot index of this stroke\n\n    :type: int\n    '
    points: 'GPencilStrokePoints' = None
    " Stroke data points\n\n    :type: 'GPencilStrokePoints'\n    "
    select: bool = None
    ' Stroke is selected for viewport editing\n\n    :type: bool\n    '
    select_index: int = None
    ' Index of selection used for interpolation\n\n    :type: int\n    '
    start_cap_mode: typing.Union[str, int] = None
    ' Stroke start extreme cap style\n\n    :type: typing.Union[str, int]\n    '
    triangles: bpy_prop_collection['GPencilTriangle'] = None
    " Triangulation data for HQ fill\n\n    :type: bpy_prop_collection['GPencilTriangle']\n    "
    use_cyclic: bool = None
    ' Enable cyclic drawing, closing the stroke\n\n    :type: bool\n    '
    uv_rotation: float = None
    ' Rotation of the UV\n\n    :type: float\n    '
    uv_scale: float = None
    ' Scale of the UV\n\n    :type: float\n    '
    uv_translation: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Translation of default UV position\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    vertex_color_fill: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color used to mix with fill color to get final color\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GPencilStrokePoint(bpy_struct):
    """ Data point for freehand stroke curve
    """
    co: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    pressure: float = None
    ' Pressure of tablet at point when drawing it\n\n    :type: float\n    '
    select: bool = None
    ' Point is selected for viewport editing\n\n    :type: bool\n    '
    strength: float = None
    ' Color intensity (alpha factor)\n\n    :type: float\n    '
    uv_factor: float = None
    ' Internal UV factor\n\n    :type: float\n    '
    uv_fill: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Internal UV factor for filling\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    uv_rotation: float = None
    ' Internal UV factor for dot mode\n\n    :type: float\n    '
    vertex_color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color used to mix with point color to get final color\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GPencilTriangle(bpy_struct):
    """ Triangulation data for Grease Pencil fills
    """
    v1: int = None
    ' First triangle vertex index\n\n    :type: int\n    '
    v2: int = None
    ' Second triangle vertex index\n\n    :type: int\n    '
    v3: int = None
    ' Third triangle vertex index\n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Gizmo(bpy_struct):
    """ Collection of gizmos
    """
    alpha: float = None
    ' \n\n    :type: float\n    '
    alpha_highlight: float = None
    ' \n\n    :type: float\n    '
    bl_idname: str = None
    ' \n\n    :type: str\n    '
    color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    color_highlight: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    group: 'GizmoGroup' = None
    " Gizmo group this gizmo is a member of\n\n    :type: 'GizmoGroup'\n    "
    hide: bool = None
    ' \n\n    :type: bool\n    '
    hide_keymap: bool = None
    ' Ignore the key-map for this gizmo\n\n    :type: bool\n    '
    hide_select: bool = None
    ' \n\n    :type: bool\n    '
    is_highlight: bool = None
    ' \n\n    :type: bool\n    '
    is_modal: bool = None
    ' \n\n    :type: bool\n    '
    line_width: float = None
    ' \n\n    :type: float\n    '
    matrix_basis: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " \n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    matrix_offset: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " \n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    matrix_space: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " \n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    matrix_world: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " \n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    properties: 'GizmoProperties' = None
    " \n\n    :type: 'GizmoProperties'\n    "
    scale_basis: float = None
    ' \n\n    :type: float\n    '
    select: bool = None
    ' \n\n    :type: bool\n    '
    select_bias: float = None
    ' Depth bias used for selection\n\n    :type: float\n    '
    use_draw_hover: bool = None
    ' \n\n    :type: bool\n    '
    use_draw_modal: bool = None
    ' Show while dragging\n\n    :type: bool\n    '
    use_draw_offset_scale: bool = None
    ' Scale the offset matrix (use to apply screen-space offset)\n\n    :type: bool\n    '
    use_draw_scale: bool = None
    ' Use scale when calculating the matrix\n\n    :type: bool\n    '
    use_draw_value: bool = None
    ' Show an indicator for the current value while dragging\n\n    :type: bool\n    '
    use_event_handle_all: bool = None
    ' When highlighted, do not pass events through to be handled by other keymaps\n\n    :type: bool\n    '
    use_grab_cursor: bool = None
    ' \n\n    :type: bool\n    '
    use_operator_tool_properties: bool = None
    ' Merge active tool properties on activation (does not overwrite existing)\n\n    :type: bool\n    '
    use_select_background: bool = None
    " Don't write into the depth buffer\n\n    :type: bool\n    "
    use_tooltip: bool = None
    ' Use tooltips when hovering over this gizmo\n\n    :type: bool\n    '

    def draw(self, context: 'Context'):
        """ 

        :param context: 
        :type context: 'Context'
        """
        pass

    def draw_select(self, context: 'Context', select_id: int=0):
        """ 

        :param context: 
        :type context: 'Context'
        :param select_id: 
        :type select_id: int
        """
        pass

    def test_select(self, context: 'Context', location: typing.Union[bpy_prop_array[int], typing.Sequence[int]]) -> int:
        """ 

        :param context: 
        :type context: 'Context'
        :param location: Location, Region coordinates
        :type location: typing.Union[bpy_prop_array[int], typing.Sequence[int]]
        :rtype: int
        :return: Use -1 to skip this gizmo
        """
        pass

    def modal(self, context: 'Context', event: 'Event', tweak: typing.Union[typing.Set[str], typing.Set[int]]) -> typing.Union[typing.Set[int], typing.Set[str]]:
        """ 

        :param context: 
        :type context: 'Context'
        :param event: 
        :type event: 'Event'
        :param tweak: Tweak
        :type tweak: typing.Union[typing.Set[str], typing.Set[int]]
        :rtype: typing.Union[typing.Set[int], typing.Set[str]]
        :return: result
        """
        pass

    def setup(self):
        """ 

        """
        pass

    def invoke(self, context: 'Context', event: 'Event') -> typing.Union[typing.Set[int], typing.Set[str]]:
        """ 

        :param context: 
        :type context: 'Context'
        :param event: 
        :type event: 'Event'
        :rtype: typing.Union[typing.Set[int], typing.Set[str]]
        :return: result
        """
        pass

    def exit(self, context: 'Context', cancel: bool):
        """ 

        :param context: 
        :type context: 'Context'
        :param cancel: Cancel, otherwise confirm
        :type cancel: bool
        """
        pass

    def select_refresh(self):
        """ 

        """
        pass

    def draw_preset_box(self, matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'], select_id: int=-1):
        """ Draw a box

        :param matrix: The matrix to transform
        :type matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']
        :param select_id: ID to use when gizmo is selectable. Use -1 when not selecting
        :type select_id: int
        """
        pass

    def draw_preset_arrow(self, matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'], axis: typing.Union[str, int]='POS_Z', select_id: int=-1):
        """ Draw a box

        :param matrix: The matrix to transform
        :type matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']
        :param axis: Arrow Orientation
        :type axis: typing.Union[str, int]
        :param select_id: ID to use when gizmo is selectable. Use -1 when not selecting
        :type select_id: int
        """
        pass

    def draw_preset_circle(self, matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'], axis: typing.Union[str, int]='POS_Z', select_id: int=-1):
        """ Draw a box

        :param matrix: The matrix to transform
        :type matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']
        :param axis: Arrow Orientation
        :type axis: typing.Union[str, int]
        :param select_id: ID to use when gizmo is selectable. Use -1 when not selecting
        :type select_id: int
        """
        pass

    def draw_preset_facemap(self, object: 'Object', face_map: int, select_id: int=-1):
        """ Draw the face-map of a mesh object

        :param object: Object
        :type object: 'Object'
        :param face_map: Face map index
        :type face_map: int
        :param select_id: ID to use when gizmo is selectable. Use -1 when not selecting
        :type select_id: int
        """
        pass

    def target_set_prop(self, target: str, data: 'AnyType', property: str, index: int=-1):
        """ 

        :param target: Target property
        :type target: str
        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param index: 
        :type index: int
        """
        pass

    def target_set_operator(self, operator: str, index: int=0) -> 'OperatorProperties':
        """ Operator to run when activating the gizmo (overrides property targets)

        :param operator: Target operator
        :type operator: str
        :param index: Part index
        :type index: int
        :rtype: 'OperatorProperties'
        :return: Operator properties to fill in
        """
        pass

    def target_is_valid(self, property: str):
        """ 

        :param property: Property identifier
        :type property: str
        """
        pass

    def draw_custom_shape(self, shape: typing.Any, *, matrix: typing.Union[typing.Sequence[float], 'mathutils.Matrix']=None, select_id: typing.Any=None):
        """ Draw a shape created form `bpy.types.Gizmo.draw_custom_shape`.

        :param shape: The cached shape to draw.
        :type shape: typing.Any
        :param matrix: 4x4 matrix, when not given `bpy.types.Gizmo.matrix_world` is used.
        :type matrix: typing.Union[typing.Sequence[float], 'mathutils.Matrix']
        :param select_it: 
        :type select_it: int
        :param select_id:  The selection id. Only use when drawing within `bpy.types.Gizmo.draw_select`.
        :type select_id: typing.Any
        """
        pass

    @staticmethod
    def new_custom_shape(type: str, verts: typing.List) -> typing.Any:
        """ Create a new shape that can be passed to `bpy.types.Gizmo.draw_custom_shape`.

        :param type: The type of shape to create in (POINTS, LINES, TRIS, LINE_STRIP).
        :type type: str
        :param verts: Coordinates.
        :type verts: typing.List
        :param display_name: Optional callback that takes the full path, returns the name to display.
        :type display_name: typing.Callable
        :rtype: typing.Any
        :return: The newly created shape.
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def target_get_range(self, target: typing.Any) -> typing.Tuple:
        """ Get the range for this target property.

        :param target:  Target property name.
        :type target: typing.Any
        :rtype: typing.Tuple
        :return: The range of this property (min, max).
        """
        pass

    def target_get_value(self, target: str) -> typing.List:
        """ Get the value of this target property.

        :param target: Target property name.
        :type target: str
        :rtype: typing.List
        :return: The value of the target property.
        """
        pass

    def target_set_handler(self, target: str, get: typing.Callable, set: typing.Callable, range: typing.Callable=None):
        """ Assigns callbacks to a gizmos property.

        :param target: Target property name.
        :type target: str
        :param get: Function that returns the value for this property (single value or sequence).
        :type get: typing.Callable
        :param set: Function that takes a single value argument and applies it.
        :type set: typing.Callable
        :param range: Function that returns a (min, max) tuple for gizmos that use a range.
        :type range: typing.Callable
        """
        pass

    def target_set_value(self, target: str):
        """ Set the value of this target property.

        :param target: Target property name.
        :type target: str
        """
        pass

class GizmoGroup(bpy_struct):
    """ Storage of an operator being executed, or registered after execution
    """
    bl_idname: str = None
    ' \n\n    :type: str\n    '
    bl_label: str = None
    ' \n\n    :type: str\n    '
    bl_options: typing.Union[typing.Set[str], typing.Set[int]] = None
    ' Options for this operator type * ``3D`` 3D -- Use in 3D viewport. * ``SCALE`` Scale -- Scale to respect zoom (otherwise zoom independent display size). * ``DEPTH_3D`` Depth 3D -- Supports culled depth by other objects in the view. * ``SELECT`` Select -- Supports selection. * ``PERSISTENT`` Persistent. * ``SHOW_MODAL_ALL`` Show Modal All -- Show all while interacting, as well as this group when another is being interacted with. * ``EXCLUDE_MODAL`` Exclude Modal -- Show all except this group while interacting. * ``TOOL_INIT`` Tool Init -- Postpone running until tool operator run (when used with a tool). * ``TOOL_FALLBACK_KEYMAP`` Use fallback tools keymap -- Add fallback tools keymap to this gizmo type. * ``VR_REDRAWS`` VR Redraws -- The gizmos are made for use with virtual reality sessions and require special redraw management.\n\n    :type: typing.Union[typing.Set[str], typing.Set[int]]\n    '
    bl_owner_id: str = None
    ' \n\n    :type: str\n    '
    bl_region_type: typing.Union[str, int] = None
    ' The region where the panel is going to be used in\n\n    :type: typing.Union[str, int]\n    '
    bl_space_type: typing.Union[str, int] = None
    ' The space where the panel is going to be used in\n\n    :type: typing.Union[str, int]\n    '
    gizmos: 'Gizmos' = None
    " List of gizmos in the Gizmo Map\n\n    :type: 'Gizmos'\n    "
    has_reports: bool = None
    ' GizmoGroup has a set of reports (warnings and errors) from last execution\n\n    :type: bool\n    '
    name: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def poll(cls, context: 'Context'):
        """ Test if the gizmo group can be called or not

        :param context: 
        :type context: 'Context'
        """
        pass

    @classmethod
    def setup_keymap(cls, keyconfig: 'KeyConfig'):
        """ Initialize keymaps for this gizmo group, use fallback keymap when not present

        :param keyconfig: 
        :type keyconfig: 'KeyConfig'
        """
        pass

    def setup(self, context: 'Context'):
        """ Create gizmos function for the gizmo group

        :param context: 
        :type context: 'Context'
        """
        pass

    def refresh(self, context: 'Context'):
        """ Refresh data (called on common state changes such as selection)

        :param context: 
        :type context: 'Context'
        """
        pass

    def draw_prepare(self, context: 'Context'):
        """ Run before each redraw

        :param context: 
        :type context: 'Context'
        """
        pass

    def invoke_prepare(self, context: 'Context', gizmo: 'Gizmo'):
        """ Run before invoke

        :param context: 
        :type context: 'Context'
        :param gizmo: 
        :type gizmo: 'Gizmo'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GizmoGroupProperties(bpy_struct):
    """ Input properties of a Gizmo Group
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GizmoProperties(bpy_struct):
    """ Input properties of an Gizmo
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GpencilModifier(bpy_struct):
    """ Modifier affecting the Grease Pencil object
    """
    is_override_data: bool = None
    ' In a local override object, whether this modifier comes from the linked reference object, or is local to the override\n\n    :type: bool\n    '
    name: str = None
    ' Modifier name\n\n    :type: str\n    '
    show_expanded: bool = None
    ' Set modifier expanded in the user interface\n\n    :type: bool\n    '
    show_in_editmode: bool = None
    ' Display modifier in Edit mode\n\n    :type: bool\n    '
    show_render: bool = None
    ' Use modifier during render\n\n    :type: bool\n    '
    show_viewport: bool = None
    ' Display modifier in viewport\n\n    :type: bool\n    '
    type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GpencilVertexGroupElement(bpy_struct):
    """ Weight value of a vertex in a vertex group
    """
    group: int = None
    ' \n\n    :type: int\n    '
    weight: float = None
    ' Vertex Weight\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GreasePencilGrid(bpy_struct):
    """ Settings for grid and canvas in 3D viewport
    """
    color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color for grid lines\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    lines: int = None
    ' Number of subdivisions in each side of symmetry line\n\n    :type: int\n    '
    offset: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Offset of the canvas\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    scale: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Grid scale\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Header(bpy_struct):
    """ Editor header containing UI elements
    """
    bl_idname: str = None
    ' If this is set, the header gets a custom ID, otherwise it takes the name of the class used to define the panel; for example, if the class name is "OBJECT_HT_hello", and bl_idname is not set by the script, then bl_idname = "OBJECT_HT_hello"\n\n    :type: str\n    '
    bl_region_type: typing.Union[str, int] = None
    ' The region where the header is going to be used in (defaults to header region)\n\n    :type: typing.Union[str, int]\n    '
    bl_space_type: typing.Union[str, int] = None
    ' The space where the header is going to be used in\n\n    :type: typing.Union[str, int]\n    '
    layout: 'UILayout' = None
    " Structure of the header in the UI\n\n    :type: 'UILayout'\n    "

    def draw(self, context: 'Context'):
        """ Draw UI elements into the header UI layout

        :param context: 
        :type context: 'Context'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Histogram(bpy_struct):
    """ Statistical view of the levels of color in an image
    """
    mode: typing.Union[str, int] = None
    ' Channels to display in the histogram * ``LUMA`` Luma -- Luma. * ``RGB`` RGB -- Red Green Blue. * ``R`` R -- Red. * ``G`` G -- Green. * ``B`` B -- Blue. * ``A`` A -- Alpha.\n\n    :type: typing.Union[str, int]\n    '
    show_line: bool = None
    ' Display lines rather than filled shapes\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ID(bpy_struct):
    """ Base type for data-blocks, defining a unique name, linking from other libraries and garbage collection
    """
    asset_data: 'AssetMetaData' = None
    " Additional data for an asset data-block\n\n    :type: 'AssetMetaData'\n    "
    is_embedded_data: bool = None
    ' This data-block is not an independent one, but is actually a sub-data of another ID (typical example: root node trees or master collections)\n\n    :type: bool\n    '
    is_evaluated: bool = None
    ' Whether this ID is runtime-only, evaluated data-block, or actual data from .blend file\n\n    :type: bool\n    '
    is_library_indirect: bool = None
    ' Is this ID block linked indirectly\n\n    :type: bool\n    '
    is_runtime_data: bool = None
    " This data-block is runtime data, i.e. it won't be saved in .blend file. Note that e.g. evaluated IDs are always runtime, so this value is only editable for data-blocks in Main data-base\n\n    :type: bool\n    "
    library: 'Library' = None
    " Library file the data-block is linked from\n\n    :type: 'Library'\n    "
    library_weak_reference: 'LibraryWeakReference' = None
    " Weak reference to a data-block in another library .blend file (used to re-use already appended data instead of appending new copies)\n\n    :type: 'LibraryWeakReference'\n    "
    name: str = None
    ' Unique data-block ID name\n\n    :type: str\n    '
    name_full: str = None
    ' Unique data-block ID name, including library one is any\n\n    :type: str\n    '
    original: 'ID' = None
    " Actual data-block from .blend file (Main database) that generated that evaluated one\n\n    :type: 'ID'\n    "
    override_library: 'IDOverrideLibrary' = None
    " Library override data\n\n    :type: 'IDOverrideLibrary'\n    "
    preview: 'ImagePreview' = None
    " Preview image and icon of this data-block (always None if not supported for this type of data)\n\n    :type: 'ImagePreview'\n    "
    tag: bool = None
    ' Tools can use this to tag data for their own purposes (initial state is undefined)\n\n    :type: bool\n    '
    use_extra_user: bool = None
    ' Indicates whether an extra user is set or not (mainly for internal/debug usages)\n\n    :type: bool\n    '
    use_fake_user: bool = None
    ' Save this data-block even if it has no users\n\n    :type: bool\n    '
    users: int = None
    ' Number of times this data-block is referenced\n\n    :type: int\n    '

    def evaluated_get(self, depsgraph: 'Depsgraph') -> 'ID':
        """ Get corresponding evaluated ID from the given dependency graph

        :param depsgraph: Dependency graph to perform lookup in
        :type depsgraph: 'Depsgraph'
        :rtype: 'ID'
        :return: New copy of the ID
        """
        pass

    def copy(self) -> 'ID':
        """ Create a copy of this data-block (not supported for all data-blocks). The result is added to the Blend-File Data (Main database), with all references to other data-blocks ensured to be from within the same Blend-File Data

        :rtype: 'ID'
        :return: New copy of the ID
        """
        pass

    def asset_mark(self):
        """ Enable easier reuse of the data-block through the Asset Browser, with the help of customizable metadata (like previews, descriptions and tags)

        """
        pass

    def asset_clear(self):
        """ Delete all asset metadata and turn the asset data-block back into a normal data-block

        """
        pass

    def asset_generate_preview(self):
        """ Generate preview image (might be scheduled in a background thread)

        """
        pass

    def override_create(self, remap_local_usages: bool=False) -> 'ID':
        """ Create an overridden local copy of this linked data-block (not supported for all data-blocks)

        :param remap_local_usages: Whether local usages of the linked ID should be remapped to the new library override of it
        :type remap_local_usages: bool
        :rtype: 'ID'
        :return: New overridden local copy of the ID
        """
        pass

    def override_hierarchy_create(self, scene: 'Scene', view_layer: 'ViewLayer', reference: 'ID'=None, do_fully_editable: bool=False) -> 'ID':
        """ Create an overridden local copy of this linked data-block, and most of its dependencies when it is a Collection or and Object

        :param scene: In which scene the new overrides should be instantiated
        :type scene: 'Scene'
        :param view_layer: In which view layer the new overrides should be instantiated
        :type view_layer: 'ViewLayer'
        :param reference: Another ID (usually an Object or Collection) used as a hint to decide where to instantiate the new overrides
        :type reference: 'ID'
        :param do_fully_editable: Make all library overrides generated by this call fully editable by the user (none will be 'system overrides')
        :type do_fully_editable: bool
        :rtype: 'ID'
        :return: New overridden local copy of the root ID
        """
        pass

    def override_template_create(self):
        """ Create an override template for this ID

        """
        pass

    def user_clear(self):
        """ Clear the user count of a data-block so its not saved, on reload the data will be removed This function is for advanced use only, misuse can crash blender since the user count is used to prevent data being removed when it is used.

        """
        pass

    def user_remap(self, new_id: 'ID'):
        """ Replace all usage in the .blend file of this ID by new given one

        :param new_id: New ID to use
        :type new_id: 'ID'
        """
        pass

    def make_local(self, clear_proxy: bool=True) -> 'ID':
        """ Make this datablock local, return local one (may be a copy of the original, in case it is also indirectly used)

        :param clear_proxy: Deprecated, has no effect
        :type clear_proxy: bool
        :rtype: 'ID'
        :return: This ID, or the new ID if it was copied
        """
        pass

    def user_of_id(self, id: 'ID') -> int:
        """ Count the number of times that ID uses/references given one

        :param id: ID to count usages
        :type id: 'ID'
        :rtype: int
        :return: Number of usages/references of given id by current data-block
        """
        pass

    def animation_data_create(self) -> 'AnimData':
        """ Create animation data to this ID, note that not all ID types support this

        :rtype: 'AnimData'
        :return: New animation data or NULL
        """
        pass

    def animation_data_clear(self):
        """ Clear animation on this ID

        """
        pass

    def update_tag(self, refresh: typing.Union[typing.Set[str], typing.Set[int]]={}):
        """ Tag the ID to update its display data, e.g. when calling `bpy.types.Scene.update`

        :param refresh: Type of updates to perform
        :type refresh: typing.Union[typing.Set[str], typing.Set[int]]
        """
        pass

    def preview_ensure(self) -> 'ImagePreview':
        """ Ensure that this ID has preview data (if ID type supports it)

        :rtype: 'ImagePreview'
        :return: The existing or created preview
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class IDOverrideLibrary(bpy_struct):
    """ Struct gathering all data needed by overridden linked IDs
    """
    hierarchy_root: 'ID' = None
    " Library override ID used as root of the override hierarchy this ID is a member of\n\n    :type: 'ID'\n    "
    is_in_hierarchy: bool = None
    ' Whether this library override is defined as part of a library hierarchy, or as a single, isolated and autonomous override\n\n    :type: bool\n    '
    is_system_override: bool = None
    ' Whether this library override exists only for the override hierarchy, or if it is actually editable by the user\n\n    :type: bool\n    '
    properties: 'IDOverrideLibraryProperties' = None
    " List of overridden properties\n\n    :type: 'IDOverrideLibraryProperties'\n    "
    reference: 'ID' = None
    " Linked ID used as reference by this override\n\n    :type: 'ID'\n    "

    def operations_update(self):
        """ Update the library override operations based on the differences between this override ID and its reference

        """
        pass

    def reset(self, do_hierarchy: bool=True, set_system_override: bool=False):
        """ Reset this override to match again its linked reference ID

        :param do_hierarchy: Also reset all the dependencies of this override to match their reference linked IDs
        :type do_hierarchy: bool
        :param set_system_override: Reset all user-editable overrides as (non-editable) system overrides
        :type set_system_override: bool
        """
        pass

    def destroy(self, do_hierarchy: bool=True):
        """ Delete this override ID and remap its usages to its linked reference ID instead

        :param do_hierarchy: Also delete all the dependencies of this override and remap their usages to their reference linked IDs
        :type do_hierarchy: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class IDOverrideLibraryProperty(bpy_struct):
    """ Description of an overridden property
    """
    operations: 'IDOverrideLibraryPropertyOperations' = None
    " List of overriding operations for a property\n\n    :type: 'IDOverrideLibraryPropertyOperations'\n    "
    rna_path: str = None
    ' RNA path leading to that property, from owning ID\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class IDOverrideLibraryPropertyOperation(bpy_struct):
    """ Description of an override operation over an overridden property
    """
    flag: typing.Union[str, int] = None
    ' Optional flags (NOT USED) * ``MANDATORY`` Mandatory -- For templates, prevents the user from removing predefined operation (NOT USED). * ``LOCKED`` Locked -- Prevents the user from modifying that override operation (NOT USED).\n\n    :type: typing.Union[str, int]\n    '
    operation: typing.Union[str, int] = None
    ' What override operation is performed * ``NOOP`` No-Op -- Does nothing, prevents adding actual overrides (NOT USED). * ``REPLACE`` Replace -- Replace value of reference by overriding one. * ``DIFF_ADD`` Differential -- Stores and apply difference between reference and local value (NOT USED). * ``DIFF_SUB`` Differential -- Stores and apply difference between reference and local value (NOT USED). * ``FACT_MULTIPLY`` Factor -- Stores and apply multiplication factor between reference and local value (NOT USED). * ``INSERT_AFTER`` Insert After -- Insert a new item into collection after the one referenced in subitem_reference_name or _index. * ``INSERT_BEFORE`` Insert Before -- Insert a new item into collection before the one referenced in subitem_reference_name or _index (NOT USED).\n\n    :type: typing.Union[str, int]\n    '
    subitem_local_index: int = None
    ' Used to handle insertions into collection\n\n    :type: int\n    '
    subitem_local_name: str = None
    ' Used to handle insertions into collection\n\n    :type: str\n    '
    subitem_reference_index: int = None
    ' Used to handle insertions into collection\n\n    :type: int\n    '
    subitem_reference_name: str = None
    ' Used to handle insertions into collection\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class IDPropertyWrapPtr(bpy_struct):

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class IKParam(bpy_struct):
    """ Base type for IK solver parameters
    """
    ik_solver: typing.Union[str, int] = None
    ' IK solver for which these parameters are defined * ``LEGACY`` Standard -- Original IK solver. * ``ITASC`` iTaSC -- Multi constraint, stateful IK solver.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ImageFormatSettings(bpy_struct):
    """ Settings for image formats
    """
    cineon_black: int = None
    ' Log conversion reference blackpoint\n\n    :type: int\n    '
    cineon_gamma: float = None
    ' Log conversion gamma\n\n    :type: float\n    '
    cineon_white: int = None
    ' Log conversion reference whitepoint\n\n    :type: int\n    '
    color_depth: typing.Union[str, int] = None
    ' Bit depth per channel\n\n    :type: typing.Union[str, int]\n    '
    color_management: typing.Union[str, int] = None
    ' Which color management settings to use for file saving\n\n    :type: typing.Union[str, int]\n    '
    color_mode: typing.Union[str, int] = None
    ' Choose BW for saving grayscale images, RGB for saving red, green and blue channels, and RGBA for saving red, green, blue and alpha channels\n\n    :type: typing.Union[str, int]\n    '
    compression: int = None
    ' Amount of time to determine best compression: 0 = no compression with fast file output, 100 = maximum lossless compression with slow file output\n\n    :type: int\n    '
    display_settings: 'ColorManagedDisplaySettings' = None
    " Settings of device saved image would be displayed on\n\n    :type: 'ColorManagedDisplaySettings'\n    "
    exr_codec: typing.Union[str, int] = None
    ' Codec settings for OpenEXR\n\n    :type: typing.Union[str, int]\n    '
    file_format: typing.Union[str, int] = None
    ' File format to save the rendered images as\n\n    :type: typing.Union[str, int]\n    '
    has_linear_colorspace: bool = None
    ' File format expects linear color space\n\n    :type: bool\n    '
    jpeg2k_codec: typing.Union[str, int] = None
    ' Codec settings for Jpeg2000\n\n    :type: typing.Union[str, int]\n    '
    linear_colorspace_settings: 'ColorManagedInputColorspaceSettings' = None
    " Output color space settings\n\n    :type: 'ColorManagedInputColorspaceSettings'\n    "
    quality: int = None
    ' Quality for image formats that support lossy compression\n\n    :type: int\n    '
    stereo_3d_format: 'Stereo3dFormat' = None
    " Settings for stereo 3D\n\n    :type: 'Stereo3dFormat'\n    "
    tiff_codec: typing.Union[str, int] = None
    ' Compression mode for TIFF\n\n    :type: typing.Union[str, int]\n    '
    use_cineon_log: bool = None
    ' Convert to logarithmic color space\n\n    :type: bool\n    '
    use_jpeg2k_cinema_48: bool = None
    ' Use Openjpeg Cinema Preset (48fps)\n\n    :type: bool\n    '
    use_jpeg2k_cinema_preset: bool = None
    ' Use Openjpeg Cinema Preset\n\n    :type: bool\n    '
    use_jpeg2k_ycc: bool = None
    ' Save luminance-chrominance-chrominance channels instead of RGB colors\n\n    :type: bool\n    '
    use_preview: bool = None
    ' When rendering animations, save JPG preview images in same directory\n\n    :type: bool\n    '
    use_zbuffer: bool = None
    ' Save the z-depth per pixel (32-bit unsigned integer z-buffer)\n\n    :type: bool\n    '
    view_settings: 'ColorManagedViewSettings' = None
    " Color management settings applied on image before saving\n\n    :type: 'ColorManagedViewSettings'\n    "
    views_format: typing.Union[str, int] = None
    ' Format of multiview media\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ImagePackedFile(bpy_struct):
    filepath: str = None
    ' \n\n    :type: str\n    '
    packed_file: 'PackedFile' = None
    " \n\n    :type: 'PackedFile'\n    "
    tile_number: int = None
    ' \n\n    :type: int\n    '
    view: int = None
    ' \n\n    :type: int\n    '

    def save(self):
        """ Save the packed file to its filepath

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ImagePreview(bpy_struct):
    """ Preview image and icon
    """
    icon_id: int = None
    ' Unique integer identifying this preview as an icon (zero means invalid)\n\n    :type: int\n    '
    icon_pixels: int = None
    ' Icon pixels, as bytes (always 32-bit RGBA)\n\n    :type: int\n    '
    icon_pixels_float: float = None
    ' Icon pixels components, as floats (RGBA concatenated values)\n\n    :type: float\n    '
    icon_size: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Width and height in pixels\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    image_pixels: int = None
    ' Image pixels, as bytes (always 32-bit RGBA)\n\n    :type: int\n    '
    image_pixels_float: float = None
    ' Image pixels components, as floats (RGBA concatenated values)\n\n    :type: float\n    '
    image_size: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Width and height in pixels\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    is_icon_custom: bool = None
    ' True if this preview icon has been modified by py script, and is no more auto-generated by Blender\n\n    :type: bool\n    '
    is_image_custom: bool = None
    ' True if this preview image has been modified by py script, and is no more auto-generated by Blender\n\n    :type: bool\n    '

    def reload(self):
        """ Reload the preview from its source path

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ImageUser(bpy_struct):
    """ Parameters defining how an Image data-block is used by another data-block
    """
    frame_current: int = None
    ' Current frame number in image sequence or movie\n\n    :type: int\n    '
    frame_duration: int = None
    ' Number of images of a movie to use\n\n    :type: int\n    '
    frame_offset: int = None
    ' Offset the number of the frame to use in the animation\n\n    :type: int\n    '
    frame_start: int = None
    ' Global starting frame of the movie/sequence, assuming first picture has a #1\n\n    :type: int\n    '
    multilayer_layer: int = None
    ' Layer in multilayer image\n\n    :type: int\n    '
    multilayer_pass: int = None
    ' Pass in multilayer image\n\n    :type: int\n    '
    multilayer_view: int = None
    ' View in multilayer image\n\n    :type: int\n    '
    tile: int = None
    ' Tile in tiled image\n\n    :type: int\n    '
    use_auto_refresh: bool = None
    ' Always refresh image on frame changes\n\n    :type: bool\n    '
    use_cyclic: bool = None
    ' Cycle the images in the movie\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class IntAttributeValue(bpy_struct):
    """ Integer value in geometry attribute
    """
    value: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class KeyConfig(bpy_struct):
    """ Input configuration, including keymaps
    """
    is_user_defined: bool = None
    ' Indicates that a keyconfig was defined by the user\n\n    :type: bool\n    '
    keymaps: 'KeyMaps' = None
    " Key maps configured as part of this configuration\n\n    :type: 'KeyMaps'\n    "
    name: str = None
    ' Name of the key configuration\n\n    :type: str\n    '
    preferences: 'KeyConfigPreferences' = None
    " \n\n    :type: 'KeyConfigPreferences'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class KeyConfigPreferences(bpy_struct):
    bl_idname: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class KeyMap(bpy_struct):
    """ Input configuration, including keymaps
    """
    bl_owner_id: str = None
    ' Internal owner\n\n    :type: str\n    '
    is_modal: bool = None
    ' Indicates that a keymap is used for translate modal events for an operator\n\n    :type: bool\n    '
    is_user_modified: bool = None
    ' Keymap is defined by the user\n\n    :type: bool\n    '
    keymap_items: 'KeyMapItems' = None
    " Items in the keymap, linking an operator to an input event\n\n    :type: 'KeyMapItems'\n    "
    modal_event_values: bpy_prop_collection['EnumPropertyItem'] = None
    " Give access to the possible event values of this modal keymap's items (#KeyMapItem.propvalue), for API introspection\n\n    :type: bpy_prop_collection['EnumPropertyItem']\n    "
    name: str = None
    ' Name of the key map\n\n    :type: str\n    '
    region_type: typing.Union[str, int] = None
    ' Optional region type keymap is associated with\n\n    :type: typing.Union[str, int]\n    '
    show_expanded_children: bool = None
    ' Children expanded in the user interface\n\n    :type: bool\n    '
    show_expanded_items: bool = None
    ' Expanded in the user interface\n\n    :type: bool\n    '
    space_type: typing.Union[str, int] = None
    ' Optional space type keymap is associated with\n\n    :type: typing.Union[str, int]\n    '

    def active(self) -> 'KeyMap':
        """ active

        :rtype: 'KeyMap'
        :return: Key Map, Active key map
        """
        pass

    def restore_to_default(self):
        """ restore_to_default

        """
        pass

    def restore_item_to_default(self, item: 'KeyMapItem'):
        """ restore_item_to_default

        :param item: Item
        :type item: 'KeyMapItem'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class KeyMapItem(bpy_struct):
    """ Item in a Key Map
    """
    active: bool = None
    ' Activate or deactivate item\n\n    :type: bool\n    '
    alt: int = None
    ' Alt key pressed, -1 for any state\n\n    :type: int\n    '
    alt_ui: bool = None
    ' Alt key pressed\n\n    :type: bool\n    '
    any: bool = None
    ' Any modifier keys pressed\n\n    :type: bool\n    '
    ctrl: int = None
    ' Control key pressed, -1 for any state\n\n    :type: int\n    '
    ctrl_ui: bool = None
    ' Control key pressed\n\n    :type: bool\n    '
    direction: typing.Union[str, int] = None
    ' The direction (only applies to drag events)\n\n    :type: typing.Union[str, int]\n    '
    id: int = None
    ' ID of the item\n\n    :type: int\n    '
    idname: str = None
    ' Identifier of operator to call on input event\n\n    :type: str\n    '
    is_user_defined: bool = None
    " Is this keymap item user defined (doesn't just replace a builtin item)\n\n    :type: bool\n    "
    is_user_modified: bool = None
    ' Is this keymap item modified by the user\n\n    :type: bool\n    '
    key_modifier: typing.Union[str, int] = None
    ' Regular key pressed as a modifier\n\n    :type: typing.Union[str, int]\n    '
    map_type: typing.Union[str, int] = None
    ' Type of event mapping\n\n    :type: typing.Union[str, int]\n    '
    name: str = None
    ' Name of operator (translated) to call on input event\n\n    :type: str\n    '
    oskey: int = None
    ' Operating system key pressed, -1 for any state\n\n    :type: int\n    '
    oskey_ui: bool = None
    ' Operating system key pressed\n\n    :type: bool\n    '
    properties: 'OperatorProperties' = None
    " Properties to set when the operator is called\n\n    :type: 'OperatorProperties'\n    "
    propvalue: typing.Union[str, int] = None
    ' The value this event translates to in a modal keymap\n\n    :type: typing.Union[str, int]\n    '
    repeat: bool = None
    ' Active on key-repeat events (when a key is held)\n\n    :type: bool\n    '
    shift: int = None
    ' Shift key pressed, -1 for any state\n\n    :type: int\n    '
    shift_ui: bool = None
    ' Shift key pressed\n\n    :type: bool\n    '
    show_expanded: bool = None
    ' Show key map event and property details in the user interface\n\n    :type: bool\n    '
    type: typing.Union[str, int] = None
    ' Type of event\n\n    :type: typing.Union[str, int]\n    '
    value: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    def compare(self, item: 'KeyMapItem') -> bool:
        """ compare

        :param item: Item
        :type item: 'KeyMapItem'
        :rtype: bool
        :return: Comparison result
        """
        pass

    def to_string(self, compact: bool=False) -> str:
        """ to_string

        :param compact: Compact
        :type compact: bool
        :rtype: str
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Keyframe(bpy_struct):
    """ Bezier curve point with two handles defining a Keyframe on an F-Curve
    """
    amplitude: float = None
    " Amount to boost elastic bounces for 'elastic' easing\n\n    :type: float\n    "
    back: float = None
    " Amount of overshoot for 'back' easing\n\n    :type: float\n    "
    co: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Coordinates of the control point\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    co_ui: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Coordinates of the control point. Note: Changing this value also updates the handles similar to using the graph editor transform operator\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    easing: typing.Union[str, int] = None
    ' Which ends of the segment between this and the next keyframe easing interpolation is applied to\n\n    :type: typing.Union[str, int]\n    '
    handle_left: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Coordinates of the left handle (before the control point)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    handle_left_type: typing.Union[str, int] = None
    ' Handle types\n\n    :type: typing.Union[str, int]\n    '
    handle_right: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Coordinates of the right handle (after the control point)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    handle_right_type: typing.Union[str, int] = None
    ' Handle types\n\n    :type: typing.Union[str, int]\n    '
    interpolation: typing.Union[str, int] = None
    ' Interpolation method to use for segment of the F-Curve from this Keyframe until the next Keyframe\n\n    :type: typing.Union[str, int]\n    '
    period: float = None
    ' Time between bounces for elastic easing\n\n    :type: float\n    '
    select_control_point: bool = None
    ' Control point selection status\n\n    :type: bool\n    '
    select_left_handle: bool = None
    ' Left handle selection status\n\n    :type: bool\n    '
    select_right_handle: bool = None
    ' Right handle selection status\n\n    :type: bool\n    '
    type: typing.Union[str, int] = None
    ' Type of keyframe (for visual purposes only)\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class KeyingSet(bpy_struct):
    """ Settings that should be keyframed together
    """
    bl_description: str = None
    ' A short description of the keying set\n\n    :type: str\n    '
    bl_idname: str = None
    ' If this is set, the Keying Set gets a custom ID, otherwise it takes the name of the class used to define the Keying Set (for example, if the class name is "BUILTIN_KSI_location", and bl_idname is not set by the script, then bl_idname = "BUILTIN_KSI_location")\n\n    :type: str\n    '
    bl_label: str = None
    ' \n\n    :type: str\n    '
    is_path_absolute: bool = None
    ' Keying Set defines specific paths/settings to be keyframed (i.e. is not reliant on context info)\n\n    :type: bool\n    '
    paths: 'KeyingSetPaths' = None
    " Keying Set Paths to define settings that get keyframed together\n\n    :type: 'KeyingSetPaths'\n    "
    type_info: 'KeyingSetInfo' = None
    " Callback function defines for built-in Keying Sets\n\n    :type: 'KeyingSetInfo'\n    "
    use_insertkey_needed: bool = None
    " Only insert keyframes where they're needed in the relevant F-Curves\n\n    :type: bool\n    "
    use_insertkey_override_needed: bool = None
    " Override default setting to only insert keyframes where they're needed in the relevant F-Curves\n\n    :type: bool\n    "
    use_insertkey_override_visual: bool = None
    " Override default setting to insert keyframes based on 'visual transforms'\n\n    :type: bool\n    "
    use_insertkey_override_xyz_to_rgb: bool = None
    ' Override default setting to set color for newly added transformation F-Curves (Location, Rotation, Scale) to be based on the transform axis\n\n    :type: bool\n    '
    use_insertkey_visual: bool = None
    " Insert keyframes based on 'visual transforms'\n\n    :type: bool\n    "
    use_insertkey_xyz_to_rgb: bool = None
    ' Color for newly added transformation F-Curves (Location, Rotation, Scale) is based on the transform axis\n\n    :type: bool\n    '

    def refresh(self):
        """ Refresh Keying Set to ensure that it is valid for the current context (call before each use of one)

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class KeyingSetInfo(bpy_struct):
    """ Callback function defines for builtin Keying Sets
    """
    bl_description: str = None
    ' A short description of the keying set\n\n    :type: str\n    '
    bl_idname: str = None
    ' If this is set, the Keying Set gets a custom ID, otherwise it takes the name of the class used to define the Keying Set (for example, if the class name is "BUILTIN_KSI_location", and bl_idname is not set by the script, then bl_idname = "BUILTIN_KSI_location")\n\n    :type: str\n    '
    bl_label: str = None
    ' \n\n    :type: str\n    '
    bl_options: typing.Union[typing.Set[int], typing.Set[str]] = None
    ' Keying Set options to use when inserting keyframes\n\n    :type: typing.Union[typing.Set[int], typing.Set[str]]\n    '

    def poll(self, context: 'Context'):
        """ Test if Keying Set can be used or not

        :param context: 
        :type context: 'Context'
        """
        pass

    def iterator(self, context: 'Context', ks: 'KeyingSet'):
        """ Call generate() on the structs which have properties to be keyframed

        :param context: 
        :type context: 'Context'
        :param ks: 
        :type ks: 'KeyingSet'
        """
        pass

    def generate(self, context: 'Context', ks: 'KeyingSet', data: 'AnyType'):
        """ Add Paths to the Keying Set to keyframe the properties of the given data

        :param context: 
        :type context: 'Context'
        :param ks: 
        :type ks: 'KeyingSet'
        :param data: 
        :type data: 'AnyType'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class KeyingSetPath(bpy_struct):
    """ Path to a setting for use in a Keying Set
    """
    array_index: int = None
    ' Index to the specific setting if applicable\n\n    :type: int\n    '
    data_path: str = None
    ' Path to property setting\n\n    :type: str\n    '
    group: str = None
    ' Name of Action Group to assign setting(s) for this path to\n\n    :type: str\n    '
    group_method: typing.Union[str, int] = None
    ' Method used to define which Group-name to use\n\n    :type: typing.Union[str, int]\n    '
    id: 'ID' = None
    " ID-Block that keyframes for Keying Set should be added to (for Absolute Keying Sets only)\n\n    :type: 'ID'\n    "
    id_type: typing.Union[str, int] = None
    ' Type of ID-block that can be used\n\n    :type: typing.Union[str, int]\n    '
    use_entire_array: bool = None
    " When an 'array/vector' type is chosen (Location, Rotation, Color, etc.), entire array is to be used\n\n    :type: bool\n    "
    use_insertkey_needed: bool = None
    " Only insert keyframes where they're needed in the relevant F-Curves\n\n    :type: bool\n    "
    use_insertkey_override_needed: bool = None
    " Override default setting to only insert keyframes where they're needed in the relevant F-Curves\n\n    :type: bool\n    "
    use_insertkey_override_visual: bool = None
    " Override default setting to insert keyframes based on 'visual transforms'\n\n    :type: bool\n    "
    use_insertkey_override_xyz_to_rgb: bool = None
    ' Override default setting to set color for newly added transformation F-Curves (Location, Rotation, Scale) to be based on the transform axis\n\n    :type: bool\n    '
    use_insertkey_visual: bool = None
    " Insert keyframes based on 'visual transforms'\n\n    :type: bool\n    "
    use_insertkey_xyz_to_rgb: bool = None
    ' Color for newly added transformation F-Curves (Location, Rotation, Scale) is based on the transform axis\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LatticePoint(bpy_struct):
    """ Point in the lattice grid
    """
    co: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Original undeformed location used to calculate the strength of the deform effect (edit/animate the Deformed Location instead)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    co_deform: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    groups: bpy_prop_collection['VertexGroupElement'] = None
    " Weights for the vertex groups this point is member of\n\n    :type: bpy_prop_collection['VertexGroupElement']\n    "
    select: bool = None
    ' Selection status\n\n    :type: bool\n    '
    weight_softbody: float = None
    ' Softbody goal weight\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LayerCollection(bpy_struct):
    """ Layer collection
    """
    children: bpy_prop_collection['LayerCollection'] = None
    " Layer collection children\n\n    :type: bpy_prop_collection['LayerCollection']\n    "
    collection: 'Collection' = None
    " Collection this layer collection is wrapping\n\n    :type: 'Collection'\n    "
    exclude: bool = None
    ' Exclude from view layer\n\n    :type: bool\n    '
    hide_viewport: bool = None
    ' Temporarily hide in viewport\n\n    :type: bool\n    '
    holdout: bool = None
    ' Mask out objects in collection from view layer\n\n    :type: bool\n    '
    indirect_only: bool = None
    ' Objects in collection only contribute indirectly (through shadows and reflections) in the view layer\n\n    :type: bool\n    '
    is_visible: bool = None
    ' Whether this collection is visible for the view layer, take into account the collection parent\n\n    :type: bool\n    '
    name: str = None
    ' Name of this layer collection (same as its collection one)\n\n    :type: str\n    '

    def visible_get(self):
        """ Whether this collection is visible, take into account the collection parent and the viewport

        """
        pass

    def has_objects(self):
        """ 

        """
        pass

    def has_selected_objects(self, view_layer: 'ViewLayer'):
        """ 

        :param view_layer: View layer the layer collection belongs to
        :type view_layer: 'ViewLayer'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LibraryWeakReference(bpy_struct):
    """ Read-only external reference to a linked data-block and its library file
    """
    filepath: str = None
    ' Path to the library .blend file\n\n    :type: str\n    '
    id_name: str = None
    " Full ID name in the library .blend file (including the two leading 'id type' chars)\n\n    :type: str\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Lightgroup(bpy_struct):
    name: str = None
    ' Name of the Lightgroup\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleModifier(bpy_struct):
    """ Base type to define modifiers
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Macro(bpy_struct):
    """ Storage of a macro operator being executed, or registered after execution
    """
    bl_cursor_pending: typing.Union[str, int] = None
    ' Cursor to use when waiting for the user to select a location to activate the operator (when ``bl_options`` has ``DEPENDS_ON_CURSOR`` set)\n\n    :type: typing.Union[str, int]\n    '
    bl_description: str = None
    ' \n\n    :type: str\n    '
    bl_idname: str = None
    ' \n\n    :type: str\n    '
    bl_label: str = None
    ' \n\n    :type: str\n    '
    bl_options: typing.Union[typing.Set[int], typing.Set[str]] = None
    ' Options for this operator type\n\n    :type: typing.Union[typing.Set[int], typing.Set[str]]\n    '
    bl_translation_context: str = None
    ' \n\n    :type: str\n    '
    bl_undo_group: str = None
    ' \n\n    :type: str\n    '
    has_reports: bool = None
    ' Operator has a set of reports (warnings and errors) from last execution\n\n    :type: bool\n    '
    name: str = None
    ' \n\n    :type: str\n    '
    properties: 'OperatorProperties' = None
    " \n\n    :type: 'OperatorProperties'\n    "

    def report(self, type: typing.Union[typing.Set[int], typing.Set[str]], message: str):
        """ report

        :param type: Type
        :type type: typing.Union[typing.Set[int], typing.Set[str]]
        :param message: Report Message
        :type message: str
        """
        pass

    @classmethod
    def poll(cls, context: 'Context'):
        """ Test if the operator can be called or not

        :param context: 
        :type context: 'Context'
        """
        pass

    def draw(self, context: 'Context'):
        """ Draw function for the operator

        :param context: 
        :type context: 'Context'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MaskLayer(bpy_struct):
    """ Single layer used for masking pixels
    """
    alpha: float = None
    ' Render Opacity\n\n    :type: float\n    '
    blend: typing.Union[str, int] = None
    ' Method of blending mask layers\n\n    :type: typing.Union[str, int]\n    '
    falloff: typing.Union[str, int] = None
    ' Falloff type the feather\n\n    :type: typing.Union[str, int]\n    '
    hide: bool = None
    ' Restrict visibility in the viewport\n\n    :type: bool\n    '
    hide_render: bool = None
    ' Restrict renderability\n\n    :type: bool\n    '
    hide_select: bool = None
    ' Restrict selection in the viewport\n\n    :type: bool\n    '
    invert: bool = None
    ' Invert the mask black/white\n\n    :type: bool\n    '
    name: str = None
    ' Unique name of layer\n\n    :type: str\n    '
    select: bool = None
    ' Layer is selected for editing in the Dope Sheet\n\n    :type: bool\n    '
    splines: 'MaskSplines' = None
    " Collection of splines which defines this layer\n\n    :type: 'MaskSplines'\n    "
    use_fill_holes: bool = None
    ' Calculate holes when filling overlapping curves\n\n    :type: bool\n    '
    use_fill_overlap: bool = None
    ' Calculate self intersections and overlap before filling\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MaskParent(bpy_struct):
    """ Parenting settings for masking element
    """
    id: 'ID' = None
    " ID-block to which masking element would be parented to or to its property\n\n    :type: 'ID'\n    "
    id_type: typing.Union[str, int] = None
    ' Type of ID-block that can be used\n\n    :type: typing.Union[str, int]\n    '
    parent: str = None
    ' Name of parent object in specified data-block to which parenting happens\n\n    :type: str\n    '
    sub_parent: str = None
    ' Name of parent sub-object in specified data-block to which parenting happens\n\n    :type: str\n    '
    type: typing.Union[str, int] = None
    ' Parent Type\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MaskSpline(bpy_struct):
    """ Single spline used for defining mask shape
    """
    offset_mode: typing.Union[str, int] = None
    ' The method used for calculating the feather offset * ``EVEN`` Even -- Calculate even feather offset. * ``SMOOTH`` Smooth -- Calculate feather offset as a second curve.\n\n    :type: typing.Union[str, int]\n    '
    points: 'MaskSplinePoints' = None
    " Collection of points\n\n    :type: 'MaskSplinePoints'\n    "
    use_cyclic: bool = None
    ' Make this spline a closed loop\n\n    :type: bool\n    '
    use_fill: bool = None
    ' Make this spline filled\n\n    :type: bool\n    '
    use_self_intersection_check: bool = None
    ' Prevent feather from self-intersections\n\n    :type: bool\n    '
    weight_interpolation: typing.Union[str, int] = None
    ' The type of weight interpolation for spline\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MaskSplinePoint(bpy_struct):
    """ Single point in spline used for defining mask
    """
    co: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Coordinates of the control point\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    feather_points: bpy_prop_collection['MaskSplinePointUW'] = None
    " Points defining feather\n\n    :type: bpy_prop_collection['MaskSplinePointUW']\n    "
    handle_left: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Coordinates of the first handle\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    handle_left_type: typing.Union[str, int] = None
    ' Handle type\n\n    :type: typing.Union[str, int]\n    '
    handle_right: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Coordinates of the second handle\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    handle_right_type: typing.Union[str, int] = None
    ' Handle type\n\n    :type: typing.Union[str, int]\n    '
    handle_type: typing.Union[str, int] = None
    ' Handle type\n\n    :type: typing.Union[str, int]\n    '
    parent: 'MaskParent' = None
    " \n\n    :type: 'MaskParent'\n    "
    select: bool = None
    ' Selection status\n\n    :type: bool\n    '
    weight: float = None
    ' Weight of the point\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MaskSplinePointUW(bpy_struct):
    """ Single point in spline segment defining feather
    """
    select: bool = None
    ' Selection status\n\n    :type: bool\n    '
    u: float = None
    ' U coordinate of point along spline segment\n\n    :type: float\n    '
    weight: float = None
    ' Weight of feather point\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MaterialGPencilStyle(bpy_struct):
    alignment_mode: typing.Union[str, int] = None
    ' Defines how align Dots and Boxes with drawing path and object rotation * ``PATH`` Path -- Follow stroke drawing path and object rotation. * ``OBJECT`` Object -- Follow object rotation only. * ``FIXED`` Fixed -- Do not follow drawing path or object rotation and keeps aligned with viewport.\n\n    :type: typing.Union[str, int]\n    '
    alignment_rotation: float = None
    ' Additional rotation applied to dots and square texture of strokes. Only applies in texture shading mode\n\n    :type: float\n    '
    color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    fill_color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color for filling region bounded by each stroke\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    fill_image: 'Image' = None
    " \n\n    :type: 'Image'\n    "
    fill_style: typing.Union[str, int] = None
    ' Select style used to fill strokes * ``SOLID`` Solid -- Fill area with solid color. * ``GRADIENT`` Gradient -- Fill area with gradient color. * ``TEXTURE`` Texture -- Fill area with image texture.\n\n    :type: typing.Union[str, int]\n    '
    flip: bool = None
    ' Flip filling colors\n\n    :type: bool\n    '
    ghost: bool = None
    ' Display strokes using this color when showing onion skins\n\n    :type: bool\n    '
    gradient_type: typing.Union[str, int] = None
    ' Select type of gradient used to fill strokes * ``LINEAR`` Linear -- Fill area with gradient color. * ``RADIAL`` Radial -- Fill area with radial gradient.\n\n    :type: typing.Union[str, int]\n    '
    hide: bool = None
    ' Set color Visibility\n\n    :type: bool\n    '
    is_fill_visible: bool = None
    ' True when opacity of fill is set high enough to be visible\n\n    :type: bool\n    '
    is_stroke_visible: bool = None
    ' True when opacity of stroke is set high enough to be visible\n\n    :type: bool\n    '
    lock: bool = None
    ' Protect color from further editing and/or frame changes\n\n    :type: bool\n    '
    mix_color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color for mixing with primary filling color\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    mix_factor: float = None
    ' Mix Factor\n\n    :type: float\n    '
    mix_stroke_factor: float = None
    ' Mix Stroke Factor\n\n    :type: float\n    '
    mode: typing.Union[str, int] = None
    ' Select line type for strokes * ``LINE`` Line -- Draw strokes using a continuous line. * ``DOTS`` Dots -- Draw strokes using separated dots. * ``BOX`` Squares -- Draw strokes using separated squares.\n\n    :type: typing.Union[str, int]\n    '
    pass_index: int = None
    ' Index number for the "Color Index" pass\n\n    :type: int\n    '
    pixel_size: float = None
    ' Texture Pixel Size factor along the stroke\n\n    :type: float\n    '
    show_fill: bool = None
    ' Show stroke fills of this material\n\n    :type: bool\n    '
    show_stroke: bool = None
    ' Show stroke lines of this material\n\n    :type: bool\n    '
    stroke_image: 'Image' = None
    " \n\n    :type: 'Image'\n    "
    stroke_style: typing.Union[str, int] = None
    ' Select style used to draw strokes * ``SOLID`` Solid -- Draw strokes with solid color. * ``TEXTURE`` Texture -- Draw strokes using texture.\n\n    :type: typing.Union[str, int]\n    '
    texture_angle: float = None
    ' Texture Orientation Angle\n\n    :type: float\n    '
    texture_clamp: bool = None
    ' Do not repeat texture and clamp to one instance only\n\n    :type: bool\n    '
    texture_offset: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Shift Texture in 2d Space\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    texture_scale: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Scale Factor for Texture\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    use_fill_holdout: bool = None
    ' Remove the color from underneath this stroke by using it as a mask\n\n    :type: bool\n    '
    use_overlap_strokes: bool = None
    ' Disable stencil and overlap self intersections with alpha materials\n\n    :type: bool\n    '
    use_stroke_holdout: bool = None
    ' Remove the color from underneath this stroke by using it as a mask\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MaterialLineArt(bpy_struct):
    intersection_priority: int = None
    ' The intersection line will be included into the object with the higher intersection priority value\n\n    :type: int\n    '
    mat_occlusion: int = None
    ' Faces with this material will behave as if it has set number of layers in occlusion\n\n    :type: int\n    '
    use_intersection_priority_override: bool = None
    ' Override object and collection intersection priority value\n\n    :type: bool\n    '
    use_material_mask: bool = None
    ' Use material masks to filter out occluded strokes\n\n    :type: bool\n    '
    use_material_mask_bits: typing.List[bool] = None
    ' \n\n    :type: typing.List[bool]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MaterialSlot(bpy_struct):
    """ Material slot in an object
    """
    link: typing.Union[str, int] = None
    " Link material to object or the object's data\n\n    :type: typing.Union[str, int]\n    "
    material: 'Material' = None
    " Material data-block used by this material slot\n\n    :type: 'Material'\n    "
    name: str = None
    ' Material slot name\n\n    :type: str\n    '
    slot_index: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Menu(bpy_struct):
    """ Editor menu containing buttons
    """
    bl_description: str = None
    ' \n\n    :type: str\n    '
    bl_idname: str = None
    ' If this is set, the menu gets a custom ID, otherwise it takes the name of the class used to define the menu (for example, if the class name is "OBJECT_MT_hello", and bl_idname is not set by the script, then bl_idname = "OBJECT_MT_hello")\n\n    :type: str\n    '
    bl_label: str = None
    ' The menu label\n\n    :type: str\n    '
    bl_owner_id: str = None
    ' \n\n    :type: str\n    '
    bl_translation_context: str = None
    ' \n\n    :type: str\n    '
    layout: 'UILayout' = None
    " Defines the structure of the menu in the UI\n\n    :type: 'UILayout'\n    "

    @classmethod
    def poll(cls, context: 'Context'):
        """ If this method returns a non-null output, then the menu can be drawn

        :param context: 
        :type context: 'Context'
        """
        pass

    def draw(self, context: 'Context'):
        """ Draw UI elements into the menu UI layout

        :param context: 
        :type context: 'Context'
        """
        pass

    def draw_preset(self, _context):
        """ Define these on the subclass: - preset_operator (string) - preset_subdir (string) Optionally: - preset_add_operator (string) - preset_extensions (set of strings) - preset_operator_defaults (dict of keyword args)

        """
        pass

    def path_menu(self, searchpaths: typing.List[str], operator: str, *, props_default: typing.Dict=None, prop_filepath: str='filepath', filter_ext: typing.Callable=None, filter_path=None, display_name: typing.Callable=None, add_operator=None):
        """ Populate a menu from a list of paths.

        :param searchpaths: Paths to scan.
        :type searchpaths: typing.List[str]
        :param operator: The operator id to use with each file.
        :type operator: str
        :param prop_filepath: Optional operator filepath property (defaults to "filepath").
        :type prop_filepath: str
        :param props_default: Properties to assign to each operator.
        :type props_default: typing.Dict
        :param filter_ext: Optional callback that takes the file extensions. Returning false excludes the file from the list.
        :type filter_ext: typing.Callable
        :param display_name: Optional callback that takes the full path, returns the name to display.
        :type display_name: typing.Callable
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    @classmethod
    def append(cls, draw_func):
        """ 

        """
        pass

    @classmethod
    def prepend(cls, draw_func):
        """ 

        """
        pass

    @classmethod
    def remove(cls, draw_func):
        """ 

        """
        pass

class MeshEdge(bpy_struct):
    """ Edge in a Mesh data-block
    """
    bevel_weight: float = None
    ' Weight used by the Bevel modifier\n\n    :type: float\n    '
    crease: float = None
    ' Weight used by the Subdivision Surface modifier for creasing\n\n    :type: float\n    '
    hide: bool = None
    ' \n\n    :type: bool\n    '
    index: int = None
    ' Index of this edge\n\n    :type: int\n    '
    is_loose: bool = None
    ' Edge is not connected to any faces\n\n    :type: bool\n    '
    select: bool = None
    ' \n\n    :type: bool\n    '
    use_edge_sharp: bool = None
    ' Sharp edge for the Edge Split modifier\n\n    :type: bool\n    '
    use_freestyle_mark: bool = None
    ' Edge mark for Freestyle line rendering\n\n    :type: bool\n    '
    use_seam: bool = None
    ' Seam edge for UV unwrapping\n\n    :type: bool\n    '
    vertices: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Vertex indices\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    key = None
    ' (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshEdgeCrease(bpy_struct):
    value: float = None
    ' \n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshEdgeCreaseLayer(bpy_struct):
    """ Per-edge crease
    """
    data: bpy_prop_collection['MeshEdgeCrease'] = None
    " \n\n    :type: bpy_prop_collection['MeshEdgeCrease']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshFaceMap(bpy_struct):
    value: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshFaceMapLayer(bpy_struct):
    """ Per-face map index
    """
    data: bpy_prop_collection['MeshFaceMap'] = None
    " \n\n    :type: bpy_prop_collection['MeshFaceMap']\n    "
    name: str = None
    ' Name of face map layer\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshLoop(bpy_struct):
    """ Loop in a Mesh data-block
    """
    bitangent: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Bitangent vector of this vertex for this polygon (must be computed beforehand using calc_tangents, use it only if really needed, slower access than bitangent_sign)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    bitangent_sign: float = None
    ' Sign of the bitangent vector of this vertex for this polygon (must be computed beforehand using calc_tangents, bitangent = bitangent_sign * cross(normal, tangent))\n\n    :type: float\n    '
    edge_index: int = None
    ' Edge index\n\n    :type: int\n    '
    index: int = None
    ' Index of this loop\n\n    :type: int\n    '
    normal: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Local space unit length split normal vector of this vertex for this polygon (must be computed beforehand using calc_normals_split or calc_tangents)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    tangent: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Local space unit length tangent vector of this vertex for this polygon (must be computed beforehand using calc_tangents)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    vertex_index: int = None
    ' Vertex index\n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshLoopColor(bpy_struct):
    """ Vertex loop colors in a Mesh
    """
    color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color in sRGB color space\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshLoopColorLayer(bpy_struct):
    """ Layer of vertex colors in a Mesh data-block
    """
    active: bool = None
    ' Sets the layer as active for display and editing\n\n    :type: bool\n    '
    active_render: bool = None
    ' Sets the layer as active for rendering\n\n    :type: bool\n    '
    data: bpy_prop_collection['MeshLoopColor'] = None
    " \n\n    :type: bpy_prop_collection['MeshLoopColor']\n    "
    name: str = None
    ' Name of Vertex color layer\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshLoopTriangle(bpy_struct):
    """ Tessellated triangle in a Mesh data-block
    """
    area: float = None
    ' Area of this triangle\n\n    :type: float\n    '
    index: int = None
    ' Index of this loop triangle\n\n    :type: int\n    '
    loops: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Indices of mesh loops that make up the triangle\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    material_index: int = None
    ' Material slot index of this triangle\n\n    :type: int\n    '
    normal: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Local space unit length normal vector for this triangle\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    polygon_index: int = None
    ' Index of mesh polygon that the triangle is a part of\n\n    :type: int\n    '
    split_normals: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float], typing.Tuple[float, float, float], typing.Tuple[float, float, float]]] = None
    ' Local space unit length split normals vectors of the vertices of this triangle (must be computed beforehand using calc_normals_split or calc_tangents)\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float], typing.Tuple[float, float, float], typing.Tuple[float, float, float]]]\n    '
    use_smooth: bool = None
    ' \n\n    :type: bool\n    '
    vertices: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Indices of triangle vertices\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    center = None
    ' The midpoint of the face. (readonly)'
    edge_keys = None
    ' (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshNormalValue(bpy_struct):
    """ Vector in a mesh normal array
    """
    vector: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " 3D vector\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshPaintMaskLayer(bpy_struct):
    """ Per-vertex paint mask data
    """
    data: bpy_prop_collection['MeshPaintMaskProperty'] = None
    " \n\n    :type: bpy_prop_collection['MeshPaintMaskProperty']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshPaintMaskProperty(bpy_struct):
    """ Floating-point paint mask value
    """
    value: float = None
    ' \n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshPolygon(bpy_struct):
    """ Polygon in a Mesh data-block
    """
    area: float = None
    ' Read only area of this polygon\n\n    :type: float\n    '
    center: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Center of this polygon\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    hide: bool = None
    ' \n\n    :type: bool\n    '
    index: int = None
    ' Index of this polygon\n\n    :type: int\n    '
    loop_start: int = None
    ' Index of the first loop of this polygon\n\n    :type: int\n    '
    loop_total: int = None
    ' Number of loops used by this polygon\n\n    :type: int\n    '
    material_index: int = None
    ' Material slot index of this polygon\n\n    :type: int\n    '
    normal: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Local space unit length normal vector for this polygon\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    select: bool = None
    ' \n\n    :type: bool\n    '
    use_freestyle_mark: bool = None
    ' Face mark for Freestyle line rendering\n\n    :type: bool\n    '
    use_smooth: bool = None
    ' \n\n    :type: bool\n    '
    vertices: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Vertex indices\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    edge_keys = None
    ' (readonly)'
    loop_indices = None
    ' (readonly)'

    def flip(self):
        """ Invert winding of this polygon (flip its normal)

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshPolygonFloatProperty(bpy_struct):
    """ User defined floating-point number value in a float properties layer
    """
    value: float = None
    ' \n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshPolygonFloatPropertyLayer(bpy_struct):
    """ User defined layer of floating-point number values
    """
    data: bpy_prop_collection['MeshPolygonFloatProperty'] = None
    " \n\n    :type: bpy_prop_collection['MeshPolygonFloatProperty']\n    "
    name: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshPolygonIntProperty(bpy_struct):
    """ User defined integer number value in an integer properties layer
    """
    value: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshPolygonIntPropertyLayer(bpy_struct):
    """ User defined layer of integer number values
    """
    data: bpy_prop_collection['MeshPolygonIntProperty'] = None
    " \n\n    :type: bpy_prop_collection['MeshPolygonIntProperty']\n    "
    name: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshPolygonStringProperty(bpy_struct):
    """ User defined string text value in a string properties layer
    """
    value: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshPolygonStringPropertyLayer(bpy_struct):
    """ User defined layer of string text values
    """
    data: bpy_prop_collection['MeshPolygonStringProperty'] = None
    " \n\n    :type: bpy_prop_collection['MeshPolygonStringProperty']\n    "
    name: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshSkinVertex(bpy_struct):
    """ Per-vertex skin data for use with the Skin modifier
    """
    radius: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Radius of the skin\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    use_loose: bool = None
    ' If vertex has multiple adjacent edges, it is hulled to them directly\n\n    :type: bool\n    '
    use_root: bool = None
    ' Vertex is a root for rotation calculations and armature generation, setting this flag does not clear other roots in the same mesh island\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshSkinVertexLayer(bpy_struct):
    """ Per-vertex skin data for use with the Skin modifier
    """
    data: bpy_prop_collection['MeshSkinVertex'] = None
    " \n\n    :type: bpy_prop_collection['MeshSkinVertex']\n    "
    name: str = None
    ' Name of skin layer\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshStatVis(bpy_struct):
    distort_max: float = None
    ' Maximum angle to display\n\n    :type: float\n    '
    distort_min: float = None
    ' Minimum angle to display\n\n    :type: float\n    '
    overhang_axis: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    overhang_max: float = None
    ' Maximum angle to display\n\n    :type: float\n    '
    overhang_min: float = None
    ' Minimum angle to display\n\n    :type: float\n    '
    sharp_max: float = None
    ' Maximum angle to display\n\n    :type: float\n    '
    sharp_min: float = None
    ' Minimum angle to display\n\n    :type: float\n    '
    thickness_max: float = None
    ' Maximum for measuring thickness\n\n    :type: float\n    '
    thickness_min: float = None
    ' Minimum for measuring thickness\n\n    :type: float\n    '
    thickness_samples: int = None
    ' Number of samples to test per face\n\n    :type: int\n    '
    type: typing.Union[str, int] = None
    ' Type of data to visualize/check\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshUVLoop(bpy_struct):
    """ Layer of UV coordinates in a Mesh data-block
    """
    pin_uv: bool = None
    ' \n\n    :type: bool\n    '
    select: bool = None
    ' \n\n    :type: bool\n    '
    select_edge: bool = None
    ' \n\n    :type: bool\n    '
    uv: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshUVLoopLayer(bpy_struct):
    active: bool = None
    ' Set the map as active for display and editing\n\n    :type: bool\n    '
    active_clone: bool = None
    ' Set the map as active for cloning\n\n    :type: bool\n    '
    active_render: bool = None
    ' Set the UV map as active for rendering\n\n    :type: bool\n    '
    data: bpy_prop_collection['MeshUVLoop'] = None
    " \n\n    :type: bpy_prop_collection['MeshUVLoop']\n    "
    name: str = None
    ' Name of UV map\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshVertColor(bpy_struct):
    """ Vertex colors in a Mesh
    """
    color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshVertColorLayer(bpy_struct):
    """ Layer of sculpt vertex colors in a Mesh data-block
    """
    active: bool = None
    ' Sets the sculpt vertex color layer as active for display and editing\n\n    :type: bool\n    '
    active_render: bool = None
    ' Sets the sculpt vertex color layer as active for rendering\n\n    :type: bool\n    '
    data: bpy_prop_collection['MeshVertColor'] = None
    " \n\n    :type: bpy_prop_collection['MeshVertColor']\n    "
    name: str = None
    ' Name of Sculpt Vertex color layer\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshVertex(bpy_struct):
    """ Vertex in a Mesh data-block
    """
    bevel_weight: float = None
    " Weight used by the Bevel modifier 'Only Vertices' option\n\n    :type: float\n    "
    co: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    groups: bpy_prop_collection['VertexGroupElement'] = None
    " Weights for the vertex groups this vertex is member of\n\n    :type: bpy_prop_collection['VertexGroupElement']\n    "
    hide: bool = None
    ' \n\n    :type: bool\n    '
    index: int = None
    ' Index of this vertex\n\n    :type: int\n    '
    normal: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Vertex Normal\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    select: bool = None
    ' \n\n    :type: bool\n    '
    undeformed_co: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " For meshes with modifiers applied, the coordinate of the vertex with no deforming modifiers applied, as used for generated texture coordinates\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshVertexCrease(bpy_struct):
    value: float = None
    ' \n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshVertexCreaseLayer(bpy_struct):
    """ Per-vertex crease
    """
    data: bpy_prop_collection['MeshVertexCrease'] = None
    " \n\n    :type: bpy_prop_collection['MeshVertexCrease']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshVertexFloatProperty(bpy_struct):
    """ User defined floating-point number value in a float properties layer
    """
    value: float = None
    ' \n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshVertexFloatPropertyLayer(bpy_struct):
    """ User defined layer of floating-point number values
    """
    data: bpy_prop_collection['MeshVertexFloatProperty'] = None
    " \n\n    :type: bpy_prop_collection['MeshVertexFloatProperty']\n    "
    name: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshVertexIntProperty(bpy_struct):
    """ User defined integer number value in an integer properties layer
    """
    value: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshVertexIntPropertyLayer(bpy_struct):
    """ User defined layer of integer number values
    """
    data: bpy_prop_collection['MeshVertexIntProperty'] = None
    " \n\n    :type: bpy_prop_collection['MeshVertexIntProperty']\n    "
    name: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshVertexStringProperty(bpy_struct):
    """ User defined string text value in a string properties layer
    """
    value: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshVertexStringPropertyLayer(bpy_struct):
    """ User defined layer of string text values
    """
    data: bpy_prop_collection['MeshVertexStringProperty'] = None
    " \n\n    :type: bpy_prop_collection['MeshVertexStringProperty']\n    "
    name: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MetaElement(bpy_struct):
    """ Blobby element in a metaball data-block
    """
    co: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    hide: bool = None
    ' Hide element\n\n    :type: bool\n    '
    radius: float = None
    ' \n\n    :type: float\n    '
    rotation: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion'] = None
    " Normalized quaternion rotation\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion']\n    "
    select: bool = None
    ' Select element\n\n    :type: bool\n    '
    size_x: float = None
    ' Size of element, use of components depends on element type\n\n    :type: float\n    '
    size_y: float = None
    ' Size of element, use of components depends on element type\n\n    :type: float\n    '
    size_z: float = None
    ' Size of element, use of components depends on element type\n\n    :type: float\n    '
    stiffness: float = None
    ' Stiffness defines how much of the element to fill\n\n    :type: float\n    '
    type: typing.Union[str, int] = None
    ' Metaball types\n\n    :type: typing.Union[str, int]\n    '
    use_negative: bool = None
    ' Set metaball as negative one\n\n    :type: bool\n    '
    use_scale_stiffness: bool = None
    ' Scale stiffness instead of radius\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Modifier(bpy_struct):
    """ Modifier affecting the geometry data of an object
    """
    is_active: bool = None
    ' The active modifier in the list\n\n    :type: bool\n    '
    is_override_data: bool = None
    ' In a local override object, whether this modifier comes from the linked reference object, or is local to the override\n\n    :type: bool\n    '
    name: str = None
    ' Modifier name\n\n    :type: str\n    '
    show_expanded: bool = None
    ' Set modifier expanded in the user interface\n\n    :type: bool\n    '
    show_in_editmode: bool = None
    ' Display modifier in Edit mode\n\n    :type: bool\n    '
    show_on_cage: bool = None
    ' Adjust edit cage to modifier result\n\n    :type: bool\n    '
    show_render: bool = None
    ' Use modifier during render\n\n    :type: bool\n    '
    show_viewport: bool = None
    ' Display modifier in viewport\n\n    :type: bool\n    '
    type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    use_apply_on_spline: bool = None
    " Apply this and all preceding deformation modifiers on splines' points rather than on filled curve/surface\n\n    :type: bool\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MotionPath(bpy_struct):
    """ Cache of the world-space positions of an element over a frame range
    """
    color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Custom color for motion path\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    frame_end: int = None
    ' End frame of the stored range\n\n    :type: int\n    '
    frame_start: int = None
    ' Starting frame of the stored range\n\n    :type: int\n    '
    is_modified: bool = None
    ' Path is being edited\n\n    :type: bool\n    '
    length: int = None
    ' Number of frames cached\n\n    :type: int\n    '
    line_thickness: int = None
    ' Line thickness for motion path\n\n    :type: int\n    '
    lines: bool = None
    ' Use straight lines between keyframe points\n\n    :type: bool\n    '
    points: bpy_prop_collection['MotionPathVert'] = None
    " Cached positions per frame\n\n    :type: bpy_prop_collection['MotionPathVert']\n    "
    use_bone_head: bool = None
    ' For PoseBone paths, use the bone head location when calculating this path\n\n    :type: bool\n    '
    use_custom_color: bool = None
    ' Use custom color for this motion path\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MotionPathVert(bpy_struct):
    """ Cached location on path
    """
    co: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    select: bool = None
    ' Path point is selected for editing\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieClipProxy(bpy_struct):
    """ Proxy parameters for a movie clip
    """
    build_100: bool = None
    ' Build proxy resolution 100% of the original footage dimension\n\n    :type: bool\n    '
    build_25: bool = None
    ' Build proxy resolution 25% of the original footage dimension\n\n    :type: bool\n    '
    build_50: bool = None
    ' Build proxy resolution 50% of the original footage dimension\n\n    :type: bool\n    '
    build_75: bool = None
    ' Build proxy resolution 75% of the original footage dimension\n\n    :type: bool\n    '
    build_free_run: bool = None
    ' Build free run time code index\n\n    :type: bool\n    '
    build_free_run_rec_date: bool = None
    ' Build free run time code index using Record Date/Time\n\n    :type: bool\n    '
    build_record_run: bool = None
    ' Build record run time code index\n\n    :type: bool\n    '
    build_undistorted_100: bool = None
    ' Build proxy resolution 100% of the original undistorted footage dimension\n\n    :type: bool\n    '
    build_undistorted_25: bool = None
    ' Build proxy resolution 25% of the original undistorted footage dimension\n\n    :type: bool\n    '
    build_undistorted_50: bool = None
    ' Build proxy resolution 50% of the original undistorted footage dimension\n\n    :type: bool\n    '
    build_undistorted_75: bool = None
    ' Build proxy resolution 75% of the original undistorted footage dimension\n\n    :type: bool\n    '
    directory: str = None
    ' Location to store the proxy files\n\n    :type: str\n    '
    quality: int = None
    ' JPEG quality of proxy images\n\n    :type: int\n    '
    timecode: typing.Union[str, int] = None
    ' * ``NONE`` None. * ``RECORD_RUN`` Record Run -- Use images in the order they are recorded. * ``FREE_RUN`` Free Run -- Use global timestamp written by recording device. * ``FREE_RUN_REC_DATE`` Free Run (rec date) -- Interpolate a global timestamp using the record date and time written by recording device. * ``FREE_RUN_NO_GAPS`` Free Run No Gaps -- Record run, but ignore timecode, changes in framerate or dropouts.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieClipScopes(bpy_struct):
    """ Scopes for statistical view of a movie clip
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieClipUser(bpy_struct):
    """ Parameters defining how a MovieClip data-block is used by another data-block
    """
    frame_current: int = None
    ' Current frame number in movie or image sequence\n\n    :type: int\n    '
    proxy_render_size: typing.Union[str, int] = None
    ' Display preview using full resolution or different proxy resolutions\n\n    :type: typing.Union[str, int]\n    '
    use_render_undistorted: bool = None
    ' Render preview using undistorted proxy\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieReconstructedCamera(bpy_struct):
    """ Match-moving reconstructed camera data from tracker
    """
    average_error: float = None
    ' Average error of reconstruction\n\n    :type: float\n    '
    frame: int = None
    ' Frame number marker is keyframed on\n\n    :type: int\n    '
    matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " Worldspace transformation matrix\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieTracking(bpy_struct):
    """ Match-moving data for tracking
    """
    active_object_index: int = None
    ' Index of active object\n\n    :type: int\n    '
    camera: 'MovieTrackingCamera' = None
    " \n\n    :type: 'MovieTrackingCamera'\n    "
    dopesheet: 'MovieTrackingDopesheet' = None
    " \n\n    :type: 'MovieTrackingDopesheet'\n    "
    objects: 'MovieTrackingObjects' = None
    " Collection of objects in this tracking data object\n\n    :type: 'MovieTrackingObjects'\n    "
    plane_tracks: 'MovieTrackingPlaneTracks' = None
    " Collection of plane tracks in this tracking data object. Deprecated, use objects[name].plane_tracks\n\n    :type: 'MovieTrackingPlaneTracks'\n    "
    reconstruction: 'MovieTrackingReconstruction' = None
    " \n\n    :type: 'MovieTrackingReconstruction'\n    "
    settings: 'MovieTrackingSettings' = None
    " \n\n    :type: 'MovieTrackingSettings'\n    "
    stabilization: 'MovieTrackingStabilization' = None
    " \n\n    :type: 'MovieTrackingStabilization'\n    "
    tracks: 'MovieTrackingTracks' = None
    " Collection of tracks in this tracking data object. Deprecated, use objects[name].tracks\n\n    :type: 'MovieTrackingTracks'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieTrackingCamera(bpy_struct):
    """ Match-moving camera data for tracking
    """
    brown_k1: float = None
    ' First coefficient of fourth order Brown-Conrady radial distortion\n\n    :type: float\n    '
    brown_k2: float = None
    ' Second coefficient of fourth order Brown-Conrady radial distortion\n\n    :type: float\n    '
    brown_k3: float = None
    ' Third coefficient of fourth order Brown-Conrady radial distortion\n\n    :type: float\n    '
    brown_k4: float = None
    ' Fourth coefficient of fourth order Brown-Conrady radial distortion\n\n    :type: float\n    '
    brown_p1: float = None
    ' First coefficient of second order Brown-Conrady tangential distortion\n\n    :type: float\n    '
    brown_p2: float = None
    ' Second coefficient of second order Brown-Conrady tangential distortion\n\n    :type: float\n    '
    distortion_model: typing.Union[str, int] = None
    ' Distortion model used for camera lenses * ``POLYNOMIAL`` Polynomial -- Radial distortion model which fits common cameras. * ``DIVISION`` Divisions -- Division distortion model which better represents wide-angle cameras. * ``NUKE`` Nuke -- Nuke distortion model. * ``BROWN`` Brown -- Brown-Conrady distortion model.\n\n    :type: typing.Union[str, int]\n    '
    division_k1: float = None
    ' First coefficient of second order division distortion\n\n    :type: float\n    '
    division_k2: float = None
    ' Second coefficient of second order division distortion\n\n    :type: float\n    '
    focal_length: float = None
    " Camera's focal length\n\n    :type: float\n    "
    focal_length_pixels: float = None
    " Camera's focal length\n\n    :type: float\n    "
    k1: float = None
    ' First coefficient of third order polynomial radial distortion\n\n    :type: float\n    '
    k2: float = None
    ' Second coefficient of third order polynomial radial distortion\n\n    :type: float\n    '
    k3: float = None
    ' Third coefficient of third order polynomial radial distortion\n\n    :type: float\n    '
    nuke_k1: float = None
    ' First coefficient of second order Nuke distortion\n\n    :type: float\n    '
    nuke_k2: float = None
    ' Second coefficient of second order Nuke distortion\n\n    :type: float\n    '
    pixel_aspect: float = None
    ' Pixel aspect ratio\n\n    :type: float\n    '
    principal_point: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Optical center of lens\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    principal_point_pixels: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Optical center of lens in pixels\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    sensor_width: float = None
    ' Width of CCD sensor in millimeters\n\n    :type: float\n    '
    units: typing.Union[str, int] = None
    ' Units used for camera focal length * ``PIXELS`` px -- Use pixels for units of focal length. * ``MILLIMETERS`` mm -- Use millimeters for units of focal length.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieTrackingDopesheet(bpy_struct):
    """ Match-moving dopesheet data
    """
    show_hidden: bool = None
    " Include channels from objects/bone that aren't visible\n\n    :type: bool\n    "
    show_only_selected: bool = None
    ' Only include channels relating to selected objects and data\n\n    :type: bool\n    '
    sort_method: typing.Union[str, int] = None
    ' Method to be used to sort channels in dopesheet view * ``NAME`` Name -- Sort channels by their names. * ``LONGEST`` Longest -- Sort channels by longest tracked segment. * ``TOTAL`` Total -- Sort channels by overall amount of tracked segments. * ``AVERAGE_ERROR`` Average Error -- Sort channels by average reprojection error of tracks after solve. * ``START`` Start Frame -- Sort channels by first frame number. * ``END`` End Frame -- Sort channels by last frame number.\n\n    :type: typing.Union[str, int]\n    '
    use_invert_sort: bool = None
    ' Invert sort order of dopesheet channels\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieTrackingMarker(bpy_struct):
    """ Match-moving marker data for tracking
    """
    co: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Marker position at frame in normalized coordinates\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    frame: int = None
    ' Frame number marker is keyframed on\n\n    :type: int\n    '
    is_keyed: bool = None
    ' Whether the position of the marker is keyframed or tracked\n\n    :type: bool\n    '
    mute: bool = None
    ' Is marker muted for current frame\n\n    :type: bool\n    '
    pattern_bound_box: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float], typing.Tuple[float, float]]] = None
    ' Pattern area bounding box in normalized coordinates\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float], typing.Tuple[float, float]]]\n    '
    pattern_corners: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]]] = None
    " Array of coordinates which represents pattern's corners in normalized coordinates relative to marker position\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]]]\n    "
    search_max: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Right-bottom corner of search area in normalized coordinates relative to marker position\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    search_min: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Left-bottom corner of search area in normalized coordinates relative to marker position\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieTrackingObject(bpy_struct):
    """ Match-moving object tracking and reconstruction data
    """
    is_camera: bool = None
    ' Object is used for camera tracking\n\n    :type: bool\n    '
    keyframe_a: int = None
    ' First keyframe used for reconstruction initialization\n\n    :type: int\n    '
    keyframe_b: int = None
    ' Second keyframe used for reconstruction initialization\n\n    :type: int\n    '
    name: str = None
    ' Unique name of object\n\n    :type: str\n    '
    plane_tracks: 'MovieTrackingObjectPlaneTracks' = None
    " Collection of plane tracks in this tracking data object\n\n    :type: 'MovieTrackingObjectPlaneTracks'\n    "
    reconstruction: 'MovieTrackingReconstruction' = None
    " \n\n    :type: 'MovieTrackingReconstruction'\n    "
    scale: float = None
    ' Scale of object solution in camera space\n\n    :type: float\n    '
    tracks: 'MovieTrackingObjectTracks' = None
    " Collection of tracks in this tracking data object\n\n    :type: 'MovieTrackingObjectTracks'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieTrackingPlaneMarker(bpy_struct):
    """ Match-moving plane marker data for tracking
    """
    corners: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]]] = None
    ' Array of coordinates which represents UI rectangle corners in frame normalized coordinates\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]]]\n    '
    frame: int = None
    ' Frame number marker is keyframed on\n\n    :type: int\n    '
    mute: bool = None
    ' Is marker muted for current frame\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieTrackingPlaneTrack(bpy_struct):
    """ Match-moving plane track data for tracking
    """
    image: 'Image' = None
    " Image displayed in the track during editing in clip editor\n\n    :type: 'Image'\n    "
    image_opacity: float = None
    ' Opacity of the image\n\n    :type: float\n    '
    markers: 'MovieTrackingPlaneMarkers' = None
    " Collection of markers in track\n\n    :type: 'MovieTrackingPlaneMarkers'\n    "
    name: str = None
    ' Unique name of track\n\n    :type: str\n    '
    select: bool = None
    ' Plane track is selected\n\n    :type: bool\n    '
    use_auto_keying: bool = None
    ' Automatic keyframe insertion when moving plane corners\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieTrackingReconstruction(bpy_struct):
    """ Match-moving reconstruction data from tracker
    """
    average_error: float = None
    ' Average error of reconstruction\n\n    :type: float\n    '
    cameras: 'MovieTrackingReconstructedCameras' = None
    " Collection of solved cameras\n\n    :type: 'MovieTrackingReconstructedCameras'\n    "
    is_valid: bool = None
    ' Is tracking data contains valid reconstruction information\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieTrackingSettings(bpy_struct):
    """ Match moving settings
    """
    clean_action: typing.Union[str, int] = None
    ' Cleanup action to execute * ``SELECT`` Select -- Select unclean tracks. * ``DELETE_TRACK`` Delete Track -- Delete unclean tracks. * ``DELETE_SEGMENTS`` Delete Segments -- Delete unclean segments of tracks.\n\n    :type: typing.Union[str, int]\n    '
    clean_error: float = None
    ' Effect on tracks which have a larger re-projection error\n\n    :type: float\n    '
    clean_frames: int = None
    ' Effect on tracks which are tracked less than the specified amount of frames\n\n    :type: int\n    '
    default_correlation_min: float = None
    ' Default minimum value of correlation between matched pattern and reference that is still treated as successful tracking\n\n    :type: float\n    '
    default_frames_limit: int = None
    ' Every tracking cycle, this number of frames are tracked\n\n    :type: int\n    '
    default_margin: int = None
    ' Default distance from image boundary at which marker stops tracking\n\n    :type: int\n    '
    default_motion_model: typing.Union[str, int] = None
    ' Default motion model to use for tracking * ``Perspective`` Perspective -- Search for markers that are perspectively deformed (homography) between frames. * ``Affine`` Affine -- Search for markers that are affine-deformed (t, r, k, and skew) between frames. * ``LocRotScale`` Location, Rotation & Scale -- Search for markers that are translated, rotated, and scaled between frames. * ``LocScale`` Location & Scale -- Search for markers that are translated and scaled between frames. * ``LocRot`` Location & Rotation -- Search for markers that are translated and rotated between frames. * ``Loc`` Location -- Search for markers that are translated between frames.\n\n    :type: typing.Union[str, int]\n    '
    default_pattern_match: typing.Union[str, int] = None
    ' Track pattern from given frame when tracking marker to next frame * ``KEYFRAME`` Keyframe -- Track pattern from keyframe to next frame. * ``PREV_FRAME`` Previous frame -- Track pattern from current frame to next frame.\n\n    :type: typing.Union[str, int]\n    '
    default_pattern_size: int = None
    ' Size of pattern area for newly created tracks\n\n    :type: int\n    '
    default_search_size: int = None
    ' Size of search area for newly created tracks\n\n    :type: int\n    '
    default_weight: float = None
    ' Influence of newly created track on a final solution\n\n    :type: float\n    '
    distance: float = None
    ' Distance between two bundles used for scene scaling\n\n    :type: float\n    '
    object_distance: float = None
    ' Distance between two bundles used for object scaling\n\n    :type: float\n    '
    refine_intrinsics_focal_length: bool = None
    ' Refine focal length during camera solving\n\n    :type: bool\n    '
    refine_intrinsics_principal_point: bool = None
    ' Refine principal point during camera solving\n\n    :type: bool\n    '
    refine_intrinsics_radial_distortion: bool = None
    ' Refine radial coefficients of distortion model during camera solving\n\n    :type: bool\n    '
    refine_intrinsics_tangential_distortion: bool = None
    ' Refine tangential coefficients of distortion model during camera solving\n\n    :type: bool\n    '
    speed: typing.Union[str, int] = None
    ' Limit speed of tracking to make visual feedback easier (this does not affect the tracking quality) * ``FASTEST`` Fastest -- Track as fast as possible. * ``DOUBLE`` Double -- Track with double speed. * ``REALTIME`` Realtime -- Track with realtime speed. * ``HALF`` Half -- Track with half of realtime speed. * ``QUARTER`` Quarter -- Track with quarter of realtime speed.\n\n    :type: typing.Union[str, int]\n    '
    use_default_blue_channel: bool = None
    ' Use blue channel from footage for tracking\n\n    :type: bool\n    '
    use_default_brute: bool = None
    ' Use a brute-force translation-only initialization when tracking\n\n    :type: bool\n    '
    use_default_green_channel: bool = None
    ' Use green channel from footage for tracking\n\n    :type: bool\n    '
    use_default_mask: bool = None
    ' Use a grease pencil data-block as a mask to use only specified areas of pattern when tracking\n\n    :type: bool\n    '
    use_default_normalization: bool = None
    ' Normalize light intensities while tracking (slower)\n\n    :type: bool\n    '
    use_default_red_channel: bool = None
    ' Use red channel from footage for tracking\n\n    :type: bool\n    '
    use_keyframe_selection: bool = None
    ' Automatically select keyframes when solving camera/object motion\n\n    :type: bool\n    '
    use_tripod_solver: bool = None
    ' Use special solver to track a stable camera position, such as a tripod\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieTrackingStabilization(bpy_struct):
    """ 2D stabilization based on tracking markers
    """
    active_rotation_track_index: int = None
    ' Index of active track in rotation stabilization tracks list\n\n    :type: int\n    '
    active_track_index: int = None
    ' Index of active track in translation stabilization tracks list\n\n    :type: int\n    '
    anchor_frame: int = None
    " Reference point to anchor stabilization (other frames will be adjusted relative to this frame's position)\n\n    :type: int\n    "
    filter_type: typing.Union[str, int] = None
    ' Interpolation to use for sub-pixel shifts and rotations due to stabilization * ``NEAREST`` Nearest -- No interpolation, use nearest neighbor pixel. * ``BILINEAR`` Bilinear -- Simple interpolation between adjacent pixels. * ``BICUBIC`` Bicubic -- High quality pixel interpolation.\n\n    :type: typing.Union[str, int]\n    '
    influence_location: float = None
    ' Influence of stabilization algorithm on footage location\n\n    :type: float\n    '
    influence_rotation: float = None
    ' Influence of stabilization algorithm on footage rotation\n\n    :type: float\n    '
    influence_scale: float = None
    ' Influence of stabilization algorithm on footage scale\n\n    :type: float\n    '
    rotation_tracks: bpy_prop_collection['MovieTrackingTrack'] = None
    " Collection of tracks used for 2D stabilization (translation)\n\n    :type: bpy_prop_collection['MovieTrackingTrack']\n    "
    scale_max: float = None
    ' Limit the amount of automatic scaling\n\n    :type: float\n    '
    show_tracks_expanded: bool = None
    ' Show UI list of tracks participating in stabilization\n\n    :type: bool\n    '
    target_position: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Known relative offset of original shot, will be subtracted (e.g. for panning shot, can be animated)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    target_rotation: float = None
    ' Rotation present on original shot, will be compensated (e.g. for deliberate tilting)\n\n    :type: float\n    '
    target_scale: float = None
    ' Explicitly scale resulting frame to compensate zoom of original shot\n\n    :type: float\n    '
    tracks: bpy_prop_collection['MovieTrackingTrack'] = None
    " Collection of tracks used for 2D stabilization (translation)\n\n    :type: bpy_prop_collection['MovieTrackingTrack']\n    "
    use_2d_stabilization: bool = None
    ' Use 2D stabilization for footage\n\n    :type: bool\n    '
    use_autoscale: bool = None
    ' Automatically scale footage to cover unfilled areas when stabilizing\n\n    :type: bool\n    '
    use_stabilize_rotation: bool = None
    ' Stabilize detected rotation around center of frame\n\n    :type: bool\n    '
    use_stabilize_scale: bool = None
    ' Compensate any scale changes relative to center of rotation\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieTrackingTrack(bpy_struct):
    """ Match-moving track data for tracking
    """
    average_error: float = None
    ' Average error of re-projection\n\n    :type: float\n    '
    bundle: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Position of bundle reconstructed from this track\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of the track in the Movie Clip Editor and the 3D viewport after a solve\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    correlation_min: float = None
    ' Minimal value of correlation between matched pattern and reference that is still treated as successful tracking\n\n    :type: float\n    '
    frames_limit: int = None
    ' Every tracking cycle, this number of frames are tracked\n\n    :type: int\n    '
    grease_pencil: 'GreasePencil' = None
    " Grease pencil data for this track\n\n    :type: 'GreasePencil'\n    "
    has_bundle: bool = None
    ' True if track has a valid bundle\n\n    :type: bool\n    '
    hide: bool = None
    ' Track is hidden\n\n    :type: bool\n    '
    lock: bool = None
    ' Track is locked and all changes to it are disabled\n\n    :type: bool\n    '
    margin: int = None
    ' Distance from image boundary at which marker stops tracking\n\n    :type: int\n    '
    markers: 'MovieTrackingMarkers' = None
    " Collection of markers in track\n\n    :type: 'MovieTrackingMarkers'\n    "
    motion_model: typing.Union[str, int] = None
    ' Default motion model to use for tracking * ``Perspective`` Perspective -- Search for markers that are perspectively deformed (homography) between frames. * ``Affine`` Affine -- Search for markers that are affine-deformed (t, r, k, and skew) between frames. * ``LocRotScale`` Location, Rotation & Scale -- Search for markers that are translated, rotated, and scaled between frames. * ``LocScale`` Location & Scale -- Search for markers that are translated and scaled between frames. * ``LocRot`` Location & Rotation -- Search for markers that are translated and rotated between frames. * ``Loc`` Location -- Search for markers that are translated between frames.\n\n    :type: typing.Union[str, int]\n    '
    name: str = None
    ' Unique name of track\n\n    :type: str\n    '
    offset: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Offset of track from the parenting point\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    pattern_match: typing.Union[str, int] = None
    ' Track pattern from given frame when tracking marker to next frame * ``KEYFRAME`` Keyframe -- Track pattern from keyframe to next frame. * ``PREV_FRAME`` Previous frame -- Track pattern from current frame to next frame.\n\n    :type: typing.Union[str, int]\n    '
    select: bool = None
    ' Track is selected\n\n    :type: bool\n    '
    select_anchor: bool = None
    " Track's anchor point is selected\n\n    :type: bool\n    "
    select_pattern: bool = None
    " Track's pattern area is selected\n\n    :type: bool\n    "
    select_search: bool = None
    " Track's search area is selected\n\n    :type: bool\n    "
    use_alpha_preview: bool = None
    " Apply track's mask on displaying preview\n\n    :type: bool\n    "
    use_blue_channel: bool = None
    ' Use blue channel from footage for tracking\n\n    :type: bool\n    '
    use_brute: bool = None
    ' Use a brute-force translation only pre-track before refinement\n\n    :type: bool\n    '
    use_custom_color: bool = None
    ' Use custom color instead of theme-defined\n\n    :type: bool\n    '
    use_grayscale_preview: bool = None
    ' Display what the tracking algorithm sees in the preview\n\n    :type: bool\n    '
    use_green_channel: bool = None
    ' Use green channel from footage for tracking\n\n    :type: bool\n    '
    use_mask: bool = None
    ' Use a grease pencil data-block as a mask to use only specified areas of pattern when tracking\n\n    :type: bool\n    '
    use_normalization: bool = None
    ' Normalize light intensities while tracking. Slower\n\n    :type: bool\n    '
    use_red_channel: bool = None
    ' Use red channel from footage for tracking\n\n    :type: bool\n    '
    weight: float = None
    ' Influence of this track on a final solution\n\n    :type: float\n    '
    weight_stab: float = None
    ' Influence of this track on 2D stabilization\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NlaStrip(bpy_struct):
    """ A container referencing an existing Action
    """
    action: 'Action' = None
    " Action referenced by this strip\n\n    :type: 'Action'\n    "
    action_frame_end: float = None
    ' Last frame from action to use\n\n    :type: float\n    '
    action_frame_start: float = None
    ' First frame from action to use\n\n    :type: float\n    '
    active: bool = None
    ' NLA Strip is active\n\n    :type: bool\n    '
    blend_in: float = None
    ' Number of frames at start of strip to fade in influence\n\n    :type: float\n    '
    blend_out: float = None
    ' \n\n    :type: float\n    '
    blend_type: typing.Union[str, int] = None
    " Method used for combining strip's result with accumulated result * ``REPLACE`` Replace -- The strip values replace the accumulated results by amount specified by influence. * ``COMBINE`` Combine -- The strip values are combined with accumulated results by appropriately using addition, multiplication, or quaternion math, based on channel type. * ``ADD`` Add -- Weighted result of strip is added to the accumulated results. * ``SUBTRACT`` Subtract -- Weighted result of strip is removed from the accumulated results. * ``MULTIPLY`` Multiply -- Weighted result of strip is multiplied with the accumulated results.\n\n    :type: typing.Union[str, int]\n    "
    extrapolation: typing.Union[str, int] = None
    ' Action to take for gaps past the strip extents * ``NOTHING`` Nothing -- Strip has no influence past its extents. * ``HOLD`` Hold -- Hold the first frame if no previous strips in track, and always hold last frame. * ``HOLD_FORWARD`` Hold Forward -- Only hold last frame.\n\n    :type: typing.Union[str, int]\n    '
    fcurves: 'NlaStripFCurves' = None
    " F-Curves for controlling the strip's influence and timing\n\n    :type: 'NlaStripFCurves'\n    "
    frame_end: float = None
    ' \n\n    :type: float\n    '
    frame_end_ui: float = None
    ' End frame of the NLA strip. Note: changing this value also updates the value of the strip\'s repeats or its action\'s end frame. If only the end frame should be changed, see the "frame_end" property instead\n\n    :type: float\n    '
    frame_start: float = None
    ' \n\n    :type: float\n    '
    frame_start_ui: float = None
    ' Start frame of the NLA strip. Note: changing this value also updates the value of the strip\'s end frame. If only the start frame should be changed, see the "frame_start" property instead\n\n    :type: float\n    '
    influence: float = None
    ' Amount the strip contributes to the current result\n\n    :type: float\n    '
    modifiers: bpy_prop_collection['FModifier'] = None
    " Modifiers affecting all the F-Curves in the referenced Action\n\n    :type: bpy_prop_collection['FModifier']\n    "
    mute: bool = None
    ' Disable NLA Strip evaluation\n\n    :type: bool\n    '
    name: str = None
    ' \n\n    :type: str\n    '
    repeat: float = None
    ' Number of times to repeat the action range\n\n    :type: float\n    '
    scale: float = None
    ' Scaling factor for action\n\n    :type: float\n    '
    select: bool = None
    ' NLA Strip is selected\n\n    :type: bool\n    '
    strip_time: float = None
    ' Frame of referenced Action to evaluate\n\n    :type: float\n    '
    strips: bpy_prop_collection['NlaStrip'] = None
    " NLA Strips that this strip acts as a container for (if it is of type Meta)\n\n    :type: bpy_prop_collection['NlaStrip']\n    "
    type: typing.Union[str, int] = None
    " Type of NLA Strip * ``CLIP`` Action Clip -- NLA Strip references some Action. * ``TRANSITION`` Transition -- NLA Strip 'transitions' between adjacent strips. * ``META`` Meta -- NLA Strip acts as a container for adjacent strips. * ``SOUND`` Sound Clip -- NLA Strip representing a sound event for speakers.\n\n    :type: typing.Union[str, int]\n    "
    use_animated_influence: bool = None
    ' Influence setting is controlled by an F-Curve rather than automatically determined\n\n    :type: bool\n    '
    use_animated_time: bool = None
    ' Strip time is controlled by an F-Curve rather than automatically determined\n\n    :type: bool\n    '
    use_animated_time_cyclic: bool = None
    ' Cycle the animated time within the action start and end\n\n    :type: bool\n    '
    use_auto_blend: bool = None
    ' Number of frames for Blending In/Out is automatically determined from overlapping strips\n\n    :type: bool\n    '
    use_reverse: bool = None
    ' NLA Strip is played back in reverse order (only when timing is automatically determined)\n\n    :type: bool\n    '
    use_sync_length: bool = None
    ' Update range of frames referenced from action after tweaking strip and its keyframes\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NlaTrack(bpy_struct):
    """ A animation layer containing Actions referenced as NLA strips
    """
    active: bool = None
    ' NLA Track is active\n\n    :type: bool\n    '
    is_override_data: bool = None
    ' In a local override data, whether this NLA track comes from the linked reference data, or is local to the override\n\n    :type: bool\n    '
    is_solo: bool = None
    ' NLA Track is evaluated itself (i.e. active Action and all other NLA Tracks in the same AnimData block are disabled)\n\n    :type: bool\n    '
    lock: bool = None
    ' NLA Track is locked\n\n    :type: bool\n    '
    mute: bool = None
    ' Disable NLA Track evaluation\n\n    :type: bool\n    '
    name: str = None
    ' \n\n    :type: str\n    '
    select: bool = None
    ' NLA Track is selected\n\n    :type: bool\n    '
    strips: 'NlaStrips' = None
    " NLA Strips on this NLA-track\n\n    :type: 'NlaStrips'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Node(bpy_struct):
    """ Node in a node tree
    """
    bl_description: str = None
    ' \n\n    :type: str\n    '
    bl_height_default: float = None
    ' \n\n    :type: float\n    '
    bl_height_max: float = None
    ' \n\n    :type: float\n    '
    bl_height_min: float = None
    ' \n\n    :type: float\n    '
    bl_icon: typing.Union[str, int] = None
    ' The node icon\n\n    :type: typing.Union[str, int]\n    '
    bl_idname: str = None
    ' \n\n    :type: str\n    '
    bl_label: str = None
    ' The node label\n\n    :type: str\n    '
    bl_static_type: typing.Union[str, int] = None
    ' Node type (deprecated, use with care) * ``CUSTOM`` Custom -- Custom Node.\n\n    :type: typing.Union[str, int]\n    '
    bl_width_default: float = None
    ' \n\n    :type: float\n    '
    bl_width_max: float = None
    ' \n\n    :type: float\n    '
    bl_width_min: float = None
    ' \n\n    :type: float\n    '
    color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Custom color of the node body\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    dimensions: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Absolute bounding box dimensions of the node\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    height: float = None
    ' Height of the node\n\n    :type: float\n    '
    hide: bool = None
    ' \n\n    :type: bool\n    '
    inputs: 'NodeInputs' = None
    " \n\n    :type: 'NodeInputs'\n    "
    internal_links: bpy_prop_collection['NodeLink'] = None
    " Internal input-to-output connections for muting\n\n    :type: bpy_prop_collection['NodeLink']\n    "
    label: str = None
    ' Optional custom node label\n\n    :type: str\n    '
    location: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    mute: bool = None
    ' \n\n    :type: bool\n    '
    name: str = None
    ' Unique node identifier\n\n    :type: str\n    '
    outputs: 'NodeOutputs' = None
    " \n\n    :type: 'NodeOutputs'\n    "
    parent: 'Node' = None
    " Parent this node is attached to\n\n    :type: 'Node'\n    "
    select: bool = None
    ' Node selection state\n\n    :type: bool\n    '
    show_options: bool = None
    ' \n\n    :type: bool\n    '
    show_preview: bool = None
    ' \n\n    :type: bool\n    '
    show_texture: bool = None
    ' Display node in viewport textured shading mode\n\n    :type: bool\n    '
    type: typing.Union[str, int] = None
    ' Node type (deprecated, use bl_static_type or bl_idname for the actual identifier string) * ``CUSTOM`` Custom -- Custom Node.\n\n    :type: typing.Union[str, int]\n    '
    use_custom_color: bool = None
    ' Use custom color for the node\n\n    :type: bool\n    '
    width: float = None
    ' Width of the node\n\n    :type: float\n    '
    width_hidden: float = None
    ' Deprecated width of the node when it is collapsed\n\n    :type: float\n    '

    def socket_value_update(self, context: 'Context'):
        """ Update after property changes

        :param context: 
        :type context: 'Context'
        """
        pass

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def poll(cls, node_tree: 'NodeTree'):
        """ If non-null output is returned, the node type can be added to the tree

        :param node_tree: Node Tree
        :type node_tree: 'NodeTree'
        """
        pass

    def poll_instance(self, node_tree: 'NodeTree'):
        """ If non-null output is returned, the node can be added to the tree

        :param node_tree: Node Tree
        :type node_tree: 'NodeTree'
        """
        pass

    def update(self):
        """ Update on node graph topology changes (adding or removing nodes and links)

        """
        pass

    def insert_link(self, link: 'NodeLink'):
        """ Handle creation of a link to or from the node

        :param link: Link, Node link that will be inserted
        :type link: 'NodeLink'
        """
        pass

    def init(self, context: 'Context'):
        """ Initialize a new instance of this node

        :param context: 
        :type context: 'Context'
        """
        pass

    def copy(self, node: 'Node'):
        """ Initialize a new instance of this node from an existing node

        :param node: Node, Existing node to copy
        :type node: 'Node'
        """
        pass

    def free(self):
        """ Clean up node on removal

        """
        pass

    def draw_buttons(self, context: 'Context', layout: 'UILayout'):
        """ Draw node buttons

        :param context: 
        :type context: 'Context'
        :param layout: Layout, Layout in the UI
        :type layout: 'UILayout'
        """
        pass

    def draw_buttons_ext(self, context: 'Context', layout: 'UILayout'):
        """ Draw node buttons in the sidebar

        :param context: 
        :type context: 'Context'
        :param layout: Layout, Layout in the UI
        :type layout: 'UILayout'
        """
        pass

    def draw_label(self) -> str:
        """ Returns a dynamic label string

        :rtype: str
        :return: Label
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeInstanceHash(bpy_struct):
    """ Hash table containing node instance data
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeInternalSocketTemplate(bpy_struct):
    """ Type and default value of a node socket
    """
    identifier: str = None
    ' Identifier of the socket\n\n    :type: str\n    '
    name: str = None
    ' Name of the socket\n\n    :type: str\n    '
    type: typing.Union[str, int] = None
    ' Data type of the socket\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeLink(bpy_struct):
    """ Link between nodes in a node tree
    """
    from_node: 'Node' = None
    " \n\n    :type: 'Node'\n    "
    from_socket: 'NodeSocket' = None
    " \n\n    :type: 'NodeSocket'\n    "
    is_hidden: bool = None
    ' Link is hidden due to invisible sockets\n\n    :type: bool\n    '
    is_muted: bool = None
    ' Link is muted and can be ignored\n\n    :type: bool\n    '
    is_valid: bool = None
    ' Link is valid\n\n    :type: bool\n    '
    to_node: 'Node' = None
    " \n\n    :type: 'Node'\n    "
    to_socket: 'NodeSocket' = None
    " \n\n    :type: 'NodeSocket'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeOutputFileSlotFile(bpy_struct):
    """ Single layer file slot of the file output node
    """
    format: 'ImageFormatSettings' = None
    " \n\n    :type: 'ImageFormatSettings'\n    "
    path: str = None
    ' Subpath used for this slot\n\n    :type: str\n    '
    save_as_render: bool = None
    ' Apply render part of display transform when saving byte image\n\n    :type: bool\n    '
    use_node_format: bool = None
    ' \n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeOutputFileSlotLayer(bpy_struct):
    """ Multilayer slot of the file output node
    """
    name: str = None
    ' OpenEXR layer name used for this slot\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocket(bpy_struct):
    """ Input or output socket of a node
    """
    bl_idname: str = None
    ' \n\n    :type: str\n    '
    bl_label: str = None
    ' Label to display for the socket type in the UI\n\n    :type: str\n    '
    description: str = None
    ' Socket tooltip\n\n    :type: str\n    '
    display_shape: typing.Union[str, int] = None
    ' Socket shape\n\n    :type: typing.Union[str, int]\n    '
    enabled: bool = None
    ' Enable the socket\n\n    :type: bool\n    '
    hide: bool = None
    ' Hide the socket\n\n    :type: bool\n    '
    hide_value: bool = None
    ' Hide the socket input value\n\n    :type: bool\n    '
    identifier: str = None
    ' Unique identifier for mapping sockets\n\n    :type: str\n    '
    is_linked: bool = None
    ' True if the socket is connected\n\n    :type: bool\n    '
    is_multi_input: bool = None
    ' True if the socket can accept multiple ordered input links\n\n    :type: bool\n    '
    is_output: bool = None
    ' True if the socket is an output, otherwise input\n\n    :type: bool\n    '
    is_unavailable: bool = None
    ' True if the socket is unavailable\n\n    :type: bool\n    '
    label: str = None
    ' Custom dynamic defined socket label\n\n    :type: str\n    '
    link_limit: int = None
    ' Max number of links allowed for this socket\n\n    :type: int\n    '
    name: str = None
    ' Socket name\n\n    :type: str\n    '
    node: 'Node' = None
    " Node owning this socket\n\n    :type: 'Node'\n    "
    show_expanded: bool = None
    ' Socket links are expanded in the user interface\n\n    :type: bool\n    '
    type: typing.Union[str, int] = None
    ' Data type\n\n    :type: typing.Union[str, int]\n    '
    links = None
    ' List of node links from or to this socket. (readonly)'

    def draw(self, context: 'Context', layout: 'UILayout', node: 'Node', text: str):
        """ Draw socket

        :param context: 
        :type context: 'Context'
        :param layout: Layout, Layout in the UI
        :type layout: 'UILayout'
        :param node: Node, Node the socket belongs to
        :type node: 'Node'
        :param text: Text, Text label to draw alongside properties
        :type text: str
        """
        pass

    def draw_color(self, context: 'Context', node: 'Node') -> typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']:
        """ Color of the socket icon

        :param context: 
        :type context: 'Context'
        :param node: Node, Node the socket belongs to
        :type node: 'Node'
        :rtype: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']
        :return: Color
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterface(bpy_struct):
    """ Parameters to define node sockets
    """
    attribute_domain: typing.Union[str, int] = None
    ' Attribute domain used by the geometry nodes modifier to create an attribute output\n\n    :type: typing.Union[str, int]\n    '
    bl_label: str = None
    ' Label to display for the socket type in the UI\n\n    :type: str\n    '
    bl_socket_idname: str = None
    ' \n\n    :type: str\n    '
    default_attribute_name: str = None
    ' The attribute name used by default when the node group is used by a geometry nodes modifier\n\n    :type: str\n    '
    description: str = None
    ' Socket tooltip\n\n    :type: str\n    '
    hide_value: bool = None
    ' Hide the socket input value even when the socket is not connected\n\n    :type: bool\n    '
    identifier: str = None
    ' Unique identifier for mapping sockets\n\n    :type: str\n    '
    is_output: bool = None
    ' True if the socket is an output, otherwise input\n\n    :type: bool\n    '
    name: str = None
    ' Socket name\n\n    :type: str\n    '

    def draw(self, context: 'Context', layout: 'UILayout'):
        """ Draw template settings

        :param context: 
        :type context: 'Context'
        :param layout: Layout, Layout in the UI
        :type layout: 'UILayout'
        """
        pass

    def draw_color(self, context: 'Context') -> typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']:
        """ Color of the socket icon

        :param context: 
        :type context: 'Context'
        :rtype: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']
        :return: Color
        """
        pass

    def init_socket(self, node: 'Node', socket: 'NodeSocket', data_path: str):
        """ Initialize a node socket instance

        :param node: Node, Node of the socket to initialize
        :type node: 'Node'
        :param socket: Socket, Socket to initialize
        :type socket: 'NodeSocket'
        :param data_path: Data Path, Path to specialized socket data
        :type data_path: str
        """
        pass

    def from_socket(self, node: 'Node', socket: 'NodeSocket'):
        """ Setup template parameters from an existing socket

        :param node: Node, Node of the original socket
        :type node: 'Node'
        :param socket: Socket, Original socket
        :type socket: 'NodeSocket'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeTreePath(bpy_struct):
    """ Element of the node space tree path
    """
    node_tree: 'NodeTree' = None
    " Base node tree from context\n\n    :type: 'NodeTree'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ObjectBase(bpy_struct):
    """ An object instance in a render layer
    """
    hide_viewport: bool = None
    ' Temporarily hide in viewport\n\n    :type: bool\n    '
    object: 'Object' = None
    " Object this base links to\n\n    :type: 'Object'\n    "
    select: bool = None
    ' Object base selection state\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ObjectDisplay(bpy_struct):
    """ Object display settings for 3D viewport
    """
    show_shadows: bool = None
    ' Object cast shadows in the 3D viewport\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ObjectLineArt(bpy_struct):
    """ Object line art settings
    """
    crease_threshold: float = None
    ' Angles smaller than this will be treated as creases\n\n    :type: float\n    '
    intersection_priority: int = None
    ' The intersection line will be included into the object with the higher intersection priority value\n\n    :type: int\n    '
    usage: typing.Union[str, int] = None
    " How to use this object in line art calculation * ``INHERIT`` Inherit -- Use settings from the parent collection. * ``INCLUDE`` Include -- Generate feature lines for this object's data. * ``OCCLUSION_ONLY`` Occlusion Only -- Only use the object data to produce occlusion. * ``EXCLUDE`` Exclude -- Don't use this object for Line Art rendering. * ``INTERSECTION_ONLY`` Intersection Only -- Only generate intersection lines for this collection. * ``NO_INTERSECTION`` No Intersection -- Include this object but do not generate intersection lines. * ``FORCE_INTERSECTION`` Force Intersection -- Generate intersection lines even with objects that disabled intersection.\n\n    :type: typing.Union[str, int]\n    "
    use_crease_override: bool = None
    " Use this object's crease setting to overwrite scene global\n\n    :type: bool\n    "
    use_intersection_priority_override: bool = None
    " Use this object's intersection priority to override collection setting\n\n    :type: bool\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Operator(bpy_struct):
    """ Storage of an operator being executed, or registered after execution
    """
    bl_cursor_pending: typing.Union[str, int] = None
    ' Cursor to use when waiting for the user to select a location to activate the operator (when ``bl_options`` has ``DEPENDS_ON_CURSOR`` set)\n\n    :type: typing.Union[str, int]\n    '
    bl_description: str = None
    ' \n\n    :type: str\n    '
    bl_idname: str = None
    ' \n\n    :type: str\n    '
    bl_label: str = None
    ' \n\n    :type: str\n    '
    bl_options: typing.Union[typing.Set[int], typing.Set[str]] = None
    ' Options for this operator type\n\n    :type: typing.Union[typing.Set[int], typing.Set[str]]\n    '
    bl_translation_context: str = None
    ' \n\n    :type: str\n    '
    bl_undo_group: str = None
    ' \n\n    :type: str\n    '
    has_reports: bool = None
    ' Operator has a set of reports (warnings and errors) from last execution\n\n    :type: bool\n    '
    layout: 'UILayout' = None
    " \n\n    :type: 'UILayout'\n    "
    macros: bpy_prop_collection['Macro'] = None
    " \n\n    :type: bpy_prop_collection['Macro']\n    "
    name: str = None
    ' \n\n    :type: str\n    '
    options: 'OperatorOptions' = None
    " Runtime options\n\n    :type: 'OperatorOptions'\n    "
    properties: 'OperatorProperties' = None
    " \n\n    :type: 'OperatorProperties'\n    "
    bl_property: str = None
    ' The name of a property to use as this operators primary property. Currently this is only used to select the default property when expanding an operator into a menu.\n\n    :type: str\n    '

    def report(self, type: typing.Union[typing.Set[int], typing.Set[str]], message: str):
        """ report

        :param type: Type
        :type type: typing.Union[typing.Set[int], typing.Set[str]]
        :param message: Report Message
        :type message: str
        """
        pass

    def is_repeat(self) -> bool:
        """ is_repeat

        :rtype: bool
        :return: result
        """
        pass

    @classmethod
    def poll(cls, context: 'Context'):
        """ Test if the operator can be called or not

        :param context: 
        :type context: 'Context'
        """
        pass

    def execute(self, context: 'Context') -> typing.Union[typing.Set[int], typing.Set[str]]:
        """ Execute the operator

        :param context: 
        :type context: 'Context'
        :rtype: typing.Union[typing.Set[int], typing.Set[str]]
        :return: result
        """
        pass

    def check(self, context: 'Context') -> bool:
        """ Check the operator settings, return True to signal a change to redraw

        :param context: 
        :type context: 'Context'
        :rtype: bool
        :return: result
        """
        pass

    def invoke(self, context: 'Context', event: 'Event') -> typing.Union[typing.Set[int], typing.Set[str]]:
        """ Invoke the operator

        :param context: 
        :type context: 'Context'
        :param event: 
        :type event: 'Event'
        :rtype: typing.Union[typing.Set[int], typing.Set[str]]
        :return: result
        """
        pass

    def modal(self, context: 'Context', event: 'Event') -> typing.Union[typing.Set[int], typing.Set[str]]:
        """ Modal operator function

        :param context: 
        :type context: 'Context'
        :param event: 
        :type event: 'Event'
        :rtype: typing.Union[typing.Set[int], typing.Set[str]]
        :return: result
        """
        pass

    def draw(self, context: 'Context'):
        """ Draw function for the operator

        :param context: 
        :type context: 'Context'
        """
        pass

    def cancel(self, context: 'Context'):
        """ Called when the operator is canceled

        :param context: 
        :type context: 'Context'
        """
        pass

    @classmethod
    def description(cls, context: 'Context', properties: 'OperatorProperties') -> str:
        """ Compute a description string that depends on parameters

        :param context: 
        :type context: 'Context'
        :param properties: 
        :type properties: 'OperatorProperties'
        :rtype: str
        :return: result
        """
        pass

    def as_keywords(self, *, ignore=()):
        """ Return a copy of the properties as a dictionary

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def poll_message_set(self, message: str, *args):
        """ Set the message to show in the tool-tip when poll fails. When message is callable, additional user defined positional arguments are passed to the message function.

        :param message: The message or a function that returns the message.
        :type message: str
        """
        pass

class OperatorMacro(bpy_struct):
    """ Storage of a sub operator in a macro after it has been added
    """
    properties: 'OperatorProperties' = None
    " \n\n    :type: 'OperatorProperties'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class OperatorOptions(bpy_struct):
    """ Runtime options
    """
    is_grab_cursor: bool = None
    ' True when the cursor is grabbed\n\n    :type: bool\n    '
    is_invoke: bool = None
    ' True when invoked (even if only the execute callbacks available)\n\n    :type: bool\n    '
    is_repeat: bool = None
    " True when run from the 'Adjust Last Operation' panel\n\n    :type: bool\n    "
    is_repeat_last: bool = None
    " True when run from the operator 'Repeat Last'\n\n    :type: bool\n    "
    use_cursor_region: bool = None
    ' Enable to use the region under the cursor for modal execution\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class OperatorProperties(bpy_struct):
    """ Input properties of an operator
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PackedFile(bpy_struct):
    """ External file packed into the .blend file
    """
    data: str = None
    ' Raw data (bytes, exact content of the embedded file)\n\n    :type: str\n    '
    size: int = None
    ' Size of packed file in bytes\n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Paint(bpy_struct):
    brush: 'Brush' = None
    " Active Brush\n\n    :type: 'Brush'\n    "
    cavity_curve: 'CurveMapping' = None
    " Editable cavity curve\n\n    :type: 'CurveMapping'\n    "
    input_samples: int = None
    ' Average multiple input samples together to smooth the brush stroke\n\n    :type: int\n    '
    palette: 'Palette' = None
    " Active Palette\n\n    :type: 'Palette'\n    "
    show_brush: bool = None
    ' \n\n    :type: bool\n    '
    show_brush_on_surface: bool = None
    ' \n\n    :type: bool\n    '
    show_low_resolution: bool = None
    ' For multires, show low resolution while navigating the view\n\n    :type: bool\n    '
    tile_offset: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Stride at which tiled strokes are copied\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    tile_x: bool = None
    ' Tile along X axis\n\n    :type: bool\n    '
    tile_y: bool = None
    ' Tile along Y axis\n\n    :type: bool\n    '
    tile_z: bool = None
    ' Tile along Z axis\n\n    :type: bool\n    '
    tool_slots: bpy_prop_collection['PaintToolSlot'] = None
    " \n\n    :type: bpy_prop_collection['PaintToolSlot']\n    "
    use_cavity: bool = None
    ' Mask painting according to mesh geometry cavity\n\n    :type: bool\n    '
    use_sculpt_delay_updates: bool = None
    ' Update the geometry when it enters the view, providing faster view navigation\n\n    :type: bool\n    '
    use_symmetry_feather: bool = None
    ' Reduce the strength of the brush where it overlaps symmetrical daubs\n\n    :type: bool\n    '
    use_symmetry_x: bool = None
    ' Mirror brush across the X axis\n\n    :type: bool\n    '
    use_symmetry_y: bool = None
    ' Mirror brush across the Y axis\n\n    :type: bool\n    '
    use_symmetry_z: bool = None
    ' Mirror brush across the Z axis\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PaintModeSettings(bpy_struct):
    """ Properties of paint mode
    """
    canvas_image: 'Image' = None
    " Image used as painting target\n\n    :type: 'Image'\n    "
    canvas_source: typing.Union[str, int] = None
    ' Source to select canvas from\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PaintToolSlot(bpy_struct):
    brush: 'Brush' = None
    " \n\n    :type: 'Brush'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PaletteColor(bpy_struct):
    color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    strength: float = None
    ' \n\n    :type: float\n    '
    weight: float = None
    ' \n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Panel(bpy_struct):
    """ Panel containing UI elements
    """
    bl_category: str = None
    ' The category (tab) in which the panel will be displayed, when applicable\n\n    :type: str\n    '
    bl_context: str = None
    ' The context in which the panel belongs to. (TODO: explain the possible combinations bl_context/bl_region_type/bl_space_type)\n\n    :type: str\n    '
    bl_description: str = None
    ' The panel tooltip\n\n    :type: str\n    '
    bl_idname: str = None
    ' If this is set, the panel gets a custom ID, otherwise it takes the name of the class used to define the panel. For example, if the class name is "OBJECT_PT_hello", and bl_idname is not set by the script, then bl_idname = "OBJECT_PT_hello"\n\n    :type: str\n    '
    bl_label: str = None
    ' The panel label, shows up in the panel header at the right of the triangle used to collapse the panel\n\n    :type: str\n    '
    bl_options: typing.Union[typing.Set[str], typing.Set[int]] = None
    ' Options for this panel type * ``DEFAULT_CLOSED`` Default Closed -- Defines if the panel has to be open or collapsed at the time of its creation. * ``HIDE_HEADER`` Hide Header -- If set to False, the panel shows a header, which contains a clickable arrow to collapse the panel and the label (see bl_label). * ``INSTANCED`` Instanced Panel -- Multiple panels with this type can be used as part of a list depending on data external to the UI. Used to create panels for the modifiers and other stacks. * ``HEADER_LAYOUT_EXPAND`` Expand Header Layout -- Allow buttons in the header to stretch and shrink to fill the entire layout width.\n\n    :type: typing.Union[typing.Set[str], typing.Set[int]]\n    '
    bl_order: int = None
    ' Panels with lower numbers are default ordered before panels with higher numbers\n\n    :type: int\n    '
    bl_owner_id: str = None
    ' The ID owning the data displayed in the panel, if any\n\n    :type: str\n    '
    bl_parent_id: str = None
    ' If this is set, the panel becomes a sub-panel\n\n    :type: str\n    '
    bl_region_type: typing.Union[str, int] = None
    ' The region where the panel is going to be used in\n\n    :type: typing.Union[str, int]\n    '
    bl_space_type: typing.Union[str, int] = None
    ' The space where the panel is going to be used in\n\n    :type: typing.Union[str, int]\n    '
    bl_translation_context: str = None
    ' Specific translation context, only define when the label needs to be disambiguated from others using the exact same label\n\n    :type: str\n    '
    bl_ui_units_x: int = None
    ' When set, defines popup panel width\n\n    :type: int\n    '
    custom_data: 'Constraint' = None
    " Panel data\n\n    :type: 'Constraint'\n    "
    is_popover: bool = None
    ' \n\n    :type: bool\n    '
    layout: 'UILayout' = None
    " Defines the structure of the panel in the UI\n\n    :type: 'UILayout'\n    "
    text: str = None
    ' XXX todo\n\n    :type: str\n    '
    use_pin: bool = None
    ' Show the panel on all tabs\n\n    :type: bool\n    '

    @classmethod
    def poll(cls, context: 'Context'):
        """ If this method returns a non-null output, then the panel can be drawn

        :param context: 
        :type context: 'Context'
        """
        pass

    def draw(self, context: 'Context'):
        """ Draw UI elements into the panel UI layout

        :param context: 
        :type context: 'Context'
        """
        pass

    def draw_header(self, context: 'Context'):
        """ Draw UI elements into the panel's header UI layout

        :param context: 
        :type context: 'Context'
        """
        pass

    def draw_header_preset(self, context: 'Context'):
        """ Draw UI elements for presets in the panel's header

        :param context: 
        :type context: 'Context'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Particle(bpy_struct):
    """ Particle in a particle system
    """
    alive_state: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    angular_velocity: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    birth_time: float = None
    ' \n\n    :type: float\n    '
    die_time: float = None
    ' \n\n    :type: float\n    '
    hair_keys: bpy_prop_collection['ParticleHairKey'] = None
    " \n\n    :type: bpy_prop_collection['ParticleHairKey']\n    "
    is_exist: bool = None
    ' \n\n    :type: bool\n    '
    is_visible: bool = None
    ' \n\n    :type: bool\n    '
    lifetime: float = None
    ' \n\n    :type: float\n    '
    location: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    particle_keys: bpy_prop_collection['ParticleKey'] = None
    " \n\n    :type: bpy_prop_collection['ParticleKey']\n    "
    prev_angular_velocity: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    prev_location: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    prev_rotation: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion']\n    "
    prev_velocity: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    rotation: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion']\n    "
    size: float = None
    ' \n\n    :type: float\n    '
    velocity: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "

    def uv_on_emitter(self, modifier: 'ParticleSystemModifier') -> typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']:
        """ Obtain UV coordinates for a particle on an evaluated mesh.

        :param modifier: Particle modifier from an evaluated object
        :type modifier: 'ParticleSystemModifier'
        :rtype: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']
        :return: uv
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ParticleBrush(bpy_struct):
    """ Particle editing brush
    """
    count: int = None
    ' Particle count\n\n    :type: int\n    '
    curve: 'CurveMapping' = None
    " \n\n    :type: 'CurveMapping'\n    "
    length_mode: typing.Union[str, int] = None
    ' * ``GROW`` Grow -- Make hairs longer. * ``SHRINK`` Shrink -- Make hairs shorter.\n\n    :type: typing.Union[str, int]\n    '
    puff_mode: typing.Union[str, int] = None
    ' * ``ADD`` Add -- Make hairs more puffy. * ``SUB`` Sub -- Make hairs less puffy.\n\n    :type: typing.Union[str, int]\n    '
    size: int = None
    ' Radius of the brush in pixels\n\n    :type: int\n    '
    steps: int = None
    ' Brush steps\n\n    :type: int\n    '
    strength: float = None
    ' Brush strength\n\n    :type: float\n    '
    use_puff_volume: bool = None
    ' Apply puff to unselected end-points (helps maintain hair volume when puffing root)\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ParticleDupliWeight(bpy_struct):
    """ Weight of a particle instance object in a collection
    """
    count: int = None
    ' The number of times this object is repeated with respect to other objects\n\n    :type: int\n    '
    name: str = None
    ' Particle instance object name\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ParticleEdit(bpy_struct):
    """ Properties of particle editing mode
    """
    brush: 'ParticleBrush' = None
    " \n\n    :type: 'ParticleBrush'\n    "
    default_key_count: int = None
    ' How many keys to make new particles with\n\n    :type: int\n    '
    display_step: int = None
    ' How many steps to display the path with\n\n    :type: int\n    '
    emitter_distance: float = None
    ' Distance to keep particles away from the emitter\n\n    :type: float\n    '
    fade_frames: int = None
    ' How many frames to fade\n\n    :type: int\n    '
    is_editable: bool = None
    ' A valid edit mode exists\n\n    :type: bool\n    '
    is_hair: bool = None
    ' Editing hair\n\n    :type: bool\n    '
    object: 'Object' = None
    " The edited object\n\n    :type: 'Object'\n    "
    select_mode: typing.Union[str, int] = None
    ' Particle select and display mode * ``PATH`` Path -- Path edit mode. * ``POINT`` Point -- Point select mode. * ``TIP`` Tip -- Tip select mode.\n\n    :type: typing.Union[str, int]\n    '
    shape_object: 'Object' = None
    " Outer shape to use for tools\n\n    :type: 'Object'\n    "
    show_particles: bool = None
    ' Display actual particles\n\n    :type: bool\n    '
    tool: typing.Union[str, int] = None
    ' * ``COMB`` Comb -- Comb hairs. * ``SMOOTH`` Smooth -- Smooth hairs. * ``ADD`` Add -- Add hairs. * ``LENGTH`` Length -- Make hairs longer or shorter. * ``PUFF`` Puff -- Make hairs stand up. * ``CUT`` Cut -- Cut hairs. * ``WEIGHT`` Weight -- Weight hair particles.\n\n    :type: typing.Union[str, int]\n    '
    type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    use_auto_velocity: bool = None
    ' Calculate point velocities automatically\n\n    :type: bool\n    '
    use_default_interpolate: bool = None
    ' Interpolate new particles from the existing ones\n\n    :type: bool\n    '
    use_emitter_deflect: bool = None
    ' Keep paths from intersecting the emitter\n\n    :type: bool\n    '
    use_fade_time: bool = None
    ' Fade paths and keys further away from current frame\n\n    :type: bool\n    '
    use_preserve_length: bool = None
    ' Keep path lengths constant\n\n    :type: bool\n    '
    use_preserve_root: bool = None
    ' Keep root keys unmodified\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ParticleHairKey(bpy_struct):
    """ Particle key for hair particle system
    """
    co: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Location of the hair key in object space\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    co_local: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Location of the hair key in its local coordinate system, relative to the emitting face\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    time: float = None
    ' Relative time of key over hair length\n\n    :type: float\n    '
    weight: float = None
    ' Weight for cloth simulation\n\n    :type: float\n    '

    def co_object(self, object: 'Object', modifier: 'ParticleSystemModifier', particle: 'Particle') -> typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']:
        """ Obtain hairkey location with particle and modifier data

        :param object: Object
        :type object: 'Object'
        :param modifier: Particle modifier
        :type modifier: 'ParticleSystemModifier'
        :param particle: hair particle
        :type particle: 'Particle'
        :rtype: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']
        :return: Co, Exported hairkey location
        """
        pass

    def co_object_set(self, object: 'Object', modifier: 'ParticleSystemModifier', particle: 'Particle', co: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']):
        """ Set hairkey location with particle and modifier data

        :param object: Object
        :type object: 'Object'
        :param modifier: Particle modifier
        :type modifier: 'ParticleSystemModifier'
        :param particle: hair particle
        :type particle: 'Particle'
        :param co: Co, Specified hairkey location
        :type co: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ParticleKey(bpy_struct):
    """ Key location for a particle over time
    """
    angular_velocity: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Key angular velocity\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    location: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Key location\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    rotation: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion'] = None
    " Key rotation quaternion\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion']\n    "
    time: float = None
    ' Time of key over the simulation\n\n    :type: float\n    '
    velocity: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Key velocity\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ParticleSystem(bpy_struct):
    """ Particle system in an object
    """
    active_particle_target: 'ParticleTarget' = None
    " \n\n    :type: 'ParticleTarget'\n    "
    active_particle_target_index: int = None
    ' \n\n    :type: int\n    '
    child_particles: bpy_prop_collection['ChildParticle'] = None
    " Child particles generated by the particle system\n\n    :type: bpy_prop_collection['ChildParticle']\n    "
    child_seed: int = None
    ' Offset in the random number table for child particles, to get a different randomized result\n\n    :type: int\n    '
    cloth: 'ClothModifier' = None
    " Cloth dynamics for hair\n\n    :type: 'ClothModifier'\n    "
    dt_frac: float = None
    ' The current simulation time step size, as a fraction of a frame\n\n    :type: float\n    '
    has_multiple_caches: bool = None
    ' Particle system has multiple point caches\n\n    :type: bool\n    '
    invert_vertex_group_clump: bool = None
    ' Negate the effect of the clump vertex group\n\n    :type: bool\n    '
    invert_vertex_group_density: bool = None
    ' Negate the effect of the density vertex group\n\n    :type: bool\n    '
    invert_vertex_group_field: bool = None
    ' Negate the effect of the field vertex group\n\n    :type: bool\n    '
    invert_vertex_group_kink: bool = None
    ' Negate the effect of the kink vertex group\n\n    :type: bool\n    '
    invert_vertex_group_length: bool = None
    ' Negate the effect of the length vertex group\n\n    :type: bool\n    '
    invert_vertex_group_rotation: bool = None
    ' Negate the effect of the rotation vertex group\n\n    :type: bool\n    '
    invert_vertex_group_roughness_1: bool = None
    ' Negate the effect of the roughness 1 vertex group\n\n    :type: bool\n    '
    invert_vertex_group_roughness_2: bool = None
    ' Negate the effect of the roughness 2 vertex group\n\n    :type: bool\n    '
    invert_vertex_group_roughness_end: bool = None
    ' Negate the effect of the roughness end vertex group\n\n    :type: bool\n    '
    invert_vertex_group_size: bool = None
    ' Negate the effect of the size vertex group\n\n    :type: bool\n    '
    invert_vertex_group_tangent: bool = None
    ' Negate the effect of the tangent vertex group\n\n    :type: bool\n    '
    invert_vertex_group_twist: bool = None
    ' Negate the effect of the twist vertex group\n\n    :type: bool\n    '
    invert_vertex_group_velocity: bool = None
    ' Negate the effect of the velocity vertex group\n\n    :type: bool\n    '
    is_editable: bool = None
    ' Particle system can be edited in particle mode\n\n    :type: bool\n    '
    is_edited: bool = None
    ' Particle system has been edited in particle mode\n\n    :type: bool\n    '
    is_global_hair: bool = None
    ' Hair keys are in global coordinate space\n\n    :type: bool\n    '
    name: str = None
    ' Particle system name\n\n    :type: str\n    '
    parent: 'Object' = None
    " Use this object's coordinate system instead of global coordinate system\n\n    :type: 'Object'\n    "
    particles: bpy_prop_collection['Particle'] = None
    " Particles generated by the particle system\n\n    :type: bpy_prop_collection['Particle']\n    "
    point_cache: 'PointCache' = None
    " \n\n    :type: 'PointCache'\n    "
    reactor_target_object: 'Object' = None
    " For reactor systems, the object that has the target particle system (empty if same object)\n\n    :type: 'Object'\n    "
    reactor_target_particle_system: int = None
    ' For reactor systems, index of particle system on the target object\n\n    :type: int\n    '
    seed: int = None
    ' Offset in the random number table, to get a different randomized result\n\n    :type: int\n    '
    settings: 'ParticleSettings' = None
    " Particle system settings\n\n    :type: 'ParticleSettings'\n    "
    targets: bpy_prop_collection['ParticleTarget'] = None
    " Target particle systems\n\n    :type: bpy_prop_collection['ParticleTarget']\n    "
    use_hair_dynamics: bool = None
    ' Enable hair dynamics using cloth simulation\n\n    :type: bool\n    '
    use_keyed_timing: bool = None
    ' Use key times\n\n    :type: bool\n    '
    vertex_group_clump: str = None
    ' Vertex group to control clump\n\n    :type: str\n    '
    vertex_group_density: str = None
    ' Vertex group to control density\n\n    :type: str\n    '
    vertex_group_field: str = None
    ' Vertex group to control field\n\n    :type: str\n    '
    vertex_group_kink: str = None
    ' Vertex group to control kink\n\n    :type: str\n    '
    vertex_group_length: str = None
    ' Vertex group to control length\n\n    :type: str\n    '
    vertex_group_rotation: str = None
    ' Vertex group to control rotation\n\n    :type: str\n    '
    vertex_group_roughness_1: str = None
    ' Vertex group to control roughness 1\n\n    :type: str\n    '
    vertex_group_roughness_2: str = None
    ' Vertex group to control roughness 2\n\n    :type: str\n    '
    vertex_group_roughness_end: str = None
    ' Vertex group to control roughness end\n\n    :type: str\n    '
    vertex_group_size: str = None
    ' Vertex group to control size\n\n    :type: str\n    '
    vertex_group_tangent: str = None
    ' Vertex group to control tangent\n\n    :type: str\n    '
    vertex_group_twist: str = None
    ' Vertex group to control twist\n\n    :type: str\n    '
    vertex_group_velocity: str = None
    ' Vertex group to control velocity\n\n    :type: str\n    '

    def co_hair(self, object: 'Object', particle_no: int=0, step: int=0) -> typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']:
        """ Obtain cache hair data

        :param object: Object
        :type object: 'Object'
        :param particle_no: Particle no
        :type particle_no: int
        :param step: step no
        :type step: int
        :rtype: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']
        :return: Co, Exported hairkey location
        """
        pass

    def uv_on_emitter(self, modifier: 'ParticleSystemModifier', particle: 'Particle', particle_no: int=0, uv_no: int=0) -> typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']:
        """ Obtain uv for all particles

        :param modifier: Particle modifier
        :type modifier: 'ParticleSystemModifier'
        :param particle: Particle
        :type particle: 'Particle'
        :param particle_no: Particle no
        :type particle_no: int
        :param uv_no: UV no
        :type uv_no: int
        :rtype: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']
        :return: uv
        """
        pass

    def mcol_on_emitter(self, modifier: 'ParticleSystemModifier', particle: 'Particle', particle_no: int=0, vcol_no: int=0) -> typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']:
        """ Obtain mcol for all particles

        :param modifier: Particle modifier
        :type modifier: 'ParticleSystemModifier'
        :param particle: Particle
        :type particle: 'Particle'
        :param particle_no: Particle no
        :type particle_no: int
        :param vcol_no: vcol no
        :type vcol_no: int
        :rtype: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']
        :return: mcol
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ParticleTarget(bpy_struct):
    """ Target particle system
    """
    alliance: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    duration: float = None
    ' \n\n    :type: float\n    '
    is_valid: bool = None
    ' Keyed particles target is valid\n\n    :type: bool\n    '
    name: str = None
    ' Particle target name\n\n    :type: str\n    '
    object: 'Object' = None
    " The object that has the target particle system (empty if same object)\n\n    :type: 'Object'\n    "
    system: int = None
    ' The index of particle system on the target object\n\n    :type: int\n    '
    time: float = None
    ' \n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PathCompare(bpy_struct):
    """ Match paths against this value
    """
    path: str = None
    ' \n\n    :type: str\n    '
    use_glob: bool = None
    ' Enable wildcard globbing\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Point(bpy_struct):
    """ Point in a point cloud
    """
    co: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    index: int = None
    ' Index of this points\n\n    :type: int\n    '
    radius: float = None
    ' \n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PointCache(bpy_struct):
    """ Active point cache for physics simulations
    """
    compression: typing.Union[str, int] = None
    ' Compression method to be used * ``NO`` None -- No compression. * ``LIGHT`` Lite -- Fast but not so effective compression. * ``HEAVY`` Heavy -- Effective but slow compression.\n\n    :type: typing.Union[str, int]\n    '
    filepath: str = None
    ' Cache file path\n\n    :type: str\n    '
    frame_end: int = None
    ' Frame on which the simulation stops\n\n    :type: int\n    '
    frame_start: int = None
    ' Frame on which the simulation starts\n\n    :type: int\n    '
    frame_step: int = None
    ' Number of frames between cached frames\n\n    :type: int\n    '
    index: int = None
    ' Index number of cache files\n\n    :type: int\n    '
    info: str = None
    ' Info on current cache status\n\n    :type: str\n    '
    is_baked: bool = None
    ' The cache is baked\n\n    :type: bool\n    '
    is_baking: bool = None
    ' The cache is being baked\n\n    :type: bool\n    '
    is_frame_skip: bool = None
    ' Some frames were skipped while baking/saving that cache\n\n    :type: bool\n    '
    is_outdated: bool = None
    ' \n\n    :type: bool\n    '
    name: str = None
    ' Cache name\n\n    :type: str\n    '
    point_caches: 'PointCaches' = None
    " \n\n    :type: 'PointCaches'\n    "
    use_disk_cache: bool = None
    ' Save cache files to disk (.blend file must be saved first)\n\n    :type: bool\n    '
    use_external: bool = None
    ' Read cache from an external location\n\n    :type: bool\n    '
    use_library_path: bool = None
    " Use this file's path for the disk cache when library linked into another file (for local bakes per scene file, disable this option)\n\n    :type: bool\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PointCacheItem(bpy_struct):
    """ Point cache for physics simulations
    """
    compression: typing.Union[str, int] = None
    ' Compression method to be used * ``NO`` None -- No compression. * ``LIGHT`` Lite -- Fast but not so effective compression. * ``HEAVY`` Heavy -- Effective but slow compression.\n\n    :type: typing.Union[str, int]\n    '
    filepath: str = None
    ' Cache file path\n\n    :type: str\n    '
    frame_end: int = None
    ' Frame on which the simulation stops\n\n    :type: int\n    '
    frame_start: int = None
    ' Frame on which the simulation starts\n\n    :type: int\n    '
    frame_step: int = None
    ' Number of frames between cached frames\n\n    :type: int\n    '
    index: int = None
    ' Index number of cache files\n\n    :type: int\n    '
    info: str = None
    ' Info on current cache status\n\n    :type: str\n    '
    is_baked: bool = None
    ' The cache is baked\n\n    :type: bool\n    '
    is_baking: bool = None
    ' The cache is being baked\n\n    :type: bool\n    '
    is_frame_skip: bool = None
    ' Some frames were skipped while baking/saving that cache\n\n    :type: bool\n    '
    is_outdated: bool = None
    ' \n\n    :type: bool\n    '
    name: str = None
    ' Cache name\n\n    :type: str\n    '
    use_disk_cache: bool = None
    ' Save cache files to disk (.blend file must be saved first)\n\n    :type: bool\n    '
    use_external: bool = None
    ' Read cache from an external location\n\n    :type: bool\n    '
    use_library_path: bool = None
    " Use this file's path for the disk cache when library linked into another file (for local bakes per scene file, disable this option)\n\n    :type: bool\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Pose(bpy_struct):
    """ A collection of pose channels, including settings for animating bones
    """
    animation_visualization: 'AnimViz' = None
    " Animation data for this data-block\n\n    :type: 'AnimViz'\n    "
    bone_groups: 'BoneGroups' = None
    " Groups of the bones\n\n    :type: 'BoneGroups'\n    "
    bones: bpy_prop_collection['PoseBone'] = None
    " Individual pose bones for the armature\n\n    :type: bpy_prop_collection['PoseBone']\n    "
    ik_param: 'IKParam' = None
    " Parameters for IK solver\n\n    :type: 'IKParam'\n    "
    ik_solver: typing.Union[str, int] = None
    ' Selection of IK solver for IK chain * ``LEGACY`` Standard -- Original IK solver. * ``ITASC`` iTaSC -- Multi constraint, stateful IK solver.\n\n    :type: typing.Union[str, int]\n    '
    use_auto_ik: bool = None
    ' Add temporary IK constraints while grabbing bones in Pose Mode\n\n    :type: bool\n    '
    use_mirror_relative: bool = None
    ' Apply relative transformations in X-mirror mode (not supported with Auto IK)\n\n    :type: bool\n    '
    use_mirror_x: bool = None
    ' Apply changes to matching bone on opposite side of X-Axis\n\n    :type: bool\n    '

    @classmethod
    def apply_pose_from_action(cls, action: 'Action', evaluation_time: float=0.0):
        """ Apply the given action to this pose by evaluating it at a specific time. Only updates the pose of selected bones, or all bones if none are selected.

        :param action: Action, The Action containing the pose
        :type action: 'Action'
        :param evaluation_time: Evaluation Time, Time at which the given action is evaluated to obtain the pose
        :type evaluation_time: float
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PoseBone(bpy_struct):
    """ Channel defining pose data for a bone in a Pose
    """
    bbone_curveinx: float = None
    " X-axis handle offset for start of the B-Bone's curve, adjusts curvature\n\n    :type: float\n    "
    bbone_curveinz: float = None
    " Z-axis handle offset for start of the B-Bone's curve, adjusts curvature\n\n    :type: float\n    "
    bbone_curveoutx: float = None
    " X-axis handle offset for end of the B-Bone's curve, adjusts curvature\n\n    :type: float\n    "
    bbone_curveoutz: float = None
    " Z-axis handle offset for end of the B-Bone's curve, adjusts curvature\n\n    :type: float\n    "
    bbone_custom_handle_end: 'PoseBone' = None
    " Bone that serves as the end handle for the B-Bone curve\n\n    :type: 'PoseBone'\n    "
    bbone_custom_handle_start: 'PoseBone' = None
    " Bone that serves as the start handle for the B-Bone curve\n\n    :type: 'PoseBone'\n    "
    bbone_easein: float = None
    ' Length of first Bezier Handle (for B-Bones only)\n\n    :type: float\n    '
    bbone_easeout: float = None
    ' Length of second Bezier Handle (for B-Bones only)\n\n    :type: float\n    '
    bbone_rollin: float = None
    ' Roll offset for the start of the B-Bone, adjusts twist\n\n    :type: float\n    '
    bbone_rollout: float = None
    ' Roll offset for the end of the B-Bone, adjusts twist\n\n    :type: float\n    '
    bbone_scalein: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Scale factors for the start of the B-Bone, adjusts thickness (for tapering effects)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    bbone_scaleout: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Scale factors for the end of the B-Bone, adjusts thickness (for tapering effects)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    bone: 'Bone' = None
    " Bone associated with this PoseBone\n\n    :type: 'Bone'\n    "
    bone_group: 'BoneGroup' = None
    " Bone group this pose channel belongs to\n\n    :type: 'BoneGroup'\n    "
    bone_group_index: int = None
    ' Bone group this pose channel belongs to (0 means no group)\n\n    :type: int\n    '
    child: 'PoseBone' = None
    " Child of this pose bone\n\n    :type: 'PoseBone'\n    "
    constraints: 'PoseBoneConstraints' = None
    " Constraints that act on this pose channel\n\n    :type: 'PoseBoneConstraints'\n    "
    custom_shape: 'Object' = None
    " Object that defines custom display shape for this bone\n\n    :type: 'Object'\n    "
    custom_shape_rotation_euler: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler'] = None
    " Adjust the rotation of the custom shape\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler']\n    "
    custom_shape_scale_xyz: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Adjust the size of the custom shape\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    custom_shape_transform: 'PoseBone' = None
    " Bone that defines the display transform of this custom shape\n\n    :type: 'PoseBone'\n    "
    custom_shape_translation: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Adjust the location of the custom shape\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    head: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Location of head of the channel's bone\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    ik_linear_weight: float = None
    ' Weight of scale constraint for IK\n\n    :type: float\n    '
    ik_max_x: float = None
    ' Maximum angles for IK Limit\n\n    :type: float\n    '
    ik_max_y: float = None
    ' Maximum angles for IK Limit\n\n    :type: float\n    '
    ik_max_z: float = None
    ' Maximum angles for IK Limit\n\n    :type: float\n    '
    ik_min_x: float = None
    ' Minimum angles for IK Limit\n\n    :type: float\n    '
    ik_min_y: float = None
    ' Minimum angles for IK Limit\n\n    :type: float\n    '
    ik_min_z: float = None
    ' Minimum angles for IK Limit\n\n    :type: float\n    '
    ik_rotation_weight: float = None
    ' Weight of rotation constraint for IK\n\n    :type: float\n    '
    ik_stiffness_x: float = None
    ' IK stiffness around the X axis\n\n    :type: float\n    '
    ik_stiffness_y: float = None
    ' IK stiffness around the Y axis\n\n    :type: float\n    '
    ik_stiffness_z: float = None
    ' IK stiffness around the Z axis\n\n    :type: float\n    '
    ik_stretch: float = None
    ' Allow scaling of the bone for IK\n\n    :type: float\n    '
    is_in_ik_chain: bool = None
    ' Is part of an IK chain\n\n    :type: bool\n    '
    length: float = None
    ' Length of the bone\n\n    :type: float\n    '
    location: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    lock_ik_x: bool = None
    ' Disallow movement around the X axis\n\n    :type: bool\n    '
    lock_ik_y: bool = None
    ' Disallow movement around the Y axis\n\n    :type: bool\n    '
    lock_ik_z: bool = None
    ' Disallow movement around the Z axis\n\n    :type: bool\n    '
    lock_location: typing.List[bool] = None
    ' Lock editing of location when transforming\n\n    :type: typing.List[bool]\n    '
    lock_rotation: typing.List[bool] = None
    ' Lock editing of rotation when transforming\n\n    :type: typing.List[bool]\n    '
    lock_rotation_w: bool = None
    " Lock editing of 'angle' component of four-component rotations when transforming\n\n    :type: bool\n    "
    lock_rotations_4d: bool = None
    ' Lock editing of four component rotations by components (instead of as Eulers)\n\n    :type: bool\n    '
    lock_scale: typing.List[bool] = None
    ' Lock editing of scale when transforming\n\n    :type: typing.List[bool]\n    '
    matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " Final 4x4 matrix after constraints and drivers are applied (object space)\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    matrix_basis: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " Alternative access to location/scale/rotation relative to the parent and own rest bone\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    matrix_channel: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " 4x4 matrix, before constraints\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    motion_path: 'MotionPath' = None
    " Motion Path for this element\n\n    :type: 'MotionPath'\n    "
    name: str = None
    ' \n\n    :type: str\n    '
    parent: 'PoseBone' = None
    " Parent of this pose bone\n\n    :type: 'PoseBone'\n    "
    rotation_axis_angle: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Angle of Rotation for Axis-Angle rotation representation\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    rotation_euler: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler'] = None
    " Rotation in Eulers\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler']\n    "
    rotation_mode: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    rotation_quaternion: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion'] = None
    " Rotation in Quaternions\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion']\n    "
    scale: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    tail: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Location of tail of the channel's bone\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    use_custom_shape_bone_size: bool = None
    ' Scale the custom object by the bone length\n\n    :type: bool\n    '
    use_ik_limit_x: bool = None
    ' Limit movement around the X axis\n\n    :type: bool\n    '
    use_ik_limit_y: bool = None
    ' Limit movement around the Y axis\n\n    :type: bool\n    '
    use_ik_limit_z: bool = None
    ' Limit movement around the Z axis\n\n    :type: bool\n    '
    use_ik_linear_control: bool = None
    ' Apply channel size as IK constraint if stretching is enabled\n\n    :type: bool\n    '
    use_ik_rotation_control: bool = None
    ' Apply channel rotation as IK constraint\n\n    :type: bool\n    '
    basename = None
    " The name of this bone before any '.' character (readonly)"
    center = None
    ' The midpoint between the head and the tail. (readonly)'
    children = None
    ' (readonly)'
    children_recursive = None
    ' A list of all children from this bone. .. note:: Takes ``O(len(bones)**2)`` time. (readonly)'
    children_recursive_basename = None
    ' Returns a chain of children with the same base name as this bone. Only direct chains are supported, forks caused by multiple children with matching base names will terminate the function and not be returned. (readonly)'
    parent_recursive = None
    ' A list of parents, starting with the immediate parent (readonly)'
    vector = None
    ' The direction this bone is pointing. Utility function for (tail - head) (readonly)'
    x_axis = None
    ' Vector pointing down the x-axis of the bone. (readonly)'
    y_axis = None
    ' Vector pointing down the y-axis of the bone. (readonly)'
    z_axis = None
    ' Vector pointing down the z-axis of the bone. (readonly)'

    def evaluate_envelope(self, point: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']) -> float:
        """ Calculate bone envelope at given point

        :param point: Point, Position in 3d space to evaluate
        :type point: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']
        :rtype: float
        :return: Factor, Envelope factor
        """
        pass

    def bbone_segment_matrix(self, index: int, rest: bool=False) -> typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']:
        """ Retrieve the matrix of the joint between B-Bone segments if available

        :param index: Index of the segment endpoint
        :type index: int
        :param rest: Return the rest pose matrix
        :type rest: bool
        :rtype: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']
        :return: The resulting matrix in bone local space
        """
        pass

    def compute_bbone_handles(self, rest: bool=False, ease: bool=False, offsets: bool=False):
        """ Retrieve the vectors and rolls coming from B-Bone custom handles

        :param rest: Return the rest pose state
        :type rest: bool
        :param ease: Apply scale from ease values
        :type ease: bool
        :param offsets: Apply roll and curve offsets from bone properties
        :type offsets: bool
        """
        pass

    def parent_index(self, parent_test):
        """ The same as 'bone in other_bone.parent_recursive' but saved generating a list.

        """
        pass

    def translate(self, vec):
        """ Utility function to add *vec* to the head and tail of this bone

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Preferences(bpy_struct):
    """ Global preferences
    """
    active_section: typing.Union[str, int] = None
    ' Active section of the preferences shown in the user interface\n\n    :type: typing.Union[str, int]\n    '
    addons: 'Addons' = None
    " \n\n    :type: 'Addons'\n    "
    app_template: str = None
    ' \n\n    :type: str\n    '
    apps: 'PreferencesApps' = None
    " Preferences that work only for apps\n\n    :type: 'PreferencesApps'\n    "
    autoexec_paths: 'PathCompareCollection' = None
    " \n\n    :type: 'PathCompareCollection'\n    "
    edit: 'PreferencesEdit' = None
    " Settings for interacting with Blender data\n\n    :type: 'PreferencesEdit'\n    "
    experimental: 'PreferencesExperimental' = None
    " Settings for features that are still early in their development stage\n\n    :type: 'PreferencesExperimental'\n    "
    filepaths: 'PreferencesFilePaths' = None
    " Default paths for external files\n\n    :type: 'PreferencesFilePaths'\n    "
    inputs: 'PreferencesInput' = None
    " Settings for input devices\n\n    :type: 'PreferencesInput'\n    "
    is_dirty: bool = None
    ' Preferences have changed\n\n    :type: bool\n    '
    keymap: 'PreferencesKeymap' = None
    " Shortcut setup for keyboards and other input devices\n\n    :type: 'PreferencesKeymap'\n    "
    studio_lights: 'StudioLights' = None
    " \n\n    :type: 'StudioLights'\n    "
    system: 'PreferencesSystem' = None
    " Graphics driver and operating system settings\n\n    :type: 'PreferencesSystem'\n    "
    themes: bpy_prop_collection['Theme'] = None
    " \n\n    :type: bpy_prop_collection['Theme']\n    "
    ui_styles: bpy_prop_collection['ThemeStyle'] = None
    " \n\n    :type: bpy_prop_collection['ThemeStyle']\n    "
    use_preferences_save: bool = None
    ' Save preferences on exit when modified (unless factory settings have been loaded)\n\n    :type: bool\n    '
    version: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Version of Blender the userpref.blend was saved with\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    view: 'PreferencesView' = None
    " Preferences related to viewing data\n\n    :type: 'PreferencesView'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PreferencesApps(bpy_struct):
    """ Preferences that work only for apps
    """
    show_corner_split: bool = None
    ' Split and join editors by dragging from corners\n\n    :type: bool\n    '
    show_edge_resize: bool = None
    ' Resize editors by dragging from the edges\n\n    :type: bool\n    '
    show_regions_visibility_toggle: bool = None
    ' Header and side bars visibility toggles\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PreferencesEdit(bpy_struct):
    """ Settings for interacting with Blender data
    """
    auto_keying_mode: typing.Union[str, int] = None
    ' Mode of automatic keyframe insertion for Objects and Bones (default setting used for new Scenes)\n\n    :type: typing.Union[str, int]\n    '
    collection_instance_empty_size: float = None
    ' Display size of the empty when new collection instances are created\n\n    :type: float\n    '
    fcurve_new_auto_smoothing: typing.Union[str, int] = None
    ' Auto Handle Smoothing mode used for newly added F-Curves\n\n    :type: typing.Union[str, int]\n    '
    fcurve_unselected_alpha: float = None
    ' The opacity of unselected F-Curves against the background of the Graph Editor\n\n    :type: float\n    '
    grease_pencil_default_color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color of new annotation layers\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    grease_pencil_eraser_radius: int = None
    " Radius of eraser 'brush'\n\n    :type: int\n    "
    grease_pencil_euclidean_distance: int = None
    ' Distance moved by mouse when drawing stroke to include\n\n    :type: int\n    '
    grease_pencil_manhattan_distance: int = None
    ' Pixels moved by mouse per axis when drawing stroke\n\n    :type: int\n    '
    keyframe_new_handle_type: typing.Union[str, int] = None
    ' Handle type for handles of new keyframes\n\n    :type: typing.Union[str, int]\n    '
    keyframe_new_interpolation_type: typing.Union[str, int] = None
    ' Interpolation mode used for first keyframe on newly added F-Curves (subsequent keyframes take interpolation from preceding keyframe)\n\n    :type: typing.Union[str, int]\n    '
    material_link: typing.Union[str, int] = None
    ' Toggle whether the material is linked to object data or the object block * ``OBDATA`` Object Data -- Toggle whether the material is linked to object data or the object block. * ``OBJECT`` Object -- Toggle whether the material is linked to object data or the object block.\n\n    :type: typing.Union[str, int]\n    '
    node_margin: int = None
    ' Minimum distance between nodes for Auto-offsetting nodes\n\n    :type: int\n    '
    object_align: typing.Union[str, int] = None
    " The default alignment for objects added from a 3D viewport menu * ``WORLD`` World -- Align newly added objects to the world coordinate system. * ``VIEW`` View -- Align newly added objects to the active 3D view orientation. * ``CURSOR`` 3D Cursor -- Align newly added objects to the 3D Cursor's rotation.\n\n    :type: typing.Union[str, int]\n    "
    sculpt_paint_overlay_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of texture overlay\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    undo_memory_limit: int = None
    ' Maximum memory usage in megabytes (0 means unlimited)\n\n    :type: int\n    '
    undo_steps: int = None
    ' Number of undo steps available (smaller values conserve memory)\n\n    :type: int\n    '
    use_anim_channel_group_colors: bool = None
    ' Use animation channel group colors; generally this is used to show bone group colors\n\n    :type: bool\n    '
    use_auto_keying: bool = None
    ' Automatic keyframe insertion for Objects and Bones (default setting used for new Scenes)\n\n    :type: bool\n    '
    use_auto_keying_warning: bool = None
    ' Show warning indicators when transforming objects and bones if auto keying is enabled\n\n    :type: bool\n    '
    use_cursor_lock_adjust: bool = None
    " Place the cursor without 'jumping' to the new location (when lock-to-cursor is used)\n\n    :type: bool\n    "
    use_duplicate_action: bool = None
    ' Causes actions to be duplicated with the data-blocks\n\n    :type: bool\n    '
    use_duplicate_armature: bool = None
    ' Causes armature data to be duplicated with the object\n\n    :type: bool\n    '
    use_duplicate_camera: bool = None
    ' Causes camera data to be duplicated with the object\n\n    :type: bool\n    '
    use_duplicate_curve: bool = None
    ' Causes curve data to be duplicated with the object\n\n    :type: bool\n    '
    use_duplicate_curves: bool = None
    ' Causes curves data to be duplicated with the object\n\n    :type: bool\n    '
    use_duplicate_grease_pencil: bool = None
    ' Causes grease pencil data to be duplicated with the object\n\n    :type: bool\n    '
    use_duplicate_lattice: bool = None
    ' Causes lattice data to be duplicated with the object\n\n    :type: bool\n    '
    use_duplicate_light: bool = None
    ' Causes light data to be duplicated with the object\n\n    :type: bool\n    '
    use_duplicate_lightprobe: bool = None
    ' Causes light probe data to be duplicated with the object\n\n    :type: bool\n    '
    use_duplicate_material: bool = None
    ' Causes material data to be duplicated with the object\n\n    :type: bool\n    '
    use_duplicate_mesh: bool = None
    ' Causes mesh data to be duplicated with the object\n\n    :type: bool\n    '
    use_duplicate_metaball: bool = None
    ' Causes metaball data to be duplicated with the object\n\n    :type: bool\n    '
    use_duplicate_node_tree: bool = None
    ' Make copies of node groups when duplicating nodes in the node editor\n\n    :type: bool\n    '
    use_duplicate_particle: bool = None
    ' Causes particle systems to be duplicated with the object\n\n    :type: bool\n    '
    use_duplicate_pointcloud: bool = None
    ' Causes point cloud data to be duplicated with the object\n\n    :type: bool\n    '
    use_duplicate_speaker: bool = None
    ' Causes speaker data to be duplicated with the object\n\n    :type: bool\n    '
    use_duplicate_surface: bool = None
    ' Causes surface data to be duplicated with the object\n\n    :type: bool\n    '
    use_duplicate_text: bool = None
    ' Causes text data to be duplicated with the object\n\n    :type: bool\n    '
    use_duplicate_volume: bool = None
    ' Causes volume data to be duplicated with the object\n\n    :type: bool\n    '
    use_enter_edit_mode: bool = None
    ' Enter edit mode automatically after adding a new object\n\n    :type: bool\n    '
    use_global_undo: bool = None
    ' Global undo works by keeping a full copy of the file itself in memory, so takes extra memory\n\n    :type: bool\n    '
    use_insertkey_xyz_to_rgb: bool = None
    ' Color for newly added transformation F-Curves (Location, Rotation, Scale) and also Color is based on the transform axis\n\n    :type: bool\n    '
    use_keyframe_insert_available: bool = None
    ' Automatic keyframe insertion in available F-Curves\n\n    :type: bool\n    '
    use_keyframe_insert_needed: bool = None
    ' Keyframe insertion only when keyframe needed\n\n    :type: bool\n    '
    use_mouse_depth_cursor: bool = None
    ' Use the surface depth for cursor placement\n\n    :type: bool\n    '
    use_negative_frames: bool = None
    ' Current frame number can be manually set to a negative value\n\n    :type: bool\n    '
    use_text_edit_auto_close: bool = None
    ' Automatically close relevant character pairs when typing in the text editor\n\n    :type: bool\n    '
    use_visual_keying: bool = None
    ' Use Visual keying automatically for constrained objects\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PreferencesExperimental(bpy_struct):
    """ Experimental features
    """
    enable_eevee_next: bool = None
    ' Enable the new EEVEE codebase, requires restart\n\n    :type: bool\n    '
    override_auto_resync: bool = None
    ' Enable library overrides automatic resync detection and process on file load. Disable when dealing with older .blend files that need manual Resync (Enforce) handling\n\n    :type: bool\n    '
    show_asset_debug_info: bool = None
    ' Enable some extra fields in the Asset Browser to aid in debugging\n\n    :type: bool\n    '
    use_all_linked_data_direct: bool = None
    ' Forces all linked data to be considered as directly linked. Workaround for current issues/limitations in BAT (Blender studio pipeline tool)\n\n    :type: bool\n    '
    use_asset_indexing: bool = None
    ' Disabling the asset indexer forces every asset library refresh to completely reread assets from disk\n\n    :type: bool\n    '
    use_cycles_debug: bool = None
    ' Enable Cycles debugging options for developers\n\n    :type: bool\n    '
    use_extended_asset_browser: bool = None
    ' Enable Asset Browser editor and operators to manage regular data-blocks as assets, not just poses\n\n    :type: bool\n    '
    use_full_frame_compositor: bool = None
    ' Enable compositor full frame execution mode option (no tiling, reduces execution time and memory usage)\n\n    :type: bool\n    '
    use_new_curves_tools: bool = None
    ' Enable additional features for the new curves data block\n\n    :type: bool\n    '
    use_new_point_cloud_type: bool = None
    ' Enable the new point cloud type in the ui\n\n    :type: bool\n    '
    use_override_templates: bool = None
    ' Enable library override template in the python API\n\n    :type: bool\n    '
    use_realtime_compositor: bool = None
    ' Enable the new realtime compositor\n\n    :type: bool\n    '
    use_sculpt_texture_paint: bool = None
    ' Use texture painting in Sculpt Mode\n\n    :type: bool\n    '
    use_sculpt_tools_tilt: bool = None
    ' Support for pen tablet tilt events in Sculpt Mode\n\n    :type: bool\n    '
    use_undo_legacy: bool = None
    ' Use legacy undo (slower than the new default one, but may be more stable in some cases)\n\n    :type: bool\n    '
    use_viewport_debug: bool = None
    ' Enable viewport debugging options for developers in the overlays pop-over\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PreferencesFilePaths(bpy_struct):
    """ Default paths for external files
    """
    animation_player: str = None
    ' Path to a custom animation/frame sequence player\n\n    :type: str\n    '
    animation_player_preset: typing.Union[str, int] = None
    ' Preset configs for external animation players * ``INTERNAL`` Internal -- Built-in animation player. * ``DJV`` DJV -- Open source frame player. * ``FRAMECYCLER`` FrameCycler -- Frame player from IRIDAS. * ``RV`` RV -- Frame player from Tweak Software. * ``MPLAYER`` MPlayer -- Media player for video and PNG/JPEG/SGI image sequences. * ``CUSTOM`` Custom -- Custom animation player executable path.\n\n    :type: typing.Union[str, int]\n    '
    asset_libraries: bpy_prop_collection['UserAssetLibrary'] = None
    " \n\n    :type: bpy_prop_collection['UserAssetLibrary']\n    "
    auto_save_time: int = None
    ' The time (in minutes) to wait between automatic temporary saves\n\n    :type: int\n    '
    file_preview_type: typing.Union[str, int] = None
    ' What type of blend preview to create * ``NONE`` None -- Do not create blend previews. * ``AUTO`` Auto -- Automatically select best preview type. * ``SCREENSHOT`` Screenshot -- Capture the entire window. * ``CAMERA`` Camera View -- Workbench render of scene.\n\n    :type: typing.Union[str, int]\n    '
    font_directory: str = None
    ' The default directory to search for loading fonts\n\n    :type: str\n    '
    i18n_branches_directory: str = None
    " The path to the '/branches' directory of your local svn-translation copy, to allow translating from the UI\n\n    :type: str\n    "
    image_editor: str = None
    ' Path to an image editor\n\n    :type: str\n    '
    recent_files: int = None
    ' Maximum number of recently opened files to remember\n\n    :type: int\n    '
    render_cache_directory: str = None
    ' Where to cache raw render results\n\n    :type: str\n    '
    render_output_directory: str = None
    ' The default directory for rendering output, for new scenes\n\n    :type: str\n    '
    save_version: int = None
    ' The number of old versions to maintain in the current directory, when manually saving\n\n    :type: int\n    '
    script_directory: str = None
    ' Alternate script path, matching the default layout with subdirectories: startup, add-ons, modules, and presets (requires restart)\n\n    :type: str\n    '
    show_hidden_files_datablocks: bool = None
    ' Show files and data-blocks that are normally hidden\n\n    :type: bool\n    '
    show_recent_locations: bool = None
    ' Show Recent locations list in the File Browser\n\n    :type: bool\n    '
    show_system_bookmarks: bool = None
    ' Show System locations list in the File Browser\n\n    :type: bool\n    '
    sound_directory: str = None
    ' The default directory to search for sounds\n\n    :type: str\n    '
    temporary_directory: str = None
    ' The directory for storing temporary save files\n\n    :type: str\n    '
    texture_directory: str = None
    ' The default directory to search for textures\n\n    :type: str\n    '
    use_auto_save_temporary_files: bool = None
    " Automatic saving of temporary files in temp directory, uses process ID. Warning: Sculpt and edit mode data won't be saved\n\n    :type: bool\n    "
    use_file_compression: bool = None
    ' Enable file compression when saving .blend files\n\n    :type: bool\n    '
    use_filter_files: bool = None
    ' Enable filtering of files in the File Browser\n\n    :type: bool\n    '
    use_load_ui: bool = None
    ' Load user interface setup when loading .blend files\n\n    :type: bool\n    '
    use_relative_paths: bool = None
    ' Default relative path option for the file selector, when no path is defined yet\n\n    :type: bool\n    '
    use_scripts_auto_execute: bool = None
    ' Allow any .blend file to run scripts automatically (unsafe with blend files from an untrusted source)\n\n    :type: bool\n    '
    use_tabs_as_spaces: bool = None
    ' Automatically convert all new tabs into spaces for new and loaded text files\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PreferencesInput(bpy_struct):
    """ Settings for input devices
    """
    drag_threshold: int = None
    ' Number of pixels to drag before a drag event is triggered for keyboard and other non mouse/tablet input (otherwise click events are detected)\n\n    :type: int\n    '
    drag_threshold_mouse: int = None
    ' Number of pixels to drag before a drag event is triggered for mouse/track-pad input (otherwise click events are detected)\n\n    :type: int\n    '
    drag_threshold_tablet: int = None
    ' Number of pixels to drag before a drag event is triggered for tablet input (otherwise click events are detected)\n\n    :type: int\n    '
    invert_mouse_zoom: bool = None
    ' Invert the axis of mouse movement for zooming\n\n    :type: bool\n    '
    invert_zoom_wheel: bool = None
    ' Swap the Mouse Wheel zoom direction\n\n    :type: bool\n    '
    mouse_double_click_time: int = None
    ' Time/delay (in ms) for a double click\n\n    :type: int\n    '
    mouse_emulate_3_button_modifier: typing.Union[str, int] = None
    ' Hold this modifier to emulate the middle mouse button\n\n    :type: typing.Union[str, int]\n    '
    move_threshold: int = None
    ' Number of pixels to before the cursor is considered to have moved (used for cycling selected items on successive clicks)\n\n    :type: int\n    '
    navigation_mode: typing.Union[str, int] = None
    ' Which method to use for viewport navigation\n\n    :type: typing.Union[str, int]\n    '
    ndof_deadzone: float = None
    " Threshold of initial movement needed from the device's rest position\n\n    :type: float\n    "
    ndof_fly_helicopter: bool = None
    ' Device up/down directly controls the Z position of the 3D viewport\n\n    :type: bool\n    '
    ndof_lock_camera_pan_zoom: bool = None
    ' Pan/zoom the camera view instead of leaving the camera view when orbiting\n\n    :type: bool\n    '
    ndof_lock_horizon: bool = None
    ' Keep horizon level while flying with 3D Mouse\n\n    :type: bool\n    '
    ndof_orbit_sensitivity: float = None
    ' Overall sensitivity of the 3D Mouse for orbiting\n\n    :type: float\n    '
    ndof_pan_yz_swap_axis: bool = None
    ' Pan using up/down on the device (otherwise forward/backward)\n\n    :type: bool\n    '
    ndof_panx_invert_axis: bool = None
    ' \n\n    :type: bool\n    '
    ndof_pany_invert_axis: bool = None
    ' \n\n    :type: bool\n    '
    ndof_panz_invert_axis: bool = None
    ' \n\n    :type: bool\n    '
    ndof_rotx_invert_axis: bool = None
    ' \n\n    :type: bool\n    '
    ndof_roty_invert_axis: bool = None
    ' \n\n    :type: bool\n    '
    ndof_rotz_invert_axis: bool = None
    ' \n\n    :type: bool\n    '
    ndof_sensitivity: float = None
    ' Overall sensitivity of the 3D Mouse for panning\n\n    :type: float\n    '
    ndof_show_guide: bool = None
    ' Display the center and axis during rotation\n\n    :type: bool\n    '
    ndof_view_navigate_method: typing.Union[str, int] = None
    ' Navigation style in the viewport * ``FREE`` Free -- Use full 6 degrees of freedom by default. * ``ORBIT`` Orbit -- Orbit about the view center by default.\n\n    :type: typing.Union[str, int]\n    '
    ndof_view_rotate_method: typing.Union[str, int] = None
    ' Rotation style in the viewport * ``TURNTABLE`` Turntable -- Use turntable style rotation in the viewport. * ``TRACKBALL`` Trackball -- Use trackball style rotation in the viewport.\n\n    :type: typing.Union[str, int]\n    '
    ndof_zoom_invert: bool = None
    ' Zoom using opposite direction\n\n    :type: bool\n    '
    pressure_softness: float = None
    ' Adjusts softness of the low pressure response onset using a gamma curve\n\n    :type: float\n    '
    pressure_threshold_max: float = None
    ' Raw input pressure value that is interpreted as 100% by Blender\n\n    :type: float\n    '
    tablet_api: typing.Union[str, int] = None
    ' Select the tablet API to use for pressure sensitivity (may require restarting Blender for changes to take effect) * ``AUTOMATIC`` Automatic -- Automatically choose Wintab or Windows Ink depending on the device. * ``WINDOWS_INK`` Windows Ink -- Use native Windows Ink API, for modern tablet and pen devices. Requires Windows 8 or newer. * ``WINTAB`` Wintab -- Use Wintab driver for older tablets and Windows versions.\n\n    :type: typing.Union[str, int]\n    '
    use_auto_perspective: bool = None
    ' Automatically switch between orthographic and perspective when changing from top/front/side views\n\n    :type: bool\n    '
    use_drag_immediately: bool = None
    ' Moving things with a mouse drag confirms when releasing the button\n\n    :type: bool\n    '
    use_emulate_numpad: bool = None
    ' Main 1 to 0 keys act as the numpad ones (useful for laptops)\n\n    :type: bool\n    '
    use_mouse_continuous: bool = None
    ' Let the mouse wrap around the view boundaries so mouse movements are not limited by the screen size (used by transform, dragging of UI controls, etc.)\n\n    :type: bool\n    '
    use_mouse_depth_navigate: bool = None
    ' Use the depth under the mouse to improve view pan/rotate/zoom functionality\n\n    :type: bool\n    '
    use_mouse_emulate_3_button: bool = None
    ' Emulate Middle Mouse with Alt+Left Mouse\n\n    :type: bool\n    '
    use_multitouch_gestures: bool = None
    ' Use multi-touch gestures for navigation with touchpad, instead of scroll wheel emulation\n\n    :type: bool\n    '
    use_ndof: bool = None
    ' \n\n    :type: bool\n    '
    use_numeric_input_advanced: bool = None
    ' When entering numbers while transforming, default to advanced mode for full math expression evaluation\n\n    :type: bool\n    '
    use_rotate_around_active: bool = None
    ' Use selection as the pivot point\n\n    :type: bool\n    '
    use_zoom_to_mouse: bool = None
    " Zoom in towards the mouse pointer's position in the 3D view, rather than the 2D window center\n\n    :type: bool\n    "
    view_rotate_method: typing.Union[str, int] = None
    ' Orbit method in the viewport * ``TURNTABLE`` Turntable -- Turntable keeps the Z-axis upright while orbiting. * ``TRACKBALL`` Trackball -- Trackball allows you to tumble your view at any angle.\n\n    :type: typing.Union[str, int]\n    '
    view_rotate_sensitivity_trackball: float = None
    ' Scale trackball orbit sensitivity\n\n    :type: float\n    '
    view_rotate_sensitivity_turntable: float = None
    ' Rotation amount per pixel to control how fast the viewport orbits\n\n    :type: float\n    '
    view_zoom_axis: typing.Union[str, int] = None
    ' Axis of mouse movement to zoom in or out on * ``VERTICAL`` Vertical -- Zoom in and out based on vertical mouse movement. * ``HORIZONTAL`` Horizontal -- Zoom in and out based on horizontal mouse movement.\n\n    :type: typing.Union[str, int]\n    '
    view_zoom_method: typing.Union[str, int] = None
    ' Which style to use for viewport scaling * ``CONTINUE`` Continue -- Continuous zooming. The zoom direction and speed depends on how far along the set Zoom Axis the mouse has moved. * ``DOLLY`` Dolly -- Zoom in and out based on mouse movement along the set Zoom Axis. * ``SCALE`` Scale -- Zoom in and out as if you are scaling the view, mouse movements relative to center.\n\n    :type: typing.Union[str, int]\n    '
    walk_navigation: 'WalkNavigation' = None
    " Settings for walk navigation mode\n\n    :type: 'WalkNavigation'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PreferencesKeymap(bpy_struct):
    """ Shortcut setup for keyboards and other input devices
    """
    active_keyconfig: str = None
    ' The name of the active key configuration\n\n    :type: str\n    '
    show_ui_keyconfig: bool = None
    ' \n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PreferencesSystem(bpy_struct):
    """ Graphics driver and operating system settings
    """
    anisotropic_filter: typing.Union[str, int] = None
    ' Quality of anisotropic filtering\n\n    :type: typing.Union[str, int]\n    '
    audio_channels: typing.Union[str, int] = None
    ' Audio channel count * ``MONO`` Mono -- Set audio channels to mono. * ``STEREO`` Stereo -- Set audio channels to stereo. * ``SURROUND4`` 4 Channels -- Set audio channels to 4 channels. * ``SURROUND51`` 5.1 Surround -- Set audio channels to 5.1 surround sound. * ``SURROUND71`` 7.1 Surround -- Set audio channels to 7.1 surround sound.\n\n    :type: typing.Union[str, int]\n    '
    audio_device: typing.Union[str, int] = None
    ' Audio output device * ``None`` None -- No device - there will be no audio output.\n\n    :type: typing.Union[str, int]\n    '
    audio_mixing_buffer: typing.Union[str, int] = None
    ' Number of samples used by the audio mixing buffer * ``SAMPLES_256`` 256 Samples -- Set audio mixing buffer size to 256 samples. * ``SAMPLES_512`` 512 Samples -- Set audio mixing buffer size to 512 samples. * ``SAMPLES_1024`` 1024 Samples -- Set audio mixing buffer size to 1024 samples. * ``SAMPLES_2048`` 2048 Samples -- Set audio mixing buffer size to 2048 samples. * ``SAMPLES_4096`` 4096 Samples -- Set audio mixing buffer size to 4096 samples. * ``SAMPLES_8192`` 8192 Samples -- Set audio mixing buffer size to 8192 samples. * ``SAMPLES_16384`` 16384 Samples -- Set audio mixing buffer size to 16384 samples. * ``SAMPLES_32768`` 32768 Samples -- Set audio mixing buffer size to 32768 samples.\n\n    :type: typing.Union[str, int]\n    '
    audio_sample_format: typing.Union[str, int] = None
    ' Audio sample format * ``U8`` 8-bit Unsigned -- Set audio sample format to 8-bit unsigned integer. * ``S16`` 16-bit Signed -- Set audio sample format to 16-bit signed integer. * ``S24`` 24-bit Signed -- Set audio sample format to 24-bit signed integer. * ``S32`` 32-bit Signed -- Set audio sample format to 32-bit signed integer. * ``FLOAT`` 32-bit Float -- Set audio sample format to 32-bit float. * ``DOUBLE`` 64-bit Float -- Set audio sample format to 64-bit float.\n\n    :type: typing.Union[str, int]\n    '
    audio_sample_rate: typing.Union[str, int] = None
    ' Audio sample rate * ``RATE_44100`` 44.1 kHz -- Set audio sampling rate to 44100 samples per second. * ``RATE_48000`` 48 kHz -- Set audio sampling rate to 48000 samples per second. * ``RATE_96000`` 96 kHz -- Set audio sampling rate to 96000 samples per second. * ``RATE_192000`` 192 kHz -- Set audio sampling rate to 192000 samples per second.\n\n    :type: typing.Union[str, int]\n    '
    dpi: int = None
    ' \n\n    :type: int\n    '
    gl_clip_alpha: float = None
    ' Clip alpha below this threshold in the 3D textured view\n\n    :type: float\n    '
    gl_texture_limit: typing.Union[str, int] = None
    ' Limit the texture size to save graphics memory\n\n    :type: typing.Union[str, int]\n    '
    gpu_backend: typing.Union[str, int] = None
    ' GPU backend to use. (Requires restarting Blender for changes to take effect) * ``OPENGL`` OpenGL -- Use OpenGL backend. * ``METAL`` Metal -- Use Metal backend. * ``VULKAN`` Vulkan -- Use Vulkan backend.\n\n    :type: typing.Union[str, int]\n    '
    image_draw_method: typing.Union[str, int] = None
    ' Method used for displaying images on the screen * ``AUTO`` Automatic -- Automatically choose method based on GPU and image. * ``2DTEXTURE`` 2D Texture -- Use CPU for display transform and display image with 2D texture. * ``GLSL`` GLSL -- Use GLSL shaders for display transform and display image with 2D texture.\n\n    :type: typing.Union[str, int]\n    '
    legacy_compute_device_type: int = None
    ' For backwards compatibility only\n\n    :type: int\n    '
    light_ambient: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of the ambient light that uniformly lit the scene\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    memory_cache_limit: int = None
    ' Memory cache limit (in megabytes)\n\n    :type: int\n    '
    pixel_size: float = None
    ' \n\n    :type: float\n    '
    scrollback: int = None
    ' Maximum number of lines to store for the console buffer\n\n    :type: int\n    '
    sequencer_disk_cache_compression: typing.Union[str, int] = None
    " Smaller compression will result in larger files, but less decoding overhead * ``NONE`` None -- Requires fast storage, but uses minimum CPU resources. * ``LOW`` Low -- Doesn't require fast storage and uses less CPU resources. * ``HIGH`` High -- Works on slower storage devices and uses most CPU resources.\n\n    :type: typing.Union[str, int]\n    "
    sequencer_disk_cache_dir: str = None
    ' Override default directory\n\n    :type: str\n    '
    sequencer_disk_cache_size_limit: int = None
    ' Disk cache limit (in gigabytes)\n\n    :type: int\n    '
    sequencer_proxy_setup: typing.Union[str, int] = None
    ' When and how proxies are created * ``MANUAL`` Manual -- Set up proxies manually. * ``AUTOMATIC`` Automatic -- Build proxies for added movie and image strips in each preview size.\n\n    :type: typing.Union[str, int]\n    '
    solid_lights: bpy_prop_collection['UserSolidLight'] = None
    " Lights used to display objects in solid shading mode\n\n    :type: bpy_prop_collection['UserSolidLight']\n    "
    texture_collection_rate: int = None
    ' Number of seconds between each run of the GL texture garbage collector\n\n    :type: int\n    '
    texture_time_out: int = None
    ' Time since last access of a GL texture in seconds after which it is freed (set to 0 to keep textures allocated)\n\n    :type: int\n    '
    ui_line_width: float = None
    ' Suggested line thickness and point size in pixels, for add-ons displaying custom user interface elements, based on operating system settings and Blender UI scale\n\n    :type: float\n    '
    ui_scale: float = None
    ' Size multiplier to use when displaying custom user interface elements, so that they are scaled correctly on screens with different DPI. This value is based on operating system DPI settings and Blender display scale\n\n    :type: float\n    '
    use_edit_mode_smooth_wire: bool = None
    ' Enable edit mode edge smoothing, reducing aliasing (requires restart)\n\n    :type: bool\n    '
    use_gpu_subdivision: bool = None
    ' Enable GPU acceleration for evaluating the last subdivision surface modifiers in the stack\n\n    :type: bool\n    '
    use_overlay_smooth_wire: bool = None
    ' Enable overlay smooth wires, reducing aliasing\n\n    :type: bool\n    '
    use_region_overlap: bool = None
    ' Display tool/property regions over the main region\n\n    :type: bool\n    '
    use_select_pick_depth: bool = None
    ' When making a selection in 3D View, use the GPU depth buffer to ensure the frontmost object is selected first\n\n    :type: bool\n    '
    use_sequencer_disk_cache: bool = None
    ' Store cached images to disk\n\n    :type: bool\n    '
    use_studio_light_edit: bool = None
    ' View the result of the studio light editor in the viewport\n\n    :type: bool\n    '
    vbo_collection_rate: int = None
    ' Number of seconds between each run of the GL vertex buffer object garbage collector\n\n    :type: int\n    '
    vbo_time_out: int = None
    ' Time since last access of a GL vertex buffer object in seconds after which it is freed (set to 0 to keep VBO allocated)\n\n    :type: int\n    '
    viewport_aa: typing.Union[str, int] = None
    ' Method of anti-aliasing in 3d viewport * ``OFF`` No Anti-Aliasing -- Scene will be rendering without any anti-aliasing. * ``FXAA`` Single Pass Anti-Aliasing -- Scene will be rendered using a single pass anti-aliasing method (FXAA). * ``5`` 5 Samples -- Scene will be rendered using 5 anti-aliasing samples. * ``8`` 8 Samples -- Scene will be rendered using 8 anti-aliasing samples. * ``11`` 11 Samples -- Scene will be rendered using 11 anti-aliasing samples. * ``16`` 16 Samples -- Scene will be rendered using 16 anti-aliasing samples. * ``32`` 32 Samples -- Scene will be rendered using 32 anti-aliasing samples.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PreferencesView(bpy_struct):
    """ Preferences related to viewing data
    """
    color_picker_type: typing.Union[str, int] = None
    ' Different styles of displaying the color picker widget * ``CIRCLE_HSV`` Circle (HSV) -- A circular Hue/Saturation color wheel, with Value slider. * ``CIRCLE_HSL`` Circle (HSL) -- A circular Hue/Saturation color wheel, with Lightness slider. * ``SQUARE_SV`` Square (SV + H) -- A square showing Saturation/Value, with Hue slider. * ``SQUARE_HS`` Square (HS + V) -- A square showing Hue/Saturation, with Value slider. * ``SQUARE_HV`` Square (HV + S) -- A square showing Hue/Value, with Saturation slider.\n\n    :type: typing.Union[str, int]\n    '
    factor_display_type: typing.Union[str, int] = None
    ' How factor values are displayed * ``FACTOR`` Factor -- Display factors as values between 0 and 1. * ``PERCENTAGE`` Percentage -- Display factors as percentages.\n\n    :type: typing.Union[str, int]\n    '
    filebrowser_display_type: typing.Union[str, int] = None
    ' Default location where the File Editor will be displayed in * ``SCREEN`` Maximized Area -- Open the temporary editor in a maximized screen. * ``WINDOW`` New Window -- Open the temporary editor in a new window.\n\n    :type: typing.Union[str, int]\n    '
    font_path_ui: str = None
    ' Path to interface font\n\n    :type: str\n    '
    font_path_ui_mono: str = None
    ' Path to interface monospaced Font\n\n    :type: str\n    '
    gizmo_size: int = None
    ' Diameter of the gizmo\n\n    :type: int\n    '
    gizmo_size_navigate_v3d: int = None
    ' The Navigate Gizmo size\n\n    :type: int\n    '
    header_align: typing.Union[str, int] = None
    ' Default header position for new space-types * ``NONE`` Keep Existing -- Keep existing header alignment. * ``TOP`` Top -- Top aligned on load. * ``BOTTOM`` Bottom -- Bottom align on load (except for property editors).\n\n    :type: typing.Union[str, int]\n    '
    language: typing.Union[str, int] = None
    " Language used for translation * ``DEFAULT`` Automatic (Automatic) -- Automatically choose system's defined language if available, or fall-back to English.\n\n    :type: typing.Union[str, int]\n    "
    lookdev_sphere_size: int = None
    ' Diameter of the HDRI preview spheres\n\n    :type: int\n    '
    mini_axis_brightness: int = None
    ' Brightness of the icon\n\n    :type: int\n    '
    mini_axis_size: int = None
    " The axes icon's size\n\n    :type: int\n    "
    mini_axis_type: typing.Union[str, int] = None
    ' Show a small rotating 3D axes in the top right corner of the 3D viewport\n\n    :type: typing.Union[str, int]\n    '
    open_sublevel_delay: int = None
    ' Time delay in 1/10 seconds before automatically opening sub level menus\n\n    :type: int\n    '
    open_toplevel_delay: int = None
    ' Time delay in 1/10 seconds before automatically opening top level menus\n\n    :type: int\n    '
    pie_animation_timeout: int = None
    ' Time needed to fully animate the pie to unfolded state (in 1/100ths of sec)\n\n    :type: int\n    '
    pie_initial_timeout: int = None
    ' Pie menus will use the initial mouse position as center for this amount of time (in 1/100ths of sec)\n\n    :type: int\n    '
    pie_menu_confirm: int = None
    ' Distance threshold after which selection is made (zero to disable)\n\n    :type: int\n    '
    pie_menu_radius: int = None
    ' Pie menu size in pixels\n\n    :type: int\n    '
    pie_menu_threshold: int = None
    ' Distance from center needed before a selection can be made\n\n    :type: int\n    '
    pie_tap_timeout: int = None
    ' Pie menu button held longer than this will dismiss menu on release.(in 1/100ths of sec)\n\n    :type: int\n    '
    render_display_type: typing.Union[str, int] = None
    ' Default location where rendered images will be displayed in * ``NONE`` Keep User Interface -- Images are rendered without changing the user interface. * ``SCREEN`` Maximized Area -- Images are rendered in a maximized Image Editor. * ``AREA`` Image Editor -- Images are rendered in an Image Editor. * ``WINDOW`` New Window -- Images are rendered in a new window.\n\n    :type: typing.Union[str, int]\n    '
    rotation_angle: float = None
    ' Rotation step for numerical pad keys (2 4 6 8)\n\n    :type: float\n    '
    show_addons_enabled_only: bool = None
    ' Only show enabled add-ons. Un-check to see all installed add-ons\n\n    :type: bool\n    '
    show_column_layout: bool = None
    ' Use a column layout for toolbox\n\n    :type: bool\n    '
    show_developer_ui: bool = None
    ' Show options for developers (edit source in context menu, geometry indices)\n\n    :type: bool\n    '
    show_gizmo: bool = None
    ' Use transform gizmos by default\n\n    :type: bool\n    '
    show_navigate_ui: bool = None
    ' Show navigation controls in 2D and 3D views which do not have scroll bars\n\n    :type: bool\n    '
    show_object_info: bool = None
    ' Include the name of the active object and the current frame number in the text info overlay\n\n    :type: bool\n    '
    show_playback_fps: bool = None
    ' Include the number of frames displayed per second in the text info overlay while animation is played back\n\n    :type: bool\n    '
    show_splash: bool = None
    ' Display splash screen on startup\n\n    :type: bool\n    '
    show_statusbar_memory: bool = None
    ' Show Blender memory usage\n\n    :type: bool\n    '
    show_statusbar_stats: bool = None
    ' Show scene statistics\n\n    :type: bool\n    '
    show_statusbar_version: bool = None
    ' Show Blender version string\n\n    :type: bool\n    '
    show_statusbar_vram: bool = None
    ' Show GPU video memory usage\n\n    :type: bool\n    '
    show_tooltips: bool = None
    ' Display tooltips (when disabled, hold Alt to force display)\n\n    :type: bool\n    '
    show_tooltips_python: bool = None
    ' Show Python references in tooltips\n\n    :type: bool\n    '
    show_view_name: bool = None
    ' Include the name of the view orientation in the text info overlay\n\n    :type: bool\n    '
    smooth_view: int = None
    ' Time to animate the view in milliseconds, zero to disable\n\n    :type: int\n    '
    text_hinting: typing.Union[str, int] = None
    ' Method for making user interface text render sharp\n\n    :type: typing.Union[str, int]\n    '
    timecode_style: typing.Union[str, int] = None
    " Format of Time Codes displayed when not displaying timing in terms of frames * ``MINIMAL`` Minimal Info -- Most compact representation, uses '+' as separator for sub-second frame numbers, with left and right truncation of the timecode as necessary. * ``SMPTE`` SMPTE (Full) -- Full SMPTE timecode (format is HH:MM:SS:FF). * ``SMPTE_COMPACT`` SMPTE (Compact) -- SMPTE timecode showing minutes, seconds, and frames only - hours are also shown if necessary, but not by default. * ``MILLISECONDS`` Compact with Milliseconds -- Similar to SMPTE (Compact), except that instead of frames, milliseconds are shown instead. * ``SECONDS_ONLY`` Only Seconds -- Direct conversion of frame numbers to seconds.\n\n    :type: typing.Union[str, int]\n    "
    ui_line_width: typing.Union[str, int] = None
    ' Changes the thickness of widget outlines, lines and dots in the interface * ``THIN`` Thin -- Thinner lines than the default. * ``AUTO`` Default -- Automatic line width based on UI scale. * ``THICK`` Thick -- Thicker lines than the default.\n\n    :type: typing.Union[str, int]\n    '
    ui_scale: float = None
    ' Changes the size of the fonts and widgets in the interface\n\n    :type: float\n    '
    use_directional_menus: bool = None
    ' Otherwise menus, etc will always be top to bottom, left to right, no matter opening direction\n\n    :type: bool\n    '
    use_mouse_over_open: bool = None
    ' Open menu buttons and pulldowns automatically when the mouse is hovering\n\n    :type: bool\n    '
    use_save_prompt: bool = None
    ' Ask for confirmation when quitting with unsaved changes\n\n    :type: bool\n    '
    use_text_antialiasing: bool = None
    ' Smooth jagged edges of user interface text\n\n    :type: bool\n    '
    use_translate_interface: bool = None
    ' Translate all labels in menus, buttons and panels (note that this might make it hard to follow tutorials or the manual)\n\n    :type: bool\n    '
    use_translate_new_dataname: bool = None
    ' Translate the names of new data-blocks (objects, materials...)\n\n    :type: bool\n    '
    use_translate_tooltips: bool = None
    ' Translate the descriptions when hovering UI elements (recommended)\n\n    :type: bool\n    '
    use_weight_color_range: bool = None
    ' Enable color range used for weight visualization in weight painting mode\n\n    :type: bool\n    '
    view2d_grid_spacing_min: int = None
    ' Minimum number of pixels between each gridline in 2D Viewports\n\n    :type: int\n    '
    view_frame_keyframes: int = None
    ' Keyframes around cursor that we zoom around\n\n    :type: int\n    '
    view_frame_seconds: float = None
    ' Seconds around cursor that we zoom around\n\n    :type: float\n    '
    view_frame_type: typing.Union[str, int] = None
    ' How zooming to frame focuses around current frame\n\n    :type: typing.Union[str, int]\n    '
    weight_color_range: 'ColorRamp' = None
    " Color range used for weight visualization in weight painting mode\n\n    :type: 'ColorRamp'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Property(bpy_struct):
    """ RNA property definition
    """
    description: str = None
    ' Description of the property for tooltips\n\n    :type: str\n    '
    icon: typing.Union[str, int] = None
    ' Icon of the item\n\n    :type: typing.Union[str, int]\n    '
    identifier: str = None
    ' Unique name used in the code and scripting\n\n    :type: str\n    '
    is_animatable: bool = None
    ' Property is animatable through RNA\n\n    :type: bool\n    '
    is_argument_optional: bool = None
    ' True when the property is optional in a Python function implementing an RNA function\n\n    :type: bool\n    '
    is_enum_flag: bool = None
    ' True when multiple enums\n\n    :type: bool\n    '
    is_hidden: bool = None
    ' True when the property is hidden\n\n    :type: bool\n    '
    is_library_editable: bool = None
    ' Property is editable from linked instances (changes not saved)\n\n    :type: bool\n    '
    is_never_none: bool = None
    " True when this value can't be set to None\n\n    :type: bool\n    "
    is_output: bool = None
    ' True when this property is an output value from an RNA function\n\n    :type: bool\n    '
    is_overridable: bool = None
    ' Property is overridable through RNA\n\n    :type: bool\n    '
    is_path_output: bool = None
    ' Property is a filename, filepath or directory output\n\n    :type: bool\n    '
    is_readonly: bool = None
    ' Property is editable through RNA\n\n    :type: bool\n    '
    is_registered: bool = None
    ' Property is registered as part of type registration\n\n    :type: bool\n    '
    is_registered_optional: bool = None
    ' Property is optionally registered as part of type registration\n\n    :type: bool\n    '
    is_required: bool = None
    ' False when this property is an optional argument in an RNA function\n\n    :type: bool\n    '
    is_runtime: bool = None
    ' Property has been dynamically created at runtime\n\n    :type: bool\n    '
    is_skip_save: bool = None
    ' True when the property is not saved in presets\n\n    :type: bool\n    '
    name: str = None
    ' Human readable name\n\n    :type: str\n    '
    srna: 'Struct' = None
    " Struct definition used for properties assigned to this item\n\n    :type: 'Struct'\n    "
    subtype: typing.Union[str, int] = None
    ' Semantic interpretation of the property\n\n    :type: typing.Union[str, int]\n    '
    tags: typing.Union[typing.Set[str], typing.Set[int]] = None
    ' Subset of tags (defined in parent struct) that are set for this property\n\n    :type: typing.Union[typing.Set[str], typing.Set[int]]\n    '
    translation_context: str = None
    " Translation context of the property's name\n\n    :type: str\n    "
    type: typing.Union[str, int] = None
    ' Data type of the property\n\n    :type: typing.Union[str, int]\n    '
    unit: typing.Union[str, int] = None
    ' Type of units for this property\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PropertyGroup(bpy_struct):
    """ Group of ID properties
    """
    name: str = None
    ' Unique name used in the code and scripting\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PropertyGroupItem(bpy_struct):
    """ Property that stores arbitrary, user defined properties
    """
    collection: bpy_prop_collection['PropertyGroup'] = None
    " \n\n    :type: bpy_prop_collection['PropertyGroup']\n    "
    double: float = None
    ' \n\n    :type: float\n    '
    double_array: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float], 'mathutils.Vector']\n    "
    float: float = None
    ' \n\n    :type: float\n    '
    float_array: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float], 'mathutils.Vector']\n    "
    group: 'PropertyGroup' = None
    " \n\n    :type: 'PropertyGroup'\n    "
    id: 'ID' = None
    " \n\n    :type: 'ID'\n    "
    idp_array: bpy_prop_collection['PropertyGroup'] = None
    " \n\n    :type: bpy_prop_collection['PropertyGroup']\n    "
    int: int = None
    ' \n\n    :type: int\n    '
    int_array: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' \n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    string: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Region(bpy_struct):
    """ Region in a subdivided screen area
    """
    alignment: typing.Union[str, int] = None
    " Alignment of the region within the area * ``NONE`` None -- Don't use any fixed alignment, fill available space. * ``TOP`` Top. * ``BOTTOM`` Bottom. * ``LEFT`` Left. * ``RIGHT`` Right. * ``HORIZONTAL_SPLIT`` Horizontal Split. * ``VERTICAL_SPLIT`` Vertical Split. * ``FLOAT`` Float -- Region floats on screen, doesn't use any fixed alignment. * ``QUAD_SPLIT`` Quad Split -- Region is split horizontally and vertically.\n\n    :type: typing.Union[str, int]\n    "
    data: 'AnyType' = None
    " Region specific data (the type depends on the region type)\n\n    :type: 'AnyType'\n    "
    height: int = None
    ' Region height\n\n    :type: int\n    '
    type: typing.Union[str, int] = None
    ' Type of this region\n\n    :type: typing.Union[str, int]\n    '
    view2d: 'View2D' = None
    " 2D view of the region\n\n    :type: 'View2D'\n    "
    width: int = None
    ' Region width\n\n    :type: int\n    '
    x: int = None
    ' The window relative vertical location of the region\n\n    :type: int\n    '
    y: int = None
    ' The window relative horizontal location of the region\n\n    :type: int\n    '

    def tag_redraw(self):
        """ tag_redraw

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class RegionView3D(bpy_struct):
    """ 3D View region data
    """
    clip_planes: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float, float, float], typing.Tuple[float, float, float, float, float, float], typing.Tuple[float, float, float, float, float, float], typing.Tuple[float, float, float, float, float, float]]] = None
    ' \n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float, float, float], typing.Tuple[float, float, float, float, float, float], typing.Tuple[float, float, float, float, float, float], typing.Tuple[float, float, float, float, float, float]]]\n    '
    is_orthographic_side_view: bool = None
    ' Is current view aligned to an axis (does not check the view is orthographic use "is_perspective" for that). Assignment sets the "view_rotation" to the closest axis aligned view\n\n    :type: bool\n    '
    is_perspective: bool = None
    ' \n\n    :type: bool\n    '
    lock_rotation: bool = None
    ' Lock view rotation of side views to Top/Front/Right\n\n    :type: bool\n    '
    perspective_matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " Current perspective matrix (``window_matrix * view_matrix``)\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    show_sync_view: bool = None
    ' Sync view position between side views\n\n    :type: bool\n    '
    use_box_clip: bool = None
    ' Clip view contents based on what is visible in other side views\n\n    :type: bool\n    '
    use_clip_planes: bool = None
    ' \n\n    :type: bool\n    '
    view_camera_offset: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " View shift in camera view\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    view_camera_zoom: float = None
    ' Zoom factor in camera view\n\n    :type: float\n    '
    view_distance: float = None
    ' Distance to the view location\n\n    :type: float\n    '
    view_location: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " View pivot location\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    view_matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " Current view matrix\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    view_perspective: typing.Union[str, int] = None
    ' View Perspective\n\n    :type: typing.Union[str, int]\n    '
    view_rotation: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion'] = None
    " Rotation in quaternions (keep normalized)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion']\n    "
    window_matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " Current window matrix\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "

    def update(self):
        """ Recalculate the view matrices

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class RenderEngine(bpy_struct):
    """ Render engine
    """
    bl_idname: str = None
    ' \n\n    :type: str\n    '
    bl_label: str = None
    ' \n\n    :type: str\n    '
    bl_use_alembic_procedural: bool = None
    ' Support loading Alembic data at render time\n\n    :type: bool\n    '
    bl_use_custom_freestyle: bool = None
    ' Handles freestyle rendering on its own, instead of delegating it to EEVEE\n\n    :type: bool\n    '
    bl_use_eevee_viewport: bool = None
    ' Uses Eevee for viewport shading in LookDev shading mode\n\n    :type: bool\n    '
    bl_use_gpu_context: bool = None
    ' Enable OpenGL context for the render method, for engines that render using OpenGL\n\n    :type: bool\n    '
    bl_use_image_save: bool = None
    ' Save images/movie to disk while rendering an animation. Disabling image saving is only supported when bl_use_postprocess is also disabled\n\n    :type: bool\n    '
    bl_use_postprocess: bool = None
    ' Apply compositing on render results\n\n    :type: bool\n    '
    bl_use_preview: bool = None
    ' Render engine supports being used for rendering previews of materials, lights and worlds\n\n    :type: bool\n    '
    bl_use_shading_nodes_custom: bool = None
    " Don't expose Cycles and Eevee shading nodes in the node editor user interface, so own nodes can be used instead\n\n    :type: bool\n    "
    bl_use_spherical_stereo: bool = None
    ' Support spherical stereo camera models\n\n    :type: bool\n    '
    bl_use_stereo_viewport: bool = None
    ' Support rendering stereo 3D viewport\n\n    :type: bool\n    '
    camera_override: 'Object' = None
    " \n\n    :type: 'Object'\n    "
    is_animation: bool = None
    ' \n\n    :type: bool\n    '
    is_preview: bool = None
    ' \n\n    :type: bool\n    '
    layer_override: typing.List[bool] = None
    ' \n\n    :type: typing.List[bool]\n    '
    render: 'RenderSettings' = None
    " :noindex:\n\n    :type: 'RenderSettings'\n    "
    resolution_x: int = None
    ' \n\n    :type: int\n    '
    resolution_y: int = None
    ' \n\n    :type: int\n    '
    temporary_directory: str = None
    ' \n\n    :type: str\n    '
    use_highlight_tiles: bool = None
    ' \n\n    :type: bool\n    '

    def update(self, data: 'BlendData'=None, depsgraph: 'Depsgraph'=None):
        """ Export scene data for render

        :param data: 
        :type data: 'BlendData'
        :param depsgraph: 
        :type depsgraph: 'Depsgraph'
        """
        pass

    def render(self, depsgraph: 'Depsgraph'):
        """ Render scene into an image

        :param depsgraph: 
        :type depsgraph: 'Depsgraph'
        """
        pass

    def render_frame_finish(self):
        """ Perform finishing operations after all view layers in a frame were rendered

        """
        pass

    def draw(self, context: 'Context', depsgraph: 'Depsgraph'):
        """ Draw render image

        :param context: 
        :type context: 'Context'
        :param depsgraph: 
        :type depsgraph: 'Depsgraph'
        """
        pass

    def bake(self, depsgraph: 'Depsgraph', object: 'Object', pass_type: typing.Union[str, int], pass_filter: int, width: int, height: int):
        """ Bake passes

        :param depsgraph: 
        :type depsgraph: 'Depsgraph'
        :param object: 
        :type object: 'Object'
        :param pass_type: Pass, Pass to bake
        :type pass_type: typing.Union[str, int]
        :param pass_filter: Pass Filter, Filter to combined, diffuse, glossy and transmission passes
        :type pass_filter: int
        :param width: Width, Image width
        :type width: int
        :param height: Height, Image height
        :type height: int
        """
        pass

    def view_update(self, context: 'Context', depsgraph: 'Depsgraph'):
        """ Update on data changes for viewport render

        :param context: 
        :type context: 'Context'
        :param depsgraph: 
        :type depsgraph: 'Depsgraph'
        """
        pass

    def view_draw(self, context: 'Context', depsgraph: 'Depsgraph'):
        """ Draw viewport render

        :param context: 
        :type context: 'Context'
        :param depsgraph: 
        :type depsgraph: 'Depsgraph'
        """
        pass

    def update_script_node(self, node: 'Node'=None):
        """ Compile shader script node

        :param node: 
        :type node: 'Node'
        """
        pass

    def update_render_passes(self, scene: 'Scene'=None, renderlayer: 'ViewLayer'=None):
        """ Update the render passes that will be generated

        :param scene: 
        :type scene: 'Scene'
        :param renderlayer: 
        :type renderlayer: 'ViewLayer'
        """
        pass

    def tag_redraw(self):
        """ Request redraw for viewport rendering

        """
        pass

    def tag_update(self):
        """ Request update call for viewport rendering

        """
        pass

    def begin_result(self, x: int, y: int, w: int, h: int, layer: str='', view: str='') -> 'RenderResult':
        """ Create render result to write linear floating-point render layers and passes

        :param x: X
        :type x: int
        :param y: Y
        :type y: int
        :param w: Width
        :type w: int
        :param h: Height
        :type h: int
        :param layer: Layer, Single layer to get render result for
        :type layer: str
        :param view: View, Single view to get render result for
        :type view: str
        :rtype: 'RenderResult'
        :return: Result
        """
        pass

    def update_result(self, result: 'RenderResult'):
        """ Signal that pixels have been updated and can be redrawn in the user interface

        :param result: Result
        :type result: 'RenderResult'
        """
        pass

    def end_result(self, result: 'RenderResult', cancel: bool=False, highlight: bool=False, do_merge_results: bool=False):
        """ All pixels in the render result have been set and are final

        :param result: Result
        :type result: 'RenderResult'
        :param cancel: Cancel, Don't mark tile as done, don't merge results unless forced
        :type cancel: bool
        :param highlight: Highlight, Don't mark tile as done yet
        :type highlight: bool
        :param do_merge_results: Merge Results, Merge results even if cancel=true
        :type do_merge_results: bool
        """
        pass

    def add_pass(self, name: str, channels: int, chan_id: str, layer: str=''):
        """ Add a pass to the render layer

        :param name: Name, Name of the Pass, without view or channel tag
        :type name: str
        :param channels: Channels
        :type channels: int
        :param chan_id: Channel IDs, Channel names, one character per channel
        :type chan_id: str
        :param layer: Layer, Single layer to add render pass to
        :type layer: str
        """
        pass

    def get_result(self) -> 'RenderResult':
        """ Get final result for non-pixel operations

        :rtype: 'RenderResult'
        :return: Result
        """
        pass

    def test_break(self) -> bool:
        """ Test if the render operation should been canceled, this is a fast call that should be used regularly for responsiveness

        :rtype: bool
        :return: Break
        """
        pass

    def pass_by_index_get(self, layer: str, index: int) -> 'RenderPass':
        """ pass_by_index_get

        :param layer: Layer, Name of render layer to get pass for
        :type layer: str
        :param index: Index, Index of pass to get
        :type index: int
        :rtype: 'RenderPass'
        :return: Index, Index of pass to get
        """
        pass

    def active_view_get(self) -> str:
        """ active_view_get

        :rtype: str
        :return: View, Single view active
        """
        pass

    def active_view_set(self, view: str):
        """ active_view_set

        :param view: View, Single view to set as active
        :type view: str
        """
        pass

    def camera_shift_x(self, camera: 'Object', use_spherical_stereo: bool=False) -> float:
        """ camera_shift_x

        :param camera: 
        :type camera: 'Object'
        :param use_spherical_stereo: Spherical Stereo
        :type use_spherical_stereo: bool
        :rtype: float
        :return: Shift X
        """
        pass

    def camera_model_matrix(self, camera: 'Object', use_spherical_stereo: bool=False) -> typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']:
        """ camera_model_matrix

        :param camera: 
        :type camera: 'Object'
        :param use_spherical_stereo: Spherical Stereo
        :type use_spherical_stereo: bool
        :rtype: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']
        :return: Model Matrix, Normalized camera model matrix
        """
        pass

    def use_spherical_stereo(self, camera: 'Object') -> bool:
        """ use_spherical_stereo

        :param camera: 
        :type camera: 'Object'
        :rtype: bool
        :return: Spherical Stereo
        """
        pass

    def update_stats(self, stats: str, info: str):
        """ Update and signal to redraw render status text

        :param stats: Stats
        :type stats: str
        :param info: Info
        :type info: str
        """
        pass

    def frame_set(self, frame: int, subframe: float):
        """ Evaluate scene at a different frame (for motion blur)

        :param frame: Frame
        :type frame: int
        :param subframe: Subframe
        :type subframe: float
        """
        pass

    def update_progress(self, progress: float):
        """ Update progress percentage of render

        :param progress: Percentage of render that's done
        :type progress: float
        """
        pass

    def update_memory_stats(self, memory_used: float=0.0, memory_peak: float=0.0):
        """ Update memory usage statistics

        :param memory_used: Current memory usage in megabytes
        :type memory_used: float
        :param memory_peak: Peak memory usage in megabytes
        :type memory_peak: float
        """
        pass

    def report(self, type: typing.Union[typing.Set[int], typing.Set[str]], message: str):
        """ Report info, warning or error messages

        :param type: Type
        :type type: typing.Union[typing.Set[int], typing.Set[str]]
        :param message: Report Message
        :type message: str
        """
        pass

    def error_set(self, message: str):
        """ Set error message displaying after the render is finished

        :param message: Report Message
        :type message: str
        """
        pass

    def bind_display_space_shader(self, scene: 'Scene'):
        """ Bind GLSL fragment shader that converts linear colors to display space colors using scene color management settings

        :param scene: 
        :type scene: 'Scene'
        """
        pass

    def unbind_display_space_shader(self):
        """ Unbind GLSL display space shader, must always be called after binding the shader

        """
        pass

    def support_display_space_shader(self, scene: 'Scene') -> bool:
        """ Test if GLSL display space shader is supported for the combination of graphics card and scene settings

        :param scene: 
        :type scene: 'Scene'
        :rtype: bool
        :return: Supported
        """
        pass

    def get_preview_pixel_size(self, scene: 'Scene') -> int:
        """ Get the pixel size that should be used for preview rendering

        :param scene: 
        :type scene: 'Scene'
        :rtype: int
        :return: Pixel Size
        """
        pass

    def free_blender_memory(self):
        """ Free Blender side memory of render engine

        """
        pass

    def tile_highlight_set(self, x: int, y: int, width: int, height: int, highlight: bool):
        """ Set highlighted state of the given tile

        :param x: X
        :type x: int
        :param y: Y
        :type y: int
        :param width: Width
        :type width: int
        :param height: Height
        :type height: int
        :param highlight: Highlight
        :type highlight: bool
        """
        pass

    def tile_highlight_clear_all(self):
        """ The temp directory used by Blender

        """
        pass

    def register_pass(self, scene: 'Scene', view_layer: 'ViewLayer', name: str, channels: int, chanid: str, type: typing.Union[str, int]):
        """ Register a render pass that will be part of the render with the current settings

        :param scene: 
        :type scene: 'Scene'
        :param view_layer: 
        :type view_layer: 'ViewLayer'
        :param name: Name
        :type name: str
        :param channels: Channels
        :type channels: int
        :param chanid: Channel IDs
        :type chanid: str
        :param type: Type
        :type type: typing.Union[str, int]
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class RenderLayer(bpy_struct):
    name: str = None
    ' View layer name\n\n    :type: str\n    '
    passes: 'RenderPasses' = None
    " \n\n    :type: 'RenderPasses'\n    "
    use_ao: bool = None
    ' Render Ambient Occlusion in this Layer\n\n    :type: bool\n    '
    use_motion_blur: bool = None
    ' Render motion blur in this Layer, if enabled in the scene\n\n    :type: bool\n    '
    use_pass_ambient_occlusion: bool = None
    ' Deliver Ambient Occlusion pass\n\n    :type: bool\n    '
    use_pass_combined: bool = None
    ' Deliver full combined RGBA buffer\n\n    :type: bool\n    '
    use_pass_diffuse_color: bool = None
    ' Deliver diffuse color pass\n\n    :type: bool\n    '
    use_pass_diffuse_direct: bool = None
    ' Deliver diffuse direct pass\n\n    :type: bool\n    '
    use_pass_diffuse_indirect: bool = None
    ' Deliver diffuse indirect pass\n\n    :type: bool\n    '
    use_pass_emit: bool = None
    ' Deliver emission pass\n\n    :type: bool\n    '
    use_pass_environment: bool = None
    ' Deliver environment lighting pass\n\n    :type: bool\n    '
    use_pass_glossy_color: bool = None
    ' Deliver glossy color pass\n\n    :type: bool\n    '
    use_pass_glossy_direct: bool = None
    ' Deliver glossy direct pass\n\n    :type: bool\n    '
    use_pass_glossy_indirect: bool = None
    ' Deliver glossy indirect pass\n\n    :type: bool\n    '
    use_pass_material_index: bool = None
    ' Deliver material index pass\n\n    :type: bool\n    '
    use_pass_mist: bool = None
    ' Deliver mist factor pass (0.0 to 1.0)\n\n    :type: bool\n    '
    use_pass_normal: bool = None
    ' Deliver normal pass\n\n    :type: bool\n    '
    use_pass_object_index: bool = None
    ' Deliver object index pass\n\n    :type: bool\n    '
    use_pass_position: bool = None
    ' Deliver position pass\n\n    :type: bool\n    '
    use_pass_shadow: bool = None
    ' Deliver shadow pass\n\n    :type: bool\n    '
    use_pass_subsurface_color: bool = None
    ' Deliver subsurface color pass\n\n    :type: bool\n    '
    use_pass_subsurface_direct: bool = None
    ' Deliver subsurface direct pass\n\n    :type: bool\n    '
    use_pass_subsurface_indirect: bool = None
    ' Deliver subsurface indirect pass\n\n    :type: bool\n    '
    use_pass_transmission_color: bool = None
    ' Deliver transmission color pass\n\n    :type: bool\n    '
    use_pass_transmission_direct: bool = None
    ' Deliver transmission direct pass\n\n    :type: bool\n    '
    use_pass_transmission_indirect: bool = None
    ' Deliver transmission indirect pass\n\n    :type: bool\n    '
    use_pass_uv: bool = None
    ' Deliver texture UV pass\n\n    :type: bool\n    '
    use_pass_vector: bool = None
    ' Deliver speed vector pass\n\n    :type: bool\n    '
    use_pass_z: bool = None
    ' Deliver Z values pass\n\n    :type: bool\n    '
    use_sky: bool = None
    ' Render Sky in this Layer\n\n    :type: bool\n    '
    use_solid: bool = None
    ' Render Solid faces in this Layer\n\n    :type: bool\n    '
    use_strand: bool = None
    ' Render Strands in this Layer\n\n    :type: bool\n    '
    use_volumes: bool = None
    ' Render volumes in this Layer\n\n    :type: bool\n    '

    def load_from_file(self, filename: str, x: int=0, y: int=0):
        """ Copies the pixels of this renderlayer from an image file

        :param filename: Filename, Filename to load into this render tile, must be no smaller than the renderlayer
        :type filename: str
        :param x: Offset X, Offset the position to copy from if the image is larger than the render layer
        :type x: int
        :param y: Offset Y, Offset the position to copy from if the image is larger than the render layer
        :type y: int
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class RenderPass(bpy_struct):
    channel_id: str = None
    ' \n\n    :type: str\n    '
    channels: int = None
    ' \n\n    :type: int\n    '
    fullname: str = None
    ' \n\n    :type: str\n    '
    name: str = None
    ' \n\n    :type: str\n    '
    rect: float = None
    ' \n\n    :type: float\n    '
    view_id: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class RenderResult(bpy_struct):
    """ Result of rendering, including all layers and passes
    """
    layers: bpy_prop_collection['RenderLayer'] = None
    " \n\n    :type: bpy_prop_collection['RenderLayer']\n    "
    resolution_x: int = None
    ' \n\n    :type: int\n    '
    resolution_y: int = None
    ' \n\n    :type: int\n    '
    views: bpy_prop_collection['RenderView'] = None
    " \n\n    :type: bpy_prop_collection['RenderView']\n    "

    def load_from_file(self, filename: str):
        """ Copies the pixels of this render result from an image file

        :param filename: File Name, Filename to load into this render tile, must be no smaller than the render result
        :type filename: str
        """
        pass

    def stamp_data_add_field(self, field: str, value: str):
        """ Add engine-specific stamp data to the result

        :param field: Field, Name of the stamp field to add
        :type field: str
        :param value: Value, Value of the stamp data
        :type value: str
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class RenderSettings(bpy_struct):
    """ Rendering settings for a Scene data-block
    """
    bake: 'BakeSettings' = None
    " \n\n    :type: 'BakeSettings'\n    "
    bake_bias: float = None
    ' Bias towards faces further away from the object (in blender units)\n\n    :type: float\n    '
    bake_margin: int = None
    ' Extends the baked result as a post process filter\n\n    :type: int\n    '
    bake_margin_type: typing.Union[str, int] = None
    ' Algorithm to generate the margin * ``ADJACENT_FACES`` Adjacent Faces -- Use pixels from adjacent faces across UV seams. * ``EXTEND`` Extend -- Extend border pixels outwards.\n\n    :type: typing.Union[str, int]\n    '
    bake_samples: int = None
    ' Number of samples used for ambient occlusion baking from multires\n\n    :type: int\n    '
    bake_type: typing.Union[str, int] = None
    ' Choose shading information to bake into the image * ``NORMALS`` Normals -- Bake normals. * ``DISPLACEMENT`` Displacement -- Bake displacement.\n\n    :type: typing.Union[str, int]\n    '
    bake_user_scale: float = None
    ' Instead of automatically normalizing to the range 0 to 1, apply a user scale to the derivative map\n\n    :type: float\n    '
    border_max_x: float = None
    ' Maximum X value for the render region\n\n    :type: float\n    '
    border_max_y: float = None
    ' Maximum Y value for the render region\n\n    :type: float\n    '
    border_min_x: float = None
    ' Minimum X value for the render region\n\n    :type: float\n    '
    border_min_y: float = None
    ' Minimum Y value for the render region\n\n    :type: float\n    '
    dither_intensity: float = None
    ' Amount of dithering noise added to the rendered image to break up banding\n\n    :type: float\n    '
    engine: typing.Union[str, int] = None
    ' Engine to use for rendering\n\n    :type: typing.Union[str, int]\n    '
    ffmpeg: 'FFmpegSettings' = None
    " FFmpeg related settings for the scene\n\n    :type: 'FFmpegSettings'\n    "
    file_extension: str = None
    ' The file extension used for saving renders\n\n    :type: str\n    '
    filepath: str = None
    ' Directory/name to save animations, # characters defines the position and length of frame numbers\n\n    :type: str\n    '
    film_transparent: bool = None
    ' World background is transparent, for compositing the render over another background\n\n    :type: bool\n    '
    filter_size: float = None
    ' Width over which the reconstruction filter combines samples\n\n    :type: float\n    '
    fps: int = None
    ' Framerate, expressed in frames per second\n\n    :type: int\n    '
    fps_base: float = None
    ' Framerate base\n\n    :type: float\n    '
    frame_map_new: int = None
    ' How many frames the Map Old will last\n\n    :type: int\n    '
    frame_map_old: int = None
    ' Old mapping value in frames\n\n    :type: int\n    '
    hair_subdiv: int = None
    ' Additional subdivision along the curves\n\n    :type: int\n    '
    hair_type: typing.Union[str, int] = None
    ' Curves shape type\n\n    :type: typing.Union[str, int]\n    '
    has_multiple_engines: bool = None
    ' More than one rendering engine is available\n\n    :type: bool\n    '
    image_settings: 'ImageFormatSettings' = None
    " \n\n    :type: 'ImageFormatSettings'\n    "
    is_movie_format: bool = None
    ' When true the format is a movie\n\n    :type: bool\n    '
    line_thickness: float = None
    ' Line thickness in pixels\n\n    :type: float\n    '
    line_thickness_mode: typing.Union[str, int] = None
    ' Line thickness mode for Freestyle line drawing * ``ABSOLUTE`` Absolute -- Specify unit line thickness in pixels. * ``RELATIVE`` Relative -- Unit line thickness is scaled by the proportion of the present vertical image resolution to 480 pixels.\n\n    :type: typing.Union[str, int]\n    '
    metadata_input: typing.Union[str, int] = None
    ' Where to take the metadata from * ``SCENE`` Scene -- Use metadata from the current scene. * ``STRIPS`` Sequencer Strips -- Use metadata from the strips in the sequencer.\n\n    :type: typing.Union[str, int]\n    '
    motion_blur_shutter: float = None
    ' Time taken in frames between shutter open and close\n\n    :type: float\n    '
    motion_blur_shutter_curve: 'CurveMapping' = None
    " Curve defining the shutter's openness over time\n\n    :type: 'CurveMapping'\n    "
    pixel_aspect_x: float = None
    ' Horizontal aspect ratio - for anamorphic or non-square pixel output\n\n    :type: float\n    '
    pixel_aspect_y: float = None
    ' Vertical aspect ratio - for anamorphic or non-square pixel output\n\n    :type: float\n    '
    preview_pixel_size: typing.Union[str, int] = None
    ' Pixel size for viewport rendering * ``AUTO`` Automatic -- Automatic pixel size, depends on the user interface scale. * ``1`` 1x -- Render at full resolution. * ``2`` 2x -- Render at 50% resolution. * ``4`` 4x -- Render at 25% resolution. * ``8`` 8x -- Render at 12.5% resolution.\n\n    :type: typing.Union[str, int]\n    '
    resolution_percentage: int = None
    ' Percentage scale for render resolution\n\n    :type: int\n    '
    resolution_x: int = None
    ' Number of horizontal pixels in the rendered image\n\n    :type: int\n    '
    resolution_y: int = None
    ' Number of vertical pixels in the rendered image\n\n    :type: int\n    '
    sequencer_gl_preview: typing.Union[str, int] = None
    ' Display method used in the sequencer view\n\n    :type: typing.Union[str, int]\n    '
    simplify_child_particles: float = None
    ' Global child particles percentage\n\n    :type: float\n    '
    simplify_child_particles_render: float = None
    ' Global child particles percentage during rendering\n\n    :type: float\n    '
    simplify_gpencil: bool = None
    ' Simplify Grease Pencil drawing\n\n    :type: bool\n    '
    simplify_gpencil_antialiasing: bool = None
    ' Use Antialiasing to smooth stroke edges\n\n    :type: bool\n    '
    simplify_gpencil_modifier: bool = None
    ' Display modifiers\n\n    :type: bool\n    '
    simplify_gpencil_onplay: bool = None
    ' Simplify Grease Pencil only during animation playback\n\n    :type: bool\n    '
    simplify_gpencil_shader_fx: bool = None
    ' Display Shader Effects\n\n    :type: bool\n    '
    simplify_gpencil_tint: bool = None
    ' Display layer tint\n\n    :type: bool\n    '
    simplify_gpencil_view_fill: bool = None
    ' Display fill strokes in the viewport\n\n    :type: bool\n    '
    simplify_subdivision: int = None
    ' Global maximum subdivision level\n\n    :type: int\n    '
    simplify_subdivision_render: int = None
    ' Global maximum subdivision level during rendering\n\n    :type: int\n    '
    simplify_volumes: float = None
    ' Resolution percentage of volume objects in viewport\n\n    :type: float\n    '
    stamp_background: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color to use behind stamp text\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    stamp_font_size: int = None
    ' Size of the font used when rendering stamp text\n\n    :type: int\n    '
    stamp_foreground: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color to use for stamp text\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    stamp_note_text: str = None
    ' Custom text to appear in the stamp note\n\n    :type: str\n    '
    stereo_views: bpy_prop_collection['SceneRenderView'] = None
    " \n\n    :type: bpy_prop_collection['SceneRenderView']\n    "
    threads: int = None
    ' Maximum number of CPU cores to use simultaneously while rendering (for multi-core/CPU systems)\n\n    :type: int\n    '
    threads_mode: typing.Union[str, int] = None
    ' Determine the amount of render threads used * ``AUTO`` Auto-Detect -- Automatically determine the number of threads, based on CPUs. * ``FIXED`` Fixed -- Manually determine the number of threads.\n\n    :type: typing.Union[str, int]\n    '
    use_bake_clear: bool = None
    ' Clear Images before baking\n\n    :type: bool\n    '
    use_bake_lores_mesh: bool = None
    ' Calculate heights against unsubdivided low resolution mesh\n\n    :type: bool\n    '
    use_bake_multires: bool = None
    ' Bake directly from multires object\n\n    :type: bool\n    '
    use_bake_selected_to_active: bool = None
    ' Bake shading on the surface of selected objects to the active object\n\n    :type: bool\n    '
    use_bake_user_scale: bool = None
    ' Use a user scale for the derivative map\n\n    :type: bool\n    '
    use_border: bool = None
    ' Render a user-defined render region, within the frame size\n\n    :type: bool\n    '
    use_compositing: bool = None
    ' Process the render result through the compositing pipeline, if compositing nodes are enabled\n\n    :type: bool\n    '
    use_crop_to_border: bool = None
    ' Crop the rendered frame to the defined render region size\n\n    :type: bool\n    '
    use_file_extension: bool = None
    ' Add the file format extensions to the rendered file name (eg: filename + .jpg)\n\n    :type: bool\n    '
    use_freestyle: bool = None
    ' Draw stylized strokes using Freestyle\n\n    :type: bool\n    '
    use_high_quality_normals: bool = None
    ' Use high quality tangent space at the cost of lower performance\n\n    :type: bool\n    '
    use_lock_interface: bool = None
    ' Lock interface during rendering in favor of giving more memory to the renderer\n\n    :type: bool\n    '
    use_motion_blur: bool = None
    ' Use multi-sampled 3D scene motion blur\n\n    :type: bool\n    '
    use_multiview: bool = None
    ' Use multiple views in the scene\n\n    :type: bool\n    '
    use_overwrite: bool = None
    ' Overwrite existing files while rendering\n\n    :type: bool\n    '
    use_persistent_data: bool = None
    ' Keep render data around for faster re-renders and animation renders, at the cost of increased memory usage\n\n    :type: bool\n    '
    use_placeholder: bool = None
    " Create empty placeholder files while rendering frames (similar to Unix 'touch')\n\n    :type: bool\n    "
    use_render_cache: bool = None
    ' Save render cache to EXR files (useful for heavy compositing, Note: affects indirectly rendered scenes)\n\n    :type: bool\n    '
    use_sequencer: bool = None
    ' Process the render (and composited) result through the video sequence editor pipeline, if sequencer strips exist\n\n    :type: bool\n    '
    use_sequencer_override_scene_strip: bool = None
    ' Use workbench render settings from the sequencer scene, instead of each individual scene used in the strip\n\n    :type: bool\n    '
    use_simplify: bool = None
    ' Enable simplification of scene for quicker preview renders\n\n    :type: bool\n    '
    use_single_layer: bool = None
    ' Only render the active layer. Only affects rendering from the interface, ignored for rendering from command line\n\n    :type: bool\n    '
    use_spherical_stereo: bool = None
    ' Active render engine supports spherical stereo rendering\n\n    :type: bool\n    '
    use_stamp: bool = None
    ' Render the stamp info text in the rendered image\n\n    :type: bool\n    '
    use_stamp_camera: bool = None
    ' Include the name of the active camera in image metadata\n\n    :type: bool\n    '
    use_stamp_date: bool = None
    ' Include the current date in image/video metadata\n\n    :type: bool\n    '
    use_stamp_filename: bool = None
    ' Include the .blend filename in image/video metadata\n\n    :type: bool\n    '
    use_stamp_frame: bool = None
    ' Include the frame number in image metadata\n\n    :type: bool\n    '
    use_stamp_frame_range: bool = None
    ' Include the rendered frame range in image/video metadata\n\n    :type: bool\n    '
    use_stamp_hostname: bool = None
    ' Include the hostname of the machine that rendered the frame\n\n    :type: bool\n    '
    use_stamp_labels: bool = None
    ' Display stamp labels ("Camera" in front of camera name, etc.)\n\n    :type: bool\n    '
    use_stamp_lens: bool = None
    " Include the active camera's lens in image metadata\n\n    :type: bool\n    "
    use_stamp_marker: bool = None
    ' Include the name of the last marker in image metadata\n\n    :type: bool\n    '
    use_stamp_memory: bool = None
    ' Include the peak memory usage in image metadata\n\n    :type: bool\n    '
    use_stamp_note: bool = None
    ' Include a custom note in image/video metadata\n\n    :type: bool\n    '
    use_stamp_render_time: bool = None
    ' Include the render time in image metadata\n\n    :type: bool\n    '
    use_stamp_scene: bool = None
    ' Include the name of the active scene in image/video metadata\n\n    :type: bool\n    '
    use_stamp_sequencer_strip: bool = None
    ' Include the name of the foreground sequence strip in image metadata\n\n    :type: bool\n    '
    use_stamp_time: bool = None
    ' Include the rendered frame timecode as HH:MM:SS.FF in image metadata\n\n    :type: bool\n    '
    views: 'RenderViews' = None
    " \n\n    :type: 'RenderViews'\n    "
    views_format: typing.Union[str, int] = None
    ' * ``STEREO_3D`` Stereo 3D -- Single stereo camera system, adjust the stereo settings in the camera panel. * ``MULTIVIEW`` Multi-View -- Multi camera system, adjust the cameras individually.\n\n    :type: typing.Union[str, int]\n    '

    def frame_path(self, frame: int=-2147483648, preview: bool=False, view: str='') -> str:
        """ Return the absolute path to the filename to be written for a given frame

        :param frame: Frame number to use, if unset the current frame will be used
        :type frame: int
        :param preview: Preview, Use preview range
        :type preview: bool
        :param view: View, The name of the view to use to replace the "%" chars
        :type view: str
        :rtype: str
        :return: File Path, The resulting filepath from the scenes render settings
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class RenderSlot(bpy_struct):
    """ Parameters defining the render slot
    """
    name: str = None
    ' Render slot name\n\n    :type: str\n    '

    def clear(self, iuser: 'ImageUser'):
        """ Clear the render slot

        :param iuser: ImageUser
        :type iuser: 'ImageUser'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class RenderView(bpy_struct):
    name: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class RigidBodyConstraint(bpy_struct):
    """ Constraint influencing Objects inside Rigid Body Simulation
    """
    breaking_threshold: float = None
    ' Impulse threshold that must be reached for the constraint to break\n\n    :type: float\n    '
    disable_collisions: bool = None
    ' Disable collisions between constrained rigid bodies\n\n    :type: bool\n    '
    enabled: bool = None
    ' Enable this constraint\n\n    :type: bool\n    '
    limit_ang_x_lower: float = None
    ' Lower limit of X axis rotation\n\n    :type: float\n    '
    limit_ang_x_upper: float = None
    ' Upper limit of X axis rotation\n\n    :type: float\n    '
    limit_ang_y_lower: float = None
    ' Lower limit of Y axis rotation\n\n    :type: float\n    '
    limit_ang_y_upper: float = None
    ' Upper limit of Y axis rotation\n\n    :type: float\n    '
    limit_ang_z_lower: float = None
    ' Lower limit of Z axis rotation\n\n    :type: float\n    '
    limit_ang_z_upper: float = None
    ' Upper limit of Z axis rotation\n\n    :type: float\n    '
    limit_lin_x_lower: float = None
    ' Lower limit of X axis translation\n\n    :type: float\n    '
    limit_lin_x_upper: float = None
    ' Upper limit of X axis translation\n\n    :type: float\n    '
    limit_lin_y_lower: float = None
    ' Lower limit of Y axis translation\n\n    :type: float\n    '
    limit_lin_y_upper: float = None
    ' Upper limit of Y axis translation\n\n    :type: float\n    '
    limit_lin_z_lower: float = None
    ' Lower limit of Z axis translation\n\n    :type: float\n    '
    limit_lin_z_upper: float = None
    ' Upper limit of Z axis translation\n\n    :type: float\n    '
    motor_ang_max_impulse: float = None
    ' Maximum angular motor impulse\n\n    :type: float\n    '
    motor_ang_target_velocity: float = None
    ' Target angular motor velocity\n\n    :type: float\n    '
    motor_lin_max_impulse: float = None
    ' Maximum linear motor impulse\n\n    :type: float\n    '
    motor_lin_target_velocity: float = None
    ' Target linear motor velocity\n\n    :type: float\n    '
    object1: 'Object' = None
    " First Rigid Body Object to be constrained\n\n    :type: 'Object'\n    "
    object2: 'Object' = None
    " Second Rigid Body Object to be constrained\n\n    :type: 'Object'\n    "
    solver_iterations: int = None
    ' Number of constraint solver iterations made per simulation step (higher values are more accurate but slower)\n\n    :type: int\n    '
    spring_damping_ang_x: float = None
    ' Damping on the X rotational axis\n\n    :type: float\n    '
    spring_damping_ang_y: float = None
    ' Damping on the Y rotational axis\n\n    :type: float\n    '
    spring_damping_ang_z: float = None
    ' Damping on the Z rotational axis\n\n    :type: float\n    '
    spring_damping_x: float = None
    ' Damping on the X axis\n\n    :type: float\n    '
    spring_damping_y: float = None
    ' Damping on the Y axis\n\n    :type: float\n    '
    spring_damping_z: float = None
    ' Damping on the Z axis\n\n    :type: float\n    '
    spring_stiffness_ang_x: float = None
    ' Stiffness on the X rotational axis\n\n    :type: float\n    '
    spring_stiffness_ang_y: float = None
    ' Stiffness on the Y rotational axis\n\n    :type: float\n    '
    spring_stiffness_ang_z: float = None
    ' Stiffness on the Z rotational axis\n\n    :type: float\n    '
    spring_stiffness_x: float = None
    ' Stiffness on the X axis\n\n    :type: float\n    '
    spring_stiffness_y: float = None
    ' Stiffness on the Y axis\n\n    :type: float\n    '
    spring_stiffness_z: float = None
    ' Stiffness on the Z axis\n\n    :type: float\n    '
    spring_type: typing.Union[str, int] = None
    ' Which implementation of spring to use * ``SPRING1`` Blender 2.7 -- Spring implementation used in blender 2.7. Damping is capped at 1.0. * ``SPRING2`` Blender 2.8 -- New implementation available since 2.8.\n\n    :type: typing.Union[str, int]\n    '
    type: typing.Union[str, int] = None
    ' Type of Rigid Body Constraint\n\n    :type: typing.Union[str, int]\n    '
    use_breaking: bool = None
    ' Constraint can be broken if it receives an impulse above the threshold\n\n    :type: bool\n    '
    use_limit_ang_x: bool = None
    ' Limit rotation around X axis\n\n    :type: bool\n    '
    use_limit_ang_y: bool = None
    ' Limit rotation around Y axis\n\n    :type: bool\n    '
    use_limit_ang_z: bool = None
    ' Limit rotation around Z axis\n\n    :type: bool\n    '
    use_limit_lin_x: bool = None
    ' Limit translation on X axis\n\n    :type: bool\n    '
    use_limit_lin_y: bool = None
    ' Limit translation on Y axis\n\n    :type: bool\n    '
    use_limit_lin_z: bool = None
    ' Limit translation on Z axis\n\n    :type: bool\n    '
    use_motor_ang: bool = None
    ' Enable angular motor\n\n    :type: bool\n    '
    use_motor_lin: bool = None
    ' Enable linear motor\n\n    :type: bool\n    '
    use_override_solver_iterations: bool = None
    ' Override the number of solver iterations for this constraint\n\n    :type: bool\n    '
    use_spring_ang_x: bool = None
    ' Enable spring on X rotational axis\n\n    :type: bool\n    '
    use_spring_ang_y: bool = None
    ' Enable spring on Y rotational axis\n\n    :type: bool\n    '
    use_spring_ang_z: bool = None
    ' Enable spring on Z rotational axis\n\n    :type: bool\n    '
    use_spring_x: bool = None
    ' Enable spring on X axis\n\n    :type: bool\n    '
    use_spring_y: bool = None
    ' Enable spring on Y axis\n\n    :type: bool\n    '
    use_spring_z: bool = None
    ' Enable spring on Z axis\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class RigidBodyObject(bpy_struct):
    """ Settings for object participating in Rigid Body Simulation
    """
    angular_damping: float = None
    ' Amount of angular velocity that is lost over time\n\n    :type: float\n    '
    collision_collections: typing.List[bool] = None
    ' Collision collections rigid body belongs to\n\n    :type: typing.List[bool]\n    '
    collision_margin: float = None
    ' Threshold of distance near surface where collisions are still considered (best results when non-zero)\n\n    :type: float\n    '
    collision_shape: typing.Union[str, int] = None
    ' Collision Shape of object in Rigid Body Simulations\n\n    :type: typing.Union[str, int]\n    '
    deactivate_angular_velocity: float = None
    ' Angular Velocity below which simulation stops simulating object\n\n    :type: float\n    '
    deactivate_linear_velocity: float = None
    ' Linear Velocity below which simulation stops simulating object\n\n    :type: float\n    '
    enabled: bool = None
    ' Rigid Body actively participates to the simulation\n\n    :type: bool\n    '
    friction: float = None
    ' Resistance of object to movement\n\n    :type: float\n    '
    kinematic: bool = None
    ' Allow rigid body to be controlled by the animation system\n\n    :type: bool\n    '
    linear_damping: float = None
    ' Amount of linear velocity that is lost over time\n\n    :type: float\n    '
    mass: float = None
    " How much the object 'weighs' irrespective of gravity\n\n    :type: float\n    "
    mesh_source: typing.Union[str, int] = None
    ' Source of the mesh used to create collision shape * ``BASE`` Base -- Base mesh. * ``DEFORM`` Deform -- Deformations (shape keys, deform modifiers). * ``FINAL`` Final -- All modifiers.\n\n    :type: typing.Union[str, int]\n    '
    restitution: float = None
    ' Tendency of object to bounce after colliding with another (0 = stays still, 1 = perfectly elastic)\n\n    :type: float\n    '
    type: typing.Union[str, int] = None
    ' Role of object in Rigid Body Simulations\n\n    :type: typing.Union[str, int]\n    '
    use_deactivation: bool = None
    ' Enable deactivation of resting rigid bodies (increases performance and stability but can cause glitches)\n\n    :type: bool\n    '
    use_deform: bool = None
    ' Rigid body deforms during simulation\n\n    :type: bool\n    '
    use_margin: bool = None
    ' Use custom collision margin (some shapes will have a visible gap around them)\n\n    :type: bool\n    '
    use_start_deactivated: bool = None
    ' Deactivate rigid body at the start of the simulation\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class RigidBodyWorld(bpy_struct):
    """ Self-contained rigid body simulation environment and settings
    """
    collection: 'Collection' = None
    " Collection containing objects participating in this simulation\n\n    :type: 'Collection'\n    "
    constraints: 'Collection' = None
    " Collection containing rigid body constraint objects\n\n    :type: 'Collection'\n    "
    effector_weights: 'EffectorWeights' = None
    " \n\n    :type: 'EffectorWeights'\n    "
    enabled: bool = None
    ' Simulation will be evaluated\n\n    :type: bool\n    '
    point_cache: 'PointCache' = None
    " \n\n    :type: 'PointCache'\n    "
    solver_iterations: int = None
    ' Number of constraint solver iterations made per simulation step (higher values are more accurate but slower)\n\n    :type: int\n    '
    substeps_per_frame: int = None
    ' Number of simulation steps taken per frame (higher values are more accurate but slower)\n\n    :type: int\n    '
    time_scale: float = None
    ' Change the speed of the simulation\n\n    :type: float\n    '
    use_split_impulse: bool = None
    ' Reduce extra velocity that can build up when objects collide (lowers simulation stability a little so use only when necessary)\n\n    :type: bool\n    '

    def convex_sweep_test(self, object: 'Object', start: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'], end: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']):
        """ Sweep test convex rigidbody against the current rigidbody world

        :param object: Rigidbody object with a convex collision shape
        :type object: 'Object'
        :param start: 
        :type start: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']
        :param end: 
        :type end: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SPHFluidSettings(bpy_struct):
    """ Settings for particle fluids physics
    """
    buoyancy: float = None
    ' Artificial buoyancy force in negative gravity direction based on pressure differences inside the fluid\n\n    :type: float\n    '
    fluid_radius: float = None
    ' Fluid interaction radius\n\n    :type: float\n    '
    linear_viscosity: float = None
    ' Linear viscosity\n\n    :type: float\n    '
    plasticity: float = None
    ' How much the spring rest length can change after the elastic limit is crossed\n\n    :type: float\n    '
    repulsion: float = None
    ' How strongly the fluid tries to keep from clustering (factor of stiffness)\n\n    :type: float\n    '
    rest_density: float = None
    ' Fluid rest density\n\n    :type: float\n    '
    rest_length: float = None
    ' Spring rest length (factor of particle radius)\n\n    :type: float\n    '
    solver: typing.Union[str, int] = None
    ' The code used to calculate internal forces on particles * ``DDR`` Double-Density -- An artistic solver with strong surface tension effects (original). * ``CLASSICAL`` Classical -- A more physically-accurate solver.\n\n    :type: typing.Union[str, int]\n    '
    spring_force: float = None
    ' Spring force\n\n    :type: float\n    '
    spring_frames: int = None
    ' Create springs for this number of frames since particles birth (0 is always)\n\n    :type: int\n    '
    stiff_viscosity: float = None
    ' Creates viscosity for expanding fluid\n\n    :type: float\n    '
    stiffness: float = None
    ' How incompressible the fluid is (speed of sound)\n\n    :type: float\n    '
    use_factor_density: bool = None
    ' Density is calculated as a factor of default density (depends on particle size)\n\n    :type: bool\n    '
    use_factor_radius: bool = None
    ' Interaction radius is a factor of 4 * particle size\n\n    :type: bool\n    '
    use_factor_repulsion: bool = None
    ' Repulsion is a factor of stiffness\n\n    :type: bool\n    '
    use_factor_rest_length: bool = None
    ' Spring rest length is a factor of 2 * particle size\n\n    :type: bool\n    '
    use_factor_stiff_viscosity: bool = None
    ' Stiff viscosity is a factor of normal viscosity\n\n    :type: bool\n    '
    use_initial_rest_length: bool = None
    ' Use the initial length as spring rest length instead of 2 * particle size\n\n    :type: bool\n    '
    use_viscoelastic_springs: bool = None
    " Use viscoelastic springs instead of Hooke's springs\n\n    :type: bool\n    "
    yield_ratio: float = None
    ' How much the spring has to be stretched/compressed in order to change its rest length\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SceneDisplay(bpy_struct):
    """ Scene display settings for 3D viewport
    """
    light_direction: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Direction of the light for shadows and highlights\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    matcap_ssao_attenuation: float = None
    ' Attenuation constant\n\n    :type: float\n    '
    matcap_ssao_distance: float = None
    ' Distance of object that contribute to the Cavity/Edge effect\n\n    :type: float\n    '
    matcap_ssao_samples: int = None
    ' Number of samples\n\n    :type: int\n    '
    render_aa: typing.Union[str, int] = None
    ' Method of anti-aliasing when rendering final image * ``OFF`` No Anti-Aliasing -- Scene will be rendering without any anti-aliasing. * ``FXAA`` Single Pass Anti-Aliasing -- Scene will be rendered using a single pass anti-aliasing method (FXAA). * ``5`` 5 Samples -- Scene will be rendered using 5 anti-aliasing samples. * ``8`` 8 Samples -- Scene will be rendered using 8 anti-aliasing samples. * ``11`` 11 Samples -- Scene will be rendered using 11 anti-aliasing samples. * ``16`` 16 Samples -- Scene will be rendered using 16 anti-aliasing samples. * ``32`` 32 Samples -- Scene will be rendered using 32 anti-aliasing samples.\n\n    :type: typing.Union[str, int]\n    '
    shading: 'View3DShading' = None
    " Shading settings for OpenGL render engine\n\n    :type: 'View3DShading'\n    "
    shadow_focus: float = None
    ' Shadow factor hardness\n\n    :type: float\n    '
    shadow_shift: float = None
    ' Shadow termination angle\n\n    :type: float\n    '
    viewport_aa: typing.Union[str, int] = None
    ' Method of anti-aliasing when rendering 3d viewport * ``OFF`` No Anti-Aliasing -- Scene will be rendering without any anti-aliasing. * ``FXAA`` Single Pass Anti-Aliasing -- Scene will be rendered using a single pass anti-aliasing method (FXAA). * ``5`` 5 Samples -- Scene will be rendered using 5 anti-aliasing samples. * ``8`` 8 Samples -- Scene will be rendered using 8 anti-aliasing samples. * ``11`` 11 Samples -- Scene will be rendered using 11 anti-aliasing samples. * ``16`` 16 Samples -- Scene will be rendered using 16 anti-aliasing samples. * ``32`` 32 Samples -- Scene will be rendered using 32 anti-aliasing samples.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SceneEEVEE(bpy_struct):
    """ Scene display settings for 3D viewport
    """
    bloom_clamp: float = None
    ' Maximum intensity a bloom pixel can have (0 to disable)\n\n    :type: float\n    '
    bloom_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color applied to the bloom effect\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    bloom_intensity: float = None
    ' Blend factor\n\n    :type: float\n    '
    bloom_knee: float = None
    ' Makes transition between under/over-threshold gradual\n\n    :type: float\n    '
    bloom_radius: float = None
    ' Bloom spread distance\n\n    :type: float\n    '
    bloom_threshold: float = None
    ' Filters out pixels under this level of brightness\n\n    :type: float\n    '
    bokeh_denoise_fac: float = None
    ' Amount of flicker removal applied to bokeh highlights\n\n    :type: float\n    '
    bokeh_max_size: float = None
    ' Max size of the bokeh shape for the depth of field (lower is faster)\n\n    :type: float\n    '
    bokeh_neighbor_max: float = None
    ' Maximum brightness to consider when rejecting bokeh sprites based on neighborhood (lower is faster)\n\n    :type: float\n    '
    bokeh_overblur: float = None
    ' Apply blur to each jittered sample to reduce under-sampling artifacts\n\n    :type: float\n    '
    bokeh_threshold: float = None
    ' Brightness threshold for using sprite base depth of field\n\n    :type: float\n    '
    gi_auto_bake: bool = None
    ' Auto bake indirect lighting when editing probes\n\n    :type: bool\n    '
    gi_cache_info: str = None
    ' Info on current cache status\n\n    :type: str\n    '
    gi_cubemap_display_size: float = None
    ' Size of the cubemap spheres to debug captured light\n\n    :type: float\n    '
    gi_cubemap_resolution: typing.Union[str, int] = None
    ' Size of every cubemaps\n\n    :type: typing.Union[str, int]\n    '
    gi_diffuse_bounces: int = None
    ' Number of time the light is reinjected inside light grids, 0 disable indirect diffuse light\n\n    :type: int\n    '
    gi_filter_quality: float = None
    ' Take more samples during cubemap filtering to remove artifacts\n\n    :type: float\n    '
    gi_glossy_clamp: float = None
    ' Clamp pixel intensity to reduce noise inside glossy reflections from reflection cubemaps (0 to disable)\n\n    :type: float\n    '
    gi_irradiance_display_size: float = None
    ' Size of the irradiance sample spheres to debug captured light\n\n    :type: float\n    '
    gi_irradiance_smoothing: float = None
    ' Smoother irradiance interpolation but introduce light bleeding\n\n    :type: float\n    '
    gi_show_cubemaps: bool = None
    ' Display captured cubemaps in the viewport\n\n    :type: bool\n    '
    gi_show_irradiance: bool = None
    ' Display irradiance samples in the viewport\n\n    :type: bool\n    '
    gi_visibility_resolution: typing.Union[str, int] = None
    ' Size of the shadow map applied to each irradiance sample\n\n    :type: typing.Union[str, int]\n    '
    gtao_distance: float = None
    ' Distance of object that contribute to the ambient occlusion effect\n\n    :type: float\n    '
    gtao_factor: float = None
    ' Factor for ambient occlusion blending\n\n    :type: float\n    '
    gtao_quality: float = None
    ' Precision of the horizon search\n\n    :type: float\n    '
    light_threshold: float = None
    ' Minimum light intensity for a light to contribute to the lighting\n\n    :type: float\n    '
    motion_blur_depth_scale: float = None
    ' Lower values will reduce background bleeding onto foreground elements\n\n    :type: float\n    '
    motion_blur_max: int = None
    ' Maximum blur distance a pixel can spread over\n\n    :type: int\n    '
    motion_blur_position: typing.Union[str, int] = None
    " Offset for the shutter's time interval, allows to change the motion blur trails * ``START`` Start on Frame -- The shutter opens at the current frame. * ``CENTER`` Center on Frame -- The shutter is open during the current frame. * ``END`` End on Frame -- The shutter closes at the current frame.\n\n    :type: typing.Union[str, int]\n    "
    motion_blur_shutter: float = None
    ' Time taken in frames between shutter open and close\n\n    :type: float\n    '
    motion_blur_steps: int = None
    ' Controls accuracy of motion blur, more steps means longer render time\n\n    :type: int\n    '
    overscan_size: float = None
    ' Percentage of render size to add as overscan to the internal render buffers\n\n    :type: float\n    '
    shadow_cascade_size: typing.Union[str, int] = None
    ' Size of sun light shadow maps\n\n    :type: typing.Union[str, int]\n    '
    shadow_cube_size: typing.Union[str, int] = None
    ' Size of point and area light shadow maps\n\n    :type: typing.Union[str, int]\n    '
    ssr_border_fade: float = None
    ' Screen percentage used to fade the SSR\n\n    :type: float\n    '
    ssr_firefly_fac: float = None
    ' Clamp pixel intensity to remove noise (0 to disable)\n\n    :type: float\n    '
    ssr_max_roughness: float = None
    ' Do not raytrace reflections for roughness above this value\n\n    :type: float\n    '
    ssr_quality: float = None
    ' Precision of the screen space ray-tracing\n\n    :type: float\n    '
    ssr_thickness: float = None
    ' Pixel thickness used to detect intersection\n\n    :type: float\n    '
    sss_jitter_threshold: float = None
    ' Rotate samples that are below this threshold\n\n    :type: float\n    '
    sss_samples: int = None
    ' Number of samples to compute the scattering effect\n\n    :type: int\n    '
    taa_render_samples: int = None
    ' Number of samples per pixel for rendering\n\n    :type: int\n    '
    taa_samples: int = None
    ' Number of samples, unlimited if 0\n\n    :type: int\n    '
    use_bloom: bool = None
    ' High brightness pixels generate a glowing effect\n\n    :type: bool\n    '
    use_bokeh_high_quality_slight_defocus: bool = None
    ' Sample all pixels in almost in-focus regions to eliminate noise\n\n    :type: bool\n    '
    use_bokeh_jittered: bool = None
    ' Jitter camera position to create accurate blurring using render samples\n\n    :type: bool\n    '
    use_gtao: bool = None
    ' Enable ambient occlusion to simulate medium scale indirect shadowing\n\n    :type: bool\n    '
    use_gtao_bent_normals: bool = None
    ' Compute main non occluded direction to sample the environment\n\n    :type: bool\n    '
    use_gtao_bounce: bool = None
    ' An approximation to simulate light bounces giving less occlusion on brighter objects\n\n    :type: bool\n    '
    use_motion_blur: bool = None
    ' Enable motion blur effect (only in camera view)\n\n    :type: bool\n    '
    use_overscan: bool = None
    ' Internally render past the image border to avoid screen-space effects disappearing\n\n    :type: bool\n    '
    use_shadow_high_bitdepth: bool = None
    ' Use 32-bit shadows\n\n    :type: bool\n    '
    use_soft_shadows: bool = None
    ' Randomize shadowmaps origin to create soft shadows\n\n    :type: bool\n    '
    use_ssr: bool = None
    ' Enable screen space reflection\n\n    :type: bool\n    '
    use_ssr_halfres: bool = None
    ' Raytrace at a lower resolution\n\n    :type: bool\n    '
    use_ssr_refraction: bool = None
    ' Enable screen space Refractions\n\n    :type: bool\n    '
    use_taa_reprojection: bool = None
    ' Denoise image using temporal reprojection (can leave some ghosting)\n\n    :type: bool\n    '
    use_volumetric_lights: bool = None
    ' Enable scene light interactions with volumetrics\n\n    :type: bool\n    '
    use_volumetric_shadows: bool = None
    ' Generate shadows from volumetric material (Very expensive)\n\n    :type: bool\n    '
    volumetric_end: float = None
    ' End distance of the volumetric effect\n\n    :type: float\n    '
    volumetric_light_clamp: float = None
    ' Maximum light contribution, reducing noise\n\n    :type: float\n    '
    volumetric_sample_distribution: float = None
    ' Distribute more samples closer to the camera\n\n    :type: float\n    '
    volumetric_samples: int = None
    ' Number of samples to compute volumetric effects\n\n    :type: int\n    '
    volumetric_shadow_samples: int = None
    ' Number of samples to compute volumetric shadowing\n\n    :type: int\n    '
    volumetric_start: float = None
    ' Start distance of the volumetric effect\n\n    :type: float\n    '
    volumetric_tile_size: typing.Union[str, int] = None
    ' Control the quality of the volumetric effects (lower size increase vram usage and quality)\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SceneGpencil(bpy_struct):
    """ Render settings
    """
    antialias_threshold: float = None
    ' Threshold for edge detection algorithm (higher values might over-blur some part of the image)\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SceneRenderView(bpy_struct):
    """ Render viewpoint for 3D stereo and multiview rendering
    """
    camera_suffix: str = None
    ' Suffix to identify the cameras to use, and added to the render images for this view\n\n    :type: str\n    '
    file_suffix: str = None
    ' Suffix added to the render images for this view\n\n    :type: str\n    '
    name: str = None
    ' Render view name\n\n    :type: str\n    '
    use: bool = None
    ' Disable or enable the render view\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Scopes(bpy_struct):
    """ Scopes for statistical view of an image
    """
    accuracy: float = None
    ' Proportion of original image source pixel lines to sample\n\n    :type: float\n    '
    histogram: 'Histogram' = None
    " Histogram for viewing image statistics\n\n    :type: 'Histogram'\n    "
    use_full_resolution: bool = None
    ' Sample every pixel of the image\n\n    :type: bool\n    '
    vectorscope_alpha: float = None
    ' Opacity of the points\n\n    :type: float\n    '
    waveform_alpha: float = None
    ' Opacity of the points\n\n    :type: float\n    '
    waveform_mode: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Sequence(bpy_struct):
    """ Sequence strip in the sequence editor
    """
    blend_alpha: float = None
    " Percentage of how much the strip's colors affect other strips\n\n    :type: float\n    "
    blend_type: typing.Union[str, int] = None
    ' Method for controlling how the strip combines with other strips\n\n    :type: typing.Union[str, int]\n    '
    channel: int = None
    ' Y position of the sequence strip\n\n    :type: int\n    '
    color_tag: typing.Union[str, int] = None
    ' Color tag for a strip\n\n    :type: typing.Union[str, int]\n    '
    effect_fader: float = None
    ' Custom fade value\n\n    :type: float\n    '
    frame_duration: int = None
    ' The length of the contents of this strip before the handles are applied\n\n    :type: int\n    '
    frame_final_duration: int = None
    ' The length of the contents of this strip after the handles are applied\n\n    :type: int\n    '
    frame_final_end: int = None
    ' End frame displayed in the sequence editor after offsets are applied\n\n    :type: int\n    '
    frame_final_start: int = None
    ' Start frame displayed in the sequence editor after offsets are applied, setting this is equivalent to moving the handle, not the actual start frame\n\n    :type: int\n    '
    frame_offset_end: float = None
    ' \n\n    :type: float\n    '
    frame_offset_start: float = None
    ' \n\n    :type: float\n    '
    frame_start: float = None
    ' X position where the strip begins\n\n    :type: float\n    '
    lock: bool = None
    ' Lock strip so that it cannot be transformed\n\n    :type: bool\n    '
    modifiers: 'SequenceModifiers' = None
    " Modifiers affecting this strip\n\n    :type: 'SequenceModifiers'\n    "
    mute: bool = None
    ' Disable strip so that it cannot be viewed in the output\n\n    :type: bool\n    '
    name: str = None
    ' \n\n    :type: str\n    '
    override_cache_settings: bool = None
    ' Override global cache settings\n\n    :type: bool\n    '
    select: bool = None
    ' \n\n    :type: bool\n    '
    select_left_handle: bool = None
    ' \n\n    :type: bool\n    '
    select_right_handle: bool = None
    ' \n\n    :type: bool\n    '
    type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    use_cache_composite: bool = None
    ' Cache intermediate composited images, for faster tweaking of stacked strips at the cost of memory usage\n\n    :type: bool\n    '
    use_cache_preprocessed: bool = None
    ' Cache preprocessed images, for faster tweaking of effects at the cost of memory usage\n\n    :type: bool\n    '
    use_cache_raw: bool = None
    ' Cache raw images read from disk, for faster tweaking of strip parameters at the cost of memory usage\n\n    :type: bool\n    '
    use_default_fade: bool = None
    ' Fade effect using the built-in default (usually make transition as long as effect strip)\n\n    :type: bool\n    '
    use_linear_modifiers: bool = None
    " Calculate modifiers in linear space instead of sequencer's space\n\n    :type: bool\n    "

    def strip_elem_from_frame(self, frame: int) -> 'SequenceElement':
        """ Return the strip element from a given frame or None

        :param frame: Frame, The frame to get the strip element from
        :type frame: int
        :rtype: 'SequenceElement'
        :return: strip element of the current frame
        """
        pass

    def swap(self, other: 'Sequence'):
        """ swap

        :param other: Other
        :type other: 'Sequence'
        """
        pass

    def move_to_meta(self, meta_sequence: 'Sequence'):
        """ move_to_meta

        :param meta_sequence: Destination Meta Sequence, Meta to move the strip into
        :type meta_sequence: 'Sequence'
        """
        pass

    def parent_meta(self) -> 'Sequence':
        """ Parent meta

        :rtype: 'Sequence'
        :return: Parent Meta
        """
        pass

    def invalidate_cache(self, type: typing.Union[str, int]):
        """ Invalidate cached images for strip and all dependent strips

        :param type: Type, Cache Type
        :type type: typing.Union[str, int]
        """
        pass

    def split(self, frame: int, split_method: typing.Union[str, int]) -> 'Sequence':
        """ Split Sequence

        :param frame: Frame where to split the strip
        :type frame: int
        :param split_method: 
        :type split_method: typing.Union[str, int]
        :rtype: 'Sequence'
        :return: Right side Sequence
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SequenceColorBalanceData(bpy_struct):
    """ Color balance parameters for a sequence strip and its modifiers
    """
    correction_method: typing.Union[str, int] = None
    ' * ``LIFT_GAMMA_GAIN`` Lift/Gamma/Gain. * ``OFFSET_POWER_SLOPE`` Offset/Power/Slope (ASC-CDL) -- ASC-CDL standard color correction.\n\n    :type: typing.Union[str, int]\n    '
    gain: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color balance gain (highlights)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    gamma: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color balance gamma (midtones)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    invert_gain: bool = None
    ' Invert the gain color\n\n    :type: bool\n    '
    invert_gamma: bool = None
    ' Invert the gamma color\n\n    :type: bool\n    '
    invert_lift: bool = None
    ' Invert the lift color\n\n    :type: bool\n    '
    invert_offset: bool = None
    ' Invert the offset color\n\n    :type: bool\n    '
    invert_power: bool = None
    ' Invert the power color\n\n    :type: bool\n    '
    invert_slope: bool = None
    ' Invert the slope color\n\n    :type: bool\n    '
    lift: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color balance lift (shadows)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    offset: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Correction for entire tonal range\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    power: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Correction for midtones\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    slope: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Correction for highlights\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SequenceCrop(bpy_struct):
    """ Cropping parameters for a sequence strip
    """
    max_x: int = None
    ' Number of pixels to crop from the right side\n\n    :type: int\n    '
    max_y: int = None
    ' Number of pixels to crop from the top\n\n    :type: int\n    '
    min_x: int = None
    ' Number of pixels to crop from the left side\n\n    :type: int\n    '
    min_y: int = None
    ' Number of pixels to crop from the bottom\n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SequenceEditor(bpy_struct):
    """ Sequence editing data for a Scene data-block
    """
    active_strip: 'Sequence' = None
    " Sequencer's active strip\n\n    :type: 'Sequence'\n    "
    channels: bpy_prop_collection['SequenceTimelineChannel'] = None
    " \n\n    :type: bpy_prop_collection['SequenceTimelineChannel']\n    "
    meta_stack: bpy_prop_collection['Sequence'] = None
    " Meta strip stack, last is currently edited meta strip\n\n    :type: bpy_prop_collection['Sequence']\n    "
    overlay_frame: int = None
    ' Number of frames to offset\n\n    :type: int\n    '
    proxy_dir: str = None
    ' \n\n    :type: str\n    '
    proxy_storage: typing.Union[str, int] = None
    ' How to store proxies for this project * ``PER_STRIP`` Per Strip -- Store proxies using per strip settings. * ``PROJECT`` Project -- Store proxies using project directory.\n\n    :type: typing.Union[str, int]\n    '
    sequences: 'SequencesTopLevel' = None
    " Top-level strips only\n\n    :type: 'SequencesTopLevel'\n    "
    sequences_all: bpy_prop_collection['Sequence'] = None
    " All strips, recursively including those inside metastrips\n\n    :type: bpy_prop_collection['Sequence']\n    "
    show_cache: bool = None
    ' Visualize cached images on the timeline\n\n    :type: bool\n    '
    show_cache_composite: bool = None
    ' Visualize cached composite images\n\n    :type: bool\n    '
    show_cache_final_out: bool = None
    ' Visualize cached complete frames\n\n    :type: bool\n    '
    show_cache_preprocessed: bool = None
    ' Visualize cached pre-processed images\n\n    :type: bool\n    '
    show_cache_raw: bool = None
    ' Visualize cached raw images\n\n    :type: bool\n    '
    show_overlay_frame: bool = None
    ' Partial overlay on top of the sequencer with a frame offset\n\n    :type: bool\n    '
    use_cache_composite: bool = None
    ' Cache intermediate composited images, for faster tweaking of stacked strips at the cost of memory usage\n\n    :type: bool\n    '
    use_cache_final: bool = None
    ' Cache final image for each frame\n\n    :type: bool\n    '
    use_cache_preprocessed: bool = None
    ' Cache preprocessed images, for faster tweaking of effects at the cost of memory usage\n\n    :type: bool\n    '
    use_cache_raw: bool = None
    ' Cache raw images read from disk, for faster tweaking of strip parameters at the cost of memory usage\n\n    :type: bool\n    '
    use_overlay_frame_lock: bool = None
    ' \n\n    :type: bool\n    '
    use_prefetch: bool = None
    ' Render frames ahead of current frame in the background for faster playback\n\n    :type: bool\n    '

    def display_stack(self, meta_sequence: 'Sequence'):
        """ Display sequences stack

        :param meta_sequence: Meta Sequence, Meta to display its stack
        :type meta_sequence: 'Sequence'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SequenceElement(bpy_struct):
    """ Sequence strip data for a single frame
    """
    filename: str = None
    ' Name of the source file\n\n    :type: str\n    '
    orig_fps: float = None
    ' Original frames per second\n\n    :type: float\n    '
    orig_height: int = None
    ' Original image height\n\n    :type: int\n    '
    orig_width: int = None
    ' Original image width\n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SequenceModifier(bpy_struct):
    """ Modifier for sequence strip
    """
    input_mask_id: 'Mask' = None
    " Mask ID used as mask input for the modifier\n\n    :type: 'Mask'\n    "
    input_mask_strip: 'Sequence' = None
    " Strip used as mask input for the modifier\n\n    :type: 'Sequence'\n    "
    input_mask_type: typing.Union[str, int] = None
    ' Type of input data used for mask * ``STRIP`` Strip -- Use sequencer strip as mask input. * ``ID`` Mask -- Use mask ID as mask input.\n\n    :type: typing.Union[str, int]\n    '
    mask_time: typing.Union[str, int] = None
    ' Time to use for the Mask animation * ``RELATIVE`` Relative -- Mask animation is offset to start of strip. * ``ABSOLUTE`` Absolute -- Mask animation is in sync with scene frame.\n\n    :type: typing.Union[str, int]\n    '
    mute: bool = None
    ' Mute this modifier\n\n    :type: bool\n    '
    name: str = None
    ' \n\n    :type: str\n    '
    show_expanded: bool = None
    ' Mute expanded settings for the modifier\n\n    :type: bool\n    '
    type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SequenceProxy(bpy_struct):
    """ Proxy parameters for a sequence strip
    """
    build_100: bool = None
    ' Build 100% proxy resolution\n\n    :type: bool\n    '
    build_25: bool = None
    ' Build 25% proxy resolution\n\n    :type: bool\n    '
    build_50: bool = None
    ' Build 50% proxy resolution\n\n    :type: bool\n    '
    build_75: bool = None
    ' Build 75% proxy resolution\n\n    :type: bool\n    '
    build_free_run: bool = None
    ' Build free run time code index\n\n    :type: bool\n    '
    build_free_run_rec_date: bool = None
    ' Build free run time code index using Record Date/Time\n\n    :type: bool\n    '
    build_record_run: bool = None
    ' Build record run time code index\n\n    :type: bool\n    '
    directory: str = None
    ' Location to store the proxy files\n\n    :type: str\n    '
    filepath: str = None
    ' Location of custom proxy file\n\n    :type: str\n    '
    quality: int = None
    ' Quality of proxies to build\n\n    :type: int\n    '
    timecode: typing.Union[str, int] = None
    ' Method for reading the inputs timecode * ``NONE`` None. * ``RECORD_RUN`` Record Run -- Use images in the order as they are recorded. * ``FREE_RUN`` Free Run -- Use global timestamp written by recording device. * ``FREE_RUN_REC_DATE`` Free Run (rec date) -- Interpolate a global timestamp using the record date and time written by recording device. * ``RECORD_RUN_NO_GAPS`` Record Run No Gaps -- Like record run, but ignore timecode, changes in framerate or dropouts.\n\n    :type: typing.Union[str, int]\n    '
    use_overwrite: bool = None
    ' Overwrite existing proxy files when building\n\n    :type: bool\n    '
    use_proxy_custom_directory: bool = None
    ' Use a custom directory to store data\n\n    :type: bool\n    '
    use_proxy_custom_file: bool = None
    ' Use a custom file to read proxy data from\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SequenceTimelineChannel(bpy_struct):
    lock: bool = None
    ' \n\n    :type: bool\n    '
    mute: bool = None
    ' \n\n    :type: bool\n    '
    name: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SequenceTransform(bpy_struct):
    """ Transform parameters for a sequence strip
    """
    filter: typing.Union[str, int] = None
    ' Type of filter to use for image transformation\n\n    :type: typing.Union[str, int]\n    '
    offset_x: float = None
    ' Move along X axis\n\n    :type: float\n    '
    offset_y: float = None
    ' Move along Y axis\n\n    :type: float\n    '
    origin: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Origin of image for transformation\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    rotation: float = None
    ' Rotate around image center\n\n    :type: float\n    '
    scale_x: float = None
    ' Scale along X axis\n\n    :type: float\n    '
    scale_y: float = None
    ' Scale along Y axis\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SequencerPreviewOverlay(bpy_struct):
    show_annotation: bool = None
    ' Show annotations for this view\n\n    :type: bool\n    '
    show_cursor: bool = None
    ' \n\n    :type: bool\n    '
    show_image_outline: bool = None
    ' \n\n    :type: bool\n    '
    show_metadata: bool = None
    ' Show metadata of first visible strip\n\n    :type: bool\n    '
    show_safe_areas: bool = None
    ' Show TV title safe and action safe areas in preview\n\n    :type: bool\n    '
    show_safe_center: bool = None
    ' Show safe areas to fit content in a different aspect ratio\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SequencerTimelineOverlay(bpy_struct):
    show_fcurves: bool = None
    ' Display strip opacity/volume curve\n\n    :type: bool\n    '
    show_grid: bool = None
    ' Show vertical grid lines\n\n    :type: bool\n    '
    show_strip_duration: bool = None
    ' \n\n    :type: bool\n    '
    show_strip_name: bool = None
    ' \n\n    :type: bool\n    '
    show_strip_offset: bool = None
    ' Display strip in/out offsets\n\n    :type: bool\n    '
    show_strip_source: bool = None
    ' Display path to source file, or name of source datablock\n\n    :type: bool\n    '
    show_strip_tag_color: bool = None
    ' Display the strip color tags in the sequencer\n\n    :type: bool\n    '
    show_thumbnails: bool = None
    ' Show strip thumbnails\n\n    :type: bool\n    '
    waveform_display_type: typing.Union[str, int] = None
    " How Waveforms are displayed * ``NO_WAVEFORMS`` Waveforms Off -- Don't display waveforms for any sound strips. * ``ALL_WAVEFORMS`` Waveforms On -- Display waveforms for all sound strips. * ``DEFAULT_WAVEFORMS`` Use Strip Option -- Display waveforms depending on strip setting.\n\n    :type: typing.Union[str, int]\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SequencerToolSettings(bpy_struct):
    fit_method: typing.Union[str, int] = None
    ' Scale fit method * ``FIT`` Scale to Fit -- Scale image to fit within the canvas. * ``FILL`` Scale to Fill -- Scale image to completely fill the canvas. * ``STRETCH`` Stretch to Fill -- Stretch image to fill the canvas. * ``ORIGINAL`` Use Original Size -- Keep image at its original size.\n\n    :type: typing.Union[str, int]\n    '
    overlap_mode: typing.Union[str, int] = None
    ' How to resolve overlap after transformation * ``EXPAND`` Expand -- Move strips so transformed strips fits. * ``OVERWRITE`` Overwrite -- Trim or split strips to resolve overlap. * ``SHUFFLE`` Shuffle -- Move transformed strips to nearest free space to resolve overlap.\n\n    :type: typing.Union[str, int]\n    '
    pivot_point: typing.Union[str, int] = None
    " Rotation or scaling pivot point * ``CENTER`` Bounding Box Center. * ``MEDIAN`` Median Point. * ``CURSOR`` 2D Cursor -- Pivot around the 2D cursor. * ``INDIVIDUAL_ORIGINS`` Individual Origins -- Pivot around each selected island's own median point.\n\n    :type: typing.Union[str, int]\n    "
    snap_distance: int = None
    ' Maximum distance for snapping in pixels\n\n    :type: int\n    '
    snap_ignore_muted: bool = None
    " Don't snap to hidden strips\n\n    :type: bool\n    "
    snap_ignore_sound: bool = None
    " Don't snap to sound strips\n\n    :type: bool\n    "
    snap_to_current_frame: bool = None
    ' Snap to current frame\n\n    :type: bool\n    '
    snap_to_hold_offset: bool = None
    ' Snap to strip hold offsets\n\n    :type: bool\n    '
    use_snap_current_frame_to_strips: bool = None
    ' Snap current frame to strip start or end\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderFx(bpy_struct):
    """ Effect affecting the grease pencil object
    """
    name: str = None
    ' Effect name\n\n    :type: str\n    '
    show_expanded: bool = None
    ' Set effect expansion in the user interface\n\n    :type: bool\n    '
    show_in_editmode: bool = None
    ' Display effect in Edit mode\n\n    :type: bool\n    '
    show_render: bool = None
    ' Use effect during render\n\n    :type: bool\n    '
    show_viewport: bool = None
    ' Display effect in viewport\n\n    :type: bool\n    '
    type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShapeKey(bpy_struct):
    """ Shape key in a shape keys data-block
    """
    data: bpy_prop_collection['UnknownType'] = None
    " \n\n    :type: bpy_prop_collection['UnknownType']\n    "
    frame: float = None
    ' Frame for absolute keys\n\n    :type: float\n    '
    interpolation: typing.Union[str, int] = None
    ' Interpolation type for absolute shape keys\n\n    :type: typing.Union[str, int]\n    '
    mute: bool = None
    ' Toggle this shape key\n\n    :type: bool\n    '
    name: str = None
    ' Name of Shape Key\n\n    :type: str\n    '
    relative_key: 'ShapeKey' = None
    " Shape used as a relative key\n\n    :type: 'ShapeKey'\n    "
    slider_max: float = None
    ' Maximum for slider\n\n    :type: float\n    '
    slider_min: float = None
    ' Minimum for slider\n\n    :type: float\n    '
    value: float = None
    ' Value of shape key at the current frame\n\n    :type: float\n    '
    vertex_group: str = None
    ' Vertex weight group, to blend with basis shape\n\n    :type: str\n    '

    def normals_vertex_get(self) -> float:
        """ Compute local space vertices' normals for this shape key

        :rtype: float
        :return: normals
        """
        pass

    def normals_polygon_get(self) -> float:
        """ Compute local space faces' normals for this shape key

        :rtype: float
        :return: normals
        """
        pass

    def normals_split_get(self) -> float:
        """ Compute local space face corners' normals for this shape key

        :rtype: float
        :return: normals
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShapeKeyBezierPoint(bpy_struct):
    """ Point in a shape key for Bezier curves
    """
    co: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    handle_left: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    handle_right: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    radius: float = None
    ' Radius for beveling\n\n    :type: float\n    '
    tilt: float = None
    ' Tilt in 3D View\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShapeKeyCurvePoint(bpy_struct):
    """ Point in a shape key for curves
    """
    co: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    radius: float = None
    ' Radius for beveling\n\n    :type: float\n    '
    tilt: float = None
    ' Tilt in 3D View\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShapeKeyPoint(bpy_struct):
    """ Point in a shape key
    """
    co: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SoftBodySettings(bpy_struct):
    """ Soft body simulation settings for an object
    """
    aero: int = None
    " Make edges 'sail'\n\n    :type: int\n    "
    aerodynamics_type: typing.Union[str, int] = None
    ' Method of calculating aerodynamic interaction * ``SIMPLE`` Simple -- Edges receive a drag force from surrounding media. * ``LIFT_FORCE`` Lift Force -- Edges receive a lift force when passing through surrounding media.\n\n    :type: typing.Union[str, int]\n    '
    ball_damp: float = None
    ' Blending to inelastic collision\n\n    :type: float\n    '
    ball_size: float = None
    ' Absolute ball size or factor if not manually adjusted\n\n    :type: float\n    '
    ball_stiff: float = None
    ' Ball inflating pressure\n\n    :type: float\n    '
    bend: float = None
    ' Bending Stiffness\n\n    :type: float\n    '
    choke: int = None
    " 'Viscosity' inside collision target\n\n    :type: int\n    "
    collision_collection: 'Collection' = None
    " Limit colliders to this collection\n\n    :type: 'Collection'\n    "
    collision_type: typing.Union[str, int] = None
    ' Choose Collision Type * ``MANUAL`` Manual -- Manual adjust. * ``AVERAGE`` Average -- Average Spring length \\* Ball Size. * ``MINIMAL`` Minimal -- Minimal Spring length \\* Ball Size. * ``MAXIMAL`` Maximal -- Maximal Spring length \\* Ball Size. * ``MINMAX`` AvMinMax -- (Min+Max)/2 \\* Ball Size.\n\n    :type: typing.Union[str, int]\n    '
    damping: float = None
    ' Edge spring friction\n\n    :type: float\n    '
    effector_weights: 'EffectorWeights' = None
    " \n\n    :type: 'EffectorWeights'\n    "
    error_threshold: float = None
    ' The Runge-Kutta ODE solver error limit, low value gives more precision, high values speed\n\n    :type: float\n    '
    friction: float = None
    ' General media friction for point movements\n\n    :type: float\n    '
    fuzzy: int = None
    ' Fuzziness while on collision, high values make collision handling faster but less stable\n\n    :type: int\n    '
    goal_default: float = None
    ' Default Goal (vertex target position) value\n\n    :type: float\n    '
    goal_friction: float = None
    ' Goal (vertex target position) friction\n\n    :type: float\n    '
    goal_max: float = None
    ' Goal maximum, vertex weights are scaled to match this range\n\n    :type: float\n    '
    goal_min: float = None
    ' Goal minimum, vertex weights are scaled to match this range\n\n    :type: float\n    '
    goal_spring: float = None
    ' Goal (vertex target position) spring stiffness\n\n    :type: float\n    '
    gravity: float = None
    ' Apply gravitation to point movement\n\n    :type: float\n    '
    location_mass_center: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Location of center of mass\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    mass: float = None
    ' General Mass value\n\n    :type: float\n    '
    plastic: int = None
    ' Permanent deform\n\n    :type: int\n    '
    pull: float = None
    ' Edge spring stiffness when longer than rest length\n\n    :type: float\n    '
    push: float = None
    ' Edge spring stiffness when shorter than rest length\n\n    :type: float\n    '
    rotation_estimate: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float], typing.Tuple[float, float, float], typing.Tuple[float, float, float]], 'mathutils.Matrix'] = None
    " Estimated rotation matrix\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float], typing.Tuple[float, float, float], typing.Tuple[float, float, float]], 'mathutils.Matrix']\n    "
    scale_estimate: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float], typing.Tuple[float, float, float], typing.Tuple[float, float, float]], 'mathutils.Matrix'] = None
    " Estimated scale matrix\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float], typing.Tuple[float, float, float], typing.Tuple[float, float, float]], 'mathutils.Matrix']\n    "
    shear: float = None
    ' Shear Stiffness\n\n    :type: float\n    '
    speed: float = None
    ' Tweak timing for physics to control frequency and speed\n\n    :type: float\n    '
    spring_length: int = None
    ' Alter spring length to shrink/blow up (unit %) 0 to disable\n\n    :type: int\n    '
    step_max: int = None
    ' Maximal # solver steps/frame\n\n    :type: int\n    '
    step_min: int = None
    ' Minimal # solver steps/frame\n\n    :type: int\n    '
    use_auto_step: bool = None
    ' Use velocities for automagic step sizes\n\n    :type: bool\n    '
    use_diagnose: bool = None
    ' Turn on SB diagnose console prints\n\n    :type: bool\n    '
    use_edge_collision: bool = None
    ' Edges collide too\n\n    :type: bool\n    '
    use_edges: bool = None
    ' Use Edges as springs\n\n    :type: bool\n    '
    use_estimate_matrix: bool = None
    ' Store the estimated transforms in the soft body settings\n\n    :type: bool\n    '
    use_face_collision: bool = None
    ' Faces collide too, can be very slow\n\n    :type: bool\n    '
    use_goal: bool = None
    ' Define forces for vertices to stick to animated position\n\n    :type: bool\n    '
    use_self_collision: bool = None
    ' Enable naive vertex ball self collision\n\n    :type: bool\n    '
    use_stiff_quads: bool = None
    ' Add diagonal springs on 4-gons\n\n    :type: bool\n    '
    vertex_group_goal: str = None
    ' Control point weight values\n\n    :type: str\n    '
    vertex_group_mass: str = None
    ' Control point mass values\n\n    :type: str\n    '
    vertex_group_spring: str = None
    ' Control point spring strength values\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Space(bpy_struct):
    """ Space data for a screen area
    """
    show_locked_time: bool = None
    ' Synchronize the visible timeline range with other time-based editors\n\n    :type: bool\n    '
    show_region_header: bool = None
    ' \n\n    :type: bool\n    '
    type: typing.Union[str, int] = None
    ' Space data type\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def draw_handler_add(self, callback: typing.Any, args: typing.Tuple, region_type: str, draw_type: str) -> typing.Any:
        """ Add a new draw handler to this space type. It will be called every time the specified region in the space type will be drawn. Note: All arguments are positional only for now.

        :param callback: A function that will be called when the region is drawn. It gets the specified arguments as input.
        :type callback: typing.Any
        :param args: Arguments that will be passed to the callback.
        :type args: typing.Tuple
        :param region_type: `bpy.types.Region.type`)
        :type region_type: str
        :param draw_type: Usually ``POST_PIXEL`` for 2D drawing and ``POST_VIEW`` for 3D drawing. In some cases ``PRE_VIEW`` can be used. ``BACKDROP`` can be used for backdrops in the node editor.
        :type draw_type: str
        :rtype: typing.Any
        :return: Handler that can be removed later on.
        """
        pass

    def draw_handler_remove(self, handler: typing.Any, region_type: str):
        """ Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any
        :param region_type: Region type the callback was added to.
        :type region_type: str
        """
        pass

class SpaceImageOverlay(bpy_struct):
    """ Settings for display of overlays in the UV/Image editor
    """
    show_grid_background: bool = None
    ' Show the grid background and borders\n\n    :type: bool\n    '
    show_overlays: bool = None
    ' Display overlays like UV Maps and Metadata\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SpaceNodeOverlay(bpy_struct):
    """ Settings for display of overlays in the Node Editor
    """
    show_context_path: bool = None
    " Display breadcrumbs for the editor's context\n\n    :type: bool\n    "
    show_named_attributes: bool = None
    ' Show when nodes are using named attributes\n\n    :type: bool\n    '
    show_overlays: bool = None
    ' Display overlays like colored or dashed wires\n\n    :type: bool\n    '
    show_timing: bool = None
    " Display each node's last execution time\n\n    :type: bool\n    "
    show_wire_color: bool = None
    ' Color node links based on their connected sockets\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SpaceUVEditor(bpy_struct):
    """ UV editor data for the image editor space
    """
    custom_grid_subdivisions: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Number of grid units in UV space that make one UV Unit\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    display_stretch_type: typing.Union[str, int] = None
    ' Type of stretch to display * ``ANGLE`` Angle -- Angular distortion between UV and 3D angles. * ``AREA`` Area -- Area distortion between UV and 3D faces.\n\n    :type: typing.Union[str, int]\n    '
    edge_display_type: typing.Union[str, int] = None
    ' Display style for UV edges * ``OUTLINE`` Outline -- Display white edges with black outline. * ``DASH`` Dash -- Display dashed black-white edges. * ``BLACK`` Black -- Display black edges. * ``WHITE`` White -- Display white edges.\n\n    :type: typing.Union[str, int]\n    '
    grid_shape_source: typing.Union[str, int] = None
    ' Specify source for the grid shape * ``DYNAMIC`` Dynamic -- Dynamic grid. * ``FIXED`` Fixed -- Manually set grid divisions. * ``PIXEL`` Pixel -- Grid aligns with pixels from image.\n\n    :type: typing.Union[str, int]\n    '
    lock_bounds: bool = None
    ' Constraint to stay within the image bounds while editing\n\n    :type: bool\n    '
    pixel_round_mode: typing.Union[str, int] = None
    " Round UVs to pixels while editing * ``DISABLED`` Disabled -- Don't round to pixels. * ``CORNER`` Corner -- Round to pixel corners. * ``CENTER`` Center -- Round to pixel centers.\n\n    :type: typing.Union[str, int]\n    "
    show_faces: bool = None
    ' Display faces over the image\n\n    :type: bool\n    '
    show_grid_over_image: bool = None
    ' Show the grid over the image\n\n    :type: bool\n    '
    show_metadata: bool = None
    ' Display metadata properties of the image\n\n    :type: bool\n    '
    show_modified_edges: bool = None
    ' Display edges after modifiers are applied\n\n    :type: bool\n    '
    show_pixel_coords: bool = None
    ' Display UV coordinates in pixels rather than from 0.0 to 1.0\n\n    :type: bool\n    '
    show_stretch: bool = None
    ' Display faces colored according to the difference in shape between UVs and their 3D coordinates (blue for low distortion, red for high distortion)\n\n    :type: bool\n    '
    show_texpaint: bool = None
    ' Display overlay of texture paint uv layer\n\n    :type: bool\n    '
    tile_grid_shape: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' How many tiles will be shown in the background\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    use_live_unwrap: bool = None
    ' Continuously unwrap the selected UV island while transforming pinned vertices\n\n    :type: bool\n    '
    uv_opacity: float = None
    ' Opacity of UV overlays\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Spline(bpy_struct):
    """ Element of a curve, either NURBS, Bezier or Polyline or a character with text objects
    """
    bezier_points: 'SplineBezierPoints' = None
    " Collection of points for Bezier curves only\n\n    :type: 'SplineBezierPoints'\n    "
    character_index: int = None
    ' Location of this character in the text data (only for text curves)\n\n    :type: int\n    '
    hide: bool = None
    ' Hide this curve in Edit mode\n\n    :type: bool\n    '
    material_index: int = None
    ' Material slot index of this curve\n\n    :type: int\n    '
    order_u: int = None
    ' NURBS order in the U direction. Higher values make each point influence a greater area, but have worse performance\n\n    :type: int\n    '
    order_v: int = None
    ' NURBS order in the V direction. Higher values make each point influence a greater area, but have worse performance\n\n    :type: int\n    '
    point_count_u: int = None
    ' Total number points for the curve or surface in the U direction\n\n    :type: int\n    '
    point_count_v: int = None
    ' Total number points for the surface on the V direction\n\n    :type: int\n    '
    points: 'SplinePoints' = None
    " Collection of points that make up this poly or nurbs spline\n\n    :type: 'SplinePoints'\n    "
    radius_interpolation: typing.Union[str, int] = None
    ' The type of radius interpolation for Bezier curves\n\n    :type: typing.Union[str, int]\n    '
    resolution_u: int = None
    ' Curve or Surface subdivisions per segment\n\n    :type: int\n    '
    resolution_v: int = None
    ' Surface subdivisions per segment\n\n    :type: int\n    '
    tilt_interpolation: typing.Union[str, int] = None
    ' The type of tilt interpolation for 3D, Bezier curves\n\n    :type: typing.Union[str, int]\n    '
    type: typing.Union[str, int] = None
    ' The interpolation type for this curve element\n\n    :type: typing.Union[str, int]\n    '
    use_bezier_u: bool = None
    ' Make this nurbs curve or surface act like a Bezier spline in the U direction\n\n    :type: bool\n    '
    use_bezier_v: bool = None
    ' Make this nurbs surface act like a Bezier spline in the V direction\n\n    :type: bool\n    '
    use_cyclic_u: bool = None
    ' Make this curve or surface a closed loop in the U direction\n\n    :type: bool\n    '
    use_cyclic_v: bool = None
    ' Make this surface a closed loop in the V direction\n\n    :type: bool\n    '
    use_endpoint_u: bool = None
    ' Make this nurbs curve or surface meet the endpoints in the U direction\n\n    :type: bool\n    '
    use_endpoint_v: bool = None
    ' Make this nurbs surface meet the endpoints in the V direction\n\n    :type: bool\n    '
    use_smooth: bool = None
    ' Smooth the normals of the surface or beveled curve\n\n    :type: bool\n    '

    def calc_length(self, resolution: int=0) -> float:
        """ Calculate spline length

        :param resolution: Resolution, Spline resolution to be used, 0 defaults to the resolution_u
        :type resolution: int
        :rtype: float
        :return: Length, Length of the polygonaly approximated spline
        """
        pass

    def valid_message(self, direction: int) -> str:
        """ Return the message

        :param direction: Direction, The direction where 0-1 maps to U-V
        :type direction: int
        :rtype: str
        :return: Return value, The message or an empty string when there is no error
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SplinePoint(bpy_struct):
    """ Spline point without handles
    """
    co: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Point coordinates\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    hide: bool = None
    ' Visibility status\n\n    :type: bool\n    '
    radius: float = None
    ' Radius for beveling\n\n    :type: float\n    '
    select: bool = None
    ' Selection status\n\n    :type: bool\n    '
    tilt: float = None
    ' Tilt in 3D View\n\n    :type: float\n    '
    weight: float = None
    ' NURBS weight\n\n    :type: float\n    '
    weight_softbody: float = None
    ' Softbody goal weight\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SpreadsheetColumn(bpy_struct):
    """ Persistent data associated with a spreadsheet column
    """
    data_type: typing.Union[str, int] = None
    ' The data type of the corresponding column visible in the spreadsheet\n\n    :type: typing.Union[str, int]\n    '
    id: 'SpreadsheetColumnID' = None
    " Data used to identify the corresponding data from the data source\n\n    :type: 'SpreadsheetColumnID'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SpreadsheetColumnID(bpy_struct):
    """ Data used to identify a spreadsheet column
    """
    name: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SpreadsheetRowFilter(bpy_struct):
    column_name: str = None
    ' \n\n    :type: str\n    '
    enabled: bool = None
    ' \n\n    :type: bool\n    '
    operation: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    show_expanded: bool = None
    ' \n\n    :type: bool\n    '
    threshold: float = None
    ' How close float values need to be to be equal\n\n    :type: float\n    '
    value_boolean: bool = None
    ' \n\n    :type: bool\n    '
    value_color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    value_float: float = None
    ' \n\n    :type: float\n    '
    value_float2: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    value_float3: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    value_int: int = None
    ' \n\n    :type: int\n    '
    value_int8: int = None
    ' \n\n    :type: int\n    '
    value_string: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Stereo3dDisplay(bpy_struct):
    """ Settings for stereo 3D display
    """
    anaglyph_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    display_mode: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    interlace_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    use_interlace_swap: bool = None
    ' Swap left and right stereo channels\n\n    :type: bool\n    '
    use_sidebyside_crosseyed: bool = None
    ' Right eye should see left image and vice versa\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Stereo3dFormat(bpy_struct):
    """ Settings for stereo output
    """
    anaglyph_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    display_mode: typing.Union[str, int] = None
    ' * ``ANAGLYPH`` Anaglyph -- Render views for left and right eyes as two differently filtered colors in a single image (anaglyph glasses are required). * ``INTERLACE`` Interlace -- Render views for left and right eyes interlaced in a single image (3D-ready monitor is required). * ``SIDEBYSIDE`` Side-by-Side -- Render views for left and right eyes side-by-side. * ``TOPBOTTOM`` Top-Bottom -- Render views for left and right eyes one above another.\n\n    :type: typing.Union[str, int]\n    '
    interlace_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    use_interlace_swap: bool = None
    ' Swap left and right stereo channels\n\n    :type: bool\n    '
    use_sidebyside_crosseyed: bool = None
    ' Right eye should see left image and vice versa\n\n    :type: bool\n    '
    use_squeezed_frame: bool = None
    ' Combine both views in a squeezed image\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class StringAttributeValue(bpy_struct):
    """ String value in geometry attribute
    """
    value: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Struct(bpy_struct):
    """ RNA structure definition
    """
    base: 'Struct' = None
    " Struct definition this is derived from\n\n    :type: 'Struct'\n    "
    description: str = None
    " Description of the Struct's purpose\n\n    :type: str\n    "
    functions: bpy_prop_collection['Function'] = None
    " \n\n    :type: bpy_prop_collection['Function']\n    "
    identifier: str = None
    ' Unique name used in the code and scripting\n\n    :type: str\n    '
    name: str = None
    ' Human readable name\n\n    :type: str\n    '
    name_property: 'StringProperty' = None
    " Property that gives the name of the struct\n\n    :type: 'StringProperty'\n    "
    nested: 'Struct' = None
    " Struct in which this struct is always nested, and to which it logically belongs\n\n    :type: 'Struct'\n    "
    properties: bpy_prop_collection['Property'] = None
    " Properties in the struct\n\n    :type: bpy_prop_collection['Property']\n    "
    property_tags: bpy_prop_collection['EnumPropertyItem'] = None
    " Tags that properties can use to influence behavior\n\n    :type: bpy_prop_collection['EnumPropertyItem']\n    "
    translation_context: str = None
    " Translation context of the struct's name\n\n    :type: str\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class StudioLight(bpy_struct):
    """ Studio light
    """
    has_specular_highlight_pass: bool = None
    ' Studio light image file has separate "diffuse" and "specular" passes\n\n    :type: bool\n    '
    index: int = None
    ' \n\n    :type: int\n    '
    is_user_defined: bool = None
    ' \n\n    :type: bool\n    '
    light_ambient: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of the ambient light that uniformly lit the scene\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    name: str = None
    ' \n\n    :type: str\n    '
    path: str = None
    ' \n\n    :type: str\n    '
    path_irr_cache: str = None
    ' Path where the irradiance cache is stored\n\n    :type: str\n    '
    path_sh_cache: str = None
    ' Path where the spherical harmonics cache is stored\n\n    :type: str\n    '
    solid_lights: bpy_prop_collection['UserSolidLight'] = None
    " Lights user to display objects in solid draw mode\n\n    :type: bpy_prop_collection['UserSolidLight']\n    "
    spherical_harmonics_coefficients: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]]] = None
    ' \n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]]]\n    '
    type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TexMapping(bpy_struct):
    """ Texture coordinate mapping settings
    """
    mapping: typing.Union[str, int] = None
    ' * ``FLAT`` Flat -- Map X and Y coordinates directly. * ``CUBE`` Cube -- Map using the normal vector. * ``TUBE`` Tube -- Map with Z as central axis. * ``SPHERE`` Sphere -- Map with Z as central axis.\n\n    :type: typing.Union[str, int]\n    '
    mapping_x: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    mapping_y: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    mapping_z: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    max: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Maximum value for clipping\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    min: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Minimum value for clipping\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    rotation: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler']\n    "
    scale: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    translation: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    use_max: bool = None
    ' Whether to use maximum clipping value\n\n    :type: bool\n    '
    use_min: bool = None
    ' Whether to use minimum clipping value\n\n    :type: bool\n    '
    vector_type: typing.Union[str, int] = None
    ' Type of vector that the mapping transforms\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TexPaintSlot(bpy_struct):
    """ Slot that contains information about texture painting
    """
    icon_value: int = None
    ' Paint slot icon\n\n    :type: int\n    '
    is_valid: bool = None
    ' Slot has a valid image and UV map\n\n    :type: bool\n    '
    name: str = None
    ' Name of the slot\n\n    :type: str\n    '
    uv_layer: str = None
    ' Name of UV map\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextBox(bpy_struct):
    """ Text bounding box for layout
    """
    height: float = None
    ' \n\n    :type: float\n    '
    width: float = None
    ' \n\n    :type: float\n    '
    x: float = None
    ' \n\n    :type: float\n    '
    y: float = None
    ' \n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextCharacterFormat(bpy_struct):
    """ Text character formatting settings
    """
    kerning: int = None
    ' Spacing between characters\n\n    :type: int\n    '
    material_index: int = None
    ' Material slot index of this character\n\n    :type: int\n    '
    use_bold: bool = None
    ' \n\n    :type: bool\n    '
    use_italic: bool = None
    ' \n\n    :type: bool\n    '
    use_small_caps: bool = None
    ' \n\n    :type: bool\n    '
    use_underline: bool = None
    ' \n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextLine(bpy_struct):
    """ Line of text in a Text data-block
    """
    body: str = None
    ' Text in the line\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureSlot(bpy_struct):
    """ Texture slot defining the mapping and influence of a texture
    """
    blend_type: typing.Union[str, int] = None
    ' Mode used to apply the texture\n\n    :type: typing.Union[str, int]\n    '
    color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Default color for textures that don't return RGB or when RGB to intensity is enabled\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    default_value: float = None
    ' Value to use for Ref, Spec, Amb, Emit, Alpha, RayMir, TransLu and Hard\n\n    :type: float\n    '
    name: str = None
    ' Texture slot name\n\n    :type: str\n    '
    offset: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Fine tune of the texture mapping X, Y and Z locations\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    output_node: typing.Union[str, int] = None
    ' Which output node to use, for node-based textures\n\n    :type: typing.Union[str, int]\n    '
    scale: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Set scaling for the texture's X, Y and Z sizes\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    texture: 'Texture' = None
    " Texture data-block used by this texture slot\n\n    :type: 'Texture'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Theme(bpy_struct):
    """ User interface styling and color settings
    """
    bone_color_sets: bpy_prop_collection['ThemeBoneColorSet'] = None
    " \n\n    :type: bpy_prop_collection['ThemeBoneColorSet']\n    "
    clip_editor: 'ThemeClipEditor' = None
    " \n\n    :type: 'ThemeClipEditor'\n    "
    collection_color: bpy_prop_collection['ThemeCollectionColor'] = None
    " \n\n    :type: bpy_prop_collection['ThemeCollectionColor']\n    "
    console: 'ThemeConsole' = None
    " \n\n    :type: 'ThemeConsole'\n    "
    dopesheet_editor: 'ThemeDopeSheet' = None
    " \n\n    :type: 'ThemeDopeSheet'\n    "
    file_browser: 'ThemeFileBrowser' = None
    " \n\n    :type: 'ThemeFileBrowser'\n    "
    graph_editor: 'ThemeGraphEditor' = None
    " \n\n    :type: 'ThemeGraphEditor'\n    "
    image_editor: 'ThemeImageEditor' = None
    " \n\n    :type: 'ThemeImageEditor'\n    "
    info: 'ThemeInfo' = None
    " \n\n    :type: 'ThemeInfo'\n    "
    name: str = None
    ' Name of the theme\n\n    :type: str\n    '
    nla_editor: 'ThemeNLAEditor' = None
    " \n\n    :type: 'ThemeNLAEditor'\n    "
    node_editor: 'ThemeNodeEditor' = None
    " \n\n    :type: 'ThemeNodeEditor'\n    "
    outliner: 'ThemeOutliner' = None
    " \n\n    :type: 'ThemeOutliner'\n    "
    preferences: 'ThemePreferences' = None
    " \n\n    :type: 'ThemePreferences'\n    "
    properties: 'ThemeProperties' = None
    " \n\n    :type: 'ThemeProperties'\n    "
    sequence_editor: 'ThemeSequenceEditor' = None
    " \n\n    :type: 'ThemeSequenceEditor'\n    "
    spreadsheet: 'ThemeSpreadsheet' = None
    " \n\n    :type: 'ThemeSpreadsheet'\n    "
    statusbar: 'ThemeStatusBar' = None
    " \n\n    :type: 'ThemeStatusBar'\n    "
    strip_color: bpy_prop_collection['ThemeStripColor'] = None
    " \n\n    :type: bpy_prop_collection['ThemeStripColor']\n    "
    text_editor: 'ThemeTextEditor' = None
    " \n\n    :type: 'ThemeTextEditor'\n    "
    theme_area: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    topbar: 'ThemeTopBar' = None
    " \n\n    :type: 'ThemeTopBar'\n    "
    user_interface: 'ThemeUserInterface' = None
    " \n\n    :type: 'ThemeUserInterface'\n    "
    view_3d: 'ThemeView3D' = None
    " \n\n    :type: 'ThemeView3D'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeBoneColorSet(bpy_struct):
    """ Theme settings for bone color sets
    """
    active: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color used for active bones\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    normal: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color used for the surface of bones\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    select: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color used for selected bones\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    show_colored_constraints: bool = None
    ' Allow the use of colors indicating constraints/keyed status\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeClipEditor(bpy_struct):
    """ Theme settings for the Movie Clip Editor
    """
    active_marker: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of active marker\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    disabled_marker: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of disabled marker\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    frame_current: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    grid: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    handle_align: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_auto: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_auto_clamped: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_free: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_sel_align: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_sel_auto: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_sel_auto_clamped: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_sel_free: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_vertex: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_vertex_select: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_vertex_size: int = None
    ' \n\n    :type: int\n    '
    locked_marker: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of locked marker\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    marker: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of marker\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    marker_outline: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of marker's outline\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    metadatabg: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    metadatatext: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    path_after: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of path after current frame\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    path_before: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of path before current frame\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    path_keyframe_after: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of path after current frame\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    path_keyframe_before: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of path before current frame\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    selected_marker: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of selected marker\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    space: 'ThemeSpaceGeneric' = None
    " Settings for space\n\n    :type: 'ThemeSpaceGeneric'\n    "
    space_list: 'ThemeSpaceListGeneric' = None
    " Settings for space list\n\n    :type: 'ThemeSpaceListGeneric'\n    "
    strips: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    strips_selected: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    time_marker_line: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    time_marker_line_selected: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    time_scrub_background: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeCollectionColor(bpy_struct):
    """ Theme settings for collection colors
    """
    color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Collection Color Tag\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeConsole(bpy_struct):
    """ Theme settings for the Console
    """
    cursor: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    line_error: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    line_info: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    line_input: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    line_output: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    select: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    space: 'ThemeSpaceGeneric' = None
    " Settings for space\n\n    :type: 'ThemeSpaceGeneric'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeDopeSheet(bpy_struct):
    """ Theme settings for the Dope Sheet
    """
    active_channels_group: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    channel_group: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    channels: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    channels_selected: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    dopesheet_channel: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    dopesheet_subchannel: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    frame_current: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    grid: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    interpolation_line: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color of lines showing non-bezier interpolation modes\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    keyframe: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of Keyframe\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    keyframe_border: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color of keyframe border\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    keyframe_border_selected: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color of selected keyframe border\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    keyframe_breakdown: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of breakdown keyframe\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    keyframe_breakdown_selected: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of selected breakdown keyframe\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    keyframe_extreme: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of extreme keyframe\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    keyframe_extreme_selected: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of selected extreme keyframe\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    keyframe_jitter: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of jitter keyframe\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    keyframe_jitter_selected: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of selected jitter keyframe\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    keyframe_movehold: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of moving hold keyframe\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    keyframe_movehold_selected: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of selected moving hold keyframe\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    keyframe_scale_factor: float = None
    ' Scale factor for adjusting the height of keyframes\n\n    :type: float\n    '
    keyframe_selected: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of selected keyframe\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    long_key: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    long_key_selected: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    preview_range: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color of preview range overlay\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    space: 'ThemeSpaceGeneric' = None
    " Settings for space\n\n    :type: 'ThemeSpaceGeneric'\n    "
    space_list: 'ThemeSpaceListGeneric' = None
    " Settings for space list\n\n    :type: 'ThemeSpaceListGeneric'\n    "
    summary: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color of summary channel\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    time_marker_line: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    time_marker_line_selected: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    time_scrub_background: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    value_sliders: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    view_sliders: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeFileBrowser(bpy_struct):
    """ Theme settings for the File Browser
    """
    row_alternate: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Overlay color on every other row\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    selected_file: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    space: 'ThemeSpaceGeneric' = None
    " Settings for space\n\n    :type: 'ThemeSpaceGeneric'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeFontStyle(bpy_struct):
    """ Theme settings for Font
    """
    points: float = None
    ' Font size in points\n\n    :type: float\n    '
    shadow: int = None
    ' Shadow size (0, 3 and 5 supported)\n\n    :type: int\n    '
    shadow_alpha: float = None
    ' \n\n    :type: float\n    '
    shadow_offset_x: int = None
    ' Shadow offset in pixels\n\n    :type: int\n    '
    shadow_offset_y: int = None
    ' Shadow offset in pixels\n\n    :type: int\n    '
    shadow_value: float = None
    ' Shadow color in gray value\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeGradientColors(bpy_struct):
    """ Theme settings for background colors and gradient
    """
    background_type: typing.Union[str, int] = None
    ' Type of background in the 3D viewport * ``SINGLE_COLOR`` Single Color -- Use a solid color as viewport background. * ``LINEAR`` Linear Gradient -- Use a screen space vertical linear gradient as viewport background. * ``RADIAL`` Vignette -- Use a radial gradient as viewport background.\n\n    :type: typing.Union[str, int]\n    '
    gradient: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    high_gradient: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeGraphEditor(bpy_struct):
    """ Theme settings for the graph editor
    """
    active_channels_group: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    channel_group: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    channels_region: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    dopesheet_channel: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    dopesheet_subchannel: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    frame_current: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    grid: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_align: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_auto: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_auto_clamped: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_free: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_sel_align: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_sel_auto: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_sel_auto_clamped: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_sel_free: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_sel_vect: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_vect: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_vertex: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_vertex_select: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_vertex_size: int = None
    ' \n\n    :type: int\n    '
    lastsel_point: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    preview_range: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color of preview range overlay\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    space: 'ThemeSpaceGeneric' = None
    " Settings for space\n\n    :type: 'ThemeSpaceGeneric'\n    "
    space_list: 'ThemeSpaceListGeneric' = None
    " Settings for space list\n\n    :type: 'ThemeSpaceListGeneric'\n    "
    time_marker_line: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    time_marker_line_selected: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    time_scrub_background: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    vertex: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    vertex_active: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    vertex_bevel: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    vertex_select: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    vertex_size: int = None
    ' \n\n    :type: int\n    '
    vertex_unreferenced: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    window_sliders: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeImageEditor(bpy_struct):
    """ Theme settings for the Image Editor
    """
    edge_select: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    editmesh_active: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    face: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    face_back: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    face_dot: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    face_front: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    face_select: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    facedot_size: int = None
    ' \n\n    :type: int\n    '
    frame_current: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    freestyle_face_mark: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    grid: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    handle_align: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_auto: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_auto_clamped: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_free: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_sel_align: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_sel_auto: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_sel_auto_clamped: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_sel_free: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_vertex: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_vertex_select: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_vertex_size: int = None
    ' \n\n    :type: int\n    '
    metadatabg: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    metadatatext: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    paint_curve_handle: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    paint_curve_pivot: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    preview_stitch_active: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    preview_stitch_edge: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    preview_stitch_face: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    preview_stitch_stitchable: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    preview_stitch_unstitchable: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    preview_stitch_vert: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    scope_back: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    space: 'ThemeSpaceGeneric' = None
    " Settings for space\n\n    :type: 'ThemeSpaceGeneric'\n    "
    uv_shadow: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    vertex: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    vertex_active: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    vertex_bevel: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    vertex_select: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    vertex_size: int = None
    ' \n\n    :type: int\n    '
    vertex_unreferenced: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    wire_edit: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeInfo(bpy_struct):
    """ Theme settings for Info
    """
    info_debug: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Background color of Debug icon\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    info_debug_text: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Foreground color of Debug icon\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    info_error: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Background color of Error icon\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    info_error_text: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Foreground color of Error icon\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    info_info: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Background color of Info icon\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    info_info_text: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Foreground color of Info icon\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    info_operator: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Background color of Operator icon\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    info_operator_text: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Foreground color of Operator icon\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    info_property: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Background color of Property icon\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    info_property_text: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Foreground color of Property icon\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    info_selected: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Background color of selected line\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    info_selected_text: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Text color of selected line\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    info_warning: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Background color of Warning icon\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    info_warning_text: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Foreground color of Warning icon\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    space: 'ThemeSpaceGeneric' = None
    " Settings for space\n\n    :type: 'ThemeSpaceGeneric'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeNLAEditor(bpy_struct):
    """ Theme settings for the NLA Editor
    """
    active_action: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Animation data-block has active action\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    active_action_unset: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Animation data-block doesn't have active action\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    dopesheet_channel: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Nonlinear Animation Channel\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    frame_current: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    grid: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    keyframe_border: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color of keyframe border\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    keyframe_border_selected: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color of selected keyframe border\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    meta_strips: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Unselected Meta Strip (for grouping related strips)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    meta_strips_selected: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Selected Meta Strip (for grouping related strips)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    nla_track: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Nonlinear Animation Track\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    preview_range: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color of preview range overlay\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    sound_strips: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Unselected Sound Strip (for timing speaker sounds)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    sound_strips_selected: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Selected Sound Strip (for timing speaker sounds)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    space: 'ThemeSpaceGeneric' = None
    " Settings for space\n\n    :type: 'ThemeSpaceGeneric'\n    "
    space_list: 'ThemeSpaceListGeneric' = None
    " Settings for space list\n\n    :type: 'ThemeSpaceListGeneric'\n    "
    strips: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Unselected Action-Clip Strip\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    strips_selected: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Selected Action-Clip Strip\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    time_marker_line: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    time_marker_line_selected: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    time_scrub_background: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    transition_strips: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Unselected Transition Strip\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    transition_strips_selected: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Selected Transition Strip\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    tweak: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    ' Color for strip/action being "tweaked" or edited\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], \'mathutils.Color\']\n    '
    tweak_duplicate: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Warning/error indicator color for strips referencing the strip being tweaked\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    view_sliders: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeNodeEditor(bpy_struct):
    """ Theme settings for the Node Editor
    """
    attribute_node: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    color_node: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    converter_node: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    dash_alpha: float = None
    ' Opacity for the dashed lines in wires\n\n    :type: float\n    '
    distor_node: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    filter_node: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    frame_node: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    geometry_node: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    grid: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    grid_levels: int = None
    ' Number of subdivisions for the dot grid displayed in the background\n\n    :type: int\n    '
    group_node: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    group_socket_node: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    input_node: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    layout_node: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    matte_node: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    node_active: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    node_backdrop: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    node_selected: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    noodle_curving: int = None
    ' Curving of the noodle\n\n    :type: int\n    '
    output_node: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    pattern_node: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    script_node: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    selected_text: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    shader_node: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    space: 'ThemeSpaceGeneric' = None
    " Settings for space\n\n    :type: 'ThemeSpaceGeneric'\n    "
    space_list: 'ThemeSpaceListGeneric' = None
    " Settings for space list\n\n    :type: 'ThemeSpaceListGeneric'\n    "
    texture_node: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    vector_node: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    wire: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    wire_inner: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    wire_select: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeOutliner(bpy_struct):
    """ Theme settings for the Outliner
    """
    active: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    active_object: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    edited_object: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    match: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    row_alternate: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Overlay color on every other row\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    selected_highlight: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    selected_object: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    space: 'ThemeSpaceGeneric' = None
    " Settings for space\n\n    :type: 'ThemeSpaceGeneric'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemePanelColors(bpy_struct):
    """ Theme settings for panel colors
    """
    back: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    header: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    sub_back: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemePreferences(bpy_struct):
    """ Theme settings for the Blender Preferences
    """
    space: 'ThemeSpaceGeneric' = None
    " Settings for space\n\n    :type: 'ThemeSpaceGeneric'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeProperties(bpy_struct):
    """ Theme settings for the Properties
    """
    active_modifier: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    match: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    space: 'ThemeSpaceGeneric' = None
    " Settings for space\n\n    :type: 'ThemeSpaceGeneric'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeSequenceEditor(bpy_struct):
    """ Theme settings for the Sequence Editor
    """
    active_strip: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    audio_strip: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    color_strip: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    draw_action: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    effect_strip: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    frame_current: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    grid: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    image_strip: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    keyframe: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    mask_strip: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    meta_strip: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    metadatabg: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    metadatatext: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    movie_strip: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    movieclip_strip: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    preview_back: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    preview_range: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color of preview range overlay\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    row_alternate: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Overlay color on every other row\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    scene_strip: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    selected_strip: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    space: 'ThemeSpaceGeneric' = None
    " Settings for space\n\n    :type: 'ThemeSpaceGeneric'\n    "
    space_list: 'ThemeSpaceListGeneric' = None
    " Settings for space list\n\n    :type: 'ThemeSpaceListGeneric'\n    "
    text_strip: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    time_marker_line: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    time_marker_line_selected: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    time_scrub_background: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    window_sliders: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeSpaceGeneric(bpy_struct):
    back: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    button: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    button_text: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    button_text_hi: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    button_title: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    execution_buts: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    header: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    header_text: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    header_text_hi: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    navigation_bar: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    panelcolors: 'ThemePanelColors' = None
    " \n\n    :type: 'ThemePanelColors'\n    "
    tab_active: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    tab_back: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    tab_inactive: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    tab_outline: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    text: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    text_hi: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    title: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeSpaceGradient(bpy_struct):
    button: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    button_text: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    button_text_hi: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    button_title: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    execution_buts: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    gradients: 'ThemeGradientColors' = None
    " \n\n    :type: 'ThemeGradientColors'\n    "
    header: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    header_text: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    header_text_hi: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    navigation_bar: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    panelcolors: 'ThemePanelColors' = None
    " \n\n    :type: 'ThemePanelColors'\n    "
    tab_active: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    tab_back: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    tab_inactive: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    tab_outline: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    text: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    text_hi: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    title: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeSpaceListGeneric(bpy_struct):
    list: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    list_text: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    list_text_hi: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    list_title: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeSpreadsheet(bpy_struct):
    """ Theme settings for the Spreadsheet
    """
    row_alternate: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Overlay color on every other row\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    space: 'ThemeSpaceGeneric' = None
    " Settings for space\n\n    :type: 'ThemeSpaceGeneric'\n    "
    space_list: 'ThemeSpaceListGeneric' = None
    " Settings for space list\n\n    :type: 'ThemeSpaceListGeneric'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeStatusBar(bpy_struct):
    """ Theme settings for the Status Bar
    """
    space: 'ThemeSpaceGeneric' = None
    " Settings for space\n\n    :type: 'ThemeSpaceGeneric'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeStripColor(bpy_struct):
    """ Theme settings for strip colors
    """
    color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Strip Color\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeStyle(bpy_struct):
    """ Theme settings for style sets
    """
    panel_title: 'ThemeFontStyle' = None
    " \n\n    :type: 'ThemeFontStyle'\n    "
    widget: 'ThemeFontStyle' = None
    " \n\n    :type: 'ThemeFontStyle'\n    "
    widget_label: 'ThemeFontStyle' = None
    " \n\n    :type: 'ThemeFontStyle'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeTextEditor(bpy_struct):
    """ Theme settings for the Text Editor
    """
    cursor: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    line_numbers: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    line_numbers_background: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    selected_text: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    space: 'ThemeSpaceGeneric' = None
    " Settings for space\n\n    :type: 'ThemeSpaceGeneric'\n    "
    syntax_builtin: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    syntax_comment: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    syntax_numbers: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    syntax_preprocessor: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    syntax_reserved: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    syntax_special: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    syntax_string: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    syntax_symbols: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeTopBar(bpy_struct):
    """ Theme settings for the Top Bar
    """
    space: 'ThemeSpaceGeneric' = None
    " Settings for space\n\n    :type: 'ThemeSpaceGeneric'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeUserInterface(bpy_struct):
    """ Theme settings for user interface elements
    """
    axis_x: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    axis_y: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    axis_z: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    editor_outline: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of the outline of the editors and their round corners\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    gizmo_a: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    gizmo_b: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    gizmo_hi: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    gizmo_primary: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    gizmo_secondary: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    gizmo_view_align: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    icon_alpha: float = None
    ' Transparency of icons in the interface, to reduce contrast\n\n    :type: float\n    '
    icon_border_intensity: float = None
    ' Control the intensity of the border around themes icons\n\n    :type: float\n    '
    icon_collection: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    icon_folder: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color of folders in the file browser\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    icon_modifier: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    icon_object: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    icon_object_data: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    icon_saturation: float = None
    ' Saturation of icons in the interface\n\n    :type: float\n    '
    icon_scene: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    icon_shading: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    menu_shadow_fac: float = None
    ' Blending factor for menu shadows\n\n    :type: float\n    '
    menu_shadow_width: int = None
    ' Width of menu shadows, set to zero to disable\n\n    :type: int\n    '
    panel_roundness: float = None
    ' Roundness of the corners of panels and sub-panels\n\n    :type: float\n    '
    transparent_checker_primary: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Primary color of checkerboard pattern indicating transparent areas\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    transparent_checker_secondary: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Secondary color of checkerboard pattern indicating transparent areas\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    transparent_checker_size: int = None
    ' Size of checkerboard pattern indicating transparent areas\n\n    :type: int\n    '
    wcol_box: 'ThemeWidgetColors' = None
    " \n\n    :type: 'ThemeWidgetColors'\n    "
    wcol_list_item: 'ThemeWidgetColors' = None
    " \n\n    :type: 'ThemeWidgetColors'\n    "
    wcol_menu: 'ThemeWidgetColors' = None
    " \n\n    :type: 'ThemeWidgetColors'\n    "
    wcol_menu_back: 'ThemeWidgetColors' = None
    " \n\n    :type: 'ThemeWidgetColors'\n    "
    wcol_menu_item: 'ThemeWidgetColors' = None
    " \n\n    :type: 'ThemeWidgetColors'\n    "
    wcol_num: 'ThemeWidgetColors' = None
    " \n\n    :type: 'ThemeWidgetColors'\n    "
    wcol_numslider: 'ThemeWidgetColors' = None
    " \n\n    :type: 'ThemeWidgetColors'\n    "
    wcol_option: 'ThemeWidgetColors' = None
    " \n\n    :type: 'ThemeWidgetColors'\n    "
    wcol_pie_menu: 'ThemeWidgetColors' = None
    " \n\n    :type: 'ThemeWidgetColors'\n    "
    wcol_progress: 'ThemeWidgetColors' = None
    " \n\n    :type: 'ThemeWidgetColors'\n    "
    wcol_pulldown: 'ThemeWidgetColors' = None
    " \n\n    :type: 'ThemeWidgetColors'\n    "
    wcol_radio: 'ThemeWidgetColors' = None
    " \n\n    :type: 'ThemeWidgetColors'\n    "
    wcol_regular: 'ThemeWidgetColors' = None
    " \n\n    :type: 'ThemeWidgetColors'\n    "
    wcol_scroll: 'ThemeWidgetColors' = None
    " \n\n    :type: 'ThemeWidgetColors'\n    "
    wcol_state: 'ThemeWidgetStateColors' = None
    " \n\n    :type: 'ThemeWidgetStateColors'\n    "
    wcol_tab: 'ThemeWidgetColors' = None
    " \n\n    :type: 'ThemeWidgetColors'\n    "
    wcol_text: 'ThemeWidgetColors' = None
    " \n\n    :type: 'ThemeWidgetColors'\n    "
    wcol_toggle: 'ThemeWidgetColors' = None
    " \n\n    :type: 'ThemeWidgetColors'\n    "
    wcol_tool: 'ThemeWidgetColors' = None
    " \n\n    :type: 'ThemeWidgetColors'\n    "
    wcol_toolbar_item: 'ThemeWidgetColors' = None
    " \n\n    :type: 'ThemeWidgetColors'\n    "
    wcol_tooltip: 'ThemeWidgetColors' = None
    " \n\n    :type: 'ThemeWidgetColors'\n    "
    wcol_view_item: 'ThemeWidgetColors' = None
    " \n\n    :type: 'ThemeWidgetColors'\n    "
    widget_emboss: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color of the 1px shadow line underlying widgets\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    widget_text_cursor: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of the interface widgets text insertion cursor (caret)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeView3D(bpy_struct):
    """ Theme settings for the 3D viewport
    """
    act_spline: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    bone_locked_weight: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Shade for bones corresponding to a locked weight group during painting\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    bone_pose: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    bone_pose_active: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    bone_solid: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    bundle_solid: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    camera: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    camera_path: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    clipping_border_3d: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    edge_bevel: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    edge_crease: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    edge_facesel: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    edge_seam: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    edge_select: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    edge_sharp: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    editmesh_active: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    empty: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    extra_edge_angle: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    extra_edge_len: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    extra_face_angle: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    extra_face_area: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    face: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    face_back: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    face_dot: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    face_front: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    face_select: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    facedot_size: int = None
    ' \n\n    :type: int\n    '
    frame_current: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    freestyle_edge_mark: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    freestyle_face_mark: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    gp_vertex: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    gp_vertex_select: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    gp_vertex_size: int = None
    ' \n\n    :type: int\n    '
    grid: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    handle_align: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_auto: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_free: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_sel_align: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_sel_auto: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_sel_free: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_sel_vect: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    handle_vect: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    lastsel_point: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    light: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    normal: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    nurb_sel_uline: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    nurb_sel_vline: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    nurb_uline: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    nurb_vline: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    object_active: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    object_origin_size: int = None
    ' Diameter in pixels for object/light origin display\n\n    :type: int\n    '
    object_selected: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    outline_width: int = None
    ' \n\n    :type: int\n    '
    paint_curve_handle: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    paint_curve_pivot: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    skin_root: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    space: 'ThemeSpaceGradient' = None
    " Settings for space\n\n    :type: 'ThemeSpaceGradient'\n    "
    speaker: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    split_normal: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    text_grease_pencil: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color for indicating Grease Pencil keyframes\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    text_keyframe: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color for indicating object keyframes\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    transform: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    vertex: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    vertex_active: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    vertex_bevel: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    vertex_normal: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    vertex_select: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    vertex_size: int = None
    ' \n\n    :type: int\n    '
    vertex_unreferenced: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    view_overlay: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    wire: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    wire_edit: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color for wireframe when in edit mode, but edge selection is active\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeWidgetColors(bpy_struct):
    """ Theme settings for widget color sets
    """
    inner: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    inner_sel: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    item: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    outline: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    roundness: float = None
    ' Amount of edge rounding\n\n    :type: float\n    '
    shadedown: int = None
    ' \n\n    :type: int\n    '
    shadetop: int = None
    ' \n\n    :type: int\n    '
    show_shaded: bool = None
    ' \n\n    :type: bool\n    '
    text: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    text_sel: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThemeWidgetStateColors(bpy_struct):
    """ Theme settings for widget state colors
    """
    blend: float = None
    ' \n\n    :type: float\n    '
    inner_anim: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    inner_anim_sel: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    inner_changed: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    inner_changed_sel: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    inner_driven: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    inner_driven_sel: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    inner_key: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    inner_key_sel: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    inner_overridden: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    inner_overridden_sel: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TimeGpencilModifierSegment(bpy_struct):
    """ Configuration for a single dash segment
    """
    name: str = None
    ' Name of the dash segment\n\n    :type: str\n    '
    seg_end: int = None
    ' Last frame of the segment\n\n    :type: int\n    '
    seg_mode: typing.Union[str, int] = None
    ' * ``NORMAL`` Regular -- Apply offset in usual animation direction. * ``REVERSE`` Reverse -- Apply offset in reverse animation direction. * ``PINGPONG`` Ping Pong -- Loop back and forth.\n\n    :type: typing.Union[str, int]\n    '
    seg_repeat: int = None
    ' Number of cycle repeats\n\n    :type: int\n    '
    seg_start: int = None
    ' First frame of the segment\n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TimelineMarker(bpy_struct):
    """ Marker for noting points in the timeline
    """
    camera: 'Object' = None
    " Camera that becomes active on this frame\n\n    :type: 'Object'\n    "
    frame: int = None
    ' The frame on which the timeline marker appears\n\n    :type: int\n    '
    name: str = None
    ' \n\n    :type: str\n    '
    select: bool = None
    ' Marker selection state\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Timer(bpy_struct):
    """ Window event timer
    """
    time_delta: float = None
    ' Time since last step in seconds\n\n    :type: float\n    '
    time_duration: float = None
    ' Time since last step in seconds\n\n    :type: float\n    '
    time_step: float = None
    ' \n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ToolSettings(bpy_struct):
    annotation_stroke_placement_view2d: typing.Union[str, int] = None
    ' * ``IMAGE`` Image -- Stick stroke to the image. * ``VIEW`` View -- Stick stroke to the view.\n\n    :type: typing.Union[str, int]\n    '
    annotation_stroke_placement_view3d: typing.Union[str, int] = None
    ' How annotation strokes are orientated in 3D space * ``CURSOR`` 3D Cursor -- Draw stroke at 3D cursor location. * ``VIEW`` View -- Stick stroke to the view. * ``SURFACE`` Surface -- Stick stroke to surfaces.\n\n    :type: typing.Union[str, int]\n    '
    annotation_thickness: int = None
    ' Thickness of annotation strokes\n\n    :type: int\n    '
    auto_keying_mode: typing.Union[str, int] = None
    ' Mode of automatic keyframe insertion for Objects, Bones and Masks\n\n    :type: typing.Union[str, int]\n    '
    curve_paint_settings: 'CurvePaintSettings' = None
    " \n\n    :type: 'CurvePaintSettings'\n    "
    curves_sculpt: 'CurvesSculpt' = None
    " \n\n    :type: 'CurvesSculpt'\n    "
    custom_bevel_profile_preset: 'CurveProfile' = None
    " Used for defining a profile's path\n\n    :type: 'CurveProfile'\n    "
    double_threshold: float = None
    ' Threshold distance for Auto Merge\n\n    :type: float\n    '
    gpencil_interpolate: 'GPencilInterpolateSettings' = None
    " Settings for Grease Pencil Interpolation tools\n\n    :type: 'GPencilInterpolateSettings'\n    "
    gpencil_paint: 'GpPaint' = None
    " \n\n    :type: 'GpPaint'\n    "
    gpencil_sculpt: 'GPencilSculptSettings' = None
    " Settings for stroke sculpting tools and brushes\n\n    :type: 'GPencilSculptSettings'\n    "
    gpencil_sculpt_paint: 'GpSculptPaint' = None
    " \n\n    :type: 'GpSculptPaint'\n    "
    gpencil_selectmode_edit: typing.Union[str, int] = None
    ' * ``POINT`` Point -- Select only points. * ``STROKE`` Stroke -- Select all stroke points. * ``SEGMENT`` Segment -- Select all stroke points between other strokes.\n\n    :type: typing.Union[str, int]\n    '
    gpencil_stroke_placement_view3d: typing.Union[str, int] = None
    ' * ``ORIGIN`` Origin -- Draw stroke at Object origin. * ``CURSOR`` 3D Cursor -- Draw stroke at 3D cursor location. * ``SURFACE`` Surface -- Stick stroke to surfaces. * ``STROKE`` Stroke -- Stick stroke to other strokes.\n\n    :type: typing.Union[str, int]\n    '
    gpencil_stroke_snap_mode: typing.Union[str, int] = None
    ' * ``NONE`` All Points -- Snap to all points. * ``ENDS`` End Points -- Snap to first and last points and interpolate. * ``FIRST`` First Point -- Snap to first point.\n\n    :type: typing.Union[str, int]\n    '
    gpencil_vertex_paint: 'GpVertexPaint' = None
    " \n\n    :type: 'GpVertexPaint'\n    "
    gpencil_weight_paint: 'GpWeightPaint' = None
    " \n\n    :type: 'GpWeightPaint'\n    "
    image_paint: 'ImagePaint' = None
    " \n\n    :type: 'ImagePaint'\n    "
    keyframe_type: typing.Union[str, int] = None
    ' Type of keyframes to create when inserting keyframes\n\n    :type: typing.Union[str, int]\n    '
    lock_markers: bool = None
    ' Prevent marker editing\n\n    :type: bool\n    '
    lock_object_mode: bool = None
    ' Restrict selection to objects using the same mode as the active object, to prevent accidental mode switch when selecting\n\n    :type: bool\n    '
    mesh_select_mode: typing.List[bool] = None
    ' Which mesh elements selection works on\n\n    :type: typing.List[bool]\n    '
    normal_vector: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Normal Vector used to copy, add or multiply\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    paint_mode: 'PaintModeSettings' = None
    " \n\n    :type: 'PaintModeSettings'\n    "
    particle_edit: 'ParticleEdit' = None
    " \n\n    :type: 'ParticleEdit'\n    "
    proportional_edit_falloff: typing.Union[str, int] = None
    ' Falloff type for proportional editing mode\n\n    :type: typing.Union[str, int]\n    '
    proportional_size: float = None
    ' Display size for proportional editing circle\n\n    :type: float\n    '
    sculpt: 'Sculpt' = None
    " \n\n    :type: 'Sculpt'\n    "
    sequencer_tool_settings: 'SequencerToolSettings' = None
    " \n\n    :type: 'SequencerToolSettings'\n    "
    show_uv_local_view: bool = None
    ' Display only faces with the currently displayed image assigned\n\n    :type: bool\n    '
    snap_elements: typing.Union[typing.Set[int], typing.Set[str]] = None
    ' Type of element to snap to\n\n    :type: typing.Union[typing.Set[int], typing.Set[str]]\n    '
    snap_face_nearest_steps: int = None
    ' Number of steps to break transformation into for face nearest snapping\n\n    :type: int\n    '
    snap_node_element: typing.Union[str, int] = None
    ' Type of element to snap to\n\n    :type: typing.Union[str, int]\n    '
    snap_target: typing.Union[str, int] = None
    ' Which part to snap onto the target\n\n    :type: typing.Union[str, int]\n    '
    snap_uv_element: typing.Union[str, int] = None
    ' Type of element to snap to * ``INCREMENT`` Increment -- Snap to increments of grid. * ``VERTEX`` Vertex -- Snap to vertices.\n\n    :type: typing.Union[str, int]\n    '
    statvis: 'MeshStatVis' = None
    " \n\n    :type: 'MeshStatVis'\n    "
    transform_pivot_point: typing.Union[str, int] = None
    " Pivot center for rotation/scaling * ``BOUNDING_BOX_CENTER`` Bounding Box Center -- Pivot around bounding box center of selected object(s). * ``CURSOR`` 3D Cursor -- Pivot around the 3D cursor. * ``INDIVIDUAL_ORIGINS`` Individual Origins -- Pivot around each object's own origin. * ``MEDIAN_POINT`` Median Point -- Pivot around the median point of selected objects. * ``ACTIVE_ELEMENT`` Active Element -- Pivot around active object.\n\n    :type: typing.Union[str, int]\n    "
    unified_paint_settings: 'UnifiedPaintSettings' = None
    " \n\n    :type: 'UnifiedPaintSettings'\n    "
    use_auto_normalize: bool = None
    ' Ensure all bone-deforming vertex groups add up to 1.0 while weight painting\n\n    :type: bool\n    '
    use_edge_path_live_unwrap: bool = None
    ' Changing edge seams recalculates UV unwrap\n\n    :type: bool\n    '
    use_gpencil_automerge_strokes: bool = None
    ' Join by distance last drawn stroke with previous strokes in the active layer\n\n    :type: bool\n    '
    use_gpencil_draw_additive: bool = None
    ' When creating new frames, the strokes from the previous/active frame are included as the basis for the new one\n\n    :type: bool\n    '
    use_gpencil_draw_onback: bool = None
    ' When draw new strokes, the new stroke is drawn below of all strokes in the layer\n\n    :type: bool\n    '
    use_gpencil_select_mask_point: bool = None
    ' Only sculpt selected stroke points\n\n    :type: bool\n    '
    use_gpencil_select_mask_segment: bool = None
    ' Only sculpt selected stroke points between other strokes\n\n    :type: bool\n    '
    use_gpencil_select_mask_stroke: bool = None
    ' Only sculpt selected stroke\n\n    :type: bool\n    '
    use_gpencil_stroke_endpoints: bool = None
    ' Only use the first and last parts of the stroke for snapping\n\n    :type: bool\n    '
    use_gpencil_thumbnail_list: bool = None
    ' Show compact list of color instead of thumbnails\n\n    :type: bool\n    '
    use_gpencil_vertex_select_mask_point: bool = None
    ' Only paint selected stroke points\n\n    :type: bool\n    '
    use_gpencil_vertex_select_mask_segment: bool = None
    ' Only paint selected stroke points between other strokes\n\n    :type: bool\n    '
    use_gpencil_vertex_select_mask_stroke: bool = None
    ' Only paint selected stroke\n\n    :type: bool\n    '
    use_gpencil_weight_data_add: bool = None
    ' When creating new strokes, the weight data is added according to the current vertex group and weight, if no vertex group selected, weight is not added\n\n    :type: bool\n    '
    use_keyframe_cycle_aware: bool = None
    ' For channels with cyclic extrapolation, keyframe insertion is automatically remapped inside the cycle time range, and keeps ends in sync. Curves newly added to actions with a Manual Frame Range and Cyclic Animation are automatically made cyclic\n\n    :type: bool\n    '
    use_keyframe_insert_auto: bool = None
    ' Automatic keyframe insertion for Objects, Bones and Masks\n\n    :type: bool\n    '
    use_keyframe_insert_keyingset: bool = None
    ' Automatic keyframe insertion using active Keying Set only\n\n    :type: bool\n    '
    use_lock_relative: bool = None
    ' Display bone-deforming groups as if all locked deform groups were deleted, and the remaining ones were re-normalized\n\n    :type: bool\n    '
    use_mesh_automerge: bool = None
    ' Automatically merge vertices moved to the same location\n\n    :type: bool\n    '
    use_mesh_automerge_and_split: bool = None
    ' Automatically split edges and faces\n\n    :type: bool\n    '
    use_multipaint: bool = None
    ' Paint across the weights of all selected bones, maintaining their relative influence\n\n    :type: bool\n    '
    use_proportional_action: bool = None
    ' Proportional editing in action editor\n\n    :type: bool\n    '
    use_proportional_connected: bool = None
    ' Proportional Editing using connected geometry only\n\n    :type: bool\n    '
    use_proportional_edit: bool = None
    ' Proportional edit mode\n\n    :type: bool\n    '
    use_proportional_edit_mask: bool = None
    ' Proportional editing mask mode\n\n    :type: bool\n    '
    use_proportional_edit_objects: bool = None
    ' Proportional editing object mode\n\n    :type: bool\n    '
    use_proportional_fcurve: bool = None
    ' Proportional editing in FCurve editor\n\n    :type: bool\n    '
    use_proportional_projected: bool = None
    ' Proportional Editing using screen space locations\n\n    :type: bool\n    '
    use_record_with_nla: bool = None
    ' Add a new NLA Track + Strip for every loop/pass made over the animation to allow non-destructive tweaking\n\n    :type: bool\n    '
    use_snap: bool = None
    ' Snap during transform\n\n    :type: bool\n    '
    use_snap_align_rotation: bool = None
    ' Align rotation with the snapping target\n\n    :type: bool\n    '
    use_snap_backface_culling: bool = None
    ' Exclude back facing geometry from snapping\n\n    :type: bool\n    '
    use_snap_edit: bool = None
    ' Snap onto non-active objects in Edit Mode (Edit Mode Only)\n\n    :type: bool\n    '
    use_snap_grid_absolute: bool = None
    ' Absolute grid alignment while translating (based on the pivot center)\n\n    :type: bool\n    '
    use_snap_node: bool = None
    ' Snap Node during transform\n\n    :type: bool\n    '
    use_snap_nonedit: bool = None
    ' Snap onto objects not in Edit Mode (Edit Mode Only)\n\n    :type: bool\n    '
    use_snap_peel_object: bool = None
    ' Consider objects as whole when finding volume center\n\n    :type: bool\n    '
    use_snap_project: bool = None
    ' Project individual elements on the surface of other objects\n\n    :type: bool\n    '
    use_snap_rotate: bool = None
    ' Rotate is affected by the snapping settings\n\n    :type: bool\n    '
    use_snap_scale: bool = None
    ' Scale is affected by snapping settings\n\n    :type: bool\n    '
    use_snap_selectable: bool = None
    ' Snap only onto objects that are selectable\n\n    :type: bool\n    '
    use_snap_self: bool = None
    ' Snap onto itself only if enabled (Edit Mode Only)\n\n    :type: bool\n    '
    use_snap_sequencer: bool = None
    ' Snap to strip edges or current frame\n\n    :type: bool\n    '
    use_snap_to_same_target: bool = None
    ' Snap only to target that source was initially near (Face Nearest Only)\n\n    :type: bool\n    '
    use_snap_translate: bool = None
    ' Move is affected by snapping settings\n\n    :type: bool\n    '
    use_snap_uv: bool = None
    ' Snap UV during transform\n\n    :type: bool\n    '
    use_snap_uv_grid_absolute: bool = None
    ' Absolute grid alignment while translating (based on the pivot center)\n\n    :type: bool\n    '
    use_transform_correct_face_attributes: bool = None
    " Correct data such as UV's and color attributes when transforming\n\n    :type: bool\n    "
    use_transform_correct_keep_connected: bool = None
    ' During the Face Attributes correction, merge attributes connected to the same vertex\n\n    :type: bool\n    '
    use_transform_data_origin: bool = None
    ' Transform object origins, while leaving the shape in place\n\n    :type: bool\n    '
    use_transform_pivot_point_align: bool = None
    ' Only transform object locations, without affecting rotation or scaling\n\n    :type: bool\n    '
    use_transform_skip_children: bool = None
    ' Transform the parents, leaving the children in place\n\n    :type: bool\n    '
    use_uv_select_sync: bool = None
    ' Keep UV and edit mode mesh selection in sync\n\n    :type: bool\n    '
    uv_relax_method: typing.Union[str, int] = None
    " Algorithm used for UV relaxation * ``LAPLACIAN`` Laplacian -- Use Laplacian method for relaxation. * ``HC`` HC -- Use HC method for relaxation. * ``COTAN`` Geometry -- Use Geometry (cotangent) relaxation, making UV's follow the underlying 3D geometry.\n\n    :type: typing.Union[str, int]\n    "
    uv_sculpt: 'UvSculpt' = None
    " \n\n    :type: 'UvSculpt'\n    "
    uv_sculpt_all_islands: bool = None
    ' Brush operates on all islands\n\n    :type: bool\n    '
    uv_sculpt_lock_borders: bool = None
    ' Disable editing of boundary edges\n\n    :type: bool\n    '
    uv_select_mode: typing.Union[str, int] = None
    ' UV selection and display mode\n\n    :type: typing.Union[str, int]\n    '
    uv_sticky_select_mode: typing.Union[str, int] = None
    ' Method for extending UV vertex selection * ``DISABLED`` Disabled -- Sticky vertex selection disabled. * ``SHARED_LOCATION`` Shared Location -- Select UVs that are at the same location and share a mesh vertex. * ``SHARED_VERTEX`` Shared Vertex -- Select UVs that share a mesh vertex, whether or not they are at the same location.\n\n    :type: typing.Union[str, int]\n    '
    vertex_group_subset: typing.Union[str, int] = None
    ' Filter Vertex groups for Display * ``ALL`` All -- All Vertex Groups. * ``BONE_DEFORM`` Deform -- Vertex Groups assigned to Deform Bones. * ``OTHER_DEFORM`` Other -- Vertex Groups assigned to non Deform Bones.\n\n    :type: typing.Union[str, int]\n    '
    vertex_group_user: typing.Union[str, int] = None
    ' Display unweighted vertices * ``NONE`` None. * ``ACTIVE`` Active -- Show vertices with no weights in the active group. * ``ALL`` All -- Show vertices with no weights in any group.\n\n    :type: typing.Union[str, int]\n    '
    vertex_group_weight: float = None
    ' Weight to assign in vertex groups\n\n    :type: float\n    '
    vertex_paint: 'VertexPaint' = None
    " \n\n    :type: 'VertexPaint'\n    "
    weight_paint: 'VertexPaint' = None
    " \n\n    :type: 'VertexPaint'\n    "
    workspace_tool_type: typing.Union[str, int] = None
    ' Action when dragging in the viewport\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TransformOrientation(bpy_struct):
    matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float], typing.Tuple[float, float, float], typing.Tuple[float, float, float]], 'mathutils.Matrix'] = None
    " \n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float], typing.Tuple[float, float, float], typing.Tuple[float, float, float]], 'mathutils.Matrix']\n    "
    name: str = None
    ' Name of the custom transform orientation\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TransformOrientationSlot(bpy_struct):
    custom_orientation: 'TransformOrientation' = None
    " \n\n    :type: 'TransformOrientation'\n    "
    type: typing.Union[str, int] = None
    ' Transformation orientation\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Use scene orientation instead of a custom setting\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class UDIMTile(bpy_struct):
    """ Properties of the UDIM tile
    """
    channels: int = None
    ' Number of channels in the tile pixels buffer\n\n    :type: int\n    '
    generated_color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Fill color for the generated image\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    generated_height: int = None
    ' Generated image height\n\n    :type: int\n    '
    generated_type: typing.Union[str, int] = None
    ' Generated image type\n\n    :type: typing.Union[str, int]\n    '
    generated_width: int = None
    ' Generated image width\n\n    :type: int\n    '
    label: str = None
    ' Tile label\n\n    :type: str\n    '
    number: int = None
    ' Number of the position that this tile covers\n\n    :type: int\n    '
    size: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    " Width and height of the tile buffer in pixels, zero when image data can't be loaded\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    "
    use_generated_float: bool = None
    ' Generate floating-point buffer\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class UILayout(bpy_struct):
    """ User interface layout in a panel or header
    """
    activate_init: bool = None
    ' When true, buttons defined in popups will be activated on first display (use so you can type into a field without having to click on it first)\n\n    :type: bool\n    '
    active: bool = None
    ' \n\n    :type: bool\n    '
    active_default: bool = None
    ' When true, an operator button defined after this will be activated when pressing return(use with popup dialogs)\n\n    :type: bool\n    '
    alert: bool = None
    ' \n\n    :type: bool\n    '
    alignment: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    direction: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    emboss: typing.Union[str, int] = None
    ' * ``NORMAL`` Regular -- Draw standard button emboss style. * ``NONE`` None -- Draw only text and icons. * ``PULLDOWN_MENU`` Pulldown Menu -- Draw pulldown menu style. * ``RADIAL_MENU`` Radial Menu -- Draw radial menu style. * ``NONE_OR_STATUS`` None or Status -- Draw with no emboss unless the button has a coloring status like an animation state.\n\n    :type: typing.Union[str, int]\n    '
    enabled: bool = None
    ' When false, this (sub)layout is grayed out\n\n    :type: bool\n    '
    operator_context: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    scale_x: float = None
    ' Scale factor along the X for items in this (sub)layout\n\n    :type: float\n    '
    scale_y: float = None
    ' Scale factor along the Y for items in this (sub)layout\n\n    :type: float\n    '
    ui_units_x: float = None
    ' Fixed size along the X for items in this (sub)layout\n\n    :type: float\n    '
    ui_units_y: float = None
    ' Fixed size along the Y for items in this (sub)layout\n\n    :type: float\n    '
    use_property_decorate: bool = None
    ' \n\n    :type: bool\n    '
    use_property_split: bool = None
    ' \n\n    :type: bool\n    '

    def row(self, align: bool=False, heading: str='', heading_ctxt: str='', translate: bool=True) -> 'UILayout':
        """ Sub-layout. Items placed in this sublayout are placed next to each other in a row

        :param align: Align buttons to each other
        :type align: bool
        :param heading: Heading, Label to insert into the layout for this sub-layout
        :type heading: str
        :param heading_ctxt: Override automatic translation context of the given heading
        :type heading_ctxt: str
        :param translate: Translate the given heading, when UI translation is enabled
        :type translate: bool
        :rtype: 'UILayout'
        :return: Sub-layout to put items in
        """
        pass

    def column(self, align: bool=False, heading: str='', heading_ctxt: str='', translate: bool=True) -> 'UILayout':
        """ Sub-layout. Items placed in this sublayout are placed under each other in a column

        :param align: Align buttons to each other
        :type align: bool
        :param heading: Heading, Label to insert into the layout for this sub-layout
        :type heading: str
        :param heading_ctxt: Override automatic translation context of the given heading
        :type heading_ctxt: str
        :param translate: Translate the given heading, when UI translation is enabled
        :type translate: bool
        :rtype: 'UILayout'
        :return: Sub-layout to put items in
        """
        pass

    def column_flow(self, columns: int=0, align: bool=False) -> 'UILayout':
        """ column_flow

        :param columns: Number of columns, 0 is automatic
        :type columns: int
        :param align: Align buttons to each other
        :type align: bool
        :rtype: 'UILayout'
        :return: Sub-layout to put items in
        """
        pass

    def grid_flow(self, row_major: bool=False, columns: int=0, even_columns: bool=False, even_rows: bool=False, align: bool=False) -> 'UILayout':
        """ grid_flow

        :param row_major: Fill row by row, instead of column by column
        :type row_major: bool
        :param columns: Number of columns, positive are absolute fixed numbers, 0 is automatic, negative are automatic multiple numbers along major axis (e.g. -2 will only produce 2, 4, 6 etc. columns for row major layout, and 2, 4, 6 etc. rows for column major layout)
        :type columns: int
        :param even_columns: All columns will have the same width
        :type even_columns: bool
        :param even_rows: All rows will have the same height
        :type even_rows: bool
        :param align: Align buttons to each other
        :type align: bool
        :rtype: 'UILayout'
        :return: Sub-layout to put items in
        """
        pass

    def box(self) -> 'UILayout':
        """ Sublayout (items placed in this sublayout are placed under each other in a column and are surrounded by a box)

        :rtype: 'UILayout'
        :return: Sub-layout to put items in
        """
        pass

    def split(self, factor: float=0.0, align: bool=False) -> 'UILayout':
        """ split

        :param factor: Percentage, Percentage of width to split at (leave unset for automatic calculation)
        :type factor: float
        :param align: Align buttons to each other
        :type align: bool
        :rtype: 'UILayout'
        :return: Sub-layout to put items in
        """
        pass

    def menu_pie(self) -> 'UILayout':
        """ Sublayout. Items placed in this sublayout are placed in a radial fashion around the menu center)

        :rtype: 'UILayout'
        :return: Sub-layout to put items in
        """
        pass

    @classmethod
    def icon(cls, data: 'AnyType') -> int:
        """ Return the custom icon for this data, use it e.g. to get materials or texture icons

        :param data: Data from which to take the icon
        :type data: 'AnyType'
        :rtype: int
        :return: Icon identifier
        """
        pass

    @classmethod
    def enum_item_name(cls, data: 'AnyType', property: str, identifier: str) -> str:
        """ Return the UI name for this enum item

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param identifier: Identifier of the enum item
        :type identifier: str
        :rtype: str
        :return: UI name of the enum item
        """
        pass

    @classmethod
    def enum_item_description(cls, data: 'AnyType', property: str, identifier: str) -> str:
        """ Return the UI description for this enum item

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param identifier: Identifier of the enum item
        :type identifier: str
        :rtype: str
        :return: UI description of the enum item
        """
        pass

    @classmethod
    def enum_item_icon(cls, data: 'AnyType', property: str, identifier: str) -> int:
        """ Return the icon for this enum item

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param identifier: Identifier of the enum item
        :type identifier: str
        :rtype: int
        :return: Icon identifier
        """
        pass

    def prop(self, data: 'AnyType', property: str, text: str='', text_ctxt: str='', translate: bool=True, icon: typing.Union[str, int]='NONE', expand: bool=False, slider: bool=False, toggle: int=-1, icon_only: bool=False, event: bool=False, full_event: bool=False, emboss: bool=True, index: int=-1, icon_value: int=0, invert_checkbox: bool=False):
        """ Item. Exposes an RNA item and places it into the layout

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool
        :param icon: Icon, Override automatic icon of the item
        :type icon: typing.Union[str, int]
        :param expand: Expand button to show more detail
        :type expand: bool
        :param slider: Use slider widget for numeric values
        :type slider: bool
        :param toggle: Use toggle widget for boolean values, or a checkbox when disabled (the default is -1 which uses toggle only when an icon is displayed)
        :type toggle: int
        :param icon_only: Draw only icons in buttons, no text
        :type icon_only: bool
        :param event: Use button to input key events
        :type event: bool
        :param full_event: Use button to input full events including modifiers
        :type full_event: bool
        :param emboss: Draw the button itself, not just the icon/text. When false, corresponds to the 'NONE_OR_STATUS' layout emboss type
        :type emboss: bool
        :param index: The index of this button, when set a single member of an array can be accessed, when set to -1 all array members are used
        :type index: int
        :param icon_value: Icon Value, Override automatic icon of the item
        :type icon_value: int
        :param invert_checkbox: Draw checkbox value inverted
        :type invert_checkbox: bool
        """
        pass

    def props_enum(self, data: 'AnyType', property: str):
        """ props_enum

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        """
        pass

    def prop_menu_enum(self, data: 'AnyType', property: str, text: str='', text_ctxt: str='', translate: bool=True, icon: typing.Union[str, int]='NONE'):
        """ prop_menu_enum

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool
        :param icon: Icon, Override automatic icon of the item
        :type icon: typing.Union[str, int]
        """
        pass

    def prop_with_popover(self, data: 'AnyType', property: str, text: str='', text_ctxt: str='', translate: bool=True, icon: typing.Union[str, int]='NONE', icon_only: bool=False, *, panel: str):
        """ prop_with_popover

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool
        :param icon: Icon, Override automatic icon of the item
        :type icon: typing.Union[str, int]
        :param icon_only: Draw only icons in tabs, no text
        :type icon_only: bool
        :param panel: Identifier of the panel
        :type panel: str
        """
        pass

    def prop_with_menu(self, data: 'AnyType', property: str, text: str='', text_ctxt: str='', translate: bool=True, icon: typing.Union[str, int]='NONE', icon_only: bool=False, *, menu: str):
        """ prop_with_menu

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool
        :param icon: Icon, Override automatic icon of the item
        :type icon: typing.Union[str, int]
        :param icon_only: Draw only icons in tabs, no text
        :type icon_only: bool
        :param menu: Identifier of the menu
        :type menu: str
        """
        pass

    def prop_tabs_enum(self, data: 'AnyType', property: str, data_highlight: 'AnyType'=None, property_highlight: str='', icon_only: bool=False):
        """ prop_tabs_enum

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param data_highlight: Data from which to take highlight property
        :type data_highlight: 'AnyType'
        :param property_highlight: Identifier of highlight property in data
        :type property_highlight: str
        :param icon_only: Draw only icons in tabs, no text
        :type icon_only: bool
        """
        pass

    def prop_enum(self, data: 'AnyType', property: str, value: str, text: str='', text_ctxt: str='', translate: bool=True, icon: typing.Union[str, int]='NONE'):
        """ prop_enum

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param value: Enum property value
        :type value: str
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool
        :param icon: Icon, Override automatic icon of the item
        :type icon: typing.Union[str, int]
        """
        pass

    def prop_search(self, data: 'AnyType', property: str, search_data: 'AnyType', search_property: str, text: str='', text_ctxt: str='', translate: bool=True, icon: typing.Union[str, int]='NONE', results_are_suggestions: bool=False):
        """ prop_search

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param search_data: Data from which to take collection to search in
        :type search_data: 'AnyType'
        :param search_property: Identifier of search collection property
        :type search_property: str
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool
        :param icon: Icon, Override automatic icon of the item
        :type icon: typing.Union[str, int]
        :param results_are_suggestions: Accept inputs that do not match any item
        :type results_are_suggestions: bool
        """
        pass

    def prop_decorator(self, data: 'AnyType', property: str, index: int=-1):
        """ prop_decorator

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param index: The index of this button, when set a single member of an array can be accessed, when set to -1 all array members are used
        :type index: int
        """
        pass

    def operator(self, operator: str, text: str='', text_ctxt: str='', translate: bool=True, icon: typing.Union[str, int]='NONE', emboss: bool=True, depress: bool=False, icon_value: int=0) -> 'OperatorProperties':
        """ Item. Places a button into the layout to call an Operator

        :param operator: Identifier of the operator
        :type operator: str
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool
        :param icon: Icon, Override automatic icon of the item
        :type icon: typing.Union[str, int]
        :param emboss: Draw the button itself, not just the icon/text
        :type emboss: bool
        :param depress: Draw pressed in
        :type depress: bool
        :param icon_value: Icon Value, Override automatic icon of the item
        :type icon_value: int
        :rtype: 'OperatorProperties'
        :return: Operator properties to fill in
        """
        pass

    def operator_menu_hold(self, operator: str, text: str='', text_ctxt: str='', translate: bool=True, icon: typing.Union[str, int]='NONE', emboss: bool=True, depress: bool=False, icon_value: int=0, *, menu: str) -> 'OperatorProperties':
        """ Item. Places a button into the layout to call an Operator

        :param operator: Identifier of the operator
        :type operator: str
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool
        :param icon: Icon, Override automatic icon of the item
        :type icon: typing.Union[str, int]
        :param emboss: Draw the button itself, not just the icon/text
        :type emboss: bool
        :param depress: Draw pressed in
        :type depress: bool
        :param icon_value: Icon Value, Override automatic icon of the item
        :type icon_value: int
        :param menu: Identifier of the menu
        :type menu: str
        :rtype: 'OperatorProperties'
        :return: Operator properties to fill in
        """
        pass

    def operator_enum(self, operator: str, property: str, icon_only: bool=False):
        """ operator_enum

        :param operator: Identifier of the operator
        :type operator: str
        :param property: Identifier of property in operator
        :type property: str
        :param icon_only: Draw only icons in buttons, no text
        :type icon_only: bool
        """
        pass

    def operator_menu_enum(self, operator: str, property: str, text: str='', text_ctxt: str='', translate: bool=True, icon: typing.Union[str, int]='NONE') -> 'OperatorProperties':
        """ operator_menu_enum

        :param operator: Identifier of the operator
        :type operator: str
        :param property: Identifier of property in operator
        :type property: str
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool
        :param icon: Icon, Override automatic icon of the item
        :type icon: typing.Union[str, int]
        :rtype: 'OperatorProperties'
        :return: Operator properties to fill in
        """
        pass

    def label(self, text: str='', text_ctxt: str='', translate: bool=True, icon: typing.Union[str, int]='NONE', icon_value: int=0):
        """ Item. Displays text and/or icon in the layout

        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool
        :param icon: Icon, Override automatic icon of the item
        :type icon: typing.Union[str, int]
        :param icon_value: Icon Value, Override automatic icon of the item
        :type icon_value: int
        """
        pass

    def menu(self, menu: str, text: str='', text_ctxt: str='', translate: bool=True, icon: typing.Union[str, int]='NONE', icon_value: int=0):
        """ menu

        :param menu: Identifier of the menu
        :type menu: str
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool
        :param icon: Icon, Override automatic icon of the item
        :type icon: typing.Union[str, int]
        :param icon_value: Icon Value, Override automatic icon of the item
        :type icon_value: int
        """
        pass

    def menu_contents(self, menu: str):
        """ menu_contents

        :param menu: Identifier of the menu
        :type menu: str
        """
        pass

    def popover(self, panel: str, text: str='', text_ctxt: str='', translate: bool=True, icon: typing.Union[str, int]='NONE', icon_value: int=0):
        """ popover

        :param panel: Identifier of the panel
        :type panel: str
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool
        :param icon: Icon, Override automatic icon of the item
        :type icon: typing.Union[str, int]
        :param icon_value: Icon Value, Override automatic icon of the item
        :type icon_value: int
        """
        pass

    def popover_group(self, space_type: typing.Union[str, int], region_type: typing.Union[str, int], context: str, category: str):
        """ popover_group

        :param space_type: Space Type
        :type space_type: typing.Union[str, int]
        :param region_type: Region Type
        :type region_type: typing.Union[str, int]
        :param context: panel type context
        :type context: str
        :param category: panel type category
        :type category: str
        """
        pass

    def separator(self, factor: float=1.0):
        """ Item. Inserts empty space into the layout between items

        :param factor: Percentage, Percentage of width to space (leave unset for default space)
        :type factor: float
        """
        pass

    def separator_spacer(self):
        """ Item. Inserts horizontal spacing empty space into the layout between items

        """
        pass

    def context_pointer_set(self, name: str, data: 'AnyType'):
        """ context_pointer_set

        :param name: Name, Name of entry in the context
        :type name: str
        :param data: Pointer to put in context
        :type data: 'AnyType'
        """
        pass

    def template_header(self):
        """ Inserts common Space header UI (editor type selector)

        """
        pass

    def template_ID(self, data: 'AnyType', property: str, new: str='', open: str='', unlink: str='', filter: typing.Union[str, int]='ALL', live_icon: bool=False, text: str='', text_ctxt: str='', translate: bool=True):
        """ template_ID

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param new: Operator identifier to create a new ID block
        :type new: str
        :param open: Operator identifier to open a file for creating a new ID block
        :type open: str
        :param unlink: Operator identifier to unlink the ID block
        :type unlink: str
        :param filter: Optionally limit the items which can be selected
        :type filter: typing.Union[str, int]
        :param live_icon: Show preview instead of fixed icon
        :type live_icon: bool
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool
        """
        pass

    def template_ID_preview(self, data: 'AnyType', property: str, new: str='', open: str='', unlink: str='', rows: int=0, cols: int=0, filter: typing.Union[str, int]='ALL', hide_buttons: bool=False):
        """ template_ID_preview

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param new: Operator identifier to create a new ID block
        :type new: str
        :param open: Operator identifier to open a file for creating a new ID block
        :type open: str
        :param unlink: Operator identifier to unlink the ID block
        :type unlink: str
        :param rows: Number of thumbnail preview rows to display
        :type rows: int
        :param cols: Number of thumbnail preview columns to display
        :type cols: int
        :param filter: Optionally limit the items which can be selected
        :type filter: typing.Union[str, int]
        :param hide_buttons: Show only list, no buttons
        :type hide_buttons: bool
        """
        pass

    def template_any_ID(self, data: 'AnyType', property: str, type_property: str, text: str='', text_ctxt: str='', translate: bool=True):
        """ template_any_ID

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param type_property: Identifier of property in data giving the type of the ID-blocks to use
        :type type_property: str
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool
        """
        pass

    def template_ID_tabs(self, data: 'AnyType', property: str, new: str='', menu: str='', filter: typing.Union[str, int]='ALL'):
        """ template_ID_tabs

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param new: Operator identifier to create a new ID block
        :type new: str
        :param menu: Context menu identifier
        :type menu: str
        :param filter: Optionally limit the items which can be selected
        :type filter: typing.Union[str, int]
        """
        pass

    def template_search(self, data: 'AnyType', property: str, search_data: 'AnyType', search_property: str, new: str='', unlink: str=''):
        """ template_search

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param search_data: Data from which to take collection to search in
        :type search_data: 'AnyType'
        :param search_property: Identifier of search collection property
        :type search_property: str
        :param new: Operator identifier to create a new item for the collection
        :type new: str
        :param unlink: Operator identifier to unlink or delete the active item from the collection
        :type unlink: str
        """
        pass

    def template_search_preview(self, data: 'AnyType', property: str, search_data: 'AnyType', search_property: str, new: str='', unlink: str='', rows: int=0, cols: int=0):
        """ template_search_preview

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param search_data: Data from which to take collection to search in
        :type search_data: 'AnyType'
        :param search_property: Identifier of search collection property
        :type search_property: str
        :param new: Operator identifier to create a new item for the collection
        :type new: str
        :param unlink: Operator identifier to unlink or delete the active item from the collection
        :type unlink: str
        :param rows: Number of thumbnail preview rows to display
        :type rows: int
        :param cols: Number of thumbnail preview columns to display
        :type cols: int
        """
        pass

    def template_path_builder(self, data: 'AnyType', property: str, root: 'ID', text: str='', text_ctxt: str='', translate: bool=True):
        """ template_path_builder

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param root: ID-block from which path is evaluated from
        :type root: 'ID'
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool
        """
        pass

    def template_modifiers(self):
        """ Generates the UI layout for the modifier stack

        """
        pass

    def template_constraints(self, use_bone_constraints: bool=True):
        """ Generates the panels for the constraint stack

        :param use_bone_constraints: Add panels for bone constraints instead of object constraints
        :type use_bone_constraints: bool
        """
        pass

    def template_grease_pencil_modifiers(self):
        """ Generates the panels for the grease pencil modifier stack

        """
        pass

    def template_shaderfx(self):
        """ Generates the panels for the shader effect stack

        """
        pass

    def template_greasepencil_color(self, data: 'AnyType', property: str, rows: int=0, cols: int=0, scale: float=1.0, filter: typing.Union[str, int]='ALL'):
        """ template_greasepencil_color

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param rows: Number of thumbnail preview rows to display
        :type rows: int
        :param cols: Number of thumbnail preview columns to display
        :type cols: int
        :param scale: Scale of the image thumbnails
        :type scale: float
        :param filter: Optionally limit the items which can be selected
        :type filter: typing.Union[str, int]
        """
        pass

    def template_constraint_header(self, data: 'Constraint'):
        """ Generates the header for constraint panels

        :param data: Constraint data
        :type data: 'Constraint'
        """
        pass

    def template_preview(self, id: 'ID', show_buttons: bool=True, parent: 'ID'=None, slot: 'TextureSlot'=None, preview_id: str=''):
        """ Item. A preview window for materials, textures, lights or worlds

        :param id: ID data-block
        :type id: 'ID'
        :param show_buttons: Show preview buttons?
        :type show_buttons: bool
        :param parent: ID data-block
        :type parent: 'ID'
        :param slot: Texture slot
        :type slot: 'TextureSlot'
        :param preview_id: Identifier of this preview widget, if not set the ID type will be used (i.e. all previews of materials without explicit ID will have the same size...)
        :type preview_id: str
        """
        pass

    def template_curve_mapping(self, data: 'AnyType', property: str, type: typing.Union[str, int]='NONE', levels: bool=False, brush: bool=False, use_negative_slope: bool=False, show_tone: bool=False):
        """ Item. A curve mapping widget used for e.g falloff curves for lights

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param type: Type, Type of curves to display
        :type type: typing.Union[str, int]
        :param levels: Show black/white levels
        :type levels: bool
        :param brush: Show brush options
        :type brush: bool
        :param use_negative_slope: Use a negative slope by default
        :type use_negative_slope: bool
        :param show_tone: Show tone options
        :type show_tone: bool
        """
        pass

    def template_curveprofile(self, data: 'AnyType', property: str):
        """ A profile path editor used for custom profiles

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        """
        pass

    def template_color_ramp(self, data: 'AnyType', property: str, expand: bool=False):
        """ Item. A color ramp widget

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param expand: Expand button to show more detail
        :type expand: bool
        """
        pass

    def template_icon(self, icon_value: int, scale: float=1.0):
        """ Display a large icon

        :param icon_value: Icon to display
        :type icon_value: int
        :param scale: Scale, Scale the icon size (by the button size)
        :type scale: float
        """
        pass

    def template_icon_view(self, data: 'AnyType', property: str, show_labels: bool=False, scale: float=6.0, scale_popup: float=5.0):
        """ Enum. Large widget showing Icon previews

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param show_labels: Show enum label in preview buttons
        :type show_labels: bool
        :param scale: UI Units, Scale the button icon size (by the button size)
        :type scale: float
        :param scale_popup: Scale, Scale the popup icon size (by the button size)
        :type scale_popup: float
        """
        pass

    def template_histogram(self, data: 'AnyType', property: str):
        """ Item. A histogramm widget to analyze imaga data

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        """
        pass

    def template_waveform(self, data: 'AnyType', property: str):
        """ Item. A waveform widget to analyze imaga data

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        """
        pass

    def template_vectorscope(self, data: 'AnyType', property: str):
        """ Item. A vectorscope widget to analyze imaga data

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        """
        pass

    def template_layers(self, data: 'AnyType', property: str, used_layers_data: 'AnyType', used_layers_property: str, active_layer: int):
        """ template_layers

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param used_layers_data: Data from which to take property
        :type used_layers_data: 'AnyType'
        :param used_layers_property: Identifier of property in data
        :type used_layers_property: str
        :param active_layer: Active Layer
        :type active_layer: int
        """
        pass

    def template_color_picker(self, data: 'AnyType', property: str, value_slider: bool=False, lock: bool=False, lock_luminosity: bool=False, cubic: bool=False):
        """ Item. A color wheel widget to pick colors

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param value_slider: Display the value slider to the right of the color wheel
        :type value_slider: bool
        :param lock: Lock the color wheel display to value 1.0 regardless of actual color
        :type lock: bool
        :param lock_luminosity: Keep the color at its original vector length
        :type lock_luminosity: bool
        :param cubic: Cubic saturation for picking values close to white
        :type cubic: bool
        """
        pass

    def template_palette(self, data: 'AnyType', property: str, color: bool=False):
        """ Item. A palette used to pick colors

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param color: Display the colors as colors or values
        :type color: bool
        """
        pass

    def template_image_layers(self, image: 'Image', image_user: 'ImageUser'):
        """ template_image_layers

        :param image: 
        :type image: 'Image'
        :param image_user: 
        :type image_user: 'ImageUser'
        """
        pass

    def template_image(self, data: 'AnyType', property: str, image_user: 'ImageUser', compact: bool=False, multiview: bool=False):
        """ Item(s). User interface for selecting images and their source paths

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param image_user: 
        :type image_user: 'ImageUser'
        :param compact: Use more compact layout
        :type compact: bool
        :param multiview: Expose Multi-View options
        :type multiview: bool
        """
        pass

    def template_image_settings(self, image_settings: 'ImageFormatSettings', color_management: bool=False):
        """ User interface for setting image format options

        :param image_settings: 
        :type image_settings: 'ImageFormatSettings'
        :param color_management: Show color management settings
        :type color_management: bool
        """
        pass

    def template_image_stereo_3d(self, stereo_3d_format: 'Stereo3dFormat'):
        """ User interface for setting image stereo 3d options

        :param stereo_3d_format: 
        :type stereo_3d_format: 'Stereo3dFormat'
        """
        pass

    def template_image_views(self, image_settings: 'ImageFormatSettings'):
        """ User interface for setting image views output options

        :param image_settings: 
        :type image_settings: 'ImageFormatSettings'
        """
        pass

    def template_movieclip(self, data: 'AnyType', property: str, compact: bool=False):
        """ Item(s). User interface for selecting movie clips and their source paths

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param compact: Use more compact layout
        :type compact: bool
        """
        pass

    def template_track(self, data: 'AnyType', property: str):
        """ Item. A movie-track widget to preview tracking image.

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        """
        pass

    def template_marker(self, data: 'AnyType', property: str, clip_user: 'MovieClipUser', track: 'MovieTrackingTrack', compact: bool=False):
        """ Item. A widget to control single marker settings.

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param clip_user: 
        :type clip_user: 'MovieClipUser'
        :param track: 
        :type track: 'MovieTrackingTrack'
        :param compact: Use more compact layout
        :type compact: bool
        """
        pass

    def template_movieclip_information(self, data: 'AnyType', property: str, clip_user: 'MovieClipUser'):
        """ Item. Movie clip information data.

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param clip_user: 
        :type clip_user: 'MovieClipUser'
        """
        pass

    def template_list(self, listtype_name: str, list_id: str, dataptr: 'AnyType', propname: str, active_dataptr: 'AnyType', active_propname: str, item_dyntip_propname: str='', rows: int=5, maxrows: int=5, type: typing.Union[str, int]='DEFAULT', columns: int=9, sort_reverse: bool=False, sort_lock: bool=False):
        """ Item. A list widget to display data, e.g. vertexgroups.

        :param listtype_name: Identifier of the list type to use
        :type listtype_name: str
        :param list_id: Identifier of this list widget (mandatory when using default "UI_UL_list" class). If this not an empty string, the uilist gets a custom ID, otherwise it takes the name of the class used to define the uilist (for example, if the class name is "OBJECT_UL_vgroups", and list_id is not set by the script, then bl_idname = "OBJECT_UL_vgroups")
        :type list_id: str
        :param dataptr: Data from which to take the Collection property
        :type dataptr: 'AnyType'
        :param propname: Identifier of the Collection property in data
        :type propname: str
        :param active_dataptr: Data from which to take the integer property, index of the active item
        :type active_dataptr: 'AnyType'
        :param active_propname: Identifier of the integer property in active_data, index of the active item
        :type active_propname: str
        :param item_dyntip_propname: Identifier of a string property in items, to use as tooltip content
        :type item_dyntip_propname: str
        :param rows: Default and minimum number of rows to display
        :type rows: int
        :param maxrows: Default maximum number of rows to display
        :type maxrows: int
        :param type: Type, Type of layout to use
        :type type: typing.Union[str, int]
        :param columns: Number of items to display per row, for GRID layout
        :type columns: int
        :param sort_reverse: Display items in reverse order by default
        :type sort_reverse: bool
        :param sort_lock: Lock display order to default value
        :type sort_lock: bool
        """
        pass

    def template_running_jobs(self):
        """ template_running_jobs

        """
        pass

    def template_operator_search(self):
        """ template_operator_search

        """
        pass

    def template_menu_search(self):
        """ template_menu_search

        """
        pass

    def template_header_3D_mode(self):
        """ 

        """
        pass

    def template_edit_mode_selection(self):
        """ Inserts common 3DView Edit modes header UI (selector for selection mode)

        """
        pass

    def template_reports_banner(self):
        """ template_reports_banner

        """
        pass

    def template_input_status(self):
        """ template_input_status

        """
        pass

    def template_node_link(self, ntree: 'NodeTree', node: 'Node', socket: 'NodeSocket'):
        """ template_node_link

        :param ntree: 
        :type ntree: 'NodeTree'
        :param node: 
        :type node: 'Node'
        :param socket: 
        :type socket: 'NodeSocket'
        """
        pass

    def template_node_view(self, ntree: 'NodeTree', node: 'Node', socket: 'NodeSocket'):
        """ template_node_view

        :param ntree: 
        :type ntree: 'NodeTree'
        :param node: 
        :type node: 'Node'
        :param socket: 
        :type socket: 'NodeSocket'
        """
        pass

    def template_node_asset_menu_items(self, catalog_path: str=''):
        """ template_node_asset_menu_items

        :param catalog_path: 
        :type catalog_path: str
        """
        pass

    def template_texture_user(self):
        """ template_texture_user

        """
        pass

    def template_keymap_item_properties(self, item: 'KeyMapItem'):
        """ template_keymap_item_properties

        :param item: 
        :type item: 'KeyMapItem'
        """
        pass

    def template_component_menu(self, data: 'AnyType', property: str, name: str=''):
        """ Item. Display expanded property in a popup menu

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        :param name: 
        :type name: str
        """
        pass

    def template_colorspace_settings(self, data: 'AnyType', property: str):
        """ Item. A widget to control input color space settings.

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        """
        pass

    def template_colormanaged_view_settings(self, data: 'AnyType', property: str):
        """ Item. A widget to control color managed view settings.

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        """
        pass

    def template_node_socket(self, color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']=(0.0, 0.0, 0.0, 1.0)):
        """ Node Socket Icon

        :param color: Color
        :type color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']
        """
        pass

    def template_cache_file(self, data: 'AnyType', property: str):
        """ Item(s). User interface for selecting cache files and their source paths

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        """
        pass

    def template_cache_file_velocity(self, data: 'AnyType', property: str):
        """ Show cache files velocity properties

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        """
        pass

    def template_cache_file_procedural(self, data: 'AnyType', property: str):
        """ Show cache files render procedural properties

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        """
        pass

    def template_cache_file_time_settings(self, data: 'AnyType', property: str):
        """ Show cache files time settings

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        """
        pass

    def template_cache_file_layers(self, data: 'AnyType', property: str):
        """ Show cache files override layers properties

        :param data: Data from which to take property
        :type data: 'AnyType'
        :param property: Identifier of property in data
        :type property: str
        """
        pass

    def template_recent_files(self, rows: int=5) -> int:
        """ Show list of recently saved .blend files

        :param rows: Maximum number of items to show
        :type rows: int
        :rtype: int
        :return: Number of items drawn
        """
        pass

    def template_file_select_path(self, params: 'FileSelectParams'):
        """ Item. A text button to set the active file browser path.

        :param params: 
        :type params: 'FileSelectParams'
        """
        pass

    def template_event_from_keymap_item(self, item: 'KeyMapItem', text: str='', text_ctxt: str='', translate: bool=True):
        """ Display keymap item as icons/text

        :param item: Item
        :type item: 'KeyMapItem'
        :param text: Override automatic text of the item
        :type text: str
        :param text_ctxt: Override automatic translation context of the given text
        :type text_ctxt: str
        :param translate: Translate the given text, when UI translation is enabled
        :type translate: bool
        """
        pass

    def template_asset_view(self, list_id: str, asset_library_dataptr: 'AnyType', asset_library_propname: str, assets_dataptr: 'AnyType', assets_propname: str, active_dataptr: 'AnyType', active_propname: str, filter_id_types: typing.Union[typing.Set[str], typing.Set[int]]={}, display_options: typing.Union[typing.Set[str], typing.Set[int]]={}, activate_operator: str='', drag_operator: str=''):
        """ Item. A scrollable list of assets in a grid view

        :param list_id: Identifier of this asset view. Necessary to tell apart different asset views and to idenify an asset view read from a .blend
        :type list_id: str
        :param asset_library_dataptr: Data from which to take the active asset library property
        :type asset_library_dataptr: 'AnyType'
        :param asset_library_propname: Identifier of the asset library property
        :type asset_library_propname: str
        :param assets_dataptr: Data from which to take the asset list property
        :type assets_dataptr: 'AnyType'
        :param assets_propname: Identifier of the asset list property
        :type assets_propname: str
        :param active_dataptr: Data from which to take the integer property, index of the active item
        :type active_dataptr: 'AnyType'
        :param active_propname: Identifier of the integer property in active_data, index of the active item
        :type active_propname: str
        :param filter_id_types: filter_id_types
        :type filter_id_types: typing.Union[typing.Set[str], typing.Set[int]]
        :param display_options: Displaying options for the asset view * ``NO_NAMES`` Do not display the name of each asset underneath preview images. * ``NO_FILTER`` Do not display buttons for filtering the available assets. * ``NO_LIBRARY`` Do not display buttons to choose or refresh an asset library.
        :type display_options: typing.Union[typing.Set[str], typing.Set[int]]
        :param activate_operator: Name of a custom operator to invoke when activating an item
        :type activate_operator: str
        :param drag_operator: Name of a custom operator to invoke when starting to drag an item. Never invoked together with the `active_operator` (if set), it's either the drag or the activate one
        :type drag_operator: str
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def introspect(self):
        """ Return a dictionary containing a textual representation of the UI layout.

        """
        pass

class UIList(bpy_struct):
    """ UI list containing the elements of a collection
    """
    bitflag_filter_item: int = None
    " The value of the reserved bitflag 'FILTER_ITEM' (in filter_flags values)\n\n    :type: int\n    "
    bl_idname: str = None
    ' If this is set, the uilist gets a custom ID, otherwise it takes the name of the class used to define the uilist (for example, if the class name is "OBJECT_UL_vgroups", and bl_idname is not set by the script, then bl_idname = "OBJECT_UL_vgroups")\n\n    :type: str\n    '
    filter_name: str = None
    " Only show items matching this name (use '*' as wildcard)\n\n    :type: str\n    "
    layout_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    list_id: str = None
    ' Identifier of the list, if any was passed to the "list_id" parameter of "template_list()"\n\n    :type: str\n    '
    use_filter_invert: bool = None
    ' Invert filtering (show hidden items, and vice versa)\n\n    :type: bool\n    '
    use_filter_show: bool = None
    ' Show filtering options\n\n    :type: bool\n    '
    use_filter_sort_alpha: bool = None
    ' Sort items by their name\n\n    :type: bool\n    '
    use_filter_sort_lock: bool = None
    ' Lock the order of shown items (user cannot change it)\n\n    :type: bool\n    '
    use_filter_sort_reverse: bool = None
    ' Reverse the order of shown items\n\n    :type: bool\n    '

    def draw_item(self, context: 'Context', layout: 'UILayout', data: 'AnyType', item: 'AnyType', icon: int, active_data: 'AnyType', active_property: str, index: int=0, flt_flag: int=0):
        """ Draw an item in the list (NOTE: when you define your own draw_item function, you may want to check given 'item' is of the right type...)

        :param context: 
        :type context: 'Context'
        :param layout: Layout to draw the item
        :type layout: 'UILayout'
        :param data: Data from which to take Collection property
        :type data: 'AnyType'
        :param item: Item of the collection property
        :type item: 'AnyType'
        :param icon: Icon of the item in the collection
        :type icon: int
        :param active_data: Data from which to take property for the active element
        :type active_data: 'AnyType'
        :param active_property: Identifier of property in active_data, for the active element
        :type active_property: str
        :param index: Index of the item in the collection
        :type index: int
        :param flt_flag: The filter-flag result for this item
        :type flt_flag: int
        """
        pass

    def draw_filter(self, context: 'Context', layout: 'UILayout'):
        """ Draw filtering options

        :param context: 
        :type context: 'Context'
        :param layout: Layout to draw the item
        :type layout: 'UILayout'
        """
        pass

    def filter_items(self, context: 'Context', data: 'AnyType', property: str):
        """ Filter and/or re-order items of the collection (output filter results in filter_flags, and reorder results in filter_neworder arrays)

        :param context: 
        :type context: 'Context'
        :param data: Data from which to take Collection property
        :type data: 'AnyType'
        :param property: Identifier of property in data, for the collection
        :type property: str
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class UIPieMenu(bpy_struct):
    layout: 'UILayout' = None
    " \n\n    :type: 'UILayout'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class UIPopover(bpy_struct):
    layout: 'UILayout' = None
    " \n\n    :type: 'UILayout'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class UIPopupMenu(bpy_struct):
    layout: 'UILayout' = None
    " \n\n    :type: 'UILayout'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class UVProjector(bpy_struct):
    """ UV projector used by the UV project modifier
    """
    object: 'Object' = None
    " Object to use as projector transform\n\n    :type: 'Object'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class UnifiedPaintSettings(bpy_struct):
    """ Overrides for some of the active brush's settings
    """
    color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    secondary_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    size: int = None
    ' Radius of the brush\n\n    :type: int\n    '
    strength: float = None
    ' How powerful the effect of the brush is when applied\n\n    :type: float\n    '
    unprojected_radius: float = None
    ' Radius of brush in Blender units\n\n    :type: float\n    '
    use_locked_size: typing.Union[str, int] = None
    ' Measure brush size relative to the view or the scene * ``VIEW`` View -- Measure brush size relative to the view. * ``SCENE`` Scene -- Measure brush size relative to the scene.\n\n    :type: typing.Union[str, int]\n    '
    use_unified_color: bool = None
    ' Instead of per-brush color, the color is shared across brushes\n\n    :type: bool\n    '
    use_unified_size: bool = None
    ' Instead of per-brush radius, the radius is shared across brushes\n\n    :type: bool\n    '
    use_unified_strength: bool = None
    ' Instead of per-brush strength, the strength is shared across brushes\n\n    :type: bool\n    '
    use_unified_weight: bool = None
    ' Instead of per-brush weight, the weight is shared across brushes\n\n    :type: bool\n    '
    weight: float = None
    ' Weight to assign in vertex groups\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class UnitSettings(bpy_struct):
    length_unit: typing.Union[str, int] = None
    ' Unit that will be used to display length values\n\n    :type: typing.Union[str, int]\n    '
    mass_unit: typing.Union[str, int] = None
    ' Unit that will be used to display mass values\n\n    :type: typing.Union[str, int]\n    '
    scale_length: float = None
    ' Scale to use when converting between blender units and dimensions. When working at microscopic or astronomical scale, a small or large unit scale respectively can be used to avoid numerical precision problems\n\n    :type: float\n    '
    system: typing.Union[str, int] = None
    ' The unit system to use for user interface controls\n\n    :type: typing.Union[str, int]\n    '
    system_rotation: typing.Union[str, int] = None
    ' Unit to use for displaying/editing rotation values * ``DEGREES`` Degrees -- Use degrees for measuring angles and rotations. * ``RADIANS`` Radians.\n\n    :type: typing.Union[str, int]\n    '
    temperature_unit: typing.Union[str, int] = None
    ' Unit that will be used to display temperature values\n\n    :type: typing.Union[str, int]\n    '
    time_unit: typing.Union[str, int] = None
    ' Unit that will be used to display time values\n\n    :type: typing.Union[str, int]\n    '
    use_separate: bool = None
    ' Display units in pairs (e.g. 1m 0cm)\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class UnknownType(bpy_struct):
    """ Stub RNA type used for pointers to unknown or internal data
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class UserAssetLibrary(bpy_struct):
    """ Settings to define a reusable library for Asset Browsers to use
    """
    name: str = None
    ' Identifier (not necessarily unique) for the asset library\n\n    :type: str\n    '
    path: str = None
    ' Path to a directory with .blend files to use as an asset library\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class UserSolidLight(bpy_struct):
    """ Light used for Studio lighting in solid shading mode
    """
    diffuse_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of the light's diffuse highlight\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    direction: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Direction that the light is shining\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    smooth: float = None
    ' Smooth the lighting from this light\n\n    :type: float\n    '
    specular_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of the light's specular highlight\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    use: bool = None
    ' Enable this light in solid shading mode\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class VertexGroup(bpy_struct):
    """ Group of vertices, used for armature deform and other purposes
    """
    index: int = None
    ' Index number of the vertex group\n\n    :type: int\n    '
    lock_weight: bool = None
    ' Maintain the relative weights for the group\n\n    :type: bool\n    '
    name: str = None
    ' Vertex group name\n\n    :type: str\n    '

    def add(self, index: typing.Union[bpy_prop_array[int], typing.Sequence[int]], weight: float, type: typing.Union[str, int]):
        """ Add vertices to the group

        :param index: List of indices
        :type index: typing.Union[bpy_prop_array[int], typing.Sequence[int]]
        :param weight: Vertex weight
        :type weight: float
        :param type: Vertex assign mode * ``REPLACE`` Replace -- Replace. * ``ADD`` Add -- Add. * ``SUBTRACT`` Subtract -- Subtract.
        :type type: typing.Union[str, int]
        """
        pass

    def remove(self, index: typing.Union[bpy_prop_array[int], typing.Sequence[int]]):
        """ Remove vertices from the group

        :param index: List of indices
        :type index: typing.Union[bpy_prop_array[int], typing.Sequence[int]]
        """
        pass

    def weight(self, index: int) -> float:
        """ Get a vertex weight from the group

        :param index: Index, The index of the vertex
        :type index: int
        :rtype: float
        :return: Vertex weight
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class VertexGroupElement(bpy_struct):
    """ Weight value of a vertex in a vertex group
    """
    group: int = None
    ' \n\n    :type: int\n    '
    weight: float = None
    ' Vertex Weight\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class View2D(bpy_struct):
    """ Scroll and zoom for a 2D region
    """

    def region_to_view(self, x: float, y: float) -> typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector']:
        """ Transform region coordinates to 2D view

        :param x: x, Region x coordinate
        :type x: float
        :param y: y, Region y coordinate
        :type y: float
        :rtype: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector']
        :return: Result, View coordinates
        """
        pass

    def view_to_region(self, x: float, y: float, clip: bool=True) -> typing.Union[bpy_prop_array[int], typing.Sequence[int]]:
        """ Transform 2D view coordinates to region

        :param x: x, 2D View x coordinate
        :type x: float
        :param y: y, 2D View y coordinate
        :type y: float
        :param clip: Clip, Clip coordinates to the visible region
        :type clip: bool
        :rtype: typing.Union[bpy_prop_array[int], typing.Sequence[int]]
        :return: Result, Region coordinates
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class View3DCursor(bpy_struct):
    location: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " Matrix combining location and rotation of the cursor\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    rotation_axis_angle: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Angle of Rotation for Axis-Angle rotation representation\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    rotation_euler: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler'] = None
    " 3D rotation\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler']\n    "
    rotation_mode: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    rotation_quaternion: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion'] = None
    " Rotation in quaternions (keep normalized)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class View3DOverlay(bpy_struct):
    """ Settings for display of overlays in the 3D viewport
    """
    backwire_opacity: float = None
    ' Opacity when rendering transparent wires\n\n    :type: float\n    '
    bone_wire_alpha: float = None
    ' Maximum opacity of bones in wireframe display mode\n\n    :type: float\n    '
    display_handle: typing.Union[str, int] = None
    ' Limit the display of curve handles in edit mode\n\n    :type: typing.Union[str, int]\n    '
    fade_inactive_alpha: float = None
    ' Strength of the fade effect\n\n    :type: float\n    '
    gpencil_fade_layer: float = None
    ' Fade layer opacity for Grease Pencil layers except the active one\n\n    :type: float\n    '
    gpencil_fade_objects: float = None
    ' Fade factor\n\n    :type: float\n    '
    gpencil_grid_opacity: float = None
    ' Canvas grid opacity\n\n    :type: float\n    '
    gpencil_vertex_paint_opacity: float = None
    ' Vertex Paint mix factor\n\n    :type: float\n    '
    grid_lines: int = None
    ' Number of grid lines to display in perspective view\n\n    :type: int\n    '
    grid_scale: float = None
    ' Multiplier for the distance between 3D View grid lines\n\n    :type: float\n    '
    grid_scale_unit: float = None
    ' Grid cell size scaled by scene unit system settings\n\n    :type: float\n    '
    grid_subdivisions: int = None
    ' Number of subdivisions between grid lines\n\n    :type: int\n    '
    normals_constant_screen_size: float = None
    ' Screen size for normals in the 3D view\n\n    :type: float\n    '
    normals_length: float = None
    ' Display size for normals in the 3D view\n\n    :type: float\n    '
    sculpt_mode_face_sets_opacity: float = None
    ' \n\n    :type: float\n    '
    sculpt_mode_mask_opacity: float = None
    ' \n\n    :type: float\n    '
    sculpt_show_face_sets: bool = None
    ' \n\n    :type: bool\n    '
    sculpt_show_mask: bool = None
    ' \n\n    :type: bool\n    '
    show_annotation: bool = None
    ' Show annotations for this view\n\n    :type: bool\n    '
    show_axis_x: bool = None
    ' Show the X axis line\n\n    :type: bool\n    '
    show_axis_y: bool = None
    ' Show the Y axis line\n\n    :type: bool\n    '
    show_axis_z: bool = None
    ' Show the Z axis line\n\n    :type: bool\n    '
    show_bones: bool = None
    ' Display bones (disable to show motion paths only)\n\n    :type: bool\n    '
    show_cursor: bool = None
    ' Display 3D Cursor Overlay\n\n    :type: bool\n    '
    show_curve_normals: bool = None
    ' Display 3D curve normals in editmode\n\n    :type: bool\n    '
    show_edge_bevel_weight: bool = None
    ' Display weights created for the Bevel modifier\n\n    :type: bool\n    '
    show_edge_crease: bool = None
    ' Display creases created for Subdivision Surface modifier\n\n    :type: bool\n    '
    show_edge_seams: bool = None
    ' Display UV unwrapping seams\n\n    :type: bool\n    '
    show_edge_sharp: bool = None
    ' Display sharp edges, used with the Edge Split modifier\n\n    :type: bool\n    '
    show_edges: bool = None
    ' Highlight selected edges\n\n    :type: bool\n    '
    show_extra_edge_angle: bool = None
    ' Display selected edge angle, using global values when set in the transform panel\n\n    :type: bool\n    '
    show_extra_edge_length: bool = None
    ' Display selected edge lengths, using global values when set in the transform panel\n\n    :type: bool\n    '
    show_extra_face_angle: bool = None
    ' Display the angles in the selected edges, using global values when set in the transform panel\n\n    :type: bool\n    '
    show_extra_face_area: bool = None
    ' Display the area of selected faces, using global values when set in the transform panel\n\n    :type: bool\n    '
    show_extra_indices: bool = None
    ' Display the index numbers of selected vertices, edges, and faces\n\n    :type: bool\n    '
    show_extras: bool = None
    ' Object details, including empty wire, cameras and other visual guides\n\n    :type: bool\n    '
    show_face_center: bool = None
    ' Display face center when face selection is enabled in solid shading modes\n\n    :type: bool\n    '
    show_face_normals: bool = None
    ' Display face normals as lines\n\n    :type: bool\n    '
    show_face_orientation: bool = None
    ' Show the Face Orientation Overlay\n\n    :type: bool\n    '
    show_faces: bool = None
    ' Highlight selected faces\n\n    :type: bool\n    '
    show_fade_inactive: bool = None
    ' Fade inactive geometry using the viewport background color\n\n    :type: bool\n    '
    show_floor: bool = None
    ' Show the ground plane grid\n\n    :type: bool\n    '
    show_freestyle_edge_marks: bool = None
    ' Display Freestyle edge marks, used with the Freestyle renderer\n\n    :type: bool\n    '
    show_freestyle_face_marks: bool = None
    ' Display Freestyle face marks, used with the Freestyle renderer\n\n    :type: bool\n    '
    show_look_dev: bool = None
    ' Show HDRI preview spheres\n\n    :type: bool\n    '
    show_motion_paths: bool = None
    ' Show the Motion Paths Overlay\n\n    :type: bool\n    '
    show_object_origins: bool = None
    ' Show object center dots\n\n    :type: bool\n    '
    show_object_origins_all: bool = None
    ' Show the object origin center dot for all (selected and unselected) objects\n\n    :type: bool\n    '
    show_occlude_wire: bool = None
    ' Use hidden wireframe display\n\n    :type: bool\n    '
    show_onion_skins: bool = None
    ' Show the Onion Skinning Overlay\n\n    :type: bool\n    '
    show_ortho_grid: bool = None
    ' Show grid in orthographic side view\n\n    :type: bool\n    '
    show_outline_selected: bool = None
    ' Show an outline highlight around selected objects\n\n    :type: bool\n    '
    show_overlays: bool = None
    ' Display overlays like gizmos and outlines\n\n    :type: bool\n    '
    show_paint_wire: bool = None
    ' Use wireframe display in painting modes\n\n    :type: bool\n    '
    show_relationship_lines: bool = None
    ' Show dashed lines indicating parent or constraint relationships\n\n    :type: bool\n    '
    show_split_normals: bool = None
    ' Display vertex-per-face normals as lines\n\n    :type: bool\n    '
    show_stats: bool = None
    ' Display scene statistics overlay text\n\n    :type: bool\n    '
    show_statvis: bool = None
    ' Display statistical information about the mesh\n\n    :type: bool\n    '
    show_text: bool = None
    ' Display overlay text\n\n    :type: bool\n    '
    show_vertex_normals: bool = None
    ' Display vertex normals as lines\n\n    :type: bool\n    '
    show_viewer_attribute: bool = None
    ' Show attribute overlay for active viewer node\n\n    :type: bool\n    '
    show_weight: bool = None
    ' Display weights in editmode\n\n    :type: bool\n    '
    show_wireframes: bool = None
    ' Show face edges wires\n\n    :type: bool\n    '
    show_wpaint_contours: bool = None
    ' Show contour lines formed by points with the same interpolated weight\n\n    :type: bool\n    '
    show_xray_bone: bool = None
    ' Show the bone selection overlay\n\n    :type: bool\n    '
    texture_paint_mode_opacity: float = None
    ' Opacity of the texture paint mode stencil mask overlay\n\n    :type: float\n    '
    use_debug_freeze_view_culling: bool = None
    ' Freeze view culling bounds\n\n    :type: bool\n    '
    use_gpencil_canvas_xray: bool = None
    ' Show Canvas grid in front\n\n    :type: bool\n    '
    use_gpencil_edit_lines: bool = None
    ' Show Edit Lines when editing strokes\n\n    :type: bool\n    '
    use_gpencil_fade_gp_objects: bool = None
    ' Fade Grease Pencil Objects, except the active one\n\n    :type: bool\n    '
    use_gpencil_fade_layers: bool = None
    ' Toggle fading of Grease Pencil layers except the active one\n\n    :type: bool\n    '
    use_gpencil_fade_objects: bool = None
    ' Fade all viewport objects with a full color layer to improve visibility\n\n    :type: bool\n    '
    use_gpencil_grid: bool = None
    ' Display a grid over grease pencil paper\n\n    :type: bool\n    '
    use_gpencil_multiedit_line_only: bool = None
    ' Show Edit Lines only in multiframe\n\n    :type: bool\n    '
    use_gpencil_onion_skin: bool = None
    ' Show ghosts of the keyframes before and after the current frame\n\n    :type: bool\n    '
    use_gpencil_show_directions: bool = None
    ' Show stroke drawing direction with a bigger green dot (start) and smaller red dot (end) points\n\n    :type: bool\n    '
    use_gpencil_show_material_name: bool = None
    ' Show material name assigned to each stroke\n\n    :type: bool\n    '
    use_normals_constant_screen_size: bool = None
    ' Keep size of normals constant in relation to 3D view\n\n    :type: bool\n    '
    vertex_opacity: float = None
    ' Opacity for edit vertices\n\n    :type: float\n    '
    vertex_paint_mode_opacity: float = None
    ' Opacity of the texture paint mode stencil mask overlay\n\n    :type: float\n    '
    viewer_attribute_opacity: float = None
    ' Opacity of the attribute that is currently visualized\n\n    :type: float\n    '
    weight_paint_mode_opacity: float = None
    ' Opacity of the weight paint mode overlay\n\n    :type: float\n    '
    wireframe_opacity: float = None
    ' Opacity of the displayed edges (1.0 for opaque)\n\n    :type: float\n    '
    wireframe_threshold: float = None
    ' Adjust the angle threshold for displaying edges (1.0 for all)\n\n    :type: float\n    '
    xray_alpha_bone: float = None
    ' Opacity to use for bone selection\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class View3DShading(bpy_struct):
    """ Settings for shading in the 3D viewport
    """
    aov_name: str = None
    ' Name of the active Shader AOV\n\n    :type: str\n    '
    background_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color for custom background color\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    background_type: typing.Union[str, int] = None
    ' Way to display the background * ``THEME`` Theme -- Use the theme for background color. * ``WORLD`` World -- Use the world for background color. * ``VIEWPORT`` Viewport -- Use a custom color limited to this viewport only.\n\n    :type: typing.Union[str, int]\n    '
    cavity_ridge_factor: float = None
    ' Factor for the cavity ridges\n\n    :type: float\n    '
    cavity_type: typing.Union[str, int] = None
    ' Way to display the cavity shading * ``WORLD`` World -- Cavity shading computed in world space, useful for larger-scale occlusion. * ``SCREEN`` Screen -- Curvature-based shading, useful for making fine details more visible. * ``BOTH`` Both -- Use both effects simultaneously.\n\n    :type: typing.Union[str, int]\n    '
    cavity_valley_factor: float = None
    ' Factor for the cavity valleys\n\n    :type: float\n    '
    color_type: typing.Union[str, int] = None
    ' Color Type * ``MATERIAL`` Material -- Show material color. * ``SINGLE`` Single -- Show scene in a single color. * ``OBJECT`` Object -- Show object color. * ``RANDOM`` Random -- Show random object color. * ``VERTEX`` Attribute -- Show active color attribute. * ``TEXTURE`` Texture -- Show the texture from the active image texture node using the active UV map coordinates.\n\n    :type: typing.Union[str, int]\n    '
    curvature_ridge_factor: float = None
    ' Factor for the curvature ridges\n\n    :type: float\n    '
    curvature_valley_factor: float = None
    ' Factor for the curvature valleys\n\n    :type: float\n    '
    cycles: typing.Any = None
    ' \n\n    :type: typing.Any\n    '
    light: typing.Union[str, int] = None
    ' Lighting Method for Solid/Texture Viewport Shading * ``STUDIO`` Studio -- Display using studio lighting. * ``MATCAP`` MatCap -- Display using matcap material and lighting. * ``FLAT`` Flat -- Display using flat lighting.\n\n    :type: typing.Union[str, int]\n    '
    object_outline_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color for object outline\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    render_pass: typing.Union[str, int] = None
    ' Render Pass to show in the viewport\n\n    :type: typing.Union[str, int]\n    '
    selected_studio_light: 'StudioLight' = None
    " Selected StudioLight\n\n    :type: 'StudioLight'\n    "
    shadow_intensity: float = None
    ' Darkness of shadows\n\n    :type: float\n    '
    show_backface_culling: bool = None
    ' Use back face culling to hide the back side of faces\n\n    :type: bool\n    '
    show_cavity: bool = None
    ' Show Cavity\n\n    :type: bool\n    '
    show_object_outline: bool = None
    ' Show Object Outline\n\n    :type: bool\n    '
    show_shadows: bool = None
    ' Show Shadow\n\n    :type: bool\n    '
    show_specular_highlight: bool = None
    ' Render specular highlights\n\n    :type: bool\n    '
    show_xray: bool = None
    ' Show whole scene transparent\n\n    :type: bool\n    '
    show_xray_wireframe: bool = None
    ' Show whole scene transparent\n\n    :type: bool\n    '
    single_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color for single color mode\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    studio_light: typing.Union[str, int] = None
    ' Studio lighting setup\n\n    :type: typing.Union[str, int]\n    '
    studiolight_background_alpha: float = None
    ' Show the studiolight in the background\n\n    :type: float\n    '
    studiolight_background_blur: float = None
    ' Blur the studiolight in the background\n\n    :type: float\n    '
    studiolight_intensity: float = None
    ' Strength of the studiolight\n\n    :type: float\n    '
    studiolight_rotate_z: float = None
    ' Rotation of the studiolight around the Z-Axis\n\n    :type: float\n    '
    type: typing.Union[str, int] = None
    ' Method to display/shade objects in the 3D View\n\n    :type: typing.Union[str, int]\n    '
    use_compositor: typing.Union[str, int] = None
    ' When to preview the compositor output inside the viewport * ``DISABLED`` Disabled -- The compositor is disabled. * ``CAMERA`` Camera -- The compositor is enabled only in camera view. * ``ALWAYS`` Always -- The compositor is always enabled regardless of the view.\n\n    :type: typing.Union[str, int]\n    '
    use_dof: bool = None
    ' Use depth of field on viewport using the values from the active camera\n\n    :type: bool\n    '
    use_scene_lights: bool = None
    ' Render lights and light probes of the scene\n\n    :type: bool\n    '
    use_scene_lights_render: bool = None
    ' Render lights and light probes of the scene\n\n    :type: bool\n    '
    use_scene_world: bool = None
    ' Use scene world for lighting\n\n    :type: bool\n    '
    use_scene_world_render: bool = None
    ' Use scene world for lighting\n\n    :type: bool\n    '
    use_studiolight_view_rotation: bool = None
    ' Make the HDR rotation fixed and not follow the camera\n\n    :type: bool\n    '
    use_world_space_lighting: bool = None
    ' Make the lighting fixed and not follow the camera\n\n    :type: bool\n    '
    wireframe_color_type: typing.Union[str, int] = None
    ' Color Type * ``MATERIAL`` Material -- Show material color. * ``SINGLE`` Single -- Show scene in a single color. * ``OBJECT`` Object -- Show object color. * ``RANDOM`` Random -- Show random object color. * ``VERTEX`` Attribute -- Show active color attribute. * ``TEXTURE`` Texture -- Show the texture from the active image texture node using the active UV map coordinates.\n\n    :type: typing.Union[str, int]\n    '
    xray_alpha: float = None
    ' Amount of alpha to use\n\n    :type: float\n    '
    xray_alpha_wireframe: float = None
    ' Amount of alpha to use\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ViewLayer(bpy_struct):
    """ View layer
    """
    active_aov: 'AOV' = None
    " Active AOV\n\n    :type: 'AOV'\n    "
    active_aov_index: int = None
    ' Index of active aov\n\n    :type: int\n    '
    active_layer_collection: 'LayerCollection' = None
    " Active layer collection in this view layer's hierarchy\n\n    :type: 'LayerCollection'\n    "
    active_lightgroup: 'Lightgroup' = None
    " Active Lightgroup\n\n    :type: 'Lightgroup'\n    "
    active_lightgroup_index: int = None
    ' Index of active lightgroup\n\n    :type: int\n    '
    aovs: 'AOVs' = None
    " \n\n    :type: 'AOVs'\n    "
    cycles: typing.Any = None
    ' Cycles ViewLayer Settings\n\n    :type: typing.Any\n    '
    depsgraph: 'Depsgraph' = None
    " Dependencies in the scene data\n\n    :type: 'Depsgraph'\n    "
    eevee: 'ViewLayerEEVEE' = None
    " View layer settings for Eevee\n\n    :type: 'ViewLayerEEVEE'\n    "
    freestyle_settings: 'FreestyleSettings' = None
    " \n\n    :type: 'FreestyleSettings'\n    "
    layer_collection: 'LayerCollection' = None
    " Root of collections hierarchy of this view layer, its 'collection' pointer property is the same as the scene's master collection\n\n    :type: 'LayerCollection'\n    "
    lightgroups: 'Lightgroups' = None
    " \n\n    :type: 'Lightgroups'\n    "
    material_override: 'Material' = None
    " Material to override all other materials in this view layer\n\n    :type: 'Material'\n    "
    name: str = None
    ' View layer name\n\n    :type: str\n    '
    objects: 'LayerObjects' = None
    " All the objects in this layer\n\n    :type: 'LayerObjects'\n    "
    pass_alpha_threshold: float = None
    ' Z, Index, normal, UV and vector passes are only affected by surfaces with alpha transparency equal to or higher than this threshold\n\n    :type: float\n    '
    pass_cryptomatte_depth: int = None
    ' Sets how many unique objects can be distinguished per pixel\n\n    :type: int\n    '
    samples: int = None
    ' Override number of render samples for this view layer, 0 will use the scene setting\n\n    :type: int\n    '
    use: bool = None
    ' Enable or disable rendering of this View Layer\n\n    :type: bool\n    '
    use_ao: bool = None
    ' Render Ambient Occlusion in this Layer\n\n    :type: bool\n    '
    use_freestyle: bool = None
    ' Render stylized strokes in this Layer\n\n    :type: bool\n    '
    use_motion_blur: bool = None
    ' Render motion blur in this Layer, if enabled in the scene\n\n    :type: bool\n    '
    use_pass_ambient_occlusion: bool = None
    ' Deliver Ambient Occlusion pass\n\n    :type: bool\n    '
    use_pass_combined: bool = None
    ' Deliver full combined RGBA buffer\n\n    :type: bool\n    '
    use_pass_cryptomatte_accurate: bool = None
    ' Generate a more accurate cryptomatte pass\n\n    :type: bool\n    '
    use_pass_cryptomatte_asset: bool = None
    ' Render cryptomatte asset pass, for isolating groups of objects with the same parent\n\n    :type: bool\n    '
    use_pass_cryptomatte_material: bool = None
    ' Render cryptomatte material pass, for isolating materials in compositing\n\n    :type: bool\n    '
    use_pass_cryptomatte_object: bool = None
    ' Render cryptomatte object pass, for isolating objects in compositing\n\n    :type: bool\n    '
    use_pass_diffuse_color: bool = None
    ' Deliver diffuse color pass\n\n    :type: bool\n    '
    use_pass_diffuse_direct: bool = None
    ' Deliver diffuse direct pass\n\n    :type: bool\n    '
    use_pass_diffuse_indirect: bool = None
    ' Deliver diffuse indirect pass\n\n    :type: bool\n    '
    use_pass_emit: bool = None
    ' Deliver emission pass\n\n    :type: bool\n    '
    use_pass_environment: bool = None
    ' Deliver environment lighting pass\n\n    :type: bool\n    '
    use_pass_glossy_color: bool = None
    ' Deliver glossy color pass\n\n    :type: bool\n    '
    use_pass_glossy_direct: bool = None
    ' Deliver glossy direct pass\n\n    :type: bool\n    '
    use_pass_glossy_indirect: bool = None
    ' Deliver glossy indirect pass\n\n    :type: bool\n    '
    use_pass_material_index: bool = None
    ' Deliver material index pass\n\n    :type: bool\n    '
    use_pass_mist: bool = None
    ' Deliver mist factor pass (0.0 to 1.0)\n\n    :type: bool\n    '
    use_pass_normal: bool = None
    ' Deliver normal pass\n\n    :type: bool\n    '
    use_pass_object_index: bool = None
    ' Deliver object index pass\n\n    :type: bool\n    '
    use_pass_position: bool = None
    ' Deliver position pass\n\n    :type: bool\n    '
    use_pass_shadow: bool = None
    ' Deliver shadow pass\n\n    :type: bool\n    '
    use_pass_subsurface_color: bool = None
    ' Deliver subsurface color pass\n\n    :type: bool\n    '
    use_pass_subsurface_direct: bool = None
    ' Deliver subsurface direct pass\n\n    :type: bool\n    '
    use_pass_subsurface_indirect: bool = None
    ' Deliver subsurface indirect pass\n\n    :type: bool\n    '
    use_pass_transmission_color: bool = None
    ' Deliver transmission color pass\n\n    :type: bool\n    '
    use_pass_transmission_direct: bool = None
    ' Deliver transmission direct pass\n\n    :type: bool\n    '
    use_pass_transmission_indirect: bool = None
    ' Deliver transmission indirect pass\n\n    :type: bool\n    '
    use_pass_uv: bool = None
    ' Deliver texture UV pass\n\n    :type: bool\n    '
    use_pass_vector: bool = None
    ' Deliver speed vector pass\n\n    :type: bool\n    '
    use_pass_z: bool = None
    ' Deliver Z values pass\n\n    :type: bool\n    '
    use_sky: bool = None
    ' Render Sky in this Layer\n\n    :type: bool\n    '
    use_solid: bool = None
    ' Render Solid faces in this Layer\n\n    :type: bool\n    '
    use_strand: bool = None
    ' Render Strands in this Layer\n\n    :type: bool\n    '
    use_volumes: bool = None
    ' Render volumes in this Layer\n\n    :type: bool\n    '

    @classmethod
    def update_render_passes(cls):
        """ Requery the enabled render passes from the render engine

        """
        pass

    def update(self):
        """ Update data tagged to be updated from previous access to data or operators

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ViewLayerEEVEE(bpy_struct):
    """ View layer settings for Eevee
    """
    use_pass_bloom: bool = None
    ' Deliver bloom pass\n\n    :type: bool\n    '
    use_pass_volume_direct: bool = None
    ' Deliver volume direct light pass\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ViewerPath(bpy_struct):
    """ Path to data that is viewed
    """
    path: bpy_prop_collection['ViewerPathElem'] = None
    " \n\n    :type: bpy_prop_collection['ViewerPathElem']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ViewerPathElem(bpy_struct):
    """ Element of a viewer path
    """
    type: typing.Union[str, int] = None
    ' Type of the path element\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class VolumeDisplay(bpy_struct):
    """ Volume object display settings for 3D viewport
    """
    density: float = None
    ' Thickness of volume display in the viewport\n\n    :type: float\n    '
    interpolation_method: typing.Union[str, int] = None
    ' Interpolation method to use for volumes in solid mode * ``LINEAR`` Linear -- Good smoothness and speed. * ``CUBIC`` Cubic -- Smoothed high quality interpolation, but slower. * ``CLOSEST`` Closest -- No interpolation.\n\n    :type: typing.Union[str, int]\n    '
    slice_axis: typing.Union[str, int] = None
    ' * ``AUTO`` Auto -- Adjust slice direction according to the view direction. * ``X`` X -- Slice along the X axis. * ``Y`` Y -- Slice along the Y axis. * ``Z`` Z -- Slice along the Z axis.\n\n    :type: typing.Union[str, int]\n    '
    slice_depth: float = None
    ' Position of the slice\n\n    :type: float\n    '
    use_slice: bool = None
    ' Perform a single slice of the domain object\n\n    :type: bool\n    '
    wireframe_detail: typing.Union[str, int] = None
    ' Amount of detail for wireframe display * ``COARSE`` Coarse -- Display one box or point for each intermediate tree node. * ``FINE`` Fine -- Display box for each leaf node containing 8x8 voxels.\n\n    :type: typing.Union[str, int]\n    '
    wireframe_type: typing.Union[str, int] = None
    " Type of wireframe display * ``NONE`` None -- Don't display volume in wireframe mode. * ``BOUNDS`` Bounds -- Display single bounding box for the entire grid. * ``BOXES`` Boxes -- Display bounding boxes for nodes in the volume tree. * ``POINTS`` Points -- Display points for nodes in the volume tree.\n\n    :type: typing.Union[str, int]\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class VolumeGrid(bpy_struct):
    """ 3D volume grid
    """
    channels: int = None
    ' Number of dimensions of the grid data type\n\n    :type: int\n    '
    data_type: typing.Union[str, int] = None
    ' Data type of voxel values\n\n    :type: typing.Union[str, int]\n    '
    is_loaded: bool = None
    ' Grid tree is loaded in memory\n\n    :type: bool\n    '
    matrix_object: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " Transformation matrix from voxel index to object space\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    name: str = None
    ' Volume grid name\n\n    :type: str\n    '

    def load(self) -> bool:
        """ Load grid tree from file

        :rtype: bool
        :return: True if grid tree was successfully loaded
        """
        pass

    def unload(self):
        """ Unload grid tree and voxel data from memory, leaving only metadata

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class VolumeRender(bpy_struct):
    """ Volume object render settings
    """
    clipping: float = None
    ' Value under which voxels are considered empty space to optimize rendering\n\n    :type: float\n    '
    precision: typing.Union[str, int] = None
    ' Specify volume data precision. Lower values reduce memory consumption at the cost of detail * ``FULL`` Full -- Full float (Use 32 bit for all data). * ``HALF`` Half -- Half float (Use 16 bit for all data). * ``VARIABLE`` Variable -- Use variable bit quantization.\n\n    :type: typing.Union[str, int]\n    '
    space: typing.Union[str, int] = None
    ' Specify volume density and step size in object or world space * ``OBJECT`` Object -- Keep volume opacity and detail the same regardless of object scale. * ``WORLD`` World -- Specify volume step size and density in world space.\n\n    :type: typing.Union[str, int]\n    '
    step_size: float = None
    ' Distance between volume samples. Lower values render more detail at the cost of performance. If set to zero, the step size is automatically determined based on voxel size\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class WalkNavigation(bpy_struct):
    """ Walk navigation settings
    """
    jump_height: float = None
    ' Maximum height of a jump\n\n    :type: float\n    '
    mouse_speed: float = None
    ' Speed factor for when looking around, high values mean faster mouse movement\n\n    :type: float\n    '
    teleport_time: float = None
    ' Interval of time warp when teleporting in navigation mode\n\n    :type: float\n    '
    use_gravity: bool = None
    ' Walk with gravity, or free navigate\n\n    :type: bool\n    '
    use_mouse_reverse: bool = None
    ' Reverse the vertical movement of the mouse\n\n    :type: bool\n    '
    view_height: float = None
    ' View distance from the floor when walking\n\n    :type: float\n    '
    walk_speed: float = None
    ' Base speed for walking and flying\n\n    :type: float\n    '
    walk_speed_factor: float = None
    ' Multiplication factor when using the fast or slow modifiers\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Window(bpy_struct):
    """ Open window
    """
    height: int = None
    ' Window height\n\n    :type: int\n    '
    parent: 'Window' = None
    " Active workspace and scene follow this window\n\n    :type: 'Window'\n    "
    scene: 'Scene' = None
    " Active scene to be edited in the window\n\n    :type: 'Scene'\n    "
    screen: 'Screen' = None
    " Active workspace screen showing in the window\n\n    :type: 'Screen'\n    "
    stereo_3d_display: 'Stereo3dDisplay' = None
    " Settings for stereo 3D display\n\n    :type: 'Stereo3dDisplay'\n    "
    view_layer: 'ViewLayer' = None
    " The active workspace view layer showing in the window\n\n    :type: 'ViewLayer'\n    "
    width: int = None
    ' Window width\n\n    :type: int\n    '
    workspace: 'WorkSpace' = None
    " Active workspace showing in the window\n\n    :type: 'WorkSpace'\n    "
    x: int = None
    ' Horizontal location of the window\n\n    :type: int\n    '
    y: int = None
    ' Vertical location of the window\n\n    :type: int\n    '

    def cursor_warp(self, x: int, y: int):
        """ Set the cursor position

        :param x: 
        :type x: int
        :param y: 
        :type y: int
        """
        pass

    def cursor_set(self, cursor: typing.Union[str, int]):
        """ Set the cursor

        :param cursor: cursor
        :type cursor: typing.Union[str, int]
        """
        pass

    def cursor_modal_set(self, cursor: typing.Union[str, int]):
        """ Restore the previous cursor after calling ``cursor_modal_set``

        :param cursor: cursor
        :type cursor: typing.Union[str, int]
        """
        pass

    def cursor_modal_restore(self):
        """ cursor_modal_restore

        """
        pass

    def event_simulate(self, type: typing.Union[str, int], value: typing.Union[str, int], unicode: str='', x: int=0, y: int=0, shift: bool=False, ctrl: bool=False, alt: bool=False, oskey: bool=False) -> 'Event':
        """ event_simulate

        :param type: Type
        :type type: typing.Union[str, int]
        :param value: Value
        :type value: typing.Union[str, int]
        :param unicode: 
        :type unicode: str
        :param x: 
        :type x: int
        :param y: 
        :type y: int
        :param shift: Shift
        :type shift: bool
        :param ctrl: Ctrl
        :type ctrl: bool
        :param alt: Alt
        :type alt: bool
        :param oskey: OS Key
        :type oskey: bool
        :rtype: 'Event'
        :return: Item, Added key map item
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class WorkSpaceTool(bpy_struct):
    has_datablock: bool = None
    ' \n\n    :type: bool\n    '
    idname: str = None
    ' \n\n    :type: str\n    '
    idname_fallback: str = None
    ' \n\n    :type: str\n    '
    index: int = None
    ' \n\n    :type: int\n    '
    mode: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    space_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    use_paint_canvas: bool = None
    ' Does this tool use an painting canvas\n\n    :type: bool\n    '
    widget: str = None
    ' \n\n    :type: str\n    '

    def setup(self, idname: str, cursor: typing.Union[str, int]='DEFAULT', keymap: str='', gizmo_group: str='', data_block: str='', operator: str='', index: int=0, options: typing.Union[typing.Set[str], typing.Set[int]]={}, idname_fallback: str='', keymap_fallback: str=''):
        """ Set the tool settings

        :param idname: Identifier
        :type idname: str
        :param cursor: cursor
        :type cursor: typing.Union[str, int]
        :param keymap: Key Map
        :type keymap: str
        :param gizmo_group: Gizmo Group
        :type gizmo_group: str
        :param data_block: Data Block
        :type data_block: str
        :param operator: Operator
        :type operator: str
        :param index: Index
        :type index: int
        :param options: Tool Options
        :type options: typing.Union[typing.Set[str], typing.Set[int]]
        :param idname_fallback: Fallback Identifier
        :type idname_fallback: str
        :param keymap_fallback: Fallback Key Map
        :type keymap_fallback: str
        """
        pass

    def operator_properties(self, operator: str):
        """ operator_properties

        :param operator: 
        :type operator: str
        """
        pass

    def gizmo_group_properties(self, group: str):
        """ gizmo_group_properties

        :param group: 
        :type group: str
        """
        pass

    def refresh_from_context(self):
        """ refresh_from_context

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class WorldLighting(bpy_struct):
    """ Lighting for a World data-block
    """
    ao_factor: float = None
    ' Factor for ambient occlusion blending\n\n    :type: float\n    '
    distance: float = None
    ' Length of rays, defines how far away other faces give occlusion effect\n\n    :type: float\n    '
    use_ambient_occlusion: bool = None
    ' Use Ambient Occlusion to add shadowing based on distance between objects\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class WorldMistSettings(bpy_struct):
    """ Mist settings for a World data-block
    """
    depth: float = None
    ' Distance over which the mist effect fades in\n\n    :type: float\n    '
    falloff: typing.Union[str, int] = None
    ' Type of transition used to fade mist * ``QUADRATIC`` Quadratic -- Use quadratic progression. * ``LINEAR`` Linear -- Use linear progression. * ``INVERSE_QUADRATIC`` Inverse Quadratic -- Use inverse quadratic progression.\n\n    :type: typing.Union[str, int]\n    '
    height: float = None
    ' Control how much mist density decreases with height\n\n    :type: float\n    '
    intensity: float = None
    ' Overall minimum intensity of the mist effect\n\n    :type: float\n    '
    start: float = None
    ' Starting distance of the mist, measured from the camera\n\n    :type: float\n    '
    use_mist: bool = None
    ' Occlude objects with the environment color as they are further away\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class XrActionMap(bpy_struct):
    actionmap_items: 'XrActionMapItems' = None
    " Items in the action map, mapping an XR event to an operator, pose, or haptic output\n\n    :type: 'XrActionMapItems'\n    "
    name: str = None
    ' Name of the action map\n\n    :type: str\n    '
    selected_item: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class XrActionMapBinding(bpy_struct):
    """ Binding in an XR action map item
    """
    axis0_region: typing.Union[str, int] = None
    ' Action execution region for the first input axis * ``ANY`` Any -- Use any axis region for operator execution. * ``POSITIVE`` Positive -- Use positive axis region only for operator execution. * ``NEGATIVE`` Negative -- Use negative axis region only for operator execution.\n\n    :type: typing.Union[str, int]\n    '
    axis1_region: typing.Union[str, int] = None
    ' Action execution region for the second input axis * ``ANY`` Any -- Use any axis region for operator execution. * ``POSITIVE`` Positive -- Use positive axis region only for operator execution. * ``NEGATIVE`` Negative -- Use negative axis region only for operator execution.\n\n    :type: typing.Union[str, int]\n    '
    component_paths: 'XrComponentPaths' = None
    " OpenXR component paths\n\n    :type: 'XrComponentPaths'\n    "
    name: str = None
    ' Name of the action map binding\n\n    :type: str\n    '
    pose_location: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    pose_rotation: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler']\n    "
    profile: str = None
    ' OpenXR interaction profile path\n\n    :type: str\n    '
    threshold: float = None
    ' Input threshold for button/axis actions\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class XrActionMapItem(bpy_struct):
    bimanual: bool = None
    ' The action depends on the states/poses of both user paths\n\n    :type: bool\n    '
    bindings: 'XrActionMapBindings' = None
    " Bindings for the action map item, mapping the action to an XR input\n\n    :type: 'XrActionMapBindings'\n    "
    haptic_amplitude: float = None
    ' Intensity of the haptic vibration, ranging from 0.0 to 1.0\n\n    :type: float\n    '
    haptic_duration: float = None
    ' Haptic duration in seconds. 0.0 is the minimum supported duration\n\n    :type: float\n    '
    haptic_frequency: float = None
    " Frequency of the haptic vibration in hertz. 0.0 specifies the OpenXR runtime's default frequency\n\n    :type: float\n    "
    haptic_match_user_paths: bool = None
    ' Apply haptics to the same user paths for the haptic action and this action\n\n    :type: bool\n    '
    haptic_mode: typing.Union[str, int] = None
    ' Haptic application mode * ``PRESS`` Press -- Apply haptics on button press. * ``RELEASE`` Release -- Apply haptics on button release. * ``PRESS_RELEASE`` Press Release -- Apply haptics on button press and release. * ``REPEAT`` Repeat -- Apply haptics repeatedly for the duration of the button press.\n\n    :type: typing.Union[str, int]\n    '
    haptic_name: str = None
    ' Name of the haptic action to apply when executing this action\n\n    :type: str\n    '
    name: str = None
    ' Name of the action map item\n\n    :type: str\n    '
    op: str = None
    ' Identifier of operator to call on action event\n\n    :type: str\n    '
    op_mode: typing.Union[str, int] = None
    ' Operator execution mode * ``PRESS`` Press -- Execute operator on button press (non-modal operators only). * ``RELEASE`` Release -- Execute operator on button release (non-modal operators only). * ``MODAL`` Modal -- Use modal execution (modal operators only).\n\n    :type: typing.Union[str, int]\n    '
    op_name: str = None
    ' Name of operator (translated) to call on action event\n\n    :type: str\n    '
    op_properties: 'OperatorProperties' = None
    " Properties to set when the operator is called\n\n    :type: 'OperatorProperties'\n    "
    pose_is_controller_aim: bool = None
    ' The action poses will be used for the VR controller aims\n\n    :type: bool\n    '
    pose_is_controller_grip: bool = None
    ' The action poses will be used for the VR controller grips\n\n    :type: bool\n    '
    selected_binding: int = None
    ' Currently selected binding\n\n    :type: int\n    '
    type: typing.Union[str, int] = None
    " Action type * ``FLOAT`` Float -- Float action, representing either a digital or analog button. * ``VECTOR2D`` Vector2D -- 2D float vector action, representing a thumbstick or trackpad. * ``POSE`` Pose -- 3D pose action, representing a controller's location and rotation. * ``VIBRATION`` Vibration -- Haptic vibration output action, to be applied with a duration, frequency, and amplitude.\n\n    :type: typing.Union[str, int]\n    "
    user_paths: 'XrUserPaths' = None
    " OpenXR user paths\n\n    :type: 'XrUserPaths'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class XrComponentPath(bpy_struct):
    path: str = None
    ' OpenXR component path\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class XrEventData(bpy_struct):
    """ XR Data for Window Manager Event
    """
    action: str = None
    ' XR action name\n\n    :type: str\n    '
    action_set: str = None
    ' XR action set name\n\n    :type: str\n    '
    bimanual: bool = None
    ' Whether bimanual interaction is occurring\n\n    :type: bool\n    '
    controller_location: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Location of the action's corresponding controller aim in world space\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    controller_location_other: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Controller aim location of the other user path for bimanual actions\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    controller_rotation: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion'] = None
    " Rotation of the action's corresponding controller aim in world space\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion']\n    "
    controller_rotation_other: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion'] = None
    " Controller aim rotation of the other user path for bimanual actions\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion']\n    "
    float_threshold: float = None
    ' Input threshold for float/2D vector actions\n\n    :type: float\n    '
    state: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " XR action values corresponding to type\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    state_other: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " State of the other user path for bimanual actions\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    type: typing.Union[str, int] = None
    " XR action type * ``FLOAT`` Float -- Float action, representing either a digital or analog button. * ``VECTOR2D`` Vector2D -- 2D float vector action, representing a thumbstick or trackpad. * ``POSE`` Pose -- 3D pose action, representing a controller's location and rotation. * ``VIBRATION`` Vibration -- Haptic vibration output action, to be applied with a duration, frequency, and amplitude.\n\n    :type: typing.Union[str, int]\n    "
    user_path: str = None
    ' User path of the action. E.g. "/user/hand/left"\n\n    :type: str\n    '
    user_path_other: str = None
    ' Other user path, for bimanual actions. E.g. "/user/hand/right"\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class XrSessionSettings(bpy_struct):
    base_pose_angle: float = None
    ' Rotation angle around the Z-Axis to apply the rotation deltas from the VR headset to\n\n    :type: float\n    '
    base_pose_location: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Coordinates to apply translation deltas from the VR headset to\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    base_pose_object: 'Object' = None
    " Object to take the location and rotation to which translation and rotation deltas from the VR headset will be applied to\n\n    :type: 'Object'\n    "
    base_pose_type: typing.Union[str, int] = None
    " Define where the location and rotation for the VR view come from, to which translation and rotation deltas from the VR headset will be applied to * ``SCENE_CAMERA`` Scene Camera -- Follow the active scene camera to define the VR view's base pose. * ``OBJECT`` Object -- Follow the transformation of an object to define the VR view's base pose. * ``CUSTOM`` Custom -- Follow a custom transformation to define the VR view's base pose.\n\n    :type: typing.Union[str, int]\n    "
    base_scale: float = None
    ' Uniform scale to apply to VR view\n\n    :type: float\n    '
    clip_end: float = None
    ' VR viewport far clipping distance\n\n    :type: float\n    '
    clip_start: float = None
    ' VR viewport near clipping distance\n\n    :type: float\n    '
    controller_draw_style: typing.Union[str, int] = None
    ' Style to use when drawing VR controllers * ``DARK`` Dark -- Draw dark controller. * ``LIGHT`` Light -- Draw light controller. * ``DARK_RAY`` Dark + Ray -- Draw dark controller with aiming axis ray. * ``LIGHT_RAY`` Light + Ray -- Draw light controller with aiming axis ray.\n\n    :type: typing.Union[str, int]\n    '
    icon_from_show_object_viewport: int = None
    ' \n\n    :type: int\n    '
    shading: 'View3DShading' = None
    " \n\n    :type: 'View3DShading'\n    "
    show_annotation: bool = None
    ' Show annotations for this view\n\n    :type: bool\n    '
    show_controllers: bool = None
    ' Show VR controllers (requires VR actions for controller poses)\n\n    :type: bool\n    '
    show_custom_overlays: bool = None
    ' Show custom VR overlays\n\n    :type: bool\n    '
    show_floor: bool = None
    ' Show the ground plane grid\n\n    :type: bool\n    '
    show_object_extras: bool = None
    ' Show object extras, including empties, lights, and cameras\n\n    :type: bool\n    '
    show_object_select_armature: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_camera: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_curve: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_curves: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_empty: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_font: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_grease_pencil: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_lattice: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_light: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_light_probe: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_mesh: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_meta: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_pointcloud: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_speaker: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_surf: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_volume: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_armature: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_camera: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_curve: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_curves: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_empty: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_font: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_grease_pencil: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_lattice: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_light: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_light_probe: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_mesh: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_meta: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_pointcloud: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_speaker: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_surf: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_volume: bool = None
    ' \n\n    :type: bool\n    '
    show_selection: bool = None
    ' Show selection outlines\n\n    :type: bool\n    '
    use_absolute_tracking: bool = None
    ' Allow the VR tracking origin to be defined independently of the headset location\n\n    :type: bool\n    '
    use_positional_tracking: bool = None
    ' Allow VR headsets to affect the location in virtual space, in addition to the rotation\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class XrSessionState(bpy_struct):
    """ Runtime state information about the VR session
    """
    actionmaps: 'XrActionMaps' = None
    " \n\n    :type: 'XrActionMaps'\n    "
    active_actionmap: int = None
    ' \n\n    :type: int\n    '
    navigation_location: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Location offset to apply to base pose when determining viewer location\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    navigation_rotation: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion'] = None
    " Rotation offset to apply to base pose when determining viewer rotation\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion']\n    "
    navigation_scale: float = None
    ' Additional scale multiplier to apply to base scale when determining viewer scale\n\n    :type: float\n    '
    selected_actionmap: int = None
    ' \n\n    :type: int\n    '
    viewer_pose_location: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Last known location of the viewer pose (center between the eyes) in world space\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    viewer_pose_rotation: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion'] = None
    " Last known rotation of the viewer pose (center between the eyes) in world space\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion']\n    "

    @classmethod
    def is_running(cls, context: 'Context') -> bool:
        """ Query if the VR session is currently running

        :param context: 
        :type context: 'Context'
        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def reset_to_base_pose(cls, context: 'Context'):
        """ Force resetting of position and rotation deltas

        :param context: 
        :type context: 'Context'
        """
        pass

    @classmethod
    def action_set_create(cls, context: 'Context', actionmap: 'XrActionMap') -> bool:
        """ Create a VR action set

        :param context: 
        :type context: 'Context'
        :param actionmap: 
        :type actionmap: 'XrActionMap'
        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def action_create(cls, context: 'Context', actionmap: 'XrActionMap', actionmap_item: 'XrActionMapItem') -> bool:
        """ Create a VR action

        :param context: 
        :type context: 'Context'
        :param actionmap: 
        :type actionmap: 'XrActionMap'
        :param actionmap_item: 
        :type actionmap_item: 'XrActionMapItem'
        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def action_binding_create(cls, context: 'Context', actionmap: 'XrActionMap', actionmap_item: 'XrActionMapItem', actionmap_binding: 'XrActionMapBinding') -> bool:
        """ Create a VR action binding

        :param context: 
        :type context: 'Context'
        :param actionmap: 
        :type actionmap: 'XrActionMap'
        :param actionmap_item: 
        :type actionmap_item: 'XrActionMapItem'
        :param actionmap_binding: 
        :type actionmap_binding: 'XrActionMapBinding'
        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def active_action_set_set(cls, context: 'Context', action_set: str) -> bool:
        """ Set the active VR action set

        :param context: 
        :type context: 'Context'
        :param action_set: Action Set, Action set name
        :type action_set: str
        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def controller_pose_actions_set(cls, context: 'Context', action_set: str, grip_action: str, aim_action: str) -> bool:
        """ Set the actions that determine the VR controller poses

        :param context: 
        :type context: 'Context'
        :param action_set: Action Set, Action set name
        :type action_set: str
        :param grip_action: Grip Action, Name of the action representing the controller grips
        :type grip_action: str
        :param aim_action: Aim Action, Name of the action representing the controller aims
        :type aim_action: str
        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def action_state_get(cls, context: 'Context', action_set_name: str, action_name: str, user_path: str) -> typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector']:
        """ Get the current state of a VR action

        :param context: 
        :type context: 'Context'
        :param action_set_name: Action Set, Action set name
        :type action_set_name: str
        :param action_name: Action, Action name
        :type action_name: str
        :param user_path: User Path, OpenXR user path
        :type user_path: str
        :rtype: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector']
        :return: Action State, Current state of the VR action. Second float value is only set for 2D vector type actions
        """
        pass

    @classmethod
    def haptic_action_apply(cls, context: 'Context', action_set_name: str, action_name: str, user_path: str, duration: float, frequency: float, amplitude: float) -> bool:
        """ Apply a VR haptic action

        :param context: 
        :type context: 'Context'
        :param action_set_name: Action Set, Action set name
        :type action_set_name: str
        :param action_name: Action, Action name
        :type action_name: str
        :param user_path: User Path, Optional OpenXR user path. If not set, the action will be applied to all paths
        :type user_path: str
        :param duration: Duration, Haptic duration in seconds. 0.0 is the minimum supported duration
        :type duration: float
        :param frequency: Frequency, Frequency of the haptic vibration in hertz. 0.0 specifies the OpenXR runtime's default frequency
        :type frequency: float
        :param amplitude: Amplitude, Haptic amplitude, ranging from 0.0 to 1.0
        :type amplitude: float
        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def haptic_action_stop(cls, context: 'Context', action_set_name: str, action_name: str, user_path: str):
        """ Stop a VR haptic action

        :param context: 
        :type context: 'Context'
        :param action_set_name: Action Set, Action set name
        :type action_set_name: str
        :param action_name: Action, Action name
        :type action_name: str
        :param user_path: User Path, Optional OpenXR user path. If not set, the action will be stopped for all paths
        :type user_path: str
        """
        pass

    @classmethod
    def controller_grip_location_get(cls, context: 'Context', index: int) -> typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']:
        """ Get the last known controller grip location in world space

        :param context: 
        :type context: 'Context'
        :param index: Index, Controller index
        :type index: int
        :rtype: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']
        :return: Location, Controller grip location
        """
        pass

    @classmethod
    def controller_grip_rotation_get(cls, context: 'Context', index: int) -> typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion']:
        """ Get the last known controller grip rotation (quaternion) in world space

        :param context: 
        :type context: 'Context'
        :param index: Index, Controller index
        :type index: int
        :rtype: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion']
        :return: Rotation, Controller grip quaternion rotation
        """
        pass

    @classmethod
    def controller_aim_location_get(cls, context: 'Context', index: int) -> typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']:
        """ Get the last known controller aim location in world space

        :param context: 
        :type context: 'Context'
        :param index: Index, Controller index
        :type index: int
        :rtype: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']
        :return: Location, Controller aim location
        """
        pass

    @classmethod
    def controller_aim_rotation_get(cls, context: 'Context', index: int) -> typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion']:
        """ Get the last known controller aim rotation (quaternion) in world space

        :param context: 
        :type context: 'Context'
        :param index: Index, Controller index
        :type index: int
        :rtype: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion']
        :return: Rotation, Controller aim quaternion rotation
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class XrUserPath(bpy_struct):
    path: str = None
    ' OpenXR user path\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class wmOwnerID(bpy_struct):
    name: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class AOVs(bpy_prop_collection[AOV], bpy_struct):
    """ Collection of AOVs
    """

    def add(self) -> 'AOV':
        """ add

        :rtype: 'AOV'
        :return: Newly created AOV
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ActionGroups(bpy_prop_collection[ActionGroup], bpy_struct):
    """ Collection of action groups
    """

    def new(self, name: str) -> 'ActionGroup':
        """ Create a new action group and add it to the action

        :param name: New name for the action group
        :type name: str
        :rtype: 'ActionGroup'
        :return: Newly created action group
        """
        pass

    def remove(self, action_group: 'ActionGroup'):
        """ Remove action group

        :param action_group: Action group to remove
        :type action_group: 'ActionGroup'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Addons(bpy_prop_collection[Addon], bpy_struct):
    """ Collection of add-ons
    """

    @classmethod
    def new(cls) -> 'Addon':
        """ Add a new add-on

        :rtype: 'Addon'
        :return: Add-on data
        """
        pass

    @classmethod
    def remove(cls, addon: 'Addon'):
        """ Remove add-on

        :param addon: Add-on to remove
        :type addon: 'Addon'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class AssetTags(bpy_prop_collection[AssetTag], bpy_struct):
    """ Collection of custom asset tags
    """

    def new(self, name: str, skip_if_exists: bool=False) -> 'AssetTag':
        """ Add a new tag to this asset

        :param name: Name
        :type name: str
        :param skip_if_exists: Skip if Exists, Do not add a new tag if one of the same type already exists
        :type skip_if_exists: bool
        :rtype: 'AssetTag'
        :return: New tag
        """
        pass

    def remove(self, tag: 'AssetTag'):
        """ Remove an existing tag from this asset

        :param tag: Removed tag
        :type tag: 'AssetTag'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class AttributeGroup(bpy_prop_collection[Attribute], bpy_struct):
    """ Group of geometry attributes
    """
    active: 'Attribute' = None
    " Active attribute\n\n    :type: 'Attribute'\n    "
    active_color: 'Attribute' = None
    " Active color attribute for display and editing\n\n    :type: 'Attribute'\n    "
    active_color_index: int = None
    ' Active color attribute index\n\n    :type: int\n    '
    active_color_name: str = None
    ' The name of the active color attribute for display and editing\n\n    :type: str\n    '
    active_index: int = None
    ' Active attribute index\n\n    :type: int\n    '
    default_color_name: str = None
    ' The name of the default color attribute used as a fallback for rendering\n\n    :type: str\n    '
    render_color_index: int = None
    ' The index of the color attribute used as a fallback for rendering\n\n    :type: int\n    '

    def new(self, name: str, type: typing.Union[str, int], domain: typing.Union[str, int]) -> 'Attribute':
        """ Add attribute to geometry

        :param name: Name, Name of geometry attribute
        :type name: str
        :param type: Type, Attribute type
        :type type: typing.Union[str, int]
        :param domain: Domain, Type of element that attribute is stored on
        :type domain: typing.Union[str, int]
        :rtype: 'Attribute'
        :return: New geometry attribute
        """
        pass

    def remove(self, attribute: 'Attribute'):
        """ Remove attribute from geometry

        :param attribute: Geometry Attribute
        :type attribute: 'Attribute'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BoolAttribute(Attribute, bpy_struct):
    """ Geometry attribute that stores booleans
    """
    data: bpy_prop_collection['BoolAttributeValue'] = None
    " \n\n    :type: bpy_prop_collection['BoolAttributeValue']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ByteColorAttribute(Attribute, bpy_struct):
    """ Geometry attribute that stores RGBA colors as positive integer values using 8-bits per channel
    """
    data: bpy_prop_collection['ByteColorAttributeValue'] = None
    " \n\n    :type: bpy_prop_collection['ByteColorAttributeValue']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ByteIntAttribute(Attribute, bpy_struct):
    """ Geometry attribute that stores 8-bit integers
    """
    data: bpy_prop_collection['ByteIntAttributeValue'] = None
    " \n\n    :type: bpy_prop_collection['ByteIntAttributeValue']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Float2Attribute(Attribute, bpy_struct):
    """ Geometry attribute that stores floating-point 2D vectors
    """
    data: bpy_prop_collection['Float2AttributeValue'] = None
    " \n\n    :type: bpy_prop_collection['Float2AttributeValue']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FloatAttribute(Attribute, bpy_struct):
    """ Geometry attribute that stores floating-point values
    """
    data: bpy_prop_collection['FloatAttributeValue'] = None
    " \n\n    :type: bpy_prop_collection['FloatAttributeValue']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FloatColorAttribute(Attribute, bpy_struct):
    """ Geometry attribute that stores RGBA colors as floating-point values using 32-bits per channel
    """
    data: bpy_prop_collection['FloatColorAttributeValue'] = None
    " \n\n    :type: bpy_prop_collection['FloatColorAttributeValue']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FloatVectorAttribute(Attribute, bpy_struct):
    """ Geometry attribute that stores floating-point 3D vectors
    """
    data: bpy_prop_collection['FloatVectorAttributeValue'] = None
    " \n\n    :type: bpy_prop_collection['FloatVectorAttributeValue']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class IntAttribute(Attribute, bpy_struct):
    """ Geometry attribute that stores integer values
    """
    data: bpy_prop_collection['IntAttributeValue'] = None
    " \n\n    :type: bpy_prop_collection['IntAttributeValue']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class StringAttribute(Attribute, bpy_struct):
    """ Geometry attribute that stores strings
    """
    data: bpy_prop_collection['StringAttributeValue'] = None
    " \n\n    :type: bpy_prop_collection['StringAttributeValue']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SplineBezierPoints(bpy_prop_collection[BezierSplinePoint], bpy_struct):
    """ Collection of spline Bezier points
    """

    def add(self, count: int):
        """ Add a number of points to this spline

        :param count: Number, Number of points to add to the spline
        :type count: int
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BoidRuleAverageSpeed(BoidRule, bpy_struct):
    level: float = None
    " How much velocity's z-component is kept constant\n\n    :type: float\n    "
    speed: float = None
    ' Percentage of maximum speed\n\n    :type: float\n    '
    wander: float = None
    " How fast velocity's direction is randomized\n\n    :type: float\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BoidRuleAvoid(BoidRule, bpy_struct):
    fear_factor: float = None
    ' Avoid object if danger from it is above this threshold\n\n    :type: float\n    '
    object: 'Object' = None
    " Object to avoid\n\n    :type: 'Object'\n    "
    use_predict: bool = None
    ' Predict target movement\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BoidRuleAvoidCollision(BoidRule, bpy_struct):
    look_ahead: float = None
    ' Time to look ahead in seconds\n\n    :type: float\n    '
    use_avoid: bool = None
    ' Avoid collision with other boids\n\n    :type: bool\n    '
    use_avoid_collision: bool = None
    ' Avoid collision with deflector objects\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BoidRuleFight(BoidRule, bpy_struct):
    distance: float = None
    ' Attack boids at max this distance\n\n    :type: float\n    '
    flee_distance: float = None
    ' Flee to this distance\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BoidRuleFollowLeader(BoidRule, bpy_struct):
    distance: float = None
    ' Distance behind leader to follow\n\n    :type: float\n    '
    object: 'Object' = None
    " Follow this object instead of a boid\n\n    :type: 'Object'\n    "
    queue_count: int = None
    ' How many boids in a line\n\n    :type: int\n    '
    use_line: bool = None
    ' Follow leader in a line\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BoidRuleGoal(BoidRule, bpy_struct):
    object: 'Object' = None
    " Goal object\n\n    :type: 'Object'\n    "
    use_predict: bool = None
    ' Predict target movement\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ArmatureBones(bpy_prop_collection[Bone], bpy_struct):
    """ Collection of armature bones
    """
    active: 'Bone' = None
    " Armature's active bone\n\n    :type: 'Bone'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BoneGroups(bpy_prop_collection[BoneGroup], bpy_struct):
    """ Collection of bone groups
    """
    active: 'BoneGroup' = None
    " Active bone group for this pose\n\n    :type: 'BoneGroup'\n    "
    active_index: int = None
    ' Active index in bone groups array\n\n    :type: int\n    '

    def new(self, name: str='Group') -> 'BoneGroup':
        """ Add a new bone group to the object

        :param name: Name of the new group
        :type name: str
        :rtype: 'BoneGroup'
        :return: New bone group
        """
        pass

    def remove(self, group: 'BoneGroup'):
        """ Remove a bone group from this object

        :param group: Removed bone group
        :type group: 'BoneGroup'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CacheFileLayers(bpy_prop_collection[CacheFileLayer], bpy_struct):
    """ Collection of cache layers
    """
    active: 'CacheFileLayer' = None
    " Active layer of the CacheFile\n\n    :type: 'CacheFileLayer'\n    "

    def new(self, filepath: str) -> 'CacheFileLayer':
        """ Add a new layer

        :param filepath: File path to the archive used as a layer
        :type filepath: str
        :rtype: 'CacheFileLayer'
        :return: Newly created layer
        """
        pass

    def remove(self, layer: 'CacheFileLayer'):
        """ Remove an existing layer from the cache file

        :param layer: Layer to remove
        :type layer: 'CacheFileLayer'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CacheObjectPaths(bpy_prop_collection[CacheObjectPath], bpy_struct):
    """ Collection of object paths
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CameraBackgroundImages(bpy_prop_collection[CameraBackgroundImage], bpy_struct):
    """ Collection of background images
    """

    def new(self) -> 'CameraBackgroundImage':
        """ Add new background image

        :rtype: 'CameraBackgroundImage'
        :return: Image displayed as viewport background
        """
        pass

    def remove(self, image: 'CameraBackgroundImage'):
        """ Remove background image

        :param image: Image displayed as viewport background
        :type image: 'CameraBackgroundImage'
        """
        pass

    def clear(self):
        """ Remove all background images

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ColorRampElements(bpy_prop_collection[ColorRampElement], bpy_struct):
    """ Collection of Color Ramp Elements
    """

    def new(self, position: float) -> 'ColorRampElement':
        """ Add element to ColorRamp

        :param position: Position, Position to add element
        :type position: float
        :rtype: 'ColorRampElement'
        :return: New element
        """
        pass

    def remove(self, element: 'ColorRampElement'):
        """ Delete element from ColorRamp

        :param element: Element to remove
        :type element: 'ColorRampElement'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ActionConstraint(Constraint, bpy_struct):
    """ Map an action to the transform axes of a bone
    """
    action: 'Action' = None
    " The constraining action\n\n    :type: 'Action'\n    "
    eval_time: float = None
    ' Interpolates between Action Start and End frames\n\n    :type: float\n    '
    frame_end: int = None
    ' Last frame of the Action to use\n\n    :type: int\n    '
    frame_start: int = None
    ' First frame of the Action to use\n\n    :type: int\n    '
    max: float = None
    ' Maximum value for target channel range\n\n    :type: float\n    '
    min: float = None
    ' Minimum value for target channel range\n\n    :type: float\n    '
    mix_mode: typing.Union[str, int] = None
    ' Specify how existing transformations and the action channels are combined * ``BEFORE_FULL`` Before Original (Full) -- Apply the action channels before the original transformation, as if applied to an imaginary parent in Full Inherit Scale mode. Will create shear when combining rotation and non-uniform scale. * ``BEFORE`` Before Original (Aligned) -- Apply the action channels before the original transformation, as if applied to an imaginary parent in Aligned Inherit Scale mode. This effectively uses Full for location and Split Channels for rotation and scale. * ``BEFORE_SPLIT`` Before Original (Split Channels) -- Apply the action channels before the original transformation, handling location, rotation and scale separately. * ``AFTER_FULL`` After Original (Full) -- Apply the action channels after the original transformation, as if applied to an imaginary child in Full Inherit Scale mode. Will create shear when combining rotation and non-uniform scale. * ``AFTER`` After Original (Aligned) -- Apply the action channels after the original transformation, as if applied to an imaginary child in Aligned Inherit Scale mode. This effectively uses Full for location and Split Channels for rotation and scale. * ``AFTER_SPLIT`` After Original (Split Channels) -- Apply the action channels after the original transformation, handling location, rotation and scale separately.\n\n    :type: typing.Union[str, int]\n    '
    subtarget: str = None
    ' Armature bone, mesh or lattice vertex group, ...\n\n    :type: str\n    '
    target: 'Object' = None
    " Target object\n\n    :type: 'Object'\n    "
    transform_channel: typing.Union[str, int] = None
    ' Transformation channel from the target that is used to key the Action\n\n    :type: typing.Union[str, int]\n    '
    use_bone_object_action: bool = None
    " Bones only: apply the object's transformation channels of the action to the constrained bone, instead of bone's channels\n\n    :type: bool\n    "
    use_eval_time: bool = None
    ' Interpolate between Action Start and End frames, with the Evaluation Time slider instead of the Target object/bone\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ArmatureConstraint(Constraint, bpy_struct):
    """ Applies transformations done by the Armature modifier
    """
    targets: 'ArmatureConstraintTargets' = None
    " Target Bones\n\n    :type: 'ArmatureConstraintTargets'\n    "
    use_bone_envelopes: bool = None
    ' Multiply weights by envelope for all bones, instead of acting like Vertex Group based blending. The specified weights are still used, and only the listed bones are considered\n\n    :type: bool\n    '
    use_current_location: bool = None
    ' Use the current bone location for envelopes and choosing B-Bone segments instead of rest position\n\n    :type: bool\n    '
    use_deform_preserve_volume: bool = None
    ' Deform rotation interpolation with quaternions\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CameraSolverConstraint(Constraint, bpy_struct):
    """ Lock motion to the reconstructed camera movement
    """
    clip: 'MovieClip' = None
    " Movie Clip to get tracking data from\n\n    :type: 'MovieClip'\n    "
    use_active_clip: bool = None
    ' Use active clip defined in scene\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ChildOfConstraint(Constraint, bpy_struct):
    """ Create constraint-based parent-child relationship
    """
    inverse_matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " Transformation matrix to apply before\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    set_inverse_pending: bool = None
    ' Set to true to request recalculation of the inverse matrix\n\n    :type: bool\n    '
    subtarget: str = None
    ' Armature bone, mesh or lattice vertex group, ...\n\n    :type: str\n    '
    target: 'Object' = None
    " Target object\n\n    :type: 'Object'\n    "
    use_location_x: bool = None
    ' Use X Location of Parent\n\n    :type: bool\n    '
    use_location_y: bool = None
    ' Use Y Location of Parent\n\n    :type: bool\n    '
    use_location_z: bool = None
    ' Use Z Location of Parent\n\n    :type: bool\n    '
    use_rotation_x: bool = None
    ' Use X Rotation of Parent\n\n    :type: bool\n    '
    use_rotation_y: bool = None
    ' Use Y Rotation of Parent\n\n    :type: bool\n    '
    use_rotation_z: bool = None
    ' Use Z Rotation of Parent\n\n    :type: bool\n    '
    use_scale_x: bool = None
    ' Use X Scale of Parent\n\n    :type: bool\n    '
    use_scale_y: bool = None
    ' Use Y Scale of Parent\n\n    :type: bool\n    '
    use_scale_z: bool = None
    ' Use Z Scale of Parent\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ClampToConstraint(Constraint, bpy_struct):
    """ Constrain an object's location to the nearest point along the target path
    """
    main_axis: typing.Union[str, int] = None
    ' Main axis of movement\n\n    :type: typing.Union[str, int]\n    '
    target: 'Object' = None
    " Target Object (Curves only)\n\n    :type: 'Object'\n    "
    use_cyclic: bool = None
    ' Treat curve as cyclic curve (no clamping to curve bounding box)\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CopyLocationConstraint(Constraint, bpy_struct):
    """ Copy the location of the target
    """
    head_tail: float = None
    ' Target along length of bone: Head is 0, Tail is 1\n\n    :type: float\n    '
    invert_x: bool = None
    ' Invert the X location\n\n    :type: bool\n    '
    invert_y: bool = None
    ' Invert the Y location\n\n    :type: bool\n    '
    invert_z: bool = None
    ' Invert the Z location\n\n    :type: bool\n    '
    subtarget: str = None
    ' Armature bone, mesh or lattice vertex group, ...\n\n    :type: str\n    '
    target: 'Object' = None
    " Target object\n\n    :type: 'Object'\n    "
    use_bbone_shape: bool = None
    ' Follow shape of B-Bone segments when calculating Head/Tail position\n\n    :type: bool\n    '
    use_offset: bool = None
    ' Add original location into copied location\n\n    :type: bool\n    '
    use_x: bool = None
    " Copy the target's X location\n\n    :type: bool\n    "
    use_y: bool = None
    " Copy the target's Y location\n\n    :type: bool\n    "
    use_z: bool = None
    " Copy the target's Z location\n\n    :type: bool\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CopyRotationConstraint(Constraint, bpy_struct):
    """ Copy the rotation of the target
    """
    euler_order: typing.Union[str, int] = None
    ' Explicitly specify the euler rotation order * ``AUTO`` Default -- Euler using the default rotation order. * ``XYZ`` XYZ Euler -- Euler using the XYZ rotation order. * ``XZY`` XZY Euler -- Euler using the XZY rotation order. * ``YXZ`` YXZ Euler -- Euler using the YXZ rotation order. * ``YZX`` YZX Euler -- Euler using the YZX rotation order. * ``ZXY`` ZXY Euler -- Euler using the ZXY rotation order. * ``ZYX`` ZYX Euler -- Euler using the ZYX rotation order.\n\n    :type: typing.Union[str, int]\n    '
    invert_x: bool = None
    ' Invert the X rotation\n\n    :type: bool\n    '
    invert_y: bool = None
    ' Invert the Y rotation\n\n    :type: bool\n    '
    invert_z: bool = None
    ' Invert the Z rotation\n\n    :type: bool\n    '
    mix_mode: typing.Union[str, int] = None
    ' Specify how the copied and existing rotations are combined * ``REPLACE`` Replace -- Replace the original rotation with copied. * ``ADD`` Add -- Add euler component values together. * ``BEFORE`` Before Original -- Apply copied rotation before original, as if the constraint target is a parent. * ``AFTER`` After Original -- Apply copied rotation after original, as if the constraint target is a child. * ``OFFSET`` Offset (Legacy) -- Combine rotations like the original Offset checkbox. Does not work well for multiple axis rotations.\n\n    :type: typing.Union[str, int]\n    '
    subtarget: str = None
    ' Armature bone, mesh or lattice vertex group, ...\n\n    :type: str\n    '
    target: 'Object' = None
    " Target object\n\n    :type: 'Object'\n    "
    use_offset: bool = None
    ' DEPRECATED: Add original rotation into copied rotation\n\n    :type: bool\n    '
    use_x: bool = None
    " Copy the target's X rotation\n\n    :type: bool\n    "
    use_y: bool = None
    " Copy the target's Y rotation\n\n    :type: bool\n    "
    use_z: bool = None
    " Copy the target's Z rotation\n\n    :type: bool\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CopyScaleConstraint(Constraint, bpy_struct):
    """ Copy the scale of the target
    """
    power: float = None
    " Raise the target's scale to the specified power\n\n    :type: float\n    "
    subtarget: str = None
    ' Armature bone, mesh or lattice vertex group, ...\n\n    :type: str\n    '
    target: 'Object' = None
    " Target object\n\n    :type: 'Object'\n    "
    use_add: bool = None
    ' Use addition instead of multiplication to combine scale (2.7 compatibility)\n\n    :type: bool\n    '
    use_make_uniform: bool = None
    ' Redistribute the copied change in volume equally between the three axes of the owner\n\n    :type: bool\n    '
    use_offset: bool = None
    ' Combine original scale with copied scale\n\n    :type: bool\n    '
    use_x: bool = None
    " Copy the target's X scale\n\n    :type: bool\n    "
    use_y: bool = None
    " Copy the target's Y scale\n\n    :type: bool\n    "
    use_z: bool = None
    " Copy the target's Z scale\n\n    :type: bool\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CopyTransformsConstraint(Constraint, bpy_struct):
    """ Copy all the transforms of the target
    """
    head_tail: float = None
    ' Target along length of bone: Head is 0, Tail is 1\n\n    :type: float\n    '
    mix_mode: typing.Union[str, int] = None
    ' Specify how the copied and existing transformations are combined * ``REPLACE`` Replace -- Replace the original transformation with copied. * ``BEFORE_FULL`` Before Original (Full) -- Apply copied transformation before original, using simple matrix multiplication as if the constraint target is a parent in Full Inherit Scale mode. Will create shear when combining rotation and non-uniform scale. * ``BEFORE`` Before Original (Aligned) -- Apply copied transformation before original, as if the constraint target is a parent in Aligned Inherit Scale mode. This effectively uses Full for location and Split Channels for rotation and scale. * ``BEFORE_SPLIT`` Before Original (Split Channels) -- Apply copied transformation before original, handling location, rotation and scale separately, similar to a sequence of three Copy constraints. * ``AFTER_FULL`` After Original (Full) -- Apply copied transformation after original, using simple matrix multiplication as if the constraint target is a child in Full Inherit Scale mode. Will create shear when combining rotation and non-uniform scale. * ``AFTER`` After Original (Aligned) -- Apply copied transformation after original, as if the constraint target is a child in Aligned Inherit Scale mode. This effectively uses Full for location and Split Channels for rotation and scale. * ``AFTER_SPLIT`` After Original (Split Channels) -- Apply copied transformation after original, handling location, rotation and scale separately, similar to a sequence of three Copy constraints.\n\n    :type: typing.Union[str, int]\n    '
    remove_target_shear: bool = None
    ' Remove shear from the target transformation before combining\n\n    :type: bool\n    '
    subtarget: str = None
    ' Armature bone, mesh or lattice vertex group, ...\n\n    :type: str\n    '
    target: 'Object' = None
    " Target object\n\n    :type: 'Object'\n    "
    use_bbone_shape: bool = None
    ' Follow shape of B-Bone segments when calculating Head/Tail position\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class DampedTrackConstraint(Constraint, bpy_struct):
    """ Point toward target by taking the shortest rotation path
    """
    head_tail: float = None
    ' Target along length of bone: Head is 0, Tail is 1\n\n    :type: float\n    '
    subtarget: str = None
    ' Armature bone, mesh or lattice vertex group, ...\n\n    :type: str\n    '
    target: 'Object' = None
    " Target object\n\n    :type: 'Object'\n    "
    track_axis: typing.Union[str, int] = None
    ' Axis that points to the target object\n\n    :type: typing.Union[str, int]\n    '
    use_bbone_shape: bool = None
    ' Follow shape of B-Bone segments when calculating Head/Tail position\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FloorConstraint(Constraint, bpy_struct):
    """ Use the target object for location limitation
    """
    floor_location: typing.Union[str, int] = None
    ' Location of target that object will not pass through\n\n    :type: typing.Union[str, int]\n    '
    offset: float = None
    ' Offset of floor from object origin\n\n    :type: float\n    '
    subtarget: str = None
    ' Armature bone, mesh or lattice vertex group, ...\n\n    :type: str\n    '
    target: 'Object' = None
    " Target object\n\n    :type: 'Object'\n    "
    use_rotation: bool = None
    " Use the target's rotation to determine floor\n\n    :type: bool\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FollowPathConstraint(Constraint, bpy_struct):
    """ Lock motion to the target path
    """
    forward_axis: typing.Union[str, int] = None
    ' Axis that points forward along the path\n\n    :type: typing.Union[str, int]\n    '
    offset: float = None
    ' Offset from the position corresponding to the time frame\n\n    :type: float\n    '
    offset_factor: float = None
    ' Percentage value defining target position along length of curve\n\n    :type: float\n    '
    target: 'Object' = None
    " Target Curve object\n\n    :type: 'Object'\n    "
    up_axis: typing.Union[str, int] = None
    ' Axis that points upward\n\n    :type: typing.Union[str, int]\n    '
    use_curve_follow: bool = None
    ' Object will follow the heading and banking of the curve\n\n    :type: bool\n    '
    use_curve_radius: bool = None
    ' Object is scaled by the curve radius\n\n    :type: bool\n    '
    use_fixed_location: bool = None
    ' Object will stay locked to a single point somewhere along the length of the curve regardless of time\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FollowTrackConstraint(Constraint, bpy_struct):
    """ Lock motion to the target motion track
    """
    camera: 'Object' = None
    " Camera to which motion is parented (if empty active scene camera is used)\n\n    :type: 'Object'\n    "
    clip: 'MovieClip' = None
    " Movie Clip to get tracking data from\n\n    :type: 'MovieClip'\n    "
    depth_object: 'Object' = None
    " Object used to define depth in camera space by projecting onto surface of this object\n\n    :type: 'Object'\n    "
    frame_method: typing.Union[str, int] = None
    ' How the footage fits in the camera frame\n\n    :type: typing.Union[str, int]\n    '
    object: str = None
    ' Movie tracking object to follow (if empty, camera object is used)\n\n    :type: str\n    '
    track: str = None
    ' Movie tracking track to follow\n\n    :type: str\n    '
    use_3d_position: bool = None
    ' Use 3D position of track to parent to\n\n    :type: bool\n    '
    use_active_clip: bool = None
    ' Use active clip defined in scene\n\n    :type: bool\n    '
    use_undistorted_position: bool = None
    ' Parent to undistorted position of 2D track\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class KinematicConstraint(Constraint, bpy_struct):
    """ Inverse Kinematics
    """
    chain_count: int = None
    ' How many bones are included in the IK effect - 0 uses all bones\n\n    :type: int\n    '
    distance: float = None
    ' Radius of limiting sphere\n\n    :type: float\n    '
    ik_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    iterations: int = None
    ' Maximum number of solving iterations\n\n    :type: int\n    '
    limit_mode: typing.Union[str, int] = None
    ' Distances in relation to sphere of influence to allow * ``LIMITDIST_INSIDE`` Inside -- The object is constrained inside a virtual sphere around the target object, with a radius defined by the limit distance. * ``LIMITDIST_OUTSIDE`` Outside -- The object is constrained outside a virtual sphere around the target object, with a radius defined by the limit distance. * ``LIMITDIST_ONSURFACE`` On Surface -- The object is constrained on the surface of a virtual sphere around the target object, with a radius defined by the limit distance.\n\n    :type: typing.Union[str, int]\n    '
    lock_location_x: bool = None
    ' Constraint position along X axis\n\n    :type: bool\n    '
    lock_location_y: bool = None
    ' Constraint position along Y axis\n\n    :type: bool\n    '
    lock_location_z: bool = None
    ' Constraint position along Z axis\n\n    :type: bool\n    '
    lock_rotation_x: bool = None
    ' Constraint rotation along X axis\n\n    :type: bool\n    '
    lock_rotation_y: bool = None
    ' Constraint rotation along Y axis\n\n    :type: bool\n    '
    lock_rotation_z: bool = None
    ' Constraint rotation along Z axis\n\n    :type: bool\n    '
    orient_weight: float = None
    ' For Tree-IK: Weight of orientation control for this target\n\n    :type: float\n    '
    pole_angle: float = None
    ' Pole rotation offset\n\n    :type: float\n    '
    pole_subtarget: str = None
    ' \n\n    :type: str\n    '
    pole_target: 'Object' = None
    " Object for pole rotation\n\n    :type: 'Object'\n    "
    reference_axis: typing.Union[str, int] = None
    ' Constraint axis Lock options relative to Bone or Target reference\n\n    :type: typing.Union[str, int]\n    '
    subtarget: str = None
    ' Armature bone, mesh or lattice vertex group, ...\n\n    :type: str\n    '
    target: 'Object' = None
    " Target object\n\n    :type: 'Object'\n    "
    use_location: bool = None
    ' Chain follows position of target\n\n    :type: bool\n    '
    use_rotation: bool = None
    ' Chain follows rotation of target\n\n    :type: bool\n    '
    use_stretch: bool = None
    ' Enable IK Stretching\n\n    :type: bool\n    '
    use_tail: bool = None
    " Include bone's tail as last element in chain\n\n    :type: bool\n    "
    weight: float = None
    ' For Tree-IK: Weight of position control for this target\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LimitDistanceConstraint(Constraint, bpy_struct):
    """ Limit the distance from target object
    """
    distance: float = None
    ' Radius of limiting sphere\n\n    :type: float\n    '
    head_tail: float = None
    ' Target along length of bone: Head is 0, Tail is 1\n\n    :type: float\n    '
    limit_mode: typing.Union[str, int] = None
    ' Distances in relation to sphere of influence to allow * ``LIMITDIST_INSIDE`` Inside -- The object is constrained inside a virtual sphere around the target object, with a radius defined by the limit distance. * ``LIMITDIST_OUTSIDE`` Outside -- The object is constrained outside a virtual sphere around the target object, with a radius defined by the limit distance. * ``LIMITDIST_ONSURFACE`` On Surface -- The object is constrained on the surface of a virtual sphere around the target object, with a radius defined by the limit distance.\n\n    :type: typing.Union[str, int]\n    '
    subtarget: str = None
    ' Armature bone, mesh or lattice vertex group, ...\n\n    :type: str\n    '
    target: 'Object' = None
    " Target object\n\n    :type: 'Object'\n    "
    use_bbone_shape: bool = None
    ' Follow shape of B-Bone segments when calculating Head/Tail position\n\n    :type: bool\n    '
    use_transform_limit: bool = None
    ' Transforms are affected by this constraint as well\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LimitLocationConstraint(Constraint, bpy_struct):
    """ Limit the location of the constrained object
    """
    max_x: float = None
    ' Highest X value to allow\n\n    :type: float\n    '
    max_y: float = None
    ' Highest Y value to allow\n\n    :type: float\n    '
    max_z: float = None
    ' Highest Z value to allow\n\n    :type: float\n    '
    min_x: float = None
    ' Lowest X value to allow\n\n    :type: float\n    '
    min_y: float = None
    ' Lowest Y value to allow\n\n    :type: float\n    '
    min_z: float = None
    ' Lowest Z value to allow\n\n    :type: float\n    '
    use_max_x: bool = None
    ' Use the maximum X value\n\n    :type: bool\n    '
    use_max_y: bool = None
    ' Use the maximum Y value\n\n    :type: bool\n    '
    use_max_z: bool = None
    ' Use the maximum Z value\n\n    :type: bool\n    '
    use_min_x: bool = None
    ' Use the minimum X value\n\n    :type: bool\n    '
    use_min_y: bool = None
    ' Use the minimum Y value\n\n    :type: bool\n    '
    use_min_z: bool = None
    ' Use the minimum Z value\n\n    :type: bool\n    '
    use_transform_limit: bool = None
    ' Transform tools are affected by this constraint as well\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LimitRotationConstraint(Constraint, bpy_struct):
    """ Limit the rotation of the constrained object
    """
    euler_order: typing.Union[str, int] = None
    ' Explicitly specify the euler rotation order * ``AUTO`` Default -- Euler using the default rotation order. * ``XYZ`` XYZ Euler -- Euler using the XYZ rotation order. * ``XZY`` XZY Euler -- Euler using the XZY rotation order. * ``YXZ`` YXZ Euler -- Euler using the YXZ rotation order. * ``YZX`` YZX Euler -- Euler using the YZX rotation order. * ``ZXY`` ZXY Euler -- Euler using the ZXY rotation order. * ``ZYX`` ZYX Euler -- Euler using the ZYX rotation order.\n\n    :type: typing.Union[str, int]\n    '
    max_x: float = None
    ' Highest X value to allow\n\n    :type: float\n    '
    max_y: float = None
    ' Highest Y value to allow\n\n    :type: float\n    '
    max_z: float = None
    ' Highest Z value to allow\n\n    :type: float\n    '
    min_x: float = None
    ' Lowest X value to allow\n\n    :type: float\n    '
    min_y: float = None
    ' Lowest Y value to allow\n\n    :type: float\n    '
    min_z: float = None
    ' Lowest Z value to allow\n\n    :type: float\n    '
    use_limit_x: bool = None
    ' Use the minimum X value\n\n    :type: bool\n    '
    use_limit_y: bool = None
    ' Use the minimum Y value\n\n    :type: bool\n    '
    use_limit_z: bool = None
    ' Use the minimum Z value\n\n    :type: bool\n    '
    use_transform_limit: bool = None
    ' Transform tools are affected by this constraint as well\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LimitScaleConstraint(Constraint, bpy_struct):
    """ Limit the scaling of the constrained object
    """
    max_x: float = None
    ' Highest X value to allow\n\n    :type: float\n    '
    max_y: float = None
    ' Highest Y value to allow\n\n    :type: float\n    '
    max_z: float = None
    ' Highest Z value to allow\n\n    :type: float\n    '
    min_x: float = None
    ' Lowest X value to allow\n\n    :type: float\n    '
    min_y: float = None
    ' Lowest Y value to allow\n\n    :type: float\n    '
    min_z: float = None
    ' Lowest Z value to allow\n\n    :type: float\n    '
    use_max_x: bool = None
    ' Use the maximum X value\n\n    :type: bool\n    '
    use_max_y: bool = None
    ' Use the maximum Y value\n\n    :type: bool\n    '
    use_max_z: bool = None
    ' Use the maximum Z value\n\n    :type: bool\n    '
    use_min_x: bool = None
    ' Use the minimum X value\n\n    :type: bool\n    '
    use_min_y: bool = None
    ' Use the minimum Y value\n\n    :type: bool\n    '
    use_min_z: bool = None
    ' Use the minimum Z value\n\n    :type: bool\n    '
    use_transform_limit: bool = None
    ' Transform tools are affected by this constraint as well\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LockedTrackConstraint(Constraint, bpy_struct):
    """ Point toward the target along the track axis, while locking the other axis
    """
    head_tail: float = None
    ' Target along length of bone: Head is 0, Tail is 1\n\n    :type: float\n    '
    lock_axis: typing.Union[str, int] = None
    ' Axis that points upward\n\n    :type: typing.Union[str, int]\n    '
    subtarget: str = None
    ' Armature bone, mesh or lattice vertex group, ...\n\n    :type: str\n    '
    target: 'Object' = None
    " Target object\n\n    :type: 'Object'\n    "
    track_axis: typing.Union[str, int] = None
    ' Axis that points to the target object\n\n    :type: typing.Union[str, int]\n    '
    use_bbone_shape: bool = None
    ' Follow shape of B-Bone segments when calculating Head/Tail position\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MaintainVolumeConstraint(Constraint, bpy_struct):
    """ Maintain a constant volume along a single scaling axis
    """
    free_axis: typing.Union[str, int] = None
    ' The free scaling axis of the object\n\n    :type: typing.Union[str, int]\n    '
    mode: typing.Union[str, int] = None
    ' The way the constraint treats original non-free axis scaling * ``STRICT`` Strict -- Volume is strictly preserved, overriding the scaling of non-free axes. * ``UNIFORM`` Uniform -- Volume is preserved when the object is scaled uniformly. Deviations from uniform scale on non-free axes are passed through. * ``SINGLE_AXIS`` Single Axis -- Volume is preserved when the object is scaled only on the free axis. Non-free axis scaling is passed through.\n\n    :type: typing.Union[str, int]\n    '
    volume: float = None
    ' Volume of the bone at rest\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ObjectConstraints(bpy_prop_collection[Constraint], bpy_struct):
    """ Collection of object constraints
    """
    active: 'Constraint' = None
    " Active Object constraint\n\n    :type: 'Constraint'\n    "

    def new(self, type: typing.Union[str, int]) -> 'Constraint':
        """ Add a new constraint to this object

        :param type: Constraint type to add
        :type type: typing.Union[str, int]
        :rtype: 'Constraint'
        :return: New constraint
        """
        pass

    def remove(self, constraint: 'Constraint'):
        """ Remove a constraint from this object

        :param constraint: Removed constraint
        :type constraint: 'Constraint'
        """
        pass

    def clear(self):
        """ Remove all constraint from this object

        """
        pass

    def move(self, from_index: int, to_index: int):
        """ Move a constraint to a different position

        :param from_index: From Index, Index to move
        :type from_index: int
        :param to_index: To Index, Target index
        :type to_index: int
        """
        pass

    def copy(self, constraint: 'Constraint') -> 'Constraint':
        """ Add a new constraint that is a copy of the given one

        :param constraint: Constraint to copy - may belong to a different object
        :type constraint: 'Constraint'
        :rtype: 'Constraint'
        :return: New constraint
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ObjectSolverConstraint(Constraint, bpy_struct):
    """ Lock motion to the reconstructed object movement
    """
    camera: 'Object' = None
    " Camera to which motion is parented (if empty active scene camera is used)\n\n    :type: 'Object'\n    "
    clip: 'MovieClip' = None
    " Movie Clip to get tracking data from\n\n    :type: 'MovieClip'\n    "
    object: str = None
    ' Movie tracking object to follow\n\n    :type: str\n    '
    set_inverse_pending: bool = None
    ' Set to true to request recalculation of the inverse matrix\n\n    :type: bool\n    '
    use_active_clip: bool = None
    ' Use active clip defined in scene\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PivotConstraint(Constraint, bpy_struct):
    """ Rotate around a different point
    """
    head_tail: float = None
    ' Target along length of bone: Head is 0, Tail is 1\n\n    :type: float\n    '
    offset: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Offset of pivot from target (when set), or from owner's location (when Fixed Position is off), or the absolute pivot point\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    rotation_range: typing.Union[str, int] = None
    ' Rotation range on which pivoting should occur * ``ALWAYS_ACTIVE`` Always -- Use the pivot point in every rotation. * ``NX`` -X Rotation -- Use the pivot point in the negative rotation range around the X-axis. * ``NY`` -Y Rotation -- Use the pivot point in the negative rotation range around the Y-axis. * ``NZ`` -Z Rotation -- Use the pivot point in the negative rotation range around the Z-axis. * ``X`` X Rotation -- Use the pivot point in the positive rotation range around the X-axis. * ``Y`` Y Rotation -- Use the pivot point in the positive rotation range around the Y-axis. * ``Z`` Z Rotation -- Use the pivot point in the positive rotation range around the Z-axis.\n\n    :type: typing.Union[str, int]\n    '
    subtarget: str = None
    ' \n\n    :type: str\n    '
    target: 'Object' = None
    " Target Object, defining the position of the pivot when defined\n\n    :type: 'Object'\n    "
    use_bbone_shape: bool = None
    ' Follow shape of B-Bone segments when calculating Head/Tail position\n\n    :type: bool\n    '
    use_relative_location: bool = None
    ' Offset will be an absolute point in space instead of relative to the target\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PoseBoneConstraints(bpy_prop_collection[Constraint], bpy_struct):
    """ Collection of pose bone constraints
    """
    active: 'Constraint' = None
    " Active PoseChannel constraint\n\n    :type: 'Constraint'\n    "

    def new(self, type: typing.Union[str, int]) -> 'Constraint':
        """ Add a constraint to this object

        :param type: Constraint type to add
        :type type: typing.Union[str, int]
        :rtype: 'Constraint'
        :return: New constraint
        """
        pass

    def remove(self, constraint: 'Constraint'):
        """ Remove a constraint from this object

        :param constraint: Removed constraint
        :type constraint: 'Constraint'
        """
        pass

    def move(self, from_index: int, to_index: int):
        """ Move a constraint to a different position

        :param from_index: From Index, Index to move
        :type from_index: int
        :param to_index: To Index, Target index
        :type to_index: int
        """
        pass

    def copy(self, constraint: 'Constraint') -> 'Constraint':
        """ Add a new constraint that is a copy of the given one

        :param constraint: Constraint to copy - may belong to a different object
        :type constraint: 'Constraint'
        :rtype: 'Constraint'
        :return: New constraint
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PythonConstraint(Constraint, bpy_struct):
    """ Use Python script for constraint evaluation
    """
    has_script_error: bool = None
    ' The linked Python script has thrown an error\n\n    :type: bool\n    '
    target_count: int = None
    ' Usually only 1 to 3 are needed\n\n    :type: int\n    '
    targets: bpy_prop_collection['ConstraintTarget'] = None
    " Target Objects\n\n    :type: bpy_prop_collection['ConstraintTarget']\n    "
    text: 'Text' = None
    " The text object that contains the Python script\n\n    :type: 'Text'\n    "
    use_targets: bool = None
    ' Use the targets indicated in the constraint panel\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShrinkwrapConstraint(Constraint, bpy_struct):
    """ Create constraint-based shrinkwrap relationship
    """
    cull_face: typing.Union[str, int] = None
    ' Stop vertices from projecting to a face on the target when facing towards/away * ``OFF`` Off -- No culling. * ``FRONT`` Front -- No projection when in front of the face. * ``BACK`` Back -- No projection when behind the face.\n\n    :type: typing.Union[str, int]\n    '
    distance: float = None
    ' Distance to Target\n\n    :type: float\n    '
    project_axis: typing.Union[str, int] = None
    ' Axis constrain to\n\n    :type: typing.Union[str, int]\n    '
    project_axis_space: typing.Union[str, int] = None
    ' Space for the projection axis * ``WORLD`` World Space -- The constraint is applied relative to the world coordinate system. * ``CUSTOM`` Custom Space -- The constraint is applied in local space of a custom object/bone/vertex group. * ``POSE`` Pose Space -- The constraint is applied in Pose Space, the object transformation is ignored. * ``LOCAL_WITH_PARENT`` Local With Parent -- The constraint is applied relative to the rest pose local coordinate system of the bone, thus including the parent-induced transformation. * ``LOCAL`` Local Space -- The constraint is applied relative to the local coordinate system of the object.\n\n    :type: typing.Union[str, int]\n    '
    project_limit: float = None
    ' Limit the distance used for projection (zero disables)\n\n    :type: float\n    '
    shrinkwrap_type: typing.Union[str, int] = None
    ' Select type of shrinkwrap algorithm for target position * ``NEAREST_SURFACE`` Nearest Surface Point -- Shrink the location to the nearest target surface. * ``PROJECT`` Project -- Shrink the location to the nearest target surface along a given axis. * ``NEAREST_VERTEX`` Nearest Vertex -- Shrink the location to the nearest target vertex. * ``TARGET_PROJECT`` Target Normal Project -- Shrink the location to the nearest target surface along the interpolated vertex normals of the target.\n\n    :type: typing.Union[str, int]\n    '
    target: 'Object' = None
    " Target Mesh object\n\n    :type: 'Object'\n    "
    track_axis: typing.Union[str, int] = None
    ' Axis that is aligned to the normal\n\n    :type: typing.Union[str, int]\n    '
    use_invert_cull: bool = None
    ' When projecting in the opposite direction invert the face cull mode\n\n    :type: bool\n    '
    use_project_opposite: bool = None
    ' Project in both specified and opposite directions\n\n    :type: bool\n    '
    use_track_normal: bool = None
    ' Align the specified axis to the surface normal\n\n    :type: bool\n    '
    wrap_mode: typing.Union[str, int] = None
    ' Select how to constrain the object to the target surface\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SplineIKConstraint(Constraint, bpy_struct):
    """ Align 'n' bones along a curve
    """
    bulge: float = None
    ' Factor between volume variation and stretching\n\n    :type: float\n    '
    bulge_max: float = None
    ' Maximum volume stretching factor\n\n    :type: float\n    '
    bulge_min: float = None
    ' Minimum volume stretching factor\n\n    :type: float\n    '
    bulge_smooth: float = None
    ' Strength of volume stretching clamping\n\n    :type: float\n    '
    chain_count: int = None
    ' How many bones are included in the chain\n\n    :type: int\n    '
    joint_bindings: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], 'mathutils.Vector'] = None
    " (EXPERIENCED USERS ONLY) The relative positions of the joints along the chain, as percentages\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], 'mathutils.Vector']\n    "
    target: 'Object' = None
    " Curve that controls this relationship\n\n    :type: 'Object'\n    "
    use_bulge_max: bool = None
    ' Use upper limit for volume variation\n\n    :type: bool\n    '
    use_bulge_min: bool = None
    ' Use lower limit for volume variation\n\n    :type: bool\n    '
    use_chain_offset: bool = None
    ' Offset the entire chain relative to the root joint\n\n    :type: bool\n    '
    use_curve_radius: bool = None
    ' Average radius of the endpoints is used to tweak the X and Z Scaling of the bones, on top of XZ Scale mode\n\n    :type: bool\n    '
    use_even_divisions: bool = None
    ' Ignore the relative lengths of the bones when fitting to the curve\n\n    :type: bool\n    '
    use_original_scale: bool = None
    ' Apply volume preservation over the original scaling\n\n    :type: bool\n    '
    xz_scale_mode: typing.Union[str, int] = None
    " Method used for determining the scaling of the X and Z axes of the bones * ``NONE`` None -- Don't scale the X and Z axes. * ``BONE_ORIGINAL`` Bone Original -- Use the original scaling of the bones. * ``INVERSE_PRESERVE`` Inverse Scale -- Scale of the X and Z axes is the inverse of the Y-Scale. * ``VOLUME_PRESERVE`` Volume Preservation -- Scale of the X and Z axes are adjusted to preserve the volume of the bones.\n\n    :type: typing.Union[str, int]\n    "
    y_scale_mode: typing.Union[str, int] = None
    " Method used for determining the scaling of the Y axis of the bones, on top of the shape and scaling of the curve itself * ``NONE`` None -- Don't scale in the Y axis. * ``FIT_CURVE`` Fit Curve -- Scale the bones to fit the entire length of the curve. * ``BONE_ORIGINAL`` Bone Original -- Use the original Y scale of the bone.\n\n    :type: typing.Union[str, int]\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class StretchToConstraint(Constraint, bpy_struct):
    """ Stretch to meet the target object
    """
    bulge: float = None
    ' Factor between volume variation and stretching\n\n    :type: float\n    '
    bulge_max: float = None
    ' Maximum volume stretching factor\n\n    :type: float\n    '
    bulge_min: float = None
    ' Minimum volume stretching factor\n\n    :type: float\n    '
    bulge_smooth: float = None
    ' Strength of volume stretching clamping\n\n    :type: float\n    '
    head_tail: float = None
    ' Target along length of bone: Head is 0, Tail is 1\n\n    :type: float\n    '
    keep_axis: typing.Union[str, int] = None
    ' The rotation type and axis order to use * ``PLANE_X`` XZ -- Rotate around local X, then Z. * ``PLANE_Z`` ZX -- Rotate around local Z, then X. * ``SWING_Y`` Swing -- Use the smallest single axis rotation, similar to Damped Track.\n\n    :type: typing.Union[str, int]\n    '
    rest_length: float = None
    ' Length at rest position\n\n    :type: float\n    '
    subtarget: str = None
    ' Armature bone, mesh or lattice vertex group, ...\n\n    :type: str\n    '
    target: 'Object' = None
    " Target object\n\n    :type: 'Object'\n    "
    use_bbone_shape: bool = None
    ' Follow shape of B-Bone segments when calculating Head/Tail position\n\n    :type: bool\n    '
    use_bulge_max: bool = None
    ' Use upper limit for volume variation\n\n    :type: bool\n    '
    use_bulge_min: bool = None
    ' Use lower limit for volume variation\n\n    :type: bool\n    '
    volume: typing.Union[str, int] = None
    " Maintain the object's volume as it stretches\n\n    :type: typing.Union[str, int]\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TrackToConstraint(Constraint, bpy_struct):
    """ Aim the constrained object toward the target
    """
    head_tail: float = None
    ' Target along length of bone: Head is 0, Tail is 1\n\n    :type: float\n    '
    subtarget: str = None
    ' Armature bone, mesh or lattice vertex group, ...\n\n    :type: str\n    '
    target: 'Object' = None
    " Target object\n\n    :type: 'Object'\n    "
    track_axis: typing.Union[str, int] = None
    ' Axis that points to the target object\n\n    :type: typing.Union[str, int]\n    '
    up_axis: typing.Union[str, int] = None
    ' Axis that points upward\n\n    :type: typing.Union[str, int]\n    '
    use_bbone_shape: bool = None
    ' Follow shape of B-Bone segments when calculating Head/Tail position\n\n    :type: bool\n    '
    use_target_z: bool = None
    " Target's Z axis, not World Z axis, will constraint the Up direction\n\n    :type: bool\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TransformCacheConstraint(Constraint, bpy_struct):
    """ Look up transformation from an external file
    """
    cache_file: 'CacheFile' = None
    " \n\n    :type: 'CacheFile'\n    "
    object_path: str = None
    ' Path to the object in the Alembic archive used to lookup the transform matrix\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TransformConstraint(Constraint, bpy_struct):
    """ Map transformations of the target to the object
    """
    from_max_x: float = None
    ' Top range of X axis source motion\n\n    :type: float\n    '
    from_max_x_rot: float = None
    ' Top range of X axis source motion\n\n    :type: float\n    '
    from_max_x_scale: float = None
    ' Top range of X axis source motion\n\n    :type: float\n    '
    from_max_y: float = None
    ' Top range of Y axis source motion\n\n    :type: float\n    '
    from_max_y_rot: float = None
    ' Top range of Y axis source motion\n\n    :type: float\n    '
    from_max_y_scale: float = None
    ' Top range of Y axis source motion\n\n    :type: float\n    '
    from_max_z: float = None
    ' Top range of Z axis source motion\n\n    :type: float\n    '
    from_max_z_rot: float = None
    ' Top range of Z axis source motion\n\n    :type: float\n    '
    from_max_z_scale: float = None
    ' Top range of Z axis source motion\n\n    :type: float\n    '
    from_min_x: float = None
    ' Bottom range of X axis source motion\n\n    :type: float\n    '
    from_min_x_rot: float = None
    ' Bottom range of X axis source motion\n\n    :type: float\n    '
    from_min_x_scale: float = None
    ' Bottom range of X axis source motion\n\n    :type: float\n    '
    from_min_y: float = None
    ' Bottom range of Y axis source motion\n\n    :type: float\n    '
    from_min_y_rot: float = None
    ' Bottom range of Y axis source motion\n\n    :type: float\n    '
    from_min_y_scale: float = None
    ' Bottom range of Y axis source motion\n\n    :type: float\n    '
    from_min_z: float = None
    ' Bottom range of Z axis source motion\n\n    :type: float\n    '
    from_min_z_rot: float = None
    ' Bottom range of Z axis source motion\n\n    :type: float\n    '
    from_min_z_scale: float = None
    ' Bottom range of Z axis source motion\n\n    :type: float\n    '
    from_rotation_mode: typing.Union[str, int] = None
    ' Specify the type of rotation channels to use\n\n    :type: typing.Union[str, int]\n    '
    map_from: typing.Union[str, int] = None
    ' The transformation type to use from the target\n\n    :type: typing.Union[str, int]\n    '
    map_to: typing.Union[str, int] = None
    ' The transformation type to affect of the constrained object\n\n    :type: typing.Union[str, int]\n    '
    map_to_x_from: typing.Union[str, int] = None
    " The source axis constrained object's X axis uses\n\n    :type: typing.Union[str, int]\n    "
    map_to_y_from: typing.Union[str, int] = None
    " The source axis constrained object's Y axis uses\n\n    :type: typing.Union[str, int]\n    "
    map_to_z_from: typing.Union[str, int] = None
    " The source axis constrained object's Z axis uses\n\n    :type: typing.Union[str, int]\n    "
    mix_mode: typing.Union[str, int] = None
    ' Specify how to combine the new location with original * ``REPLACE`` Replace -- Replace component values. * ``ADD`` Add -- Add component values together.\n\n    :type: typing.Union[str, int]\n    '
    mix_mode_rot: typing.Union[str, int] = None
    ' Specify how to combine the new rotation with original * ``REPLACE`` Replace -- Replace component values. * ``ADD`` Add -- Add component values together. * ``BEFORE`` Before Original -- Apply new rotation before original, as if it was on a parent. * ``AFTER`` After Original -- Apply new rotation after original, as if it was on a child.\n\n    :type: typing.Union[str, int]\n    '
    mix_mode_scale: typing.Union[str, int] = None
    ' Specify how to combine the new scale with original * ``REPLACE`` Replace -- Replace component values. * ``MULTIPLY`` Multiply -- Multiply component values together.\n\n    :type: typing.Union[str, int]\n    '
    subtarget: str = None
    ' Armature bone, mesh or lattice vertex group, ...\n\n    :type: str\n    '
    target: 'Object' = None
    " Target object\n\n    :type: 'Object'\n    "
    to_euler_order: typing.Union[str, int] = None
    ' Explicitly specify the output euler rotation order * ``AUTO`` Default -- Euler using the default rotation order. * ``XYZ`` XYZ Euler -- Euler using the XYZ rotation order. * ``XZY`` XZY Euler -- Euler using the XZY rotation order. * ``YXZ`` YXZ Euler -- Euler using the YXZ rotation order. * ``YZX`` YZX Euler -- Euler using the YZX rotation order. * ``ZXY`` ZXY Euler -- Euler using the ZXY rotation order. * ``ZYX`` ZYX Euler -- Euler using the ZYX rotation order.\n\n    :type: typing.Union[str, int]\n    '
    to_max_x: float = None
    ' Top range of X axis destination motion\n\n    :type: float\n    '
    to_max_x_rot: float = None
    ' Top range of X axis destination motion\n\n    :type: float\n    '
    to_max_x_scale: float = None
    ' Top range of X axis destination motion\n\n    :type: float\n    '
    to_max_y: float = None
    ' Top range of Y axis destination motion\n\n    :type: float\n    '
    to_max_y_rot: float = None
    ' Top range of Y axis destination motion\n\n    :type: float\n    '
    to_max_y_scale: float = None
    ' Top range of Y axis destination motion\n\n    :type: float\n    '
    to_max_z: float = None
    ' Top range of Z axis destination motion\n\n    :type: float\n    '
    to_max_z_rot: float = None
    ' Top range of Z axis destination motion\n\n    :type: float\n    '
    to_max_z_scale: float = None
    ' Top range of Z axis destination motion\n\n    :type: float\n    '
    to_min_x: float = None
    ' Bottom range of X axis destination motion\n\n    :type: float\n    '
    to_min_x_rot: float = None
    ' Bottom range of X axis destination motion\n\n    :type: float\n    '
    to_min_x_scale: float = None
    ' Bottom range of X axis destination motion\n\n    :type: float\n    '
    to_min_y: float = None
    ' Bottom range of Y axis destination motion\n\n    :type: float\n    '
    to_min_y_rot: float = None
    ' Bottom range of Y axis destination motion\n\n    :type: float\n    '
    to_min_y_scale: float = None
    ' Bottom range of Y axis destination motion\n\n    :type: float\n    '
    to_min_z: float = None
    ' Bottom range of Z axis destination motion\n\n    :type: float\n    '
    to_min_z_rot: float = None
    ' Bottom range of Z axis destination motion\n\n    :type: float\n    '
    to_min_z_scale: float = None
    ' Bottom range of Z axis destination motion\n\n    :type: float\n    '
    use_motion_extrapolate: bool = None
    ' Extrapolate ranges\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ArmatureConstraintTargets(bpy_prop_collection[ConstraintTargetBone], bpy_struct):
    """ Collection of target bones and weights
    """

    def new(self) -> 'ConstraintTargetBone':
        """ Add a new target to the constraint

        :rtype: 'ConstraintTargetBone'
        :return: New target bone
        """
        pass

    def remove(self, target: 'ConstraintTargetBone'):
        """ Delete target from the constraint

        :param target: Target to remove
        :type target: 'ConstraintTargetBone'
        """
        pass

    def clear(self):
        """ Delete all targets from object

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CurveMapPoints(bpy_prop_collection[CurveMapPoint], bpy_struct):
    """ Collection of Curve Map Points
    """

    def new(self, position: float, value: float) -> 'CurveMapPoint':
        """ Add point to CurveMap

        :param position: Position, Position to add point
        :type position: float
        :param value: Value, Value of point
        :type value: float
        :rtype: 'CurveMapPoint'
        :return: New point
        """
        pass

    def remove(self, point: 'CurveMapPoint'):
        """ Delete point from CurveMap

        :param point: PointElement to remove
        :type point: 'CurveMapPoint'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CurveProfilePoints(bpy_prop_collection[CurveProfilePoint], bpy_struct):
    """ Collection of Profile Points
    """

    def add(self, x: float, y: float) -> 'CurveProfilePoint':
        """ Add point to the profile

        :param x: X Position, X Position for new point
        :type x: float
        :param y: Y Position, Y Position for new point
        :type y: float
        :rtype: 'CurveProfilePoint'
        :return: New point
        """
        pass

    def remove(self, point: 'CurveProfilePoint'):
        """ Delete point from the profile

        :param point: Point to remove
        :type point: 'CurveProfilePoint'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ChannelDriverVariables(bpy_prop_collection[DriverVariable], bpy_struct):
    """ Collection of channel driver Variables
    """

    def new(self) -> 'DriverVariable':
        """ Add a new variable for the driver

        :rtype: 'DriverVariable'
        :return: Newly created Driver Variable
        """
        pass

    def remove(self, variable: 'DriverVariable'):
        """ Remove an existing variable from the driver

        :param variable: Variable to remove from the driver
        :type variable: 'DriverVariable'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class DynamicPaintSurfaces(bpy_prop_collection[DynamicPaintSurface], bpy_struct):
    """ Collection of Dynamic Paint Canvas surfaces
    """
    active: 'DynamicPaintSurface' = None
    " Active Dynamic Paint surface being displayed\n\n    :type: 'DynamicPaintSurface'\n    "
    active_index: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ArmatureEditBones(bpy_prop_collection[EditBone], bpy_struct):
    """ Collection of armature edit bones
    """
    active: 'EditBone' = None
    " Armatures active edit bone\n\n    :type: 'EditBone'\n    "

    def new(self, name: str) -> 'EditBone':
        """ Add a new bone

        :param name: New name for the bone
        :type name: str
        :rtype: 'EditBone'
        :return: Newly created edit bone
        """
        pass

    def remove(self, bone: 'EditBone'):
        """ Remove an existing bone from the armature

        :param bone: EditBone to remove
        :type bone: 'EditBone'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ActionFCurves(bpy_prop_collection[FCurve], bpy_struct):
    """ Collection of action F-Curves
    """

    def new(self, data_path: str, index: int=0, action_group: str='') -> 'FCurve':
        """ Add an F-Curve to the action

        :param data_path: Data Path, F-Curve data path to use
        :type data_path: str
        :param index: Index, Array index
        :type index: int
        :param action_group: Action Group, Acton group to add this F-Curve into
        :type action_group: str
        :rtype: 'FCurve'
        :return: Newly created F-Curve
        """
        pass

    def find(self, data_path: str, index: int=0) -> 'FCurve':
        """ Find an F-Curve. Note that this function performs a linear scan of all F-Curves in the action.

        :param data_path: Data Path, F-Curve data path
        :type data_path: str
        :param index: Index, Array index
        :type index: int
        :rtype: 'FCurve'
        :return: The found F-Curve, or None if it doesn't exist
        """
        pass

    def remove(self, fcurve: 'FCurve'):
        """ Remove F-Curve

        :param fcurve: F-Curve to remove
        :type fcurve: 'FCurve'
        """
        pass

    def clear(self):
        """ Remove all F-Curves

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class AnimDataDrivers(bpy_prop_collection[FCurve], bpy_struct):
    """ Collection of Driver F-Curves
    """

    def new(self, data_path: str, index: int=0) -> 'FCurve':
        """ new

        :param data_path: Data Path, F-Curve data path to use
        :type data_path: str
        :param index: Index, Array index
        :type index: int
        :rtype: 'FCurve'
        :return: Newly Driver F-Curve
        """
        pass

    def remove(self, driver: 'FCurve'):
        """ remove

        :param driver: 
        :type driver: 'FCurve'
        """
        pass

    def from_existing(self, src_driver: 'FCurve'=None) -> 'FCurve':
        """ Add a new driver given an existing one

        :param src_driver: Existing Driver F-Curve to use as template for a new one
        :type src_driver: 'FCurve'
        :rtype: 'FCurve'
        :return: New Driver F-Curve
        """
        pass

    def find(self, data_path: str, index: int=0) -> 'FCurve':
        """ Find a driver F-Curve. Note that this function performs a linear scan of all driver F-Curves.

        :param data_path: Data Path, F-Curve data path
        :type data_path: str
        :param index: Index, Array index
        :type index: int
        :rtype: 'FCurve'
        :return: The found F-Curve, or None if it doesn't exist
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NlaStripFCurves(bpy_prop_collection[FCurve], bpy_struct):
    """ Collection of NLA strip F-Curves
    """

    def find(self, data_path: str, index: int=0) -> 'FCurve':
        """ Find an F-Curve. Note that this function performs a linear scan of all F-Curves in the NLA strip.

        :param data_path: Data Path, F-Curve data path
        :type data_path: str
        :param index: Index, Array index
        :type index: int
        :rtype: 'FCurve'
        :return: The found F-Curve, or None if it doesn't exist
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FCurveModifiers(bpy_prop_collection[FModifier], bpy_struct):
    """ Collection of F-Curve Modifiers
    """
    active: 'FModifier' = None
    " Active F-Curve Modifier\n\n    :type: 'FModifier'\n    "

    def new(self, type: typing.Union[str, int]) -> 'FModifier':
        """ Add a constraint to this object

        :param type: Constraint type to add
        :type type: typing.Union[str, int]
        :rtype: 'FModifier'
        :return: New fmodifier
        """
        pass

    def remove(self, modifier: 'FModifier'):
        """ Remove a modifier from this F-Curve

        :param modifier: Removed modifier
        :type modifier: 'FModifier'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FModifierCycles(FModifier, bpy_struct):
    """ Repeat the values of the modified F-Curve
    """
    cycles_after: int = None
    ' Maximum number of cycles to allow after last keyframe (0 = infinite)\n\n    :type: int\n    '
    cycles_before: int = None
    ' Maximum number of cycles to allow before first keyframe (0 = infinite)\n\n    :type: int\n    '
    mode_after: typing.Union[str, int] = None
    " Cycling mode to use after last keyframe * ``NONE`` No Cycles -- Don't do anything. * ``REPEAT`` Repeat Motion -- Repeat keyframe range as-is. * ``REPEAT_OFFSET`` Repeat with Offset -- Repeat keyframe range, but with offset based on gradient between start and end values. * ``MIRROR`` Repeat Mirrored -- Alternate between forward and reverse playback of keyframe range.\n\n    :type: typing.Union[str, int]\n    "
    mode_before: typing.Union[str, int] = None
    " Cycling mode to use before first keyframe * ``NONE`` No Cycles -- Don't do anything. * ``REPEAT`` Repeat Motion -- Repeat keyframe range as-is. * ``REPEAT_OFFSET`` Repeat with Offset -- Repeat keyframe range, but with offset based on gradient between start and end values. * ``MIRROR`` Repeat Mirrored -- Alternate between forward and reverse playback of keyframe range.\n\n    :type: typing.Union[str, int]\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FModifierEnvelope(FModifier, bpy_struct):
    """ Scale the values of the modified F-Curve
    """
    control_points: 'FModifierEnvelopeControlPoints' = None
    " Control points defining the shape of the envelope\n\n    :type: 'FModifierEnvelopeControlPoints'\n    "
    default_max: float = None
    ' Upper distance from Reference Value for 1:1 default influence\n\n    :type: float\n    '
    default_min: float = None
    ' Lower distance from Reference Value for 1:1 default influence\n\n    :type: float\n    '
    reference_value: float = None
    " Value that envelope's influence is centered around / based on\n\n    :type: float\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FModifierFunctionGenerator(FModifier, bpy_struct):
    """ Generate values using a built-in function
    """
    amplitude: float = None
    ' Scale factor determining the maximum/minimum values\n\n    :type: float\n    '
    function_type: typing.Union[str, int] = None
    ' Type of built-in function to use * ``SIN`` Sine. * ``COS`` Cosine. * ``TAN`` Tangent. * ``SQRT`` Square Root. * ``LN`` Natural Logarithm. * ``SINC`` Normalized Sine -- sin(x) / x.\n\n    :type: typing.Union[str, int]\n    '
    phase_multiplier: float = None
    " Scale factor determining the 'speed' of the function\n\n    :type: float\n    "
    phase_offset: float = None
    ' Constant factor to offset time by for function\n\n    :type: float\n    '
    use_additive: bool = None
    ' Values generated by this modifier are applied on top of the existing values instead of overwriting them\n\n    :type: bool\n    '
    value_offset: float = None
    ' Constant factor to offset values by\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FModifierGenerator(FModifier, bpy_struct):
    """ Deterministically generate values for the modified F-Curve
    """
    coefficients: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], 'mathutils.Vector'] = None
    " Coefficients for 'x' (starting from lowest power of x^0)\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], 'mathutils.Vector']\n    "
    mode: typing.Union[str, int] = None
    ' Type of generator to use\n\n    :type: typing.Union[str, int]\n    '
    poly_order: int = None
    " The highest power of 'x' for this polynomial (number of coefficients - 1)\n\n    :type: int\n    "
    use_additive: bool = None
    ' Values generated by this modifier are applied on top of the existing values instead of overwriting them\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FModifierLimits(FModifier, bpy_struct):
    """ Limit the time/value ranges of the modified F-Curve
    """
    max_x: float = None
    ' Highest X value to allow\n\n    :type: float\n    '
    max_y: float = None
    ' Highest Y value to allow\n\n    :type: float\n    '
    min_x: float = None
    ' Lowest X value to allow\n\n    :type: float\n    '
    min_y: float = None
    ' Lowest Y value to allow\n\n    :type: float\n    '
    use_max_x: bool = None
    ' Use the maximum X value\n\n    :type: bool\n    '
    use_max_y: bool = None
    ' Use the maximum Y value\n\n    :type: bool\n    '
    use_min_x: bool = None
    ' Use the minimum X value\n\n    :type: bool\n    '
    use_min_y: bool = None
    ' Use the minimum Y value\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FModifierNoise(FModifier, bpy_struct):
    """ Give randomness to the modified F-Curve
    """
    blend_type: typing.Union[str, int] = None
    ' Method of modifying the existing F-Curve\n\n    :type: typing.Union[str, int]\n    '
    depth: int = None
    ' Amount of fine level detail present in the noise\n\n    :type: int\n    '
    offset: float = None
    ' Time offset for the noise effect\n\n    :type: float\n    '
    phase: float = None
    ' A random seed for the noise effect\n\n    :type: float\n    '
    scale: float = None
    ' Scaling (in time) of the noise\n\n    :type: float\n    '
    strength: float = None
    ' Amplitude of the noise - the amount that it modifies the underlying curve\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FModifierPython(FModifier, bpy_struct):
    """ Perform user-defined operation on the modified F-Curve
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FModifierStepped(FModifier, bpy_struct):
    """ Hold each interpolated value from the F-Curve for several frames without changing the timing
    """
    frame_end: float = None
    " Frame that modifier's influence ends (if applicable)\n\n    :type: float\n    "
    frame_offset: float = None
    " Reference number of frames before frames get held (use to get hold for '1-3' vs '5-7' holding patterns)\n\n    :type: float\n    "
    frame_start: float = None
    " Frame that modifier's influence starts (if applicable)\n\n    :type: float\n    "
    frame_step: float = None
    ' Number of frames to hold each value\n\n    :type: float\n    '
    use_frame_end: bool = None
    " Restrict modifier to only act before its 'end' frame\n\n    :type: bool\n    "
    use_frame_start: bool = None
    " Restrict modifier to only act after its 'start' frame\n\n    :type: bool\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FModifierEnvelopeControlPoints(bpy_prop_collection[FModifierEnvelopeControlPoint], bpy_struct):
    """ Control points defining the shape of the envelope
    """

    def add(self, frame: float) -> 'FModifierEnvelopeControlPoint':
        """ Add a control point to a FModifierEnvelope

        :param frame: Frame to add this control-point
        :type frame: float
        :rtype: 'FModifierEnvelopeControlPoint'
        :return: Newly created control-point
        """
        pass

    def remove(self, point: 'FModifierEnvelopeControlPoint'):
        """ Remove a control-point from an FModifierEnvelope

        :param point: Control-point to remove
        :type point: 'FModifierEnvelopeControlPoint'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FaceMaps(bpy_prop_collection[FaceMap], bpy_struct):
    """ Collection of face maps
    """
    active: 'FaceMap' = None
    " Face maps of the object\n\n    :type: 'FaceMap'\n    "
    active_index: int = None
    ' Active index in face map array\n\n    :type: int\n    '

    def new(self, name: str='Map') -> 'FaceMap':
        """ Add face map to object

        :param name: face map name
        :type name: str
        :rtype: 'FaceMap'
        :return: New face map
        """
        pass

    def remove(self, group: 'FaceMap'):
        """ Delete vertex group from object

        :param group: Face map to remove
        :type group: 'FaceMap'
        """
        pass

    def clear(self):
        """ Delete all vertex groups from object

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FileAssetSelectParams(FileSelectParams, bpy_struct):
    """ Settings for the file selection in Asset Browser mode
    """
    asset_library_ref: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    catalog_id: str = None
    ' The UUID of the catalog shown in the browser\n\n    :type: str\n    '
    filter_asset_id: 'FileAssetSelectIDFilter' = None
    " Which asset types to show/hide, when browsing an asset library\n\n    :type: 'FileAssetSelectIDFilter'\n    "
    import_type: typing.Union[str, int] = None
    " Determine how the asset will be imported * ``LINK`` Link -- Import the assets as linked data-block. * ``APPEND`` Append -- Import the assets as copied data-block, with no link to the original asset data-block. * ``APPEND_REUSE`` Append (Reuse Data) -- Import the assets as copied data-block while avoiding multiple copies of nested, typically heavy data. For example the textures of a material asset, or the mesh of an object asset, don't have to be copied every time this asset is imported. The instances of the asset share the data instead.\n\n    :type: typing.Union[str, int]\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Linesets(bpy_prop_collection[FreestyleLineSet], bpy_struct):
    """ Line sets for associating lines and style parameters
    """
    active: 'FreestyleLineSet' = None
    " Active line set being displayed\n\n    :type: 'FreestyleLineSet'\n    "
    active_index: int = None
    ' Index of active line set slot\n\n    :type: int\n    '

    def new(self, name: str) -> 'FreestyleLineSet':
        """ Add a line set to scene render layer Freestyle settings

        :param name: New name for the line set (not unique)
        :type name: str
        :rtype: 'FreestyleLineSet'
        :return: Newly created line set
        """
        pass

    def remove(self, lineset: 'FreestyleLineSet'):
        """ Remove a line set from scene render layer Freestyle settings

        :param lineset: Line set to remove
        :type lineset: 'FreestyleLineSet'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FreestyleModules(bpy_prop_collection[FreestyleModuleSettings], bpy_struct):
    """ A list of style modules (to be applied from top to bottom)
    """

    def new(self) -> 'FreestyleModuleSettings':
        """ Add a style module to scene render layer Freestyle settings

        :rtype: 'FreestyleModuleSettings'
        :return: Newly created style module
        """
        pass

    def remove(self, module: 'FreestyleModuleSettings'):
        """ Remove a style module from scene render layer Freestyle settings

        :param module: Style module to remove
        :type module: 'FreestyleModuleSettings'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GPencilFrames(bpy_prop_collection[GPencilFrame], bpy_struct):
    """ Collection of grease pencil frames
    """

    def new(self, frame_number: int, active: bool=False) -> 'GPencilFrame':
        """ Add a new grease pencil frame

        :param frame_number: Frame Number, The frame on which this sketch appears
        :type frame_number: int
        :param active: Active
        :type active: bool
        :rtype: 'GPencilFrame'
        :return: The newly created frame
        """
        pass

    def remove(self, frame: 'GPencilFrame'):
        """ Remove a grease pencil frame

        :param frame: Frame, The frame to remove
        :type frame: 'GPencilFrame'
        """
        pass

    def copy(self, source: 'GPencilFrame') -> 'GPencilFrame':
        """ Copy a grease pencil frame

        :param source: Source, The source frame
        :type source: 'GPencilFrame'
        :rtype: 'GPencilFrame'
        :return: The newly copied frame
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GreasePencilLayers(bpy_prop_collection[GPencilLayer], bpy_struct):
    """ Collection of grease pencil layers
    """
    active: 'GPencilLayer' = None
    " Active grease pencil layer\n\n    :type: 'GPencilLayer'\n    "
    active_index: int = None
    ' Index of active grease pencil layer\n\n    :type: int\n    '
    active_note: typing.Union[str, int] = None
    ' Note/Layer to add annotation strokes to\n\n    :type: typing.Union[str, int]\n    '

    def new(self, name: str, set_active: bool=True) -> 'GPencilLayer':
        """ Add a new grease pencil layer

        :param name: Name, Name of the layer
        :type name: str
        :param set_active: Set Active, Set the newly created layer to the active layer
        :type set_active: bool
        :rtype: 'GPencilLayer'
        :return: The newly created layer
        """
        pass

    def remove(self, layer: 'GPencilLayer'):
        """ Remove a grease pencil layer

        :param layer: The layer to remove
        :type layer: 'GPencilLayer'
        """
        pass

    def move(self, layer: 'GPencilLayer', type: typing.Union[str, int]):
        """ Move a grease pencil layer in the layer stack

        :param layer: The layer to move
        :type layer: 'GPencilLayer'
        :param type: Direction of movement
        :type type: typing.Union[str, int]
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GreasePencilMaskLayers(bpy_prop_collection[GPencilLayerMask], bpy_struct):
    """ Collection of grease pencil masking layers
    """
    active_mask_index: int = None
    ' Active index in layer mask array\n\n    :type: int\n    '

    def add(self, layer: 'GPencilLayer'):
        """ Add a layer to mask list

        :param layer: Layer to add as mask
        :type layer: 'GPencilLayer'
        """
        pass

    def remove(self, mask: 'GPencilLayerMask'):
        """ Remove a layer from mask list

        :param mask: Mask to remove
        :type mask: 'GPencilLayerMask'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GPencilStrokes(bpy_prop_collection[GPencilStroke], bpy_struct):
    """ Collection of grease pencil stroke
    """

    def new(self) -> 'GPencilStroke':
        """ Add a new grease pencil stroke

        :rtype: 'GPencilStroke'
        :return: The newly created stroke
        """
        pass

    def remove(self, stroke: 'GPencilStroke'):
        """ Remove a grease pencil stroke

        :param stroke: Stroke, The stroke to remove
        :type stroke: 'GPencilStroke'
        """
        pass

    def close(self, stroke: 'GPencilStroke'):
        """ Close a grease pencil stroke adding geometry

        :param stroke: Stroke, The stroke to close
        :type stroke: 'GPencilStroke'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GPencilStrokePoints(bpy_prop_collection[GPencilStrokePoint], bpy_struct):
    """ Collection of grease pencil stroke points
    """

    def add(self, count: int, pressure: float=1.0, strength: float=1.0):
        """ Add a new grease pencil stroke point

        :param count: Number, Number of points to add to the stroke
        :type count: int
        :param pressure: Pressure, Pressure for newly created points
        :type pressure: float
        :param strength: Strength, Color intensity (alpha factor) for newly created points
        :type strength: float
        """
        pass

    def pop(self, index: int=-1):
        """ Remove a grease pencil stroke point

        :param index: Index, point index
        :type index: int
        """
        pass

    def update(self):
        """ Recalculate internal triangulation data

        """
        pass

    def weight_get(self, vertex_group_index: int=0, point_index: int=0) -> float:
        """ Get vertex group point weight

        :param vertex_group_index: Vertex Group Index, Index of Vertex Group in the array of groups
        :type vertex_group_index: int
        :param point_index: Point Index, Index of the Point in the array
        :type point_index: int
        :rtype: float
        :return: Weight, Point Weight
        """
        pass

    def weight_set(self, vertex_group_index: int=0, point_index: int=0, weight: float=0.0):
        """ Set vertex group point weight

        :param vertex_group_index: Vertex Group Index, Index of Vertex Group in the array of groups
        :type vertex_group_index: int
        :param point_index: Point Index, Index of the Point in the array
        :type point_index: int
        :param weight: Weight, Point Weight
        :type weight: float
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Gizmos(bpy_prop_collection[Gizmo], bpy_struct):
    """ Collection of gizmos
    """

    def new(self, type: str) -> 'Gizmo':
        """ Add gizmo

        :param type: Gizmo identifier
        :type type: str
        :rtype: 'Gizmo'
        :return: New gizmo
        """
        pass

    def remove(self, gizmo: 'Gizmo'):
        """ Delete gizmo

        :param gizmo: New gizmo
        :type gizmo: 'Gizmo'
        """
        pass

    def clear(self):
        """ Delete all gizmos

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ArmatureGpencilModifier(GpencilModifier, bpy_struct):
    """ Change stroke using armature to deform modifier
    """
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    object: 'Object' = None
    " Armature object to deform with\n\n    :type: 'Object'\n    "
    use_bone_envelopes: bool = None
    ' Bind Bone envelopes to armature modifier\n\n    :type: bool\n    '
    use_deform_preserve_volume: bool = None
    ' Deform rotation interpolation with quaternions\n\n    :type: bool\n    '
    use_vertex_groups: bool = None
    ' Bind vertex groups to armature modifier\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Name of Vertex Group which determines influence of modifier per point\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ArrayGpencilModifier(GpencilModifier, bpy_struct):
    """ Create grid of duplicate instances
    """
    constant_offset: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Value for the distance between items\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    count: int = None
    ' Number of items\n\n    :type: int\n    '
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_material_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_materials: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    material: 'Material' = None
    " Material used for filtering effect\n\n    :type: 'Material'\n    "
    offset_object: 'Object' = None
    " Use the location and rotation of another object to determine the distance and rotational change between arrayed items\n\n    :type: 'Object'\n    "
    pass_index: int = None
    ' Pass index\n\n    :type: int\n    '
    random_offset: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Value for changes in location\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    random_rotation: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler'] = None
    " Value for changes in rotation\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler']\n    "
    random_scale: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Value for changes in scale\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    relative_offset: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " The size of the geometry will determine the distance between arrayed items\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    replace_material: int = None
    ' Index of the material used for generated strokes (0 keep original material)\n\n    :type: int\n    '
    seed: int = None
    ' Random seed\n\n    :type: int\n    '
    use_constant_offset: bool = None
    ' Enable offset\n\n    :type: bool\n    '
    use_object_offset: bool = None
    ' Enable object offset\n\n    :type: bool\n    '
    use_relative_offset: bool = None
    ' Enable shift\n\n    :type: bool\n    '
    use_uniform_random_scale: bool = None
    ' Use the same random seed for each scale axis for a uniform scale\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BuildGpencilModifier(GpencilModifier, bpy_struct):
    """ Animate strokes appearing and disappearing
    """
    concurrent_time_alignment: typing.Union[str, int] = None
    ' When should strokes start to appear/disappear * ``START`` Align Start -- All strokes start at same time (i.e. short strokes finish earlier). * ``END`` Align End -- All strokes end at same time (i.e. short strokes start later).\n\n    :type: typing.Union[str, int]\n    '
    fade_factor: float = None
    ' Defines how much of the stroke is fading in/out\n\n    :type: float\n    '
    fade_opacity_strength: float = None
    ' How much strength fading applies on top of stroke opacity\n\n    :type: float\n    '
    fade_thickness_strength: float = None
    ' How much strength fading applies on top of stroke thickness\n\n    :type: float\n    '
    frame_end: float = None
    ' End Frame (when Restrict Frame Range is enabled)\n\n    :type: float\n    '
    frame_start: float = None
    ' Start Frame (when Restrict Frame Range is enabled)\n\n    :type: float\n    '
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    length: float = None
    ' Maximum number of frames that the build effect can run for (unless another GP keyframe occurs before this time has elapsed)\n\n    :type: float\n    '
    mode: typing.Union[str, int] = None
    " How many strokes are being animated at a time * ``SEQUENTIAL`` Sequential -- Strokes appear/disappear one after the other, but only a single one changes at a time. * ``CONCURRENT`` Concurrent -- Multiple strokes appear/disappear at once. * ``ADDITIVE`` Additive -- Builds only new strokes (assuming 'additive' drawing).\n\n    :type: typing.Union[str, int]\n    "
    object: 'Object' = None
    " Object used as build starting position\n\n    :type: 'Object'\n    "
    percentage_factor: float = None
    ' Defines how much of the stroke is visible\n\n    :type: float\n    '
    start_delay: float = None
    ' Number of frames after each GP keyframe before the modifier has any effect\n\n    :type: float\n    '
    target_vertex_group: str = None
    ' Output Vertex group\n\n    :type: str\n    '
    transition: typing.Union[str, int] = None
    ' How are strokes animated (i.e. are they appearing or disappearing) * ``GROW`` Grow -- Show points in the order they occur in each stroke (e.g. for animating lines being drawn). * ``SHRINK`` Shrink -- Hide points from the end of each stroke to the start (e.g. for animating lines being erased). * ``FADE`` Vanish -- Hide points in the order they occur in each stroke (e.g. for animating ink fading or vanishing after getting drawn).\n\n    :type: typing.Union[str, int]\n    '
    use_fading: bool = None
    ' Fade out strokes instead of directly cutting off\n\n    :type: bool\n    '
    use_percentage: bool = None
    ' Use a percentage factor to determine the visible points\n\n    :type: bool\n    '
    use_restrict_frame_range: bool = None
    ' Only modify strokes during the specified frame range\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ColorGpencilModifier(GpencilModifier, bpy_struct):
    """ Change Hue/Saturation modifier
    """
    curve: 'CurveMapping' = None
    " Custom curve to apply effect\n\n    :type: 'CurveMapping'\n    "
    hue: float = None
    ' Color Hue\n\n    :type: float\n    '
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_material_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_materials: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    material: 'Material' = None
    " Material used for filtering effect\n\n    :type: 'Material'\n    "
    modify_color: typing.Union[str, int] = None
    ' Set what colors of the stroke are affected * ``BOTH`` Stroke & Fill -- Modify fill and stroke colors. * ``STROKE`` Stroke -- Modify stroke color only. * ``FILL`` Fill -- Modify fill color only.\n\n    :type: typing.Union[str, int]\n    '
    pass_index: int = None
    ' Pass index\n\n    :type: int\n    '
    saturation: float = None
    ' Color Saturation\n\n    :type: float\n    '
    use_custom_curve: bool = None
    ' Use a custom curve to define color effect along the strokes\n\n    :type: bool\n    '
    value: float = None
    ' Color Value\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class DashGpencilModifierData(GpencilModifier, bpy_struct):
    """ Create dot-dash effect for strokes
    """
    dash_offset: int = None
    ' Offset into each stroke before the beginning of the dashed segment generation\n\n    :type: int\n    '
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_material_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_materials: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    material: 'Material' = None
    " Material used for filtering effect\n\n    :type: 'Material'\n    "
    pass_index: int = None
    ' Pass index\n\n    :type: int\n    '
    segment_active_index: int = None
    ' Active index in the segment list\n\n    :type: int\n    '
    segments: bpy_prop_collection['DashGpencilModifierSegment'] = None
    " \n\n    :type: bpy_prop_collection['DashGpencilModifierSegment']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class EnvelopeGpencilModifier(GpencilModifier, bpy_struct):
    """ Envelope stroke effect modifier
    """
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_material_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_materials: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_vertex: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    mat_nr: int = None
    ' The material to use for the new strokes\n\n    :type: int\n    '
    material: 'Material' = None
    " Material used for filtering effect\n\n    :type: 'Material'\n    "
    mode: typing.Union[str, int] = None
    " Algorithm to use for generating the envelope * ``DEFORM`` Deform -- Deform the stroke to best match the envelope shape. * ``SEGMENTS`` Segments -- Add segments to create the envelope. Keep the original stroke. * ``FILLS`` Fills -- Add fill segments to create the envelope. Don't keep the original stroke.\n\n    :type: typing.Union[str, int]\n    "
    pass_index: int = None
    ' Pass index\n\n    :type: int\n    '
    skip: int = None
    ' The number of generated segments to skip to reduce complexity\n\n    :type: int\n    '
    spread: int = None
    ' The number of points to skip to create straight segments\n\n    :type: int\n    '
    strength: float = None
    ' Multiplier for the strength of the new strokes\n\n    :type: float\n    '
    thickness: float = None
    ' Multiplier for the thickness of the new strokes\n\n    :type: float\n    '
    vertex_group: str = None
    ' Vertex group name for modulating the deform\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class HookGpencilModifier(GpencilModifier, bpy_struct):
    """ Hook modifier to modify the location of stroke points
    """
    center: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    falloff_curve: 'CurveMapping' = None
    " Custom light falloff curve\n\n    :type: 'CurveMapping'\n    "
    falloff_radius: float = None
    ' If not zero, the distance from the hook where influence ends\n\n    :type: float\n    '
    falloff_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_material_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_materials: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_vertex: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    material: 'Material' = None
    " Material used for filtering effect\n\n    :type: 'Material'\n    "
    matrix_inverse: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " Reverse the transformation between this object and its target\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    object: 'Object' = None
    " Parent Object for hook, also recalculates and clears offset\n\n    :type: 'Object'\n    "
    pass_index: int = None
    ' Pass index\n\n    :type: int\n    '
    strength: float = None
    ' Relative force of the hook\n\n    :type: float\n    '
    subtarget: str = None
    ' Name of Parent Bone for hook (if applicable), also recalculates and clears offset\n\n    :type: str\n    '
    use_falloff_uniform: bool = None
    ' Compensate for non-uniform object scale\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Vertex group name for modulating the deform\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LatticeGpencilModifier(GpencilModifier, bpy_struct):
    """ Change stroke using lattice to deform modifier
    """
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_material_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_materials: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_vertex: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    material: 'Material' = None
    " Material used for filtering effect\n\n    :type: 'Material'\n    "
    object: 'Object' = None
    " Lattice object to deform with\n\n    :type: 'Object'\n    "
    pass_index: int = None
    ' Pass index\n\n    :type: int\n    '
    strength: float = None
    ' Strength of modifier effect\n\n    :type: float\n    '
    vertex_group: str = None
    ' Vertex group name for modulating the deform\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LengthGpencilModifier(GpencilModifier, bpy_struct):
    """ Stretch or shrink strokes
    """
    end_factor: float = None
    ' Added length to the end of each stroke relative to its length\n\n    :type: float\n    '
    end_length: float = None
    ' Absolute added length to the end of each stroke\n\n    :type: float\n    '
    invert_curvature: bool = None
    " Invert the curvature of the stroke's extension\n\n    :type: bool\n    "
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_material_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_materials: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    material: 'Material' = None
    " Material used for filtering effect\n\n    :type: 'Material'\n    "
    max_angle: float = None
    ' Ignore points on the stroke that deviate from their neighbors by more than this angle when determining the extrapolation shape\n\n    :type: float\n    '
    mode: typing.Union[str, int] = None
    " Mode to define length * ``RELATIVE`` Relative -- Length in ratio to the stroke's length. * ``ABSOLUTE`` Absolute -- Length in geometry space.\n\n    :type: typing.Union[str, int]\n    "
    overshoot_factor: float = None
    ' Defines what portion of the stroke is used for the calculation of the extension\n\n    :type: float\n    '
    pass_index: int = None
    ' Pass index\n\n    :type: int\n    '
    point_density: float = None
    ' Multiplied by Start/End for the total added point count\n\n    :type: float\n    '
    random_end_factor: float = None
    ' Size of random length added to the end of each stroke\n\n    :type: float\n    '
    random_offset: float = None
    " Smoothly offset each stroke's random value\n\n    :type: float\n    "
    random_start_factor: float = None
    ' Size of random length added to the start of each stroke\n\n    :type: float\n    '
    seed: int = None
    ' Random seed\n\n    :type: int\n    '
    segment_influence: float = None
    ' Factor to determine how much the length of the individual segments should influence the final computed curvature. Higher factors makes small segments influence the overall curvature less\n\n    :type: float\n    '
    start_factor: float = None
    ' Added length to the start of each stroke relative to its length\n\n    :type: float\n    '
    start_length: float = None
    ' Absolute added length to the start of each stroke\n\n    :type: float\n    '
    step: int = None
    ' Number of frames before recalculate random values again\n\n    :type: int\n    '
    use_curvature: bool = None
    ' Follow the curvature of the stroke\n\n    :type: bool\n    '
    use_random: bool = None
    ' Use random values over time\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineartGpencilModifier(GpencilModifier, bpy_struct):
    """ Generate line art strokes from selected source
    """
    chaining_image_threshold: float = None
    ' Segments with an image distance smaller than this will be chained together\n\n    :type: float\n    '
    crease_threshold: float = None
    ' Angles smaller than this will be treated as creases. Crease angle priority: object line art crease override > mesh auto smooth angle > line art default crease\n\n    :type: float\n    '
    invert_source_vertex_group: bool = None
    ' Invert source vertex group values\n\n    :type: bool\n    '
    is_baked: bool = None
    ' This modifier has baked data\n\n    :type: bool\n    '
    level_end: int = None
    ' Maximum number of occlusions for the generated strokes\n\n    :type: int\n    '
    level_start: int = None
    ' Minimum number of occlusions for the generated strokes\n\n    :type: int\n    '
    light_contour_object: 'Object' = None
    " Use this light object to generate light contour\n\n    :type: 'Object'\n    "
    opacity: float = None
    ' The strength value for the generate strokes\n\n    :type: float\n    '
    overscan: float = None
    ' A margin to prevent strokes from ending abruptly at the edge of the image\n\n    :type: float\n    '
    shadow_camera_far: float = None
    ' Far clipping distance of shadow camera\n\n    :type: float\n    '
    shadow_camera_near: float = None
    ' Near clipping distance of shadow camera\n\n    :type: float\n    '
    shadow_camera_size: float = None
    ' Represents the "Orthographic Scale" of an orthographic camera. If the camera is positioned at the light\'s location with this scale, it will represent the coverage of the shadow "camera"\n\n    :type: float\n    '
    shadow_region_filtering: typing.Union[str, int] = None
    ' Select feature lines that comes from lit or shaded regions. Will not affect cast shadow and light contour since they are at the border * ``NONE`` None -- Not filtering any lines based on illumination region. * ``ILLUMINATED`` Illuminated -- Only selecting lines from illuminated regions. * ``SHADED`` Shaded -- Only selecting lines from shaded regions. * ``ILLUMINATED_ENCLOSED`` Illuminated (Enclosed Shapes) -- Selecting lines from lit regions, and make the combination of contour, light contour and shadow lines into enclosed shapes.\n\n    :type: typing.Union[str, int]\n    '
    silhouette_filtering: typing.Union[str, int] = None
    ' Select contour or silhouette\n\n    :type: typing.Union[str, int]\n    '
    smooth_tolerance: float = None
    ' Strength of smoothing applied on jagged chains\n\n    :type: float\n    '
    source_camera: 'Object' = None
    " Use specified camera object for generating line art\n\n    :type: 'Object'\n    "
    source_collection: 'Collection' = None
    " Generate strokes from the objects in this collection\n\n    :type: 'Collection'\n    "
    source_object: 'Object' = None
    " Generate strokes from this object\n\n    :type: 'Object'\n    "
    source_type: typing.Union[str, int] = None
    ' Line art stroke source type\n\n    :type: typing.Union[str, int]\n    '
    source_vertex_group: str = None
    ' Match the beginning of vertex group names from mesh objects, match all when left empty\n\n    :type: str\n    '
    split_angle: float = None
    ' Angle in screen space below which a stroke is split in two\n\n    :type: float\n    '
    stroke_depth_offset: float = None
    ' Move strokes slightly towards the camera to avoid clipping while preserve depth for the viewport\n\n    :type: float\n    '
    target_layer: str = None
    ' Grease Pencil layer assigned to the generated strokes\n\n    :type: str\n    '
    target_material: 'Material' = None
    " Grease Pencil material assigned to the generated strokes\n\n    :type: 'Material'\n    "
    thickness: int = None
    ' The thickness for the generated strokes\n\n    :type: int\n    '
    use_back_face_culling: bool = None
    ' Remove all back faces to speed up calculation, this will create edges in different occlusion levels than when disabled\n\n    :type: bool\n    '
    use_cache: bool = None
    ' Use cached scene data from the first line art modifier in the stack. Certain settings will be unavailable\n\n    :type: bool\n    '
    use_clip_plane_boundaries: bool = None
    ' Allow lines generated by the near/far clipping plane to be shown\n\n    :type: bool\n    '
    use_contour: bool = None
    ' Generate strokes from contours lines\n\n    :type: bool\n    '
    use_crease: bool = None
    ' Generate strokes from creased edges\n\n    :type: bool\n    '
    use_crease_on_sharp: bool = None
    ' Allow crease to show on sharp edges\n\n    :type: bool\n    '
    use_crease_on_smooth: bool = None
    ' Allow crease edges to show inside smooth surfaces\n\n    :type: bool\n    '
    use_custom_camera: bool = None
    ' Use custom camera instead of the active camera\n\n    :type: bool\n    '
    use_detail_preserve: bool = None
    ' Keep the zig-zag "noise" in initial chaining\n\n    :type: bool\n    '
    use_edge_mark: bool = None
    ' Generate strokes from freestyle marked edges\n\n    :type: bool\n    '
    use_edge_overlap: bool = None
    ' Allow edges in the same location (i.e. from edge split) to show properly. May run slower\n\n    :type: bool\n    '
    use_face_mark: bool = None
    ' Filter feature lines using freestyle face marks\n\n    :type: bool\n    '
    use_face_mark_boundaries: bool = None
    ' Filter feature lines based on face mark boundaries\n\n    :type: bool\n    '
    use_face_mark_invert: bool = None
    ' Invert face mark filtering\n\n    :type: bool\n    '
    use_face_mark_keep_contour: bool = None
    ' Preserve contour lines while filtering\n\n    :type: bool\n    '
    use_fuzzy_all: bool = None
    ' Treat all lines as the same line type so they can be chained together\n\n    :type: bool\n    '
    use_fuzzy_intersections: bool = None
    ' Treat intersection and contour lines as if they were the same type so they can be chained together\n\n    :type: bool\n    '
    use_geometry_space_chain: bool = None
    ' Use geometry distance for chaining instead of image space\n\n    :type: bool\n    '
    use_image_boundary_trimming: bool = None
    ' Trim all edges right at the boundary of image(including overscan region)\n\n    :type: bool\n    '
    use_intersection: bool = None
    ' Generate strokes from intersections\n\n    :type: bool\n    '
    use_intersection_mask: typing.List[bool] = None
    ' Mask bits to match from Collection Line Art settings\n\n    :type: typing.List[bool]\n    '
    use_intersection_match: bool = None
    ' Require matching all intersection masks instead of just one\n\n    :type: bool\n    '
    use_invert_collection: bool = None
    ' Select everything except lines from specified collection\n\n    :type: bool\n    '
    use_invert_silhouette: bool = None
    ' Select anti-silhouette lines\n\n    :type: bool\n    '
    use_light_contour: bool = None
    ' Generate light/shadow separation lines from a reference light object\n\n    :type: bool\n    '
    use_loose: bool = None
    ' Generate strokes from loose edges\n\n    :type: bool\n    '
    use_loose_as_contour: bool = None
    ' Loose edges will have contour type\n\n    :type: bool\n    '
    use_loose_edge_chain: bool = None
    ' Allow loose edges to be chained together\n\n    :type: bool\n    '
    use_material: bool = None
    ' Generate strokes from borders between materials\n\n    :type: bool\n    '
    use_material_mask: bool = None
    ' Use material masks to filter out occluded strokes\n\n    :type: bool\n    '
    use_material_mask_bits: typing.List[bool] = None
    ' Mask bits to match from Material Line Art settings\n\n    :type: typing.List[bool]\n    '
    use_material_mask_match: bool = None
    ' Require matching all material masks instead of just one\n\n    :type: bool\n    '
    use_multiple_levels: bool = None
    ' Generate strokes from a range of occlusion levels\n\n    :type: bool\n    '
    use_object_instances: bool = None
    ' Allow particle objects and face/vertex instances to show in line art\n\n    :type: bool\n    '
    use_offset_towards_custom_camera: bool = None
    ' Offset strokes towards selected camera instead of the active camera\n\n    :type: bool\n    '
    use_output_vertex_group_match_by_name: bool = None
    ' Match output vertex group based on name\n\n    :type: bool\n    '
    use_overlap_edge_type_support: bool = None
    ' Allow an edge to have multiple overlapping types. This will create a separate stroke for each overlapping type\n\n    :type: bool\n    '
    use_shadow: bool = None
    ' Project contour lines using a light source object\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Vertex group name for selected strokes\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MirrorGpencilModifier(GpencilModifier, bpy_struct):
    """ Create mirroring strokes
    """
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_material_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_materials: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    material: 'Material' = None
    " Material used for filtering effect\n\n    :type: 'Material'\n    "
    object: 'Object' = None
    " Object used as center\n\n    :type: 'Object'\n    "
    pass_index: int = None
    ' Pass index\n\n    :type: int\n    '
    use_axis_x: bool = None
    ' Mirror the X axis\n\n    :type: bool\n    '
    use_axis_y: bool = None
    ' Mirror the Y axis\n\n    :type: bool\n    '
    use_axis_z: bool = None
    ' Mirror the Z axis\n\n    :type: bool\n    '
    use_clip: bool = None
    ' Clip points\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MultiplyGpencilModifier(GpencilModifier, bpy_struct):
    """ Generate multiple strokes from one stroke
    """
    distance: float = None
    ' Distance of duplications\n\n    :type: float\n    '
    duplicates: int = None
    ' How many copies of strokes be displayed\n\n    :type: int\n    '
    fading_center: float = None
    ' Fade center\n\n    :type: float\n    '
    fading_opacity: float = None
    " Fade influence of stroke's opacity\n\n    :type: float\n    "
    fading_thickness: float = None
    " Fade influence of stroke's thickness\n\n    :type: float\n    "
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_material_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_materials: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    material: 'Material' = None
    " Material used for filtering effect\n\n    :type: 'Material'\n    "
    offset: float = None
    ' Offset of duplicates. -1 to 1: inner to outer\n\n    :type: float\n    '
    pass_index: int = None
    ' Pass index\n\n    :type: int\n    '
    use_fade: bool = None
    ' Fade the stroke thickness for each generated stroke\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NoiseGpencilModifier(GpencilModifier, bpy_struct):
    """ Noise effect modifier
    """
    curve: 'CurveMapping' = None
    " Custom curve to apply effect\n\n    :type: 'CurveMapping'\n    "
    factor: float = None
    ' Amount of noise to apply\n\n    :type: float\n    '
    factor_strength: float = None
    ' Amount of noise to apply to opacity\n\n    :type: float\n    '
    factor_thickness: float = None
    ' Amount of noise to apply to thickness\n\n    :type: float\n    '
    factor_uvs: float = None
    ' Amount of noise to apply uv rotation\n\n    :type: float\n    '
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_material_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_materials: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_vertex: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    material: 'Material' = None
    " Material used for filtering effect\n\n    :type: 'Material'\n    "
    noise_offset: float = None
    ' Offset the noise along the strokes\n\n    :type: float\n    '
    noise_scale: float = None
    ' Scale the noise frequency\n\n    :type: float\n    '
    pass_index: int = None
    ' Pass index\n\n    :type: int\n    '
    random_mode: typing.Union[str, int] = None
    ' Where to perform randomization * ``STEP`` Steps -- Randomize every number of frames. * ``KEYFRAME`` Keyframes -- Randomize on keyframes only.\n\n    :type: typing.Union[str, int]\n    '
    seed: int = None
    ' Random seed\n\n    :type: int\n    '
    step: int = None
    ' Number of frames between randomization steps\n\n    :type: int\n    '
    use_custom_curve: bool = None
    ' Use a custom curve to define noise effect along the strokes\n\n    :type: bool\n    '
    use_random: bool = None
    ' Use random values over time\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Vertex group name for modulating the deform\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ObjectGpencilModifiers(bpy_prop_collection[GpencilModifier], bpy_struct):
    """ Collection of object grease pencil modifiers
    """

    def new(self, name: str, type: typing.Union[str, int]) -> 'GpencilModifier':
        """ Add a new greasepencil_modifier

        :param name: New name for the greasepencil_modifier
        :type name: str
        :param type: Modifier type to add
        :type type: typing.Union[str, int]
        :rtype: 'GpencilModifier'
        :return: Newly created modifier
        """
        pass

    def remove(self, greasepencil_modifier: 'GpencilModifier'):
        """ Remove an existing greasepencil_modifier from the object

        :param greasepencil_modifier: Modifier to remove
        :type greasepencil_modifier: 'GpencilModifier'
        """
        pass

    def clear(self):
        """ Remove all grease pencil modifiers from the object

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class OffsetGpencilModifier(GpencilModifier, bpy_struct):
    """ Offset Stroke modifier
    """
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_material_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_materials: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_vertex: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    location: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Values for change location\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    material: 'Material' = None
    " Material used for filtering effect\n\n    :type: 'Material'\n    "
    pass_index: int = None
    ' Pass index\n\n    :type: int\n    '
    random_offset: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Value for changes in location\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    random_rotation: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler'] = None
    " Value for changes in rotation\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler']\n    "
    random_scale: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Value for changes in scale\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    rotation: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler'] = None
    " Values for changes in rotation\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler']\n    "
    scale: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Values for changes in scale\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    seed: int = None
    ' Random seed\n\n    :type: int\n    '
    use_uniform_random_scale: bool = None
    ' Use the same random seed for each scale axis for a uniform scale\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Vertex group name for modulating the deform\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class OpacityGpencilModifier(GpencilModifier, bpy_struct):
    """ Opacity of Strokes modifier
    """
    curve: 'CurveMapping' = None
    " Custom curve to apply effect\n\n    :type: 'CurveMapping'\n    "
    factor: float = None
    ' Factor of Opacity\n\n    :type: float\n    '
    hardness: float = None
    ' Factor of stroke hardness\n\n    :type: float\n    '
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_material_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_materials: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_vertex: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    material: 'Material' = None
    " Material used for filtering effect\n\n    :type: 'Material'\n    "
    modify_color: typing.Union[str, int] = None
    ' Set what colors of the stroke are affected * ``BOTH`` Stroke & Fill -- Modify fill and stroke colors. * ``STROKE`` Stroke -- Modify stroke color only. * ``FILL`` Fill -- Modify fill color only. * ``HARDNESS`` Hardness -- Modify stroke hardness.\n\n    :type: typing.Union[str, int]\n    '
    pass_index: int = None
    ' Pass index\n\n    :type: int\n    '
    use_custom_curve: bool = None
    ' Use a custom curve to define opacity effect along the strokes\n\n    :type: bool\n    '
    use_normalized_opacity: bool = None
    ' Replace the stroke opacity\n\n    :type: bool\n    '
    use_weight_factor: bool = None
    ' Use weight to modulate effect\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Vertex group name for modulating the deform\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class OutlineGpencilModifier(GpencilModifier, bpy_struct):
    """ Outline of Strokes modifier from camera view
    """
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_material_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_materials: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    material: 'Material' = None
    " Material used for filtering effect\n\n    :type: 'Material'\n    "
    object: 'Object' = None
    " Target object to define stroke start\n\n    :type: 'Object'\n    "
    outline_material: 'Material' = None
    " Material used for outline strokes\n\n    :type: 'Material'\n    "
    pass_index: int = None
    ' Pass index\n\n    :type: int\n    '
    sample_length: float = None
    ' \n\n    :type: float\n    '
    subdivision: int = None
    ' Number of subdivisions\n\n    :type: int\n    '
    thickness: int = None
    ' Thickness of the perimeter stroke\n\n    :type: int\n    '
    use_keep_shape: bool = None
    ' Try to keep global shape\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShrinkwrapGpencilModifier(GpencilModifier, bpy_struct):
    """ Shrink wrapping modifier to shrink wrap and object to a target
    """
    auxiliary_target: 'Object' = None
    " Additional mesh target to shrink to\n\n    :type: 'Object'\n    "
    cull_face: typing.Union[str, int] = None
    ' Stop vertices from projecting to a face on the target when facing towards/away\n\n    :type: typing.Union[str, int]\n    '
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_material_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_materials: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_vertex: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    material: 'Material' = None
    " Material used for filtering effect\n\n    :type: 'Material'\n    "
    offset: float = None
    ' Distance to keep from the target\n\n    :type: float\n    '
    pass_index: int = None
    ' Pass index\n\n    :type: int\n    '
    project_limit: float = None
    ' Limit the distance used for projection (zero disables)\n\n    :type: float\n    '
    smooth_factor: float = None
    ' Amount of smoothing to apply\n\n    :type: float\n    '
    smooth_step: int = None
    ' Number of times to apply smooth (high numbers can reduce FPS)\n\n    :type: int\n    '
    subsurf_levels: int = None
    " Number of subdivisions that must be performed before extracting vertices' positions and normals\n\n    :type: int\n    "
    target: 'Object' = None
    " Mesh target to shrink to\n\n    :type: 'Object'\n    "
    use_invert_cull: bool = None
    ' When projecting in the negative direction invert the face cull mode\n\n    :type: bool\n    '
    use_negative_direction: bool = None
    ' Allow vertices to move in the negative direction of axis\n\n    :type: bool\n    '
    use_positive_direction: bool = None
    ' Allow vertices to move in the positive direction of axis\n\n    :type: bool\n    '
    use_project_x: bool = None
    ' \n\n    :type: bool\n    '
    use_project_y: bool = None
    ' \n\n    :type: bool\n    '
    use_project_z: bool = None
    ' \n\n    :type: bool\n    '
    vertex_group: str = None
    ' Vertex group name for modulating the deform\n\n    :type: str\n    '
    wrap_method: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    wrap_mode: typing.Union[str, int] = None
    ' Select how vertices are constrained to the target surface\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SimplifyGpencilModifier(GpencilModifier, bpy_struct):
    """ Simplify Stroke modifier
    """
    distance: float = None
    ' Distance between points\n\n    :type: float\n    '
    factor: float = None
    ' Factor of Simplify\n\n    :type: float\n    '
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_material_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_materials: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    length: float = None
    ' Length of each segment\n\n    :type: float\n    '
    material: 'Material' = None
    " Material used for filtering effect\n\n    :type: 'Material'\n    "
    mode: typing.Union[str, int] = None
    ' How to simplify the stroke * ``FIXED`` Fixed -- Delete alternating vertices in the stroke, except extremes. * ``ADAPTIVE`` Adaptive -- Use a Ramer-Douglas-Peucker algorithm to simplify the stroke preserving main shape. * ``SAMPLE`` Sample -- Re-sample the stroke with segments of the specified length. * ``MERGE`` Merge -- Simplify the stroke by merging vertices closer than a given distance.\n\n    :type: typing.Union[str, int]\n    '
    pass_index: int = None
    ' Pass index\n\n    :type: int\n    '
    sharp_threshold: float = None
    ' Preserve corners that have sharper angle than this threshold\n\n    :type: float\n    '
    step: int = None
    ' Number of times to apply simplify\n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SmoothGpencilModifier(GpencilModifier, bpy_struct):
    """ Smooth effect modifier
    """
    curve: 'CurveMapping' = None
    " Custom curve to apply effect\n\n    :type: 'CurveMapping'\n    "
    factor: float = None
    ' Amount of smooth to apply\n\n    :type: float\n    '
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_material_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_materials: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_vertex: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    material: 'Material' = None
    " Material used for filtering effect\n\n    :type: 'Material'\n    "
    pass_index: int = None
    ' Pass index\n\n    :type: int\n    '
    step: int = None
    ' Number of times to apply smooth (high numbers can reduce fps)\n\n    :type: int\n    '
    use_custom_curve: bool = None
    ' Use a custom curve to define smooth effect along the strokes\n\n    :type: bool\n    '
    use_edit_position: bool = None
    ' The modifier affects the position of the point\n\n    :type: bool\n    '
    use_edit_strength: bool = None
    ' The modifier affects the color strength of the point\n\n    :type: bool\n    '
    use_edit_thickness: bool = None
    ' The modifier affects the thickness of the point\n\n    :type: bool\n    '
    use_edit_uv: bool = None
    ' The modifier affects the UV rotation factor of the point\n\n    :type: bool\n    '
    use_keep_shape: bool = None
    ' Smooth the details, but keep the overall shape\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Vertex group name for modulating the deform\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SubdivGpencilModifier(GpencilModifier, bpy_struct):
    """ Subdivide Stroke modifier
    """
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_material_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_materials: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    level: int = None
    ' Number of subdivisions\n\n    :type: int\n    '
    material: 'Material' = None
    " Material used for filtering effect\n\n    :type: 'Material'\n    "
    pass_index: int = None
    ' Pass index\n\n    :type: int\n    '
    subdivision_type: typing.Union[str, int] = None
    ' Select type of subdivision algorithm\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureGpencilModifier(GpencilModifier, bpy_struct):
    """ Transform stroke texture coordinates Modifier
    """
    alignment_rotation: float = None
    ' Additional rotation applied to dots and square strokes\n\n    :type: float\n    '
    fill_offset: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Additional offset of the fill UV\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    fill_rotation: float = None
    ' Additional rotation of the fill UV\n\n    :type: float\n    '
    fill_scale: float = None
    ' Additional scale of the fill UV\n\n    :type: float\n    '
    fit_method: typing.Union[str, int] = None
    ' * ``CONSTANT_LENGTH`` Constant Length -- Keep the texture at a constant length regardless of the length of each stroke. * ``FIT_STROKE`` Stroke Length -- Scale the texture to fit the length of each stroke.\n\n    :type: typing.Union[str, int]\n    '
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_material_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_materials: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_vertex: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    material: 'Material' = None
    " Material used for filtering effect\n\n    :type: 'Material'\n    "
    mode: typing.Union[str, int] = None
    ' * ``STROKE`` Stroke -- Manipulate only stroke texture coordinates. * ``FILL`` Fill -- Manipulate only fill texture coordinates. * ``STROKE_AND_FILL`` Stroke & Fill -- Manipulate both stroke and fill texture coordinates.\n\n    :type: typing.Union[str, int]\n    '
    pass_index: int = None
    ' Pass index\n\n    :type: int\n    '
    uv_offset: float = None
    ' Offset value to add to stroke UVs\n\n    :type: float\n    '
    uv_scale: float = None
    ' Factor to scale the UVs\n\n    :type: float\n    '
    vertex_group: str = None
    ' Vertex group name for modulating the deform\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ThickGpencilModifier(GpencilModifier, bpy_struct):
    """ Subdivide and Smooth Stroke modifier
    """
    curve: 'CurveMapping' = None
    " Custom curve to apply effect\n\n    :type: 'CurveMapping'\n    "
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_material_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_materials: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_vertex: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    material: 'Material' = None
    " Material used for filtering effect\n\n    :type: 'Material'\n    "
    pass_index: int = None
    ' Pass index\n\n    :type: int\n    '
    thickness: int = None
    ' Absolute thickness to apply everywhere\n\n    :type: int\n    '
    thickness_factor: float = None
    ' Factor to multiply the thickness with\n\n    :type: float\n    '
    use_custom_curve: bool = None
    ' Use a custom curve to define thickness change along the strokes\n\n    :type: bool\n    '
    use_normalized_thickness: bool = None
    ' Replace the stroke thickness\n\n    :type: bool\n    '
    use_weight_factor: bool = None
    ' Use weight to modulate effect\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Vertex group name for modulating the deform\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TimeGpencilModifier(GpencilModifier, bpy_struct):
    """ Time offset modifier
    """
    frame_end: int = None
    ' Final frame of the range\n\n    :type: int\n    '
    frame_scale: float = None
    ' Evaluation time in seconds\n\n    :type: float\n    '
    frame_start: int = None
    ' First frame of the range\n\n    :type: int\n    '
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    mode: typing.Union[str, int] = None
    ' * ``NORMAL`` Regular -- Apply offset in usual animation direction. * ``REVERSE`` Reverse -- Apply offset in reverse animation direction. * ``FIX`` Fixed Frame -- Keep frame and do not change with time. * ``PINGPONG`` Ping Pong -- Loop back and forth starting in reverse. * ``CHAIN`` Chain -- List of chained animation segments.\n\n    :type: typing.Union[str, int]\n    '
    offset: int = None
    ' Number of frames to offset original keyframe number or frame to fix\n\n    :type: int\n    '
    segment_active_index: int = None
    ' Active index in the segment list\n\n    :type: int\n    '
    segments: bpy_prop_collection['TimeGpencilModifierSegment'] = None
    " \n\n    :type: bpy_prop_collection['TimeGpencilModifierSegment']\n    "
    use_custom_frame_range: bool = None
    ' Define a custom range of frames to use in modifier\n\n    :type: bool\n    '
    use_keep_loop: bool = None
    ' Retiming end frames and move to start of animation to keep loop\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TintGpencilModifier(GpencilModifier, bpy_struct):
    """ Tint modifier
    """
    color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color used for tinting\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    colors: 'ColorRamp' = None
    " Color ramp used to define tinting colors\n\n    :type: 'ColorRamp'\n    "
    curve: 'CurveMapping' = None
    " Custom curve to apply effect\n\n    :type: 'CurveMapping'\n    "
    factor: float = None
    ' Factor for tinting\n\n    :type: float\n    '
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_material_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_materials: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_vertex: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    material: 'Material' = None
    " Material used for filtering effect\n\n    :type: 'Material'\n    "
    object: 'Object' = None
    " Parent object to define the center of the effect\n\n    :type: 'Object'\n    "
    pass_index: int = None
    ' Pass index\n\n    :type: int\n    '
    radius: float = None
    ' Defines the maximum distance of the effect\n\n    :type: float\n    '
    tint_type: typing.Union[str, int] = None
    ' Select type of tinting algorithm\n\n    :type: typing.Union[str, int]\n    '
    use_custom_curve: bool = None
    ' Use a custom curve to define vertex color effect along the strokes\n\n    :type: bool\n    '
    use_weight_factor: bool = None
    ' Use weight to modulate effect\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Vertex group name for modulating the deform\n\n    :type: str\n    '
    vertex_mode: typing.Union[str, int] = None
    ' Defines how vertex color affect to the strokes * ``STROKE`` Stroke -- Vertex Color affects to Stroke only. * ``FILL`` Fill -- Vertex Color affects to Fill only. * ``BOTH`` Stroke & Fill -- Vertex Color affects to Stroke and Fill.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class WeightAngleGpencilModifier(GpencilModifier, bpy_struct):
    """ Calculate Vertex Weight dynamically
    """
    angle: float = None
    ' Angle\n\n    :type: float\n    '
    axis: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_material_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_materials: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_vertex: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    material: 'Material' = None
    " Material used for filtering effect\n\n    :type: 'Material'\n    "
    minimum_weight: float = None
    ' Minimum value for vertex weight\n\n    :type: float\n    '
    pass_index: int = None
    ' Pass index\n\n    :type: int\n    '
    space: typing.Union[str, int] = None
    ' Coordinates space\n\n    :type: typing.Union[str, int]\n    '
    target_vertex_group: str = None
    ' Output Vertex group\n\n    :type: str\n    '
    use_invert_output: bool = None
    ' Invert output weight values\n\n    :type: bool\n    '
    use_multiply: bool = None
    ' Multiply the calculated weights with the existing values in the vertex group\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Vertex group name for modulating the deform\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class WeightProxGpencilModifier(GpencilModifier, bpy_struct):
    """ Calculate Vertex Weight dynamically
    """
    distance_end: float = None
    ' Distance mapping to 1.0 weight\n\n    :type: float\n    '
    distance_start: float = None
    ' Distance mapping to 0.0 weight\n\n    :type: float\n    '
    invert_layer_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_layers: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_material_pass: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_materials: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    invert_vertex: bool = None
    ' Inverse filter\n\n    :type: bool\n    '
    layer: str = None
    ' Layer name\n\n    :type: str\n    '
    layer_pass: int = None
    ' Layer pass index\n\n    :type: int\n    '
    material: 'Material' = None
    " Material used for filtering effect\n\n    :type: 'Material'\n    "
    minimum_weight: float = None
    ' Minimum value for vertex weight\n\n    :type: float\n    '
    object: 'Object' = None
    " Object used as distance reference\n\n    :type: 'Object'\n    "
    pass_index: int = None
    ' Pass index\n\n    :type: int\n    '
    target_vertex_group: str = None
    ' Output Vertex group\n\n    :type: str\n    '
    use_invert_output: bool = None
    ' Invert output weight values\n\n    :type: bool\n    '
    use_multiply: bool = None
    ' Multiply the calculated weights with the existing values in the vertex group\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Vertex group name for modulating the deform\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Action(ID, bpy_struct):
    """ A collection of F-Curves for animation
    """
    curve_frame_range: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " The combined frame range of all F-Curves within this action\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    fcurves: 'ActionFCurves' = None
    " The individual F-Curves that make up the action\n\n    :type: 'ActionFCurves'\n    "
    frame_end: float = None
    ' The end frame of the manually set intended playback range\n\n    :type: float\n    '
    frame_range: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " The intended playback frame range of this action, using the manually set range if available, or the combined frame range of all F-Curves within this action if not (assigning sets the manual frame range)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    frame_start: float = None
    ' The start frame of the manually set intended playback range\n\n    :type: float\n    '
    groups: 'ActionGroups' = None
    " Convenient groupings of F-Curves\n\n    :type: 'ActionGroups'\n    "
    id_root: typing.Union[str, int] = None
    ' Type of ID block that action can be used on - DO NOT CHANGE UNLESS YOU KNOW WHAT YOU ARE DOING\n\n    :type: typing.Union[str, int]\n    '
    pose_markers: 'ActionPoseMarkers' = None
    " Markers specific to this action, for labeling poses\n\n    :type: 'ActionPoseMarkers'\n    "
    use_cyclic: bool = None
    " The action is intended to be used as a cycle looping over its manually set playback frame range (enabling this doesn't automatically make it loop)\n\n    :type: bool\n    "
    use_frame_range: bool = None
    ' Manually specify the intended playback frame range for the action (this range is used by some tools, but does not affect animation evaluation)\n\n    :type: bool\n    '

    def flip_with_pose(self, object: 'Object'):
        """ Flip the action around the X axis using a pose

        :param object: The reference armature object to use when flipping
        :type object: 'Object'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Armature(ID, bpy_struct):
    """ Armature data-block containing a hierarchy of bones, usually used for rigging characters
    """
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    axes_position: float = None
    ' The position for the axes on the bone. Increasing the value moves it closer to the tip; decreasing moves it closer to the root\n\n    :type: float\n    '
    bones: 'ArmatureBones' = None
    " \n\n    :type: 'ArmatureBones'\n    "
    display_type: typing.Union[str, int] = None
    ' * ``OCTAHEDRAL`` Octahedral -- Display bones as octahedral shape (default). * ``STICK`` Stick -- Display bones as simple 2D lines with dots. * ``BBONE`` B-Bone -- Display bones as boxes, showing subdivision and B-Splines. * ``ENVELOPE`` Envelope -- Display bones as extruded spheres, showing deformation influence volume. * ``WIRE`` Wire -- Display bones as thin wires, showing subdivision and B-Splines.\n\n    :type: typing.Union[str, int]\n    '
    edit_bones: 'ArmatureEditBones' = None
    " \n\n    :type: 'ArmatureEditBones'\n    "
    is_editmode: bool = None
    ' True when used in editmode\n\n    :type: bool\n    '
    layers: typing.List[bool] = None
    ' Armature layer visibility\n\n    :type: typing.List[bool]\n    '
    layers_protected: typing.List[bool] = None
    ' Protected layers in Proxy Instances are restored to Proxy settings on file reload and undo\n\n    :type: typing.List[bool]\n    '
    pose_position: typing.Union[str, int] = None
    ' Show armature in binding pose or final posed state * ``POSE`` Pose Position -- Show armature in posed state. * ``REST`` Rest Position -- Show Armature in binding pose state (no posing possible).\n\n    :type: typing.Union[str, int]\n    '
    show_axes: bool = None
    ' Display bone axes\n\n    :type: bool\n    '
    show_bone_custom_shapes: bool = None
    ' Display bones with their custom shapes\n\n    :type: bool\n    '
    show_group_colors: bool = None
    ' Display bone group colors\n\n    :type: bool\n    '
    show_names: bool = None
    ' Display bone names\n\n    :type: bool\n    '
    use_mirror_x: bool = None
    ' Apply changes to matching bone on opposite side of X-Axis\n\n    :type: bool\n    '

    def transform(self, matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']):
        """ Transform armature bones by a matrix

        :param matrix: Matrix
        :type matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Brush(ID, bpy_struct):
    """ Brush data-block for storing brush settings for painting and sculpting
    """
    area_radius_factor: float = None
    ' Ratio between the brush radius and the radius that is going to be used to sample the area center\n\n    :type: float\n    '
    auto_smooth_factor: float = None
    ' Amount of smoothing to automatically apply to each stroke\n\n    :type: float\n    '
    automasking_boundary_edges_propagation_steps: int = None
    ' Distance where boundary edge automasking is going to protect vertices from the fully masked edge\n\n    :type: int\n    '
    automasking_cavity_blur_steps: int = None
    ' The number of times the cavity mask is blurred\n\n    :type: int\n    '
    automasking_cavity_curve: 'CurveMapping' = None
    " Curve used for the sensitivity\n\n    :type: 'CurveMapping'\n    "
    automasking_cavity_factor: float = None
    ' The contrast of the cavity mask\n\n    :type: float\n    '
    blend: typing.Union[str, int] = None
    ' Brush blending mode * ``MIX`` Mix -- Use Mix blending mode while painting. * ``DARKEN`` Darken -- Use Darken blending mode while painting. * ``MUL`` Multiply -- Use Multiply blending mode while painting. * ``COLORBURN`` Color Burn -- Use Color Burn blending mode while painting. * ``LINEARBURN`` Linear Burn -- Use Linear Burn blending mode while painting. * ``LIGHTEN`` Lighten -- Use Lighten blending mode while painting. * ``SCREEN`` Screen -- Use Screen blending mode while painting. * ``COLORDODGE`` Color Dodge -- Use Color Dodge blending mode while painting. * ``ADD`` Add -- Use Add blending mode while painting. * ``OVERLAY`` Overlay -- Use Overlay blending mode while painting. * ``SOFTLIGHT`` Soft Light -- Use Soft Light blending mode while painting. * ``HARDLIGHT`` Hard Light -- Use Hard Light blending mode while painting. * ``VIVIDLIGHT`` Vivid Light -- Use Vivid Light blending mode while painting. * ``LINEARLIGHT`` Linear Light -- Use Linear Light blending mode while painting. * ``PINLIGHT`` Pin Light -- Use Pin Light blending mode while painting. * ``DIFFERENCE`` Difference -- Use Difference blending mode while painting. * ``EXCLUSION`` Exclusion -- Use Exclusion blending mode while painting. * ``SUB`` Subtract -- Use Subtract blending mode while painting. * ``HUE`` Hue -- Use Hue blending mode while painting. * ``SATURATION`` Saturation -- Use Saturation blending mode while painting. * ``COLOR`` Color -- Use Color blending mode while painting. * ``LUMINOSITY`` Value -- Use Value blending mode while painting. * ``ERASE_ALPHA`` Erase Alpha -- Erase alpha while painting. * ``ADD_ALPHA`` Add Alpha -- Add alpha while painting.\n\n    :type: typing.Union[str, int]\n    '
    blur_kernel_radius: int = None
    ' Radius of kernel used for soften and sharpen in pixels\n\n    :type: int\n    '
    blur_mode: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    boundary_deform_type: typing.Union[str, int] = None
    ' Deformation type that is used in the brush\n\n    :type: typing.Union[str, int]\n    '
    boundary_falloff_type: typing.Union[str, int] = None
    ' How the brush falloff is applied across the boundary * ``CONSTANT`` Constant -- Applies the same deformation in the entire boundary. * ``RADIUS`` Brush Radius -- Applies the deformation in a localized area limited by the brush radius. * ``LOOP`` Loop -- Applies the brush falloff in a loop pattern. * ``LOOP_INVERT`` Loop and Invert -- Applies the falloff radius in a loop pattern, inverting the displacement direction in each pattern repetition.\n\n    :type: typing.Union[str, int]\n    '
    boundary_offset: float = None
    ' Offset of the boundary origin in relation to the brush radius\n\n    :type: float\n    '
    brush_capabilities: 'BrushCapabilities' = None
    " Brush's capabilities\n\n    :type: 'BrushCapabilities'\n    "
    clone_alpha: float = None
    ' Opacity of clone image display\n\n    :type: float\n    '
    clone_image: 'Image' = None
    " Image for clone tool\n\n    :type: 'Image'\n    "
    clone_offset: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    cloth_constraint_softbody_strength: float = None
    ' How much the cloth preserves the original shape, acting as a soft body\n\n    :type: float\n    '
    cloth_damping: float = None
    ' How much the applied forces are propagated through the cloth\n\n    :type: float\n    '
    cloth_deform_type: typing.Union[str, int] = None
    ' Deformation type that is used in the brush\n\n    :type: typing.Union[str, int]\n    '
    cloth_force_falloff_type: typing.Union[str, int] = None
    ' Shape used in the brush to apply force to the cloth\n\n    :type: typing.Union[str, int]\n    '
    cloth_mass: float = None
    ' Mass of each simulation particle\n\n    :type: float\n    '
    cloth_sim_falloff: float = None
    ' Area to apply deformation falloff to the effects of the simulation\n\n    :type: float\n    '
    cloth_sim_limit: float = None
    ' Factor added relative to the size of the radius to limit the cloth simulation effects\n\n    :type: float\n    '
    cloth_simulation_area_type: typing.Union[str, int] = None
    ' Part of the mesh that is going to be simulated when the stroke is active * ``LOCAL`` Local -- Simulates only a specific area around the brush limited by a fixed radius. * ``GLOBAL`` Global -- Simulates the entire mesh. * ``DYNAMIC`` Dynamic -- The active simulation area moves with the brush.\n\n    :type: typing.Union[str, int]\n    '
    color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    color_type: typing.Union[str, int] = None
    ' Use single color or gradient when painting * ``COLOR`` Color -- Paint with a single color. * ``GRADIENT`` Gradient -- Paint with a gradient.\n\n    :type: typing.Union[str, int]\n    '
    crease_pinch_factor: float = None
    ' How much the crease brush pinches\n\n    :type: float\n    '
    cursor_color_add: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color of cursor when adding\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    cursor_color_subtract: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color of cursor when subtracting\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    cursor_overlay_alpha: int = None
    ' \n\n    :type: int\n    '
    curve: 'CurveMapping' = None
    " Editable falloff curve\n\n    :type: 'CurveMapping'\n    "
    curve_preset: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    curves_sculpt_settings: 'BrushCurvesSculptSettings' = None
    " \n\n    :type: 'BrushCurvesSculptSettings'\n    "
    curves_sculpt_tool: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    dash_ratio: float = None
    ' Ratio of samples in a cycle that the brush is enabled\n\n    :type: float\n    '
    dash_samples: int = None
    ' Length of a dash cycle measured in stroke samples\n\n    :type: int\n    '
    deform_target: typing.Union[str, int] = None
    ' How the deformation of the brush will affect the object * ``GEOMETRY`` Geometry -- Brush deformation displaces the vertices of the mesh. * ``CLOTH_SIM`` Cloth Simulation -- Brush deforms the mesh by deforming the constraints of a cloth simulation.\n\n    :type: typing.Union[str, int]\n    '
    density: float = None
    ' Amount of random elements that are going to be affected by the brush\n\n    :type: float\n    '
    direction: typing.Union[str, int] = None
    ' * ``ADD`` Add -- Add effect of brush. * ``SUBTRACT`` Subtract -- Subtract effect of brush.\n\n    :type: typing.Union[str, int]\n    '
    disconnected_distance_max: float = None
    ' Maximum distance to search for disconnected loose parts in the mesh\n\n    :type: float\n    '
    elastic_deform_type: typing.Union[str, int] = None
    ' Deformation type that is used in the brush\n\n    :type: typing.Union[str, int]\n    '
    elastic_deform_volume_preservation: float = None
    ' Poisson ratio for elastic deformation. Higher values preserve volume more, but also lead to more bulging\n\n    :type: float\n    '
    falloff_angle: float = None
    ' Paint most on faces pointing towards the view according to this angle\n\n    :type: float\n    '
    falloff_shape: typing.Union[str, int] = None
    ' Use projected or spherical falloff * ``SPHERE`` Sphere -- Apply brush influence in a Sphere, outwards from the center. * ``PROJECTED`` Projected -- Apply brush influence in a 2D circle, projected from the view.\n\n    :type: typing.Union[str, int]\n    '
    fill_threshold: float = None
    ' Threshold above which filling is not propagated\n\n    :type: float\n    '
    flow: float = None
    ' Amount of paint that is applied per stroke sample\n\n    :type: float\n    '
    gpencil_sculpt_tool: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    gpencil_settings: 'BrushGpencilSettings' = None
    " \n\n    :type: 'BrushGpencilSettings'\n    "
    gpencil_tool: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    gpencil_vertex_tool: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    gpencil_weight_tool: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    grad_spacing: int = None
    ' Spacing before brush gradient goes full circle\n\n    :type: int\n    '
    gradient: 'ColorRamp' = None
    " \n\n    :type: 'ColorRamp'\n    "
    gradient_fill_mode: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    gradient_stroke_mode: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    hardness: float = None
    ' How close the brush falloff starts from the edge of the brush\n\n    :type: float\n    '
    height: float = None
    ' Affectable height of brush (layer height for layer tool, i.e.)\n\n    :type: float\n    '
    icon_filepath: str = None
    ' File path to brush icon\n\n    :type: str\n    '
    image_paint_capabilities: 'BrushCapabilitiesImagePaint' = None
    " \n\n    :type: 'BrushCapabilitiesImagePaint'\n    "
    image_tool: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    invert_density_pressure: bool = None
    ' Invert the modulation of pressure in density\n\n    :type: bool\n    '
    invert_flow_pressure: bool = None
    ' Invert the modulation of pressure in flow\n\n    :type: bool\n    '
    invert_hardness_pressure: bool = None
    ' Invert the modulation of pressure in hardness\n\n    :type: bool\n    '
    invert_to_scrape_fill: bool = None
    ' Use Scrape or Fill tool when inverting this brush instead of inverting its displacement direction\n\n    :type: bool\n    '
    invert_wet_mix_pressure: bool = None
    ' Invert the modulation of pressure in wet mix\n\n    :type: bool\n    '
    invert_wet_persistence_pressure: bool = None
    ' Invert the modulation of pressure in wet persistence\n\n    :type: bool\n    '
    jitter: float = None
    ' Jitter the position of the brush while painting\n\n    :type: float\n    '
    jitter_absolute: int = None
    ' Jitter the position of the brush in pixels while painting\n\n    :type: int\n    '
    jitter_unit: typing.Union[str, int] = None
    ' Jitter in screen space or relative to brush size * ``VIEW`` View -- Jittering happens in screen space, in pixels. * ``BRUSH`` Brush -- Jittering happens relative to the brush size.\n\n    :type: typing.Union[str, int]\n    '
    mask_overlay_alpha: int = None
    ' \n\n    :type: int\n    '
    mask_stencil_dimension: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Dimensions of mask stencil in viewport\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    mask_stencil_pos: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Position of mask stencil in viewport\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    mask_texture: 'Texture' = None
    " \n\n    :type: 'Texture'\n    "
    mask_texture_slot: 'BrushTextureSlot' = None
    " \n\n    :type: 'BrushTextureSlot'\n    "
    mask_tool: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    multiplane_scrape_angle: float = None
    ' Angle between the planes of the crease\n\n    :type: float\n    '
    normal_radius_factor: float = None
    ' Ratio between the brush radius and the radius that is going to be used to sample the normal\n\n    :type: float\n    '
    normal_weight: float = None
    ' How much grab will pull vertices out of surface during a grab\n\n    :type: float\n    '
    paint_curve: 'PaintCurve' = None
    " Active paint curve\n\n    :type: 'PaintCurve'\n    "
    plane_offset: float = None
    ' Adjust plane on which the brush acts towards or away from the object surface\n\n    :type: float\n    '
    plane_trim: float = None
    ' If a vertex is further away from offset plane than this, then it is not affected\n\n    :type: float\n    '
    pose_deform_type: typing.Union[str, int] = None
    ' Deformation type that is used in the brush\n\n    :type: typing.Union[str, int]\n    '
    pose_ik_segments: int = None
    ' Number of segments of the inverse kinematics chain that will deform the mesh\n\n    :type: int\n    '
    pose_offset: float = None
    ' Offset of the pose origin in relation to the brush radius\n\n    :type: float\n    '
    pose_origin_type: typing.Union[str, int] = None
    ' Method to set the rotation origins for the segments of the brush * ``TOPOLOGY`` Topology -- Sets the rotation origin automatically using the topology and shape of the mesh as a guide. * ``FACE_SETS`` Face Sets -- Creates a pose segment per face sets, starting from the active face set. * ``FACE_SETS_FK`` Face Sets FK -- Simulates an FK deformation using the Face Set under the cursor as control.\n\n    :type: typing.Union[str, int]\n    '
    pose_smooth_iterations: int = None
    ' Smooth iterations applied after calculating the pose factor of each vertex\n\n    :type: int\n    '
    rake_factor: float = None
    ' How much grab will follow cursor rotation\n\n    :type: float\n    '
    rate: float = None
    ' Interval between paints for Airbrush\n\n    :type: float\n    '
    sculpt_capabilities: 'BrushCapabilitiesSculpt' = None
    " \n\n    :type: 'BrushCapabilitiesSculpt'\n    "
    sculpt_plane: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    sculpt_tool: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    secondary_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    sharp_threshold: float = None
    ' Threshold below which, no sharpening is done\n\n    :type: float\n    '
    show_multiplane_scrape_planes_preview: bool = None
    ' Preview the scrape planes in the cursor during the stroke\n\n    :type: bool\n    '
    size: int = None
    ' Radius of the brush in pixels\n\n    :type: int\n    '
    slide_deform_type: typing.Union[str, int] = None
    ' Deformation type that is used in the brush\n\n    :type: typing.Union[str, int]\n    '
    smear_deform_type: typing.Union[str, int] = None
    ' Deformation type that is used in the brush\n\n    :type: typing.Union[str, int]\n    '
    smooth_deform_type: typing.Union[str, int] = None
    ' Deformation type that is used in the brush * ``LAPLACIAN`` Laplacian -- Smooths the surface and the volume. * ``SURFACE`` Surface -- Smooths the surface of the mesh, preserving the volume.\n\n    :type: typing.Union[str, int]\n    '
    smooth_stroke_factor: float = None
    ' Higher values give a smoother stroke\n\n    :type: float\n    '
    smooth_stroke_radius: int = None
    ' Minimum distance from last point before stroke continues\n\n    :type: int\n    '
    snake_hook_deform_type: typing.Union[str, int] = None
    ' Deformation type that is used in the brush * ``FALLOFF`` Radius Falloff -- Applies the brush falloff in the tip of the brush. * ``ELASTIC`` Elastic -- Modifies the entire mesh using elastic deform.\n\n    :type: typing.Union[str, int]\n    '
    spacing: int = None
    ' Spacing between brush daubs as a percentage of brush diameter\n\n    :type: int\n    '
    stencil_dimension: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Dimensions of stencil in viewport\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    stencil_pos: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Position of stencil in viewport\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    strength: float = None
    ' How powerful the effect of the brush is when applied\n\n    :type: float\n    '
    stroke_method: typing.Union[str, int] = None
    ' * ``DOTS`` Dots -- Apply paint on each mouse move step. * ``DRAG_DOT`` Drag Dot -- Allows a single dot to be carefully positioned. * ``SPACE`` Space -- Limit brush application to the distance specified by spacing. * ``AIRBRUSH`` Airbrush -- Keep applying paint effect while holding mouse (spray). * ``ANCHORED`` Anchored -- Keep the brush anchored to the initial location. * ``LINE`` Line -- Draw a line with dabs separated according to spacing. * ``CURVE`` Curve -- Define the stroke curve with a bezier curve (dabs are separated according to spacing).\n\n    :type: typing.Union[str, int]\n    '
    surface_smooth_current_vertex: float = None
    ' How much the position of each individual vertex influences the final result\n\n    :type: float\n    '
    surface_smooth_iterations: int = None
    ' Number of smoothing iterations per brush step\n\n    :type: int\n    '
    surface_smooth_shape_preservation: float = None
    ' How much of the original shape is preserved when smoothing\n\n    :type: float\n    '
    texture: 'Texture' = None
    " \n\n    :type: 'Texture'\n    "
    texture_overlay_alpha: int = None
    ' \n\n    :type: int\n    '
    texture_sample_bias: float = None
    ' Value added to texture samples\n\n    :type: float\n    '
    texture_slot: 'BrushTextureSlot' = None
    " \n\n    :type: 'BrushTextureSlot'\n    "
    tilt_strength_factor: float = None
    ' How much the tilt of the pen will affect the brush\n\n    :type: float\n    '
    tip_roundness: float = None
    ' Roundness of the brush tip\n\n    :type: float\n    '
    tip_scale_x: float = None
    ' Scale of the brush tip in the X axis\n\n    :type: float\n    '
    topology_rake_factor: float = None
    ' Automatically align edges to the brush direction to generate cleaner topology and define sharp features. Best used on low-poly meshes as it has a performance impact\n\n    :type: float\n    '
    unprojected_radius: float = None
    ' Radius of brush in Blender units\n\n    :type: float\n    '
    use_accumulate: bool = None
    ' Accumulate stroke daubs on top of each other\n\n    :type: bool\n    '
    use_adaptive_space: bool = None
    ' Space daubs according to surface orientation instead of screen space\n\n    :type: bool\n    '
    use_airbrush: bool = None
    ' Keep applying paint effect while holding mouse (spray)\n\n    :type: bool\n    '
    use_alpha: bool = None
    ' When this is disabled, lock alpha while painting\n\n    :type: bool\n    '
    use_anchor: bool = None
    ' Keep the brush anchored to the initial location\n\n    :type: bool\n    '
    use_automasking_boundary_edges: bool = None
    ' Do not affect non manifold boundary edges\n\n    :type: bool\n    '
    use_automasking_boundary_face_sets: bool = None
    ' Do not affect vertices that belong to a Face Set boundary\n\n    :type: bool\n    '
    use_automasking_cavity: bool = None
    ' Do not affect vertices on peaks, based on the surface curvature\n\n    :type: bool\n    '
    use_automasking_cavity_inverted: bool = None
    ' Do not affect vertices within crevices, based on the surface curvature\n\n    :type: bool\n    '
    use_automasking_custom_cavity_curve: bool = None
    ' Use custom curve\n\n    :type: bool\n    '
    use_automasking_face_sets: bool = None
    ' Affect only vertices that share Face Sets with the active vertex\n\n    :type: bool\n    '
    use_automasking_start_normal: bool = None
    ' Affect only vertices with a similar normal to where the stroke starts\n\n    :type: bool\n    '
    use_automasking_topology: bool = None
    ' Affect only vertices connected to the active vertex under the brush\n\n    :type: bool\n    '
    use_automasking_view_normal: bool = None
    ' Affect only vertices with a normal that faces the viewer\n\n    :type: bool\n    '
    use_automasking_view_occlusion: bool = None
    ' Only affect vertices that are not occluded by other faces. (Slower performance)\n\n    :type: bool\n    '
    use_cloth_collision: bool = None
    ' Collide with objects during the simulation\n\n    :type: bool\n    '
    use_cloth_pin_simulation_boundary: bool = None
    ' Lock the position of the vertices in the simulation falloff area to avoid artifacts and create a softer transition with unaffected areas\n\n    :type: bool\n    '
    use_connected_only: bool = None
    ' Affect only topologically connected elements\n\n    :type: bool\n    '
    use_cursor_overlay: bool = None
    ' Show cursor in viewport\n\n    :type: bool\n    '
    use_cursor_overlay_override: bool = None
    " Don't show overlay during a stroke\n\n    :type: bool\n    "
    use_curve: bool = None
    ' Define the stroke curve with a bezier curve. Dabs are separated according to spacing\n\n    :type: bool\n    '
    use_custom_icon: bool = None
    ' Set the brush icon from an image file\n\n    :type: bool\n    '
    use_density_pressure: bool = None
    ' Use pressure to modulate density\n\n    :type: bool\n    '
    use_edge_to_edge: bool = None
    ' Drag anchor brush from edge-to-edge\n\n    :type: bool\n    '
    use_flow_pressure: bool = None
    ' Use pressure to modulate flow\n\n    :type: bool\n    '
    use_frontface: bool = None
    ' Brush only affects vertices that face the viewer\n\n    :type: bool\n    '
    use_frontface_falloff: bool = None
    ' Blend brush influence by how much they face the front\n\n    :type: bool\n    '
    use_grab_active_vertex: bool = None
    ' Apply the maximum grab strength to the active vertex instead of the cursor location\n\n    :type: bool\n    '
    use_grab_silhouette: bool = None
    ' Grabs trying to automask the silhouette of the object\n\n    :type: bool\n    '
    use_hardness_pressure: bool = None
    ' Use pressure to modulate hardness\n\n    :type: bool\n    '
    use_inverse_smooth_pressure: bool = None
    ' Lighter pressure causes more smoothing to be applied\n\n    :type: bool\n    '
    use_line: bool = None
    ' Draw a line with dabs separated according to spacing\n\n    :type: bool\n    '
    use_locked_size: typing.Union[str, int] = None
    ' Measure brush size relative to the view or the scene * ``VIEW`` View -- Measure brush size relative to the view. * ``SCENE`` Scene -- Measure brush size relative to the scene.\n\n    :type: typing.Union[str, int]\n    '
    use_multiplane_scrape_dynamic: bool = None
    ' The angle between the planes changes during the stroke to fit the surface under the cursor\n\n    :type: bool\n    '
    use_offset_pressure: bool = None
    ' Enable tablet pressure sensitivity for offset\n\n    :type: bool\n    '
    use_original_normal: bool = None
    ' When locked keep using normal of surface where stroke was initiated\n\n    :type: bool\n    '
    use_original_plane: bool = None
    ' When locked keep using the plane origin of surface where stroke was initiated\n\n    :type: bool\n    '
    use_paint_antialiasing: bool = None
    ' Smooths the edges of the strokes\n\n    :type: bool\n    '
    use_paint_grease_pencil: bool = None
    ' Use this brush in grease pencil drawing mode\n\n    :type: bool\n    '
    use_paint_image: bool = None
    ' Use this brush in texture paint mode\n\n    :type: bool\n    '
    use_paint_sculpt: bool = None
    ' Use this brush in sculpt mode\n\n    :type: bool\n    '
    use_paint_sculpt_curves: bool = None
    ' Use this brush in sculpt curves mode\n\n    :type: bool\n    '
    use_paint_uv_sculpt: bool = None
    ' Use this brush in UV sculpt mode\n\n    :type: bool\n    '
    use_paint_vertex: bool = None
    ' Use this brush in vertex paint mode\n\n    :type: bool\n    '
    use_paint_weight: bool = None
    ' Use this brush in weight paint mode\n\n    :type: bool\n    '
    use_persistent: bool = None
    ' Sculpt on a persistent layer of the mesh\n\n    :type: bool\n    '
    use_plane_trim: bool = None
    ' Enable Plane Trim\n\n    :type: bool\n    '
    use_pose_ik_anchored: bool = None
    ' Keep the position of the last segment in the IK chain fixed\n\n    :type: bool\n    '
    use_pose_lock_rotation: bool = None
    ' Do not rotate the segment when using the scale deform mode\n\n    :type: bool\n    '
    use_pressure_area_radius: bool = None
    ' Enable tablet pressure sensitivity for area radius\n\n    :type: bool\n    '
    use_pressure_jitter: bool = None
    ' Enable tablet pressure sensitivity for jitter\n\n    :type: bool\n    '
    use_pressure_masking: typing.Union[str, int] = None
    ' Pen pressure makes texture influence smaller\n\n    :type: typing.Union[str, int]\n    '
    use_pressure_size: bool = None
    ' Enable tablet pressure sensitivity for size\n\n    :type: bool\n    '
    use_pressure_spacing: bool = None
    ' Enable tablet pressure sensitivity for spacing\n\n    :type: bool\n    '
    use_pressure_strength: bool = None
    ' Enable tablet pressure sensitivity for strength\n\n    :type: bool\n    '
    use_primary_overlay: bool = None
    ' Show texture in viewport\n\n    :type: bool\n    '
    use_primary_overlay_override: bool = None
    " Don't show overlay during a stroke\n\n    :type: bool\n    "
    use_restore_mesh: bool = None
    ' Allow a single dot to be carefully positioned\n\n    :type: bool\n    '
    use_scene_spacing: typing.Union[str, int] = None
    ' Calculate the brush spacing using view or scene distance * ``VIEW`` View -- Calculate brush spacing relative to the view. * ``SCENE`` Scene -- Calculate brush spacing relative to the scene using the stroke location.\n\n    :type: typing.Union[str, int]\n    '
    use_secondary_overlay: bool = None
    ' Show texture in viewport\n\n    :type: bool\n    '
    use_secondary_overlay_override: bool = None
    " Don't show overlay during a stroke\n\n    :type: bool\n    "
    use_smooth_stroke: bool = None
    ' Brush lags behind mouse and follows a smoother path\n\n    :type: bool\n    '
    use_space: bool = None
    ' Limit brush application to the distance specified by spacing\n\n    :type: bool\n    '
    use_space_attenuation: bool = None
    ' Automatically adjust strength to give consistent results for different spacings\n\n    :type: bool\n    '
    use_vertex_grease_pencil: bool = None
    ' Use this brush in grease pencil vertex color mode\n\n    :type: bool\n    '
    use_wet_mix_pressure: bool = None
    ' Use pressure to modulate wet mix\n\n    :type: bool\n    '
    use_wet_persistence_pressure: bool = None
    ' Use pressure to modulate wet persistence\n\n    :type: bool\n    '
    uv_sculpt_tool: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    vertex_paint_capabilities: 'BrushCapabilitiesVertexPaint' = None
    " \n\n    :type: 'BrushCapabilitiesVertexPaint'\n    "
    vertex_tool: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    weight: float = None
    ' Vertex weight when brush is applied\n\n    :type: float\n    '
    weight_paint_capabilities: 'BrushCapabilitiesWeightPaint' = None
    " \n\n    :type: 'BrushCapabilitiesWeightPaint'\n    "
    weight_tool: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    wet_mix: float = None
    ' Amount of paint that is picked from the surface into the brush color\n\n    :type: float\n    '
    wet_paint_radius_factor: float = None
    ' Ratio between the brush radius and the radius that is going to be used to sample the color to blend in wet paint\n\n    :type: float\n    '
    wet_persistence: float = None
    ' Amount of wet paint that stays in the brush after applying paint to the surface\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CacheFile(ID, bpy_struct):
    active_index: int = None
    ' \n\n    :type: int\n    '
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    filepath: str = None
    ' Path to external displacements file\n\n    :type: str\n    '
    forward_axis: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    frame: float = None
    ' The time to use for looking up the data in the cache file, or to determine which file to use in a file sequence\n\n    :type: float\n    '
    frame_offset: float = None
    ' Subtracted from the current frame to use for looking up the data in the cache file, or to determine which file to use in a file sequence\n\n    :type: float\n    '
    is_sequence: bool = None
    ' Whether the cache is separated in a series of files\n\n    :type: bool\n    '
    layers: 'CacheFileLayers' = None
    " Layers of the cache\n\n    :type: 'CacheFileLayers'\n    "
    object_paths: 'CacheObjectPaths' = None
    " Paths of the objects inside the Alembic archive\n\n    :type: 'CacheObjectPaths'\n    "
    override_frame: bool = None
    ' Whether to use a custom frame for looking up data in the cache file, instead of using the current scene frame\n\n    :type: bool\n    '
    prefetch_cache_size: int = None
    ' Memory usage limit in megabytes for the Cycles Procedural cache, if the data does not fit within the limit, rendering is aborted\n\n    :type: int\n    '
    scale: float = None
    " Value by which to enlarge or shrink the object with respect to the world's origin (only applicable through a Transform Cache constraint)\n\n    :type: float\n    "
    up_axis: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    use_prefetch: bool = None
    ' When enabled, the Cycles Procedural will preload animation data for faster updates\n\n    :type: bool\n    '
    use_render_procedural: bool = None
    ' Display boxes in the viewport as placeholders for the objects, Cycles will use a procedural to load the objects during viewport rendering in experimental mode, other render engines will also receive a placeholder and should take care of loading the Alembic data themselves if possible\n\n    :type: bool\n    '
    velocity_name: str = None
    ' Name of the Alembic attribute used for generating motion blur data\n\n    :type: str\n    '
    velocity_unit: typing.Union[str, int] = None
    " Define how the velocity vectors are interpreted with regard to time, 'frame' means the delta time is 1 frame, 'second' means the delta time is 1 / FPS\n\n    :type: typing.Union[str, int]\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Camera(ID, bpy_struct):
    """ Camera data-block for storing camera settings
    """
    angle: float = None
    ' Camera lens field of view\n\n    :type: float\n    '
    angle_x: float = None
    ' Camera lens horizontal field of view\n\n    :type: float\n    '
    angle_y: float = None
    ' Camera lens vertical field of view\n\n    :type: float\n    '
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    background_images: 'CameraBackgroundImages' = None
    " List of background images\n\n    :type: 'CameraBackgroundImages'\n    "
    clip_end: float = None
    ' Camera far clipping distance\n\n    :type: float\n    '
    clip_start: float = None
    ' Camera near clipping distance\n\n    :type: float\n    '
    cycles: typing.Any = None
    ' Cycles camera settings\n\n    :type: typing.Any\n    '
    display_size: float = None
    ' Apparent size of the Camera object in the 3D View\n\n    :type: float\n    '
    dof: 'CameraDOFSettings' = None
    " \n\n    :type: 'CameraDOFSettings'\n    "
    lens: float = None
    ' Perspective Camera focal length value in millimeters\n\n    :type: float\n    '
    lens_unit: typing.Union[str, int] = None
    " Unit to edit lens in for the user interface * ``MILLIMETERS`` Millimeters -- Specify focal length of the lens in millimeters. * ``FOV`` Field of View -- Specify the lens as the field of view's angle.\n\n    :type: typing.Union[str, int]\n    "
    ortho_scale: float = None
    ' Orthographic Camera scale (similar to zoom)\n\n    :type: float\n    '
    passepartout_alpha: float = None
    ' Opacity (alpha) of the darkened overlay in Camera view\n\n    :type: float\n    '
    sensor_fit: typing.Union[str, int] = None
    ' Method to fit image and field of view angle inside the sensor * ``AUTO`` Auto -- Fit to the sensor width or height depending on image resolution. * ``HORIZONTAL`` Horizontal -- Fit to the sensor width. * ``VERTICAL`` Vertical -- Fit to the sensor height.\n\n    :type: typing.Union[str, int]\n    '
    sensor_height: float = None
    ' Vertical size of the image sensor area in millimeters\n\n    :type: float\n    '
    sensor_width: float = None
    ' Horizontal size of the image sensor area in millimeters\n\n    :type: float\n    '
    shift_x: float = None
    ' Camera horizontal shift\n\n    :type: float\n    '
    shift_y: float = None
    ' Camera vertical shift\n\n    :type: float\n    '
    show_background_images: bool = None
    ' Display reference images behind objects in the 3D View\n\n    :type: bool\n    '
    show_composition_center: bool = None
    ' Display center composition guide inside the camera view\n\n    :type: bool\n    '
    show_composition_center_diagonal: bool = None
    ' Display diagonal center composition guide inside the camera view\n\n    :type: bool\n    '
    show_composition_golden: bool = None
    ' Display golden ratio composition guide inside the camera view\n\n    :type: bool\n    '
    show_composition_golden_tria_a: bool = None
    ' Display golden triangle A composition guide inside the camera view\n\n    :type: bool\n    '
    show_composition_golden_tria_b: bool = None
    ' Display golden triangle B composition guide inside the camera view\n\n    :type: bool\n    '
    show_composition_harmony_tri_a: bool = None
    ' Display harmony A composition guide inside the camera view\n\n    :type: bool\n    '
    show_composition_harmony_tri_b: bool = None
    ' Display harmony B composition guide inside the camera view\n\n    :type: bool\n    '
    show_composition_thirds: bool = None
    ' Display rule of thirds composition guide inside the camera view\n\n    :type: bool\n    '
    show_limits: bool = None
    ' Display the clipping range and focus point on the camera\n\n    :type: bool\n    '
    show_mist: bool = None
    ' Display a line from the Camera to indicate the mist area\n\n    :type: bool\n    '
    show_name: bool = None
    " Show the active Camera's name in Camera view\n\n    :type: bool\n    "
    show_passepartout: bool = None
    ' Show a darkened overlay outside the image area in Camera view\n\n    :type: bool\n    '
    show_safe_areas: bool = None
    ' Show TV title safe and action safe areas in Camera view\n\n    :type: bool\n    '
    show_safe_center: bool = None
    ' Show safe areas to fit content in a different aspect ratio\n\n    :type: bool\n    '
    show_sensor: bool = None
    ' Show sensor size (film gate) in Camera view\n\n    :type: bool\n    '
    stereo: 'CameraStereoData' = None
    " \n\n    :type: 'CameraStereoData'\n    "
    type: typing.Union[str, int] = None
    ' Camera types\n\n    :type: typing.Union[str, int]\n    '

    def view_frame(self, scene: 'Scene'=None):
        """ Return 4 points for the cameras frame (before object transformation)

        :param scene: 1 aspect is used
        :type scene: 'Scene'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Collection(ID, bpy_struct):
    """ Collection of Object data-blocks
    """
    all_objects: bpy_prop_collection['Object'] = None
    " Objects that are in this collection and its child collections\n\n    :type: bpy_prop_collection['Object']\n    "
    children: 'CollectionChildren' = None
    " Collections that are immediate children of this collection\n\n    :type: 'CollectionChildren'\n    "
    color_tag: typing.Union[str, int] = None
    ' Color tag for a collection\n\n    :type: typing.Union[str, int]\n    '
    hide_render: bool = None
    ' Globally disable in renders\n\n    :type: bool\n    '
    hide_select: bool = None
    ' Disable selection in viewport\n\n    :type: bool\n    '
    hide_viewport: bool = None
    ' Globally disable in viewports\n\n    :type: bool\n    '
    instance_offset: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Offset from the origin to use when instancing\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    lineart_intersection_mask: typing.List[bool] = None
    ' Intersection generated by this collection will have this mask value\n\n    :type: typing.List[bool]\n    '
    lineart_intersection_priority: int = None
    ' The intersection line will be included into the object with the higher intersection priority value\n\n    :type: int\n    '
    lineart_usage: typing.Union[str, int] = None
    " How to use this collection in line art * ``INCLUDE`` Include -- Generate feature lines for this collection. * ``OCCLUSION_ONLY`` Occlusion Only -- Only use the collection to produce occlusion. * ``EXCLUDE`` Exclude -- Don't use this collection in line art. * ``INTERSECTION_ONLY`` Intersection Only -- Only generate intersection lines for this collection. * ``NO_INTERSECTION`` No Intersection -- Include this collection but do not generate intersection lines. * ``FORCE_INTERSECTION`` Force Intersection -- Generate intersection lines even with objects that disabled intersection.\n\n    :type: typing.Union[str, int]\n    "
    lineart_use_intersection_mask: bool = None
    ' Use custom intersection mask for faces in this collection\n\n    :type: bool\n    '
    objects: 'CollectionObjects' = None
    " Objects that are directly in this collection\n\n    :type: 'CollectionObjects'\n    "
    use_lineart_intersection_priority: bool = None
    ' Assign intersection priority value for this collection\n\n    :type: bool\n    '
    children_recursive = None
    ' A list of all children from this collection. (readonly)'
    users_dupli_group = None
    ' The collection instance objects this collection is used in (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Curve(ID, bpy_struct):
    """ Curve data-block storing curves, splines and NURBS
    """
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    bevel_depth: float = None
    ' Radius of the bevel geometry, not including extrusion\n\n    :type: float\n    '
    bevel_factor_end: float = None
    ' Define where along the spline the curve geometry ends (0 for the beginning, 1 for the end)\n\n    :type: float\n    '
    bevel_factor_mapping_end: typing.Union[str, int] = None
    ' Determine how the geometry end factor is mapped to a spline * ``RESOLUTION`` Resolution -- Map the geometry factor to the number of subdivisions of a spline (U resolution). * ``SEGMENTS`` Segments -- Map the geometry factor to the length of a segment and to the number of subdivisions of a segment. * ``SPLINE`` Spline -- Map the geometry factor to the length of a spline.\n\n    :type: typing.Union[str, int]\n    '
    bevel_factor_mapping_start: typing.Union[str, int] = None
    ' Determine how the geometry start factor is mapped to a spline * ``RESOLUTION`` Resolution -- Map the geometry factor to the number of subdivisions of a spline (U resolution). * ``SEGMENTS`` Segments -- Map the geometry factor to the length of a segment and to the number of subdivisions of a segment. * ``SPLINE`` Spline -- Map the geometry factor to the length of a spline.\n\n    :type: typing.Union[str, int]\n    '
    bevel_factor_start: float = None
    ' Define where along the spline the curve geometry starts (0 for the beginning, 1 for the end)\n\n    :type: float\n    '
    bevel_mode: typing.Union[str, int] = None
    " Determine how to build the curve's bevel geometry * ``ROUND`` Round -- Use circle for the section of the curve's bevel geometry. * ``OBJECT`` Object -- Use an object for the section of the curve's bevel geometry segment. * ``PROFILE`` Profile -- Use a custom profile for each quarter of curve's bevel geometry.\n\n    :type: typing.Union[str, int]\n    "
    bevel_object: 'Object' = None
    " The name of the Curve object that defines the bevel shape\n\n    :type: 'Object'\n    "
    bevel_profile: 'CurveProfile' = None
    " The path for the curve's custom profile\n\n    :type: 'CurveProfile'\n    "
    bevel_resolution: int = None
    ' The number of segments in each quarter-circle of the bevel\n\n    :type: int\n    '
    cycles: typing.Any = None
    ' Cycles mesh settings\n\n    :type: typing.Any\n    '
    dimensions: typing.Union[str, int] = None
    ' Select 2D or 3D curve type * ``2D`` 2D -- Clamp the Z axis of the curve. * ``3D`` 3D -- Allow editing on the Z axis of this curve, also allows tilt and curve radius to be used.\n\n    :type: typing.Union[str, int]\n    '
    eval_time: float = None
    " Parametric position along the length of the curve that Objects 'following' it should be at (position is evaluated by dividing by the 'Path Length' value)\n\n    :type: float\n    "
    extrude: float = None
    ' Length of the depth added in the local Z direction along the curve, perpendicular to its normals\n\n    :type: float\n    '
    fill_mode: typing.Union[str, int] = None
    ' Mode of filling curve\n\n    :type: typing.Union[str, int]\n    '
    is_editmode: bool = None
    ' True when used in editmode\n\n    :type: bool\n    '
    materials: 'IDMaterials' = None
    " \n\n    :type: 'IDMaterials'\n    "
    offset: float = None
    ' Distance to move the curve parallel to its normals\n\n    :type: float\n    '
    path_duration: int = None
    " The number of frames that are needed to traverse the path, defining the maximum value for the 'Evaluation Time' setting\n\n    :type: int\n    "
    render_resolution_u: int = None
    ' Surface resolution in U direction used while rendering (zero uses preview resolution)\n\n    :type: int\n    '
    render_resolution_v: int = None
    ' Surface resolution in V direction used while rendering (zero uses preview resolution)\n\n    :type: int\n    '
    resolution_u: int = None
    ' Number of computed points in the U direction between every pair of control points\n\n    :type: int\n    '
    resolution_v: int = None
    ' The number of computed points in the V direction between every pair of control points\n\n    :type: int\n    '
    shape_keys: 'Key' = None
    " \n\n    :type: 'Key'\n    "
    splines: 'CurveSplines' = None
    " Collection of splines in this curve data object\n\n    :type: 'CurveSplines'\n    "
    taper_object: 'Object' = None
    " Curve object name that defines the taper (width)\n\n    :type: 'Object'\n    "
    taper_radius_mode: typing.Union[str, int] = None
    ' Determine how the effective radius of the spline point is computed when a taper object is specified * ``OVERRIDE`` Override -- Override the radius of the spline point with the taper radius. * ``MULTIPLY`` Multiply -- Multiply the radius of the spline point by the taper radius. * ``ADD`` Add -- Add the radius of the bevel point to the taper radius.\n\n    :type: typing.Union[str, int]\n    '
    texspace_location: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    texspace_size: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    twist_mode: typing.Union[str, int] = None
    ' The type of tilt calculation for 3D Curves * ``Z_UP`` Z-Up -- Use Z-Up axis to calculate the curve twist at each point. * ``MINIMUM`` Minimum -- Use the least twist over the entire curve. * ``TANGENT`` Tangent -- Use the tangent to calculate twist.\n\n    :type: typing.Union[str, int]\n    '
    twist_smooth: float = None
    ' Smoothing iteration for tangents\n\n    :type: float\n    '
    use_auto_texspace: bool = None
    " Adjust active object's texture space automatically when transforming object\n\n    :type: bool\n    "
    use_deform_bounds: bool = None
    ' Option for curve-deform: Use the mesh bounds to clamp the deformation\n\n    :type: bool\n    '
    use_fill_caps: bool = None
    ' Fill caps for beveled curves\n\n    :type: bool\n    '
    use_map_taper: bool = None
    ' Map effect of the taper object to the beveled part of the curve\n\n    :type: bool\n    '
    use_path: bool = None
    ' Enable the curve to become a translation path\n\n    :type: bool\n    '
    use_path_clamp: bool = None
    " Clamp the curve path children so they can't travel past the start/end point of the curve\n\n    :type: bool\n    "
    use_path_follow: bool = None
    ' Make curve path children to rotate along the path\n\n    :type: bool\n    '
    use_radius: bool = None
    ' Option for paths and curve-deform: apply the curve radius with path following it and deforming\n\n    :type: bool\n    '
    use_stretch: bool = None
    ' Option for curve-deform: make deformed child to stretch along entire path\n\n    :type: bool\n    '

    def transform(self, matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'], shape_keys: bool=False):
        """ Transform curve by a matrix

        :param matrix: Matrix
        :type matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']
        :param shape_keys: Transform Shape Keys
        :type shape_keys: bool
        """
        pass

    def validate_material_indices(self) -> bool:
        """ Validate material indices of splines or letters, return True when the curve has had invalid indices corrected (to default 0)

        :rtype: bool
        :return: Result
        """
        pass

    def update_gpu_tag(self):
        """ update_gpu_tag

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Curves(ID, bpy_struct):
    """ Hair data-block for hair curves
    """
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    attributes: 'AttributeGroup' = None
    " Geometry attributes\n\n    :type: 'AttributeGroup'\n    "
    color_attributes: 'AttributeGroup' = None
    " Geometry color attributes\n\n    :type: 'AttributeGroup'\n    "
    curve_offset_data: bpy_prop_collection['IntAttributeValue'] = None
    " \n\n    :type: bpy_prop_collection['IntAttributeValue']\n    "
    curves: bpy_prop_collection['CurveSlice'] = None
    " All curves in the data-block\n\n    :type: bpy_prop_collection['CurveSlice']\n    "
    materials: 'IDMaterials' = None
    " \n\n    :type: 'IDMaterials'\n    "
    points: bpy_prop_collection['CurvePoint'] = None
    " Control points of all curves\n\n    :type: bpy_prop_collection['CurvePoint']\n    "
    position_data: bpy_prop_collection['FloatVectorAttributeValue'] = None
    " \n\n    :type: bpy_prop_collection['FloatVectorAttributeValue']\n    "
    selection_domain: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    surface: 'Object' = None
    " Mesh object that the curves can be attached to\n\n    :type: 'Object'\n    "
    surface_uv_map: str = None
    ' The name of the attribute on the surface mesh used to define the attachment of each curve\n\n    :type: str\n    '
    use_mirror_x: bool = None
    ' Enable symmetry in the X axis\n\n    :type: bool\n    '
    use_mirror_y: bool = None
    ' Enable symmetry in the Y axis\n\n    :type: bool\n    '
    use_mirror_z: bool = None
    ' Enable symmetry in the Z axis\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FreestyleLineStyle(ID, bpy_struct):
    """ Freestyle line style, reusable by multiple line sets
    """
    active_texture: 'Texture' = None
    " Active texture slot being displayed\n\n    :type: 'Texture'\n    "
    active_texture_index: int = None
    ' Index of active texture slot\n\n    :type: int\n    '
    alpha: float = None
    ' Base alpha transparency, possibly modified by alpha transparency modifiers\n\n    :type: float\n    '
    alpha_modifiers: 'LineStyleAlphaModifiers' = None
    " List of alpha transparency modifiers\n\n    :type: 'LineStyleAlphaModifiers'\n    "
    angle_max: float = None
    ' Maximum 2D angle for splitting chains\n\n    :type: float\n    '
    angle_min: float = None
    ' Minimum 2D angle for splitting chains\n\n    :type: float\n    '
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    caps: typing.Union[str, int] = None
    ' Select the shape of both ends of strokes * ``BUTT`` Butt -- Butt cap (flat). * ``ROUND`` Round -- Round cap (half-circle). * ``SQUARE`` Square -- Square cap (flat and extended).\n\n    :type: typing.Union[str, int]\n    '
    chain_count: int = None
    ' Chain count for the selection of first N chains\n\n    :type: int\n    '
    chaining: typing.Union[str, int] = None
    ' Select the way how feature edges are jointed to form chains * ``PLAIN`` Plain -- Plain chaining. * ``SKETCHY`` Sketchy -- Sketchy chaining with a multiple touch.\n\n    :type: typing.Union[str, int]\n    '
    color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Base line color, possibly modified by line color modifiers\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    color_modifiers: 'LineStyleColorModifiers' = None
    " List of line color modifiers\n\n    :type: 'LineStyleColorModifiers'\n    "
    dash1: int = None
    ' Length of the 1st dash for dashed lines\n\n    :type: int\n    '
    dash2: int = None
    ' Length of the 2nd dash for dashed lines\n\n    :type: int\n    '
    dash3: int = None
    ' Length of the 3rd dash for dashed lines\n\n    :type: int\n    '
    gap1: int = None
    ' Length of the 1st gap for dashed lines\n\n    :type: int\n    '
    gap2: int = None
    ' Length of the 2nd gap for dashed lines\n\n    :type: int\n    '
    gap3: int = None
    ' Length of the 3rd gap for dashed lines\n\n    :type: int\n    '
    geometry_modifiers: 'LineStyleGeometryModifiers' = None
    " List of stroke geometry modifiers\n\n    :type: 'LineStyleGeometryModifiers'\n    "
    integration_type: typing.Union[str, int] = None
    ' Select the way how the sort key is computed for each chain * ``MEAN`` Mean -- The value computed for the chain is the mean of the values obtained for chain vertices. * ``MIN`` Min -- The value computed for the chain is the minimum of the values obtained for chain vertices. * ``MAX`` Max -- The value computed for the chain is the maximum of the values obtained for chain vertices. * ``FIRST`` First -- The value computed for the chain is the value obtained for the first chain vertex. * ``LAST`` Last -- The value computed for the chain is the value obtained for the last chain vertex.\n\n    :type: typing.Union[str, int]\n    '
    length_max: float = None
    ' Maximum curvilinear 2D length for the selection of chains\n\n    :type: float\n    '
    length_min: float = None
    ' Minimum curvilinear 2D length for the selection of chains\n\n    :type: float\n    '
    material_boundary: bool = None
    ' If true, chains of feature edges are split at material boundaries\n\n    :type: bool\n    '
    node_tree: 'NodeTree' = None
    " Node tree for node-based shaders\n\n    :type: 'NodeTree'\n    "
    panel: typing.Union[str, int] = None
    ' Select the property panel to be shown * ``STROKES`` Strokes -- Show the panel for stroke construction. * ``COLOR`` Color -- Show the panel for line color options. * ``ALPHA`` Alpha -- Show the panel for alpha transparency options. * ``THICKNESS`` Thickness -- Show the panel for line thickness options. * ``GEOMETRY`` Geometry -- Show the panel for stroke geometry options. * ``TEXTURE`` Texture -- Show the panel for stroke texture options.\n\n    :type: typing.Union[str, int]\n    '
    rounds: int = None
    ' Number of rounds in a sketchy multiple touch\n\n    :type: int\n    '
    sort_key: typing.Union[str, int] = None
    ' Select the sort key to determine the stacking order of chains * ``DISTANCE_FROM_CAMERA`` Distance from Camera -- Sort by distance from camera (closer lines lie on top of further lines). * ``2D_LENGTH`` 2D Length -- Sort by curvilinear 2D length (longer lines lie on top of shorter lines). * ``PROJECTED_X`` Projected X -- Sort by the projected X value in the image coordinate system. * ``PROJECTED_Y`` Projected Y -- Sort by the projected Y value in the image coordinate system.\n\n    :type: typing.Union[str, int]\n    '
    sort_order: typing.Union[str, int] = None
    ' Select the sort order * ``DEFAULT`` Default -- Default order of the sort key. * ``REVERSE`` Reverse -- Reverse order.\n\n    :type: typing.Union[str, int]\n    '
    split_dash1: int = None
    ' Length of the 1st dash for splitting\n\n    :type: int\n    '
    split_dash2: int = None
    ' Length of the 2nd dash for splitting\n\n    :type: int\n    '
    split_dash3: int = None
    ' Length of the 3rd dash for splitting\n\n    :type: int\n    '
    split_gap1: int = None
    ' Length of the 1st gap for splitting\n\n    :type: int\n    '
    split_gap2: int = None
    ' Length of the 2nd gap for splitting\n\n    :type: int\n    '
    split_gap3: int = None
    ' Length of the 3rd gap for splitting\n\n    :type: int\n    '
    split_length: float = None
    ' Curvilinear 2D length for chain splitting\n\n    :type: float\n    '
    texture_slots: 'LineStyleTextureSlots' = None
    " Texture slots defining the mapping and influence of textures\n\n    :type: 'LineStyleTextureSlots'\n    "
    texture_spacing: float = None
    ' Spacing for textures along stroke length\n\n    :type: float\n    '
    thickness: float = None
    ' Base line thickness, possibly modified by line thickness modifiers\n\n    :type: float\n    '
    thickness_modifiers: 'LineStyleThicknessModifiers' = None
    " List of line thickness modifiers\n\n    :type: 'LineStyleThicknessModifiers'\n    "
    thickness_position: typing.Union[str, int] = None
    ' Thickness position of silhouettes and border edges (applicable when plain chaining is used with the Same Object option) * ``CENTER`` Center -- Silhouettes and border edges are centered along stroke geometry. * ``INSIDE`` Inside -- Silhouettes and border edges are drawn inside of stroke geometry. * ``OUTSIDE`` Outside -- Silhouettes and border edges are drawn outside of stroke geometry. * ``RELATIVE`` Relative -- Silhouettes and border edges are shifted by a user-defined ratio.\n\n    :type: typing.Union[str, int]\n    '
    thickness_ratio: float = None
    ' A number between 0 (inside) and 1 (outside) specifying the relative position of stroke thickness\n\n    :type: float\n    '
    use_angle_max: bool = None
    ' Split chains at points with angles larger than the maximum 2D angle\n\n    :type: bool\n    '
    use_angle_min: bool = None
    ' Split chains at points with angles smaller than the minimum 2D angle\n\n    :type: bool\n    '
    use_chain_count: bool = None
    ' Enable the selection of first N chains\n\n    :type: bool\n    '
    use_chaining: bool = None
    ' Enable chaining of feature edges\n\n    :type: bool\n    '
    use_dashed_line: bool = None
    ' Enable or disable dashed line\n\n    :type: bool\n    '
    use_length_max: bool = None
    ' Enable the selection of chains by a maximum 2D length\n\n    :type: bool\n    '
    use_length_min: bool = None
    ' Enable the selection of chains by a minimum 2D length\n\n    :type: bool\n    '
    use_nodes: bool = None
    ' Use shader nodes for the line style\n\n    :type: bool\n    '
    use_same_object: bool = None
    ' If true, only feature edges of the same object are joined\n\n    :type: bool\n    '
    use_sorting: bool = None
    ' Arrange the stacking order of strokes\n\n    :type: bool\n    '
    use_split_length: bool = None
    ' Enable chain splitting by curvilinear 2D length\n\n    :type: bool\n    '
    use_split_pattern: bool = None
    ' Enable chain splitting by dashed line patterns\n\n    :type: bool\n    '
    use_texture: bool = None
    ' Enable or disable textured strokes\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GreasePencil(ID, bpy_struct):
    """ Freehand annotation sketchbook
    """
    after_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Base color for ghosts after the active frame\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    before_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Base color for ghosts before the active frame\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    curve_edit_corner_angle: float = None
    ' Angles above this are considered corners\n\n    :type: float\n    '
    curve_edit_threshold: float = None
    ' Curve conversion error threshold\n\n    :type: float\n    '
    edit_curve_resolution: int = None
    ' Number of segments generated between control points when editing strokes in curve mode\n\n    :type: int\n    '
    edit_line_color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color for editing line\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    ghost_after_range: int = None
    " Maximum number of frames to show after current frame (0 = don't show any frames after current)\n\n    :type: int\n    "
    ghost_before_range: int = None
    " Maximum number of frames to show before current frame (0 = don't show any frames before current)\n\n    :type: int\n    "
    grid: 'GreasePencilGrid' = None
    " Settings for grid and canvas in the 3D viewport\n\n    :type: 'GreasePencilGrid'\n    "
    is_annotation: bool = None
    ' Current data-block is an annotation\n\n    :type: bool\n    '
    is_stroke_paint_mode: bool = None
    ' Draw Grease Pencil strokes on click/drag\n\n    :type: bool\n    '
    is_stroke_sculpt_mode: bool = None
    ' Sculpt Grease Pencil strokes instead of viewport data\n\n    :type: bool\n    '
    is_stroke_vertex_mode: bool = None
    ' Grease Pencil vertex paint\n\n    :type: bool\n    '
    is_stroke_weight_mode: bool = None
    ' Grease Pencil weight paint\n\n    :type: bool\n    '
    layers: 'GreasePencilLayers' = None
    " \n\n    :type: 'GreasePencilLayers'\n    "
    materials: 'IDMaterials' = None
    " \n\n    :type: 'IDMaterials'\n    "
    onion_factor: float = None
    ' Change fade opacity of displayed onion frames\n\n    :type: float\n    '
    onion_keyframe_type: typing.Union[str, int] = None
    " Type of keyframe (for filtering) * ``ALL`` All -- Include all Keyframe types. * ``KEYFRAME`` Keyframe -- Normal keyframe, e.g. for key poses. * ``BREAKDOWN`` Breakdown -- A breakdown pose, e.g. for transitions between key poses. * ``MOVING_HOLD`` Moving Hold -- A keyframe that is part of a moving hold. * ``EXTREME`` Extreme -- An 'extreme' pose, or some other purpose as needed. * ``JITTER`` Jitter -- A filler or baked keyframe for keying on ones, or some other purpose as needed.\n\n    :type: typing.Union[str, int]\n    "
    onion_mode: typing.Union[str, int] = None
    ' Mode to display frames * ``ABSOLUTE`` Frames -- Frames in absolute range of the scene frame. * ``RELATIVE`` Keyframes -- Frames in relative range of the Grease Pencil keyframes. * ``SELECTED`` Selected -- Only selected keyframes.\n\n    :type: typing.Union[str, int]\n    '
    pixel_factor: float = None
    ' Scale conversion factor for pixel size (use larger values for thicker lines)\n\n    :type: float\n    '
    stroke_depth_order: typing.Union[str, int] = None
    " Defines how the strokes are ordered in 3D space (for objects not displayed 'In Front') * ``2D`` 2D Layers -- Display strokes using grease pencil layers to define order. * ``3D`` 3D Location -- Display strokes using real 3D position in 3D space.\n\n    :type: typing.Union[str, int]\n    "
    stroke_thickness_space: typing.Union[str, int] = None
    ' Set stroke thickness in screen space or world space * ``WORLDSPACE`` World Space -- Set stroke thickness relative to the world space. * ``SCREENSPACE`` Screen Space -- Set stroke thickness relative to the screen space.\n\n    :type: typing.Union[str, int]\n    '
    use_adaptive_curve_resolution: bool = None
    ' Set the resolution of each editcurve segment dynamically depending on the length of the segment. The resolution is the number of points generated per unit distance\n\n    :type: bool\n    '
    use_autolock_layers: bool = None
    ' Automatically lock all layers except the active one to avoid accidental changes\n\n    :type: bool\n    '
    use_curve_edit: bool = None
    ' Edit strokes using curve handles\n\n    :type: bool\n    '
    use_ghost_custom_colors: bool = None
    ' Use custom colors for ghost frames\n\n    :type: bool\n    '
    use_ghosts_always: bool = None
    ' Ghosts are shown in renders and animation playback. Useful for special effects (e.g. motion blur)\n\n    :type: bool\n    '
    use_multiedit: bool = None
    ' Edit strokes from multiple grease pencil keyframes at the same time (keyframes must be selected to be included)\n\n    :type: bool\n    '
    use_onion_fade: bool = None
    ' Display onion keyframes with a fade in color transparency\n\n    :type: bool\n    '
    use_onion_loop: bool = None
    ' Display onion keyframes for looping animations\n\n    :type: bool\n    '
    use_onion_skinning: bool = None
    ' Show ghosts of the keyframes before and after the current frame\n\n    :type: bool\n    '
    use_stroke_edit_mode: bool = None
    ' Edit Grease Pencil strokes instead of viewport data\n\n    :type: bool\n    '
    zdepth_offset: float = None
    ' Offset amount when drawing in surface mode\n\n    :type: float\n    '

    def clear(self):
        """ Remove all the Grease Pencil data

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Image(ID, bpy_struct):
    """ Image data-block referencing an external or packed image
    """
    alpha_mode: typing.Union[str, int] = None
    ' Representation of alpha in the image file, to convert to and from when saving and loading the image * ``STRAIGHT`` Straight -- Store RGB and alpha channels separately with alpha acting as a mask, also known as unassociated alpha. Commonly used by image editing applications and file formats like PNG. * ``PREMUL`` Premultiplied -- Store RGB channels with alpha multiplied in, also known as associated alpha. The natural format for renders and used by file formats like OpenEXR. * ``CHANNEL_PACKED`` Channel Packed -- Different images are packed in the RGB and alpha channels, and they should not affect each other. Channel packing is commonly used by game engines to save memory. * ``NONE`` None -- Ignore alpha channel from the file and make image fully opaque.\n\n    :type: typing.Union[str, int]\n    '
    bindcode: int = None
    ' OpenGL bindcode\n\n    :type: int\n    '
    channels: int = None
    ' Number of channels in pixels buffer\n\n    :type: int\n    '
    colorspace_settings: 'ColorManagedInputColorspaceSettings' = None
    " Input color space settings\n\n    :type: 'ColorManagedInputColorspaceSettings'\n    "
    depth: int = None
    ' Image bit depth\n\n    :type: int\n    '
    display_aspect: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Display Aspect for this image, does not affect rendering\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    file_format: typing.Union[str, int] = None
    ' Format used for re-saving this file\n\n    :type: typing.Union[str, int]\n    '
    filepath: str = None
    ' Image/Movie file name\n\n    :type: str\n    '
    filepath_raw: str = None
    ' Image/Movie file name (without data refreshing)\n\n    :type: str\n    '
    frame_duration: int = None
    ' Duration (in frames) of the image (1 when not a video/sequence)\n\n    :type: int\n    '
    generated_color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Fill color for the generated image\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    generated_height: int = None
    ' Generated image height\n\n    :type: int\n    '
    generated_type: typing.Union[str, int] = None
    ' Generated image type\n\n    :type: typing.Union[str, int]\n    '
    generated_width: int = None
    ' Generated image width\n\n    :type: int\n    '
    has_data: bool = None
    ' True if the image data is loaded into memory\n\n    :type: bool\n    '
    is_dirty: bool = None
    ' Image has changed and is not saved\n\n    :type: bool\n    '
    is_float: bool = None
    ' True if this image is stored in floating-point buffer\n\n    :type: bool\n    '
    is_multiview: bool = None
    ' Image has more than one view\n\n    :type: bool\n    '
    is_stereo_3d: bool = None
    ' Image has left and right views\n\n    :type: bool\n    '
    packed_file: 'PackedFile' = None
    " First packed file of the image\n\n    :type: 'PackedFile'\n    "
    packed_files: bpy_prop_collection['ImagePackedFile'] = None
    " Collection of packed images\n\n    :type: bpy_prop_collection['ImagePackedFile']\n    "
    pixels: float = None
    ' Image buffer pixels in floating-point values\n\n    :type: float\n    '
    render_slots: 'RenderSlots' = None
    " Render slots of the image\n\n    :type: 'RenderSlots'\n    "
    resolution: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " X/Y pixels per meter, for the image buffer\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    seam_margin: int = None
    ' Margin to take into account when fixing UV seams during painting. Higher number would improve seam-fixes for mipmaps, but decreases performance\n\n    :type: int\n    '
    size: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    " Width and height of the image buffer in pixels, zero when image data can't be loaded\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    "
    source: typing.Union[str, int] = None
    ' Where the image comes from * ``FILE`` Single Image -- Single image file. * ``SEQUENCE`` Image Sequence -- Multiple image files, as a sequence. * ``MOVIE`` Movie -- Movie file. * ``GENERATED`` Generated -- Generated image. * ``VIEWER`` Viewer -- Compositing node viewer. * ``TILED`` UDIM Tiles -- Tiled UDIM image texture.\n\n    :type: typing.Union[str, int]\n    '
    stereo_3d_format: 'Stereo3dFormat' = None
    " Settings for stereo 3d\n\n    :type: 'Stereo3dFormat'\n    "
    tiles: 'UDIMTiles' = None
    " Tiles of the image\n\n    :type: 'UDIMTiles'\n    "
    type: typing.Union[str, int] = None
    ' How to generate the image\n\n    :type: typing.Union[str, int]\n    '
    use_deinterlace: bool = None
    ' Deinterlace movie file on load\n\n    :type: bool\n    '
    use_generated_float: bool = None
    ' Generate floating-point buffer\n\n    :type: bool\n    '
    use_half_precision: bool = None
    ' Use 16 bits per channel to lower the memory usage during rendering\n\n    :type: bool\n    '
    use_multiview: bool = None
    ' Use Multiple Views (when available)\n\n    :type: bool\n    '
    use_view_as_render: bool = None
    ' Apply render part of display transformation when displaying this image on the screen\n\n    :type: bool\n    '
    views_format: typing.Union[str, int] = None
    ' Mode to load image views\n\n    :type: typing.Union[str, int]\n    '

    def save_render(self, filepath: str, scene: 'Scene'=None, quality: int=0):
        """ Save image to a specific path using a scenes render settings

        :param filepath: Output path
        :type filepath: str
        :param scene: Scene to take image parameters from
        :type scene: 'Scene'
        :param quality: Quality, Quality for image formats that support lossy compression, uses default quality if not specified
        :type quality: int
        """
        pass

    def save(self, filepath: str='', quality: int=0):
        """ Save image

        :param filepath: Output path, uses image data-block filepath if not specified
        :type filepath: str
        :param quality: Quality, Quality for image formats that support lossy compression, uses default quality if not specified
        :type quality: int
        """
        pass

    def pack(self, data: str='', data_len: int=0):
        """ Pack an image as embedded data into the .blend file

        :param data: data, Raw data (bytes, exact content of the embedded file)
        :type data: str
        :param data_len: data_len, length of given data (mandatory if data is provided)
        :type data_len: int
        """
        pass

    def unpack(self, method: typing.Union[str, int]='USE_LOCAL'):
        """ Save an image packed in the .blend file to disk

        :param method: method, How to unpack
        :type method: typing.Union[str, int]
        """
        pass

    def reload(self):
        """ Reload the image from its source path

        """
        pass

    def update(self):
        """ Update the display image from the floating-point buffer

        """
        pass

    def scale(self, width: int, height: int):
        """ Scale the buffer of the image, in pixels

        :param width: Width
        :type width: int
        :param height: Height
        :type height: int
        """
        pass

    def gl_touch(self, frame: int=0, layer_index: int=0, pass_index: int=0) -> int:
        """ Delay the image from being cleaned from the cache due inactivity

        :param frame: Frame, Frame of image sequence or movie
        :type frame: int
        :param layer_index: Layer, Index of layer that should be loaded
        :type layer_index: int
        :param pass_index: Pass, Index of pass that should be loaded
        :type pass_index: int
        :rtype: int
        :return: Error, OpenGL error value
        """
        pass

    def gl_load(self, frame: int=0, layer_index: int=0, pass_index: int=0) -> int:
        """ Load the image into an OpenGL texture. On success, image.bindcode will contain the OpenGL texture bindcode. Colors read from the texture will be in scene linear color space and have premultiplied or straight alpha matching the image alpha mode

        :param frame: Frame, Frame of image sequence or movie
        :type frame: int
        :param layer_index: Layer, Index of layer that should be loaded
        :type layer_index: int
        :param pass_index: Pass, Index of pass that should be loaded
        :type pass_index: int
        :rtype: int
        :return: Error, OpenGL error value
        """
        pass

    def gl_free(self):
        """ Free the image from OpenGL graphics memory

        """
        pass

    def filepath_from_user(self, image_user: 'ImageUser'=None) -> str:
        """ Return the absolute path to the filepath of an image frame specified by the image user

        :param image_user: Image user of the image to get filepath for
        :type image_user: 'ImageUser'
        :rtype: str
        :return: File Path, The resulting filepath from the image and its user
        """
        pass

    def buffers_free(self):
        """ Free the image buffers from memory

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Key(ID, bpy_struct):
    """ Shape keys data-block containing different shapes of geometric data-blocks
    """
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    eval_time: float = None
    ' Evaluation time for absolute shape keys\n\n    :type: float\n    '
    key_blocks: bpy_prop_collection['ShapeKey'] = None
    " Shape keys\n\n    :type: bpy_prop_collection['ShapeKey']\n    "
    reference_key: 'ShapeKey' = None
    " \n\n    :type: 'ShapeKey'\n    "
    use_relative: bool = None
    ' Make shape keys relative, otherwise play through shapes as a sequence using the evaluation time\n\n    :type: bool\n    '
    user: 'ID' = None
    " Data-block using these shape keys\n\n    :type: 'ID'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Lattice(ID, bpy_struct):
    """ Lattice data-block defining a grid for deforming other objects
    """
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    interpolation_type_u: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    interpolation_type_v: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    interpolation_type_w: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    is_editmode: bool = None
    ' True when used in editmode\n\n    :type: bool\n    '
    points: bpy_prop_collection['LatticePoint'] = None
    " Points of the lattice\n\n    :type: bpy_prop_collection['LatticePoint']\n    "
    points_u: int = None
    " Point in U direction (can't be changed when there are shape keys)\n\n    :type: int\n    "
    points_v: int = None
    " Point in V direction (can't be changed when there are shape keys)\n\n    :type: int\n    "
    points_w: int = None
    " Point in W direction (can't be changed when there are shape keys)\n\n    :type: int\n    "
    shape_keys: 'Key' = None
    " \n\n    :type: 'Key'\n    "
    use_outside: bool = None
    ' Only display and take into account the outer vertices\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Vertex group to apply the influence of the lattice\n\n    :type: str\n    '

    def transform(self, matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'], shape_keys: bool=False):
        """ Transform lattice by a matrix

        :param matrix: Matrix
        :type matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']
        :param shape_keys: Transform Shape Keys
        :type shape_keys: bool
        """
        pass

    def update_gpu_tag(self):
        """ update_gpu_tag

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Library(ID, bpy_struct):
    """ External .blend file from which data is linked
    """
    filepath: str = None
    ' Path to the library .blend file\n\n    :type: str\n    '
    packed_file: 'PackedFile' = None
    " \n\n    :type: 'PackedFile'\n    "
    parent: 'Library' = None
    " \n\n    :type: 'Library'\n    "
    version: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Version of Blender the library .blend was saved with\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    users_id = None
    ' ID data blocks which use this library (readonly)'

    def reload(self):
        """ Reload this library and all its linked data-blocks

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Light(ID, bpy_struct):
    """ Light data-block for lighting a scene
    """
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Light color\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    cutoff_distance: float = None
    ' Distance at which the light influence will be set to 0\n\n    :type: float\n    '
    cycles: typing.Any = None
    ' Cycles light settings\n\n    :type: typing.Any\n    '
    diffuse_factor: float = None
    ' Diffuse reflection multiplier\n\n    :type: float\n    '
    distance: float = None
    ' Falloff distance - the light is at half the original intensity at this point\n\n    :type: float\n    '
    node_tree: 'NodeTree' = None
    " Node tree for node based lights\n\n    :type: 'NodeTree'\n    "
    specular_factor: float = None
    ' Specular reflection multiplier\n\n    :type: float\n    '
    type: typing.Union[str, int] = None
    ' Type of light\n\n    :type: typing.Union[str, int]\n    '
    use_custom_distance: bool = None
    ' Use custom attenuation distance instead of global light threshold\n\n    :type: bool\n    '
    use_nodes: bool = None
    ' Use shader nodes to render the light\n\n    :type: bool\n    '
    volume_factor: float = None
    ' Volume light multiplier\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LightProbe(ID, bpy_struct):
    """ Light Probe data-block for lighting capture objects
    """
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    clip_end: float = None
    ' Probe clip end, beyond which objects will not appear in reflections\n\n    :type: float\n    '
    clip_start: float = None
    ' Probe clip start, below which objects will not appear in reflections\n\n    :type: float\n    '
    falloff: float = None
    ' Control how fast the probe influence decreases\n\n    :type: float\n    '
    grid_resolution_x: int = None
    ' Number of sample along the x axis of the volume\n\n    :type: int\n    '
    grid_resolution_y: int = None
    ' Number of sample along the y axis of the volume\n\n    :type: int\n    '
    grid_resolution_z: int = None
    ' Number of sample along the z axis of the volume\n\n    :type: int\n    '
    influence_distance: float = None
    ' Influence distance of the probe\n\n    :type: float\n    '
    influence_type: typing.Union[str, int] = None
    ' Type of influence volume\n\n    :type: typing.Union[str, int]\n    '
    intensity: float = None
    ' Modify the intensity of the lighting captured by this probe\n\n    :type: float\n    '
    invert_visibility_collection: bool = None
    ' Invert visibility collection\n\n    :type: bool\n    '
    parallax_distance: float = None
    ' Lowest corner of the parallax bounding box\n\n    :type: float\n    '
    parallax_type: typing.Union[str, int] = None
    ' Type of parallax volume\n\n    :type: typing.Union[str, int]\n    '
    show_clip: bool = None
    ' Show the clipping distances in the 3D view\n\n    :type: bool\n    '
    show_data: bool = None
    ' Show captured lighting data into the 3D view for debugging purpose\n\n    :type: bool\n    '
    show_influence: bool = None
    ' Show the influence volume in the 3D view\n\n    :type: bool\n    '
    show_parallax: bool = None
    ' Show the parallax correction volume in the 3D view\n\n    :type: bool\n    '
    type: typing.Union[str, int] = None
    ' Type of light probe * ``CUBEMAP`` Reflection Cubemap -- Capture reflections. * ``PLANAR`` Reflection Plane. * ``GRID`` Irradiance Volume -- Volume used for precomputing indirect lighting.\n\n    :type: typing.Union[str, int]\n    '
    use_custom_parallax: bool = None
    ' Enable custom settings for the parallax correction volume\n\n    :type: bool\n    '
    visibility_bleed_bias: float = None
    ' Bias for reducing light-bleed on variance shadow maps\n\n    :type: float\n    '
    visibility_blur: float = None
    ' Filter size of the visibility blur\n\n    :type: float\n    '
    visibility_buffer_bias: float = None
    ' Bias for reducing self shadowing\n\n    :type: float\n    '
    visibility_collection: 'Collection' = None
    " Restrict objects visible for this probe\n\n    :type: 'Collection'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Mask(ID, bpy_struct):
    """ Mask data-block defining mask for compositing
    """
    active_layer_index: int = None
    " Index of active layer in list of all mask's layers\n\n    :type: int\n    "
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    frame_end: int = None
    ' Final frame of the mask (used for sequencer)\n\n    :type: int\n    '
    frame_start: int = None
    ' First frame of the mask (used for sequencer)\n\n    :type: int\n    '
    layers: 'MaskLayers' = None
    " Collection of layers which defines this mask\n\n    :type: 'MaskLayers'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Material(ID, bpy_struct):
    """ Material data-block to define the appearance of geometric objects for rendering
    """
    alpha_threshold: float = None
    ' A pixel is rendered only if its alpha value is above this threshold\n\n    :type: float\n    '
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    blend_method: typing.Union[str, int] = None
    ' Blend Mode for Transparent Faces * ``OPAQUE`` Opaque -- Render surface without transparency. * ``CLIP`` Alpha Clip -- Use the alpha threshold to clip the visibility (binary visibility). * ``HASHED`` Alpha Hashed -- Use noise to dither the binary visibility (works well with multi-samples). * ``BLEND`` Alpha Blend -- Render polygon transparent, depending on alpha channel of the texture.\n\n    :type: typing.Union[str, int]\n    '
    cycles: typing.Any = None
    ' Cycles material settings\n\n    :type: typing.Any\n    '
    diffuse_color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Diffuse color of the material\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    grease_pencil: 'MaterialGPencilStyle' = None
    " Grease pencil color settings for material\n\n    :type: 'MaterialGPencilStyle'\n    "
    is_grease_pencil: bool = None
    ' True if this material has grease pencil data\n\n    :type: bool\n    '
    line_color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Line color used for Freestyle line rendering\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    line_priority: int = None
    ' The line color of a higher priority is used at material boundaries\n\n    :type: int\n    '
    lineart: 'MaterialLineArt' = None
    " Line art settings for material\n\n    :type: 'MaterialLineArt'\n    "
    metallic: float = None
    ' Amount of mirror reflection for raytrace\n\n    :type: float\n    '
    node_tree: 'NodeTree' = None
    " Node tree for node based materials\n\n    :type: 'NodeTree'\n    "
    paint_active_slot: int = None
    ' Index of active texture paint slot\n\n    :type: int\n    '
    paint_clone_slot: int = None
    ' Index of clone texture paint slot\n\n    :type: int\n    '
    pass_index: int = None
    ' Index number for the "Material Index" render pass\n\n    :type: int\n    '
    preview_render_type: typing.Union[str, int] = None
    ' Type of preview render * ``FLAT`` Flat -- Flat XY plane. * ``SPHERE`` Sphere -- Sphere. * ``CUBE`` Cube -- Cube. * ``HAIR`` Hair -- Hair strands. * ``SHADERBALL`` Shader Ball -- Shader ball. * ``CLOTH`` Cloth -- Cloth. * ``FLUID`` Fluid -- Fluid.\n\n    :type: typing.Union[str, int]\n    '
    refraction_depth: float = None
    ' Approximate the thickness of the object to compute two refraction events (0 is disabled)\n\n    :type: float\n    '
    roughness: float = None
    ' Roughness of the material\n\n    :type: float\n    '
    shadow_method: typing.Union[str, int] = None
    ' Shadow mapping method * ``NONE`` None -- Material will cast no shadow. * ``OPAQUE`` Opaque -- Material will cast shadows without transparency. * ``CLIP`` Alpha Clip -- Use the alpha threshold to clip the visibility (binary visibility). * ``HASHED`` Alpha Hashed -- Use noise to dither the binary visibility and use filtering to reduce the noise.\n\n    :type: typing.Union[str, int]\n    '
    show_transparent_back: bool = None
    ' Render multiple transparent layers (may introduce transparency sorting problems)\n\n    :type: bool\n    '
    specular_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Specular color of the material\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    specular_intensity: float = None
    ' How intense (bright) the specular reflection is\n\n    :type: float\n    '
    texture_paint_images: bpy_prop_collection['Image'] = None
    " Texture images used for texture painting\n\n    :type: bpy_prop_collection['Image']\n    "
    texture_paint_slots: bpy_prop_collection['TexPaintSlot'] = None
    " Texture slots defining the mapping and influence of textures\n\n    :type: bpy_prop_collection['TexPaintSlot']\n    "
    use_backface_culling: bool = None
    ' Use back face culling to hide the back side of faces\n\n    :type: bool\n    '
    use_nodes: bool = None
    ' Use shader nodes to render the material\n\n    :type: bool\n    '
    use_preview_world: bool = None
    ' Use the current world background to light the preview render\n\n    :type: bool\n    '
    use_screen_refraction: bool = None
    ' Use raytraced screen space refractions\n\n    :type: bool\n    '
    use_sss_translucency: bool = None
    ' Add translucency effect to subsurface\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Mesh(ID, bpy_struct):
    """ Mesh data-block defining geometric surfaces
    """
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    attributes: 'AttributeGroup' = None
    " Geometry attributes\n\n    :type: 'AttributeGroup'\n    "
    auto_smooth_angle: float = None
    ' Maximum angle between face normals that will be considered as smooth (unused if custom split normals data are available)\n\n    :type: float\n    '
    auto_texspace: bool = None
    " Adjust active object's texture space automatically when transforming object\n\n    :type: bool\n    "
    color_attributes: 'AttributeGroup' = None
    " Geometry color attributes\n\n    :type: 'AttributeGroup'\n    "
    cycles: typing.Any = None
    ' Cycles mesh settings\n\n    :type: typing.Any\n    '
    edge_creases: bpy_prop_collection['MeshEdgeCreaseLayer'] = None
    " Sharpness of the edges for subdivision\n\n    :type: bpy_prop_collection['MeshEdgeCreaseLayer']\n    "
    edges: 'MeshEdges' = None
    " Edges of the mesh\n\n    :type: 'MeshEdges'\n    "
    face_maps: 'MeshFaceMapLayers' = None
    " \n\n    :type: 'MeshFaceMapLayers'\n    "
    has_bevel_weight_edge: bool = None
    ' True if the mesh has an edge bevel weight layer\n\n    :type: bool\n    '
    has_bevel_weight_vertex: bool = None
    ' True if the mesh has an vertex bevel weight layer\n\n    :type: bool\n    '
    has_crease_edge: bool = None
    ' True if the mesh has an edge crease layer\n\n    :type: bool\n    '
    has_crease_vertex: bool = None
    ' True if the mesh has an vertex crease layer\n\n    :type: bool\n    '
    has_custom_normals: bool = None
    ' True if there are custom split normals data in this mesh\n\n    :type: bool\n    '
    is_editmode: bool = None
    ' True when used in editmode\n\n    :type: bool\n    '
    loop_triangles: 'MeshLoopTriangles' = None
    " Tessellation of mesh polygons into triangles\n\n    :type: 'MeshLoopTriangles'\n    "
    loops: 'MeshLoops' = None
    " Loops of the mesh (polygon corners)\n\n    :type: 'MeshLoops'\n    "
    materials: 'IDMaterials' = None
    " \n\n    :type: 'IDMaterials'\n    "
    polygon_layers_float: 'PolygonFloatProperties' = None
    " \n\n    :type: 'PolygonFloatProperties'\n    "
    polygon_layers_int: 'PolygonIntProperties' = None
    " \n\n    :type: 'PolygonIntProperties'\n    "
    polygon_layers_string: 'PolygonStringProperties' = None
    " \n\n    :type: 'PolygonStringProperties'\n    "
    polygon_normals: bpy_prop_collection['MeshNormalValue'] = None
    " The normal direction of each polygon, defined by the winding order and position of its vertices\n\n    :type: bpy_prop_collection['MeshNormalValue']\n    "
    polygons: 'MeshPolygons' = None
    " Polygons of the mesh\n\n    :type: 'MeshPolygons'\n    "
    remesh_mode: typing.Union[str, int] = None
    ' * ``VOXEL`` Voxel -- Use the voxel remesher. * ``QUAD`` Quad -- Use the quad remesher.\n\n    :type: typing.Union[str, int]\n    '
    remesh_voxel_adaptivity: float = None
    ' Reduces the final face count by simplifying geometry where detail is not needed, generating triangles. A value greater than 0 disables Fix Poles\n\n    :type: float\n    '
    remesh_voxel_size: float = None
    ' Size of the voxel in object space used for volume evaluation. Lower values preserve finer details\n\n    :type: float\n    '
    sculpt_vertex_colors: 'VertColors' = None
    " Sculpt vertex color layers. Deprecated, use color attributes instead\n\n    :type: 'VertColors'\n    "
    shape_keys: 'Key' = None
    " \n\n    :type: 'Key'\n    "
    skin_vertices: bpy_prop_collection['MeshSkinVertexLayer'] = None
    " All skin vertices\n\n    :type: bpy_prop_collection['MeshSkinVertexLayer']\n    "
    texco_mesh: 'Mesh' = None
    " Derive texture coordinates from another mesh\n\n    :type: 'Mesh'\n    "
    texspace_location: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Texture space location\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    texspace_size: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Texture space size\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    texture_mesh: 'Mesh' = None
    " Use another mesh for texture indices (vertex indices must be aligned)\n\n    :type: 'Mesh'\n    "
    total_edge_sel: int = None
    ' Selected edge count in editmode\n\n    :type: int\n    '
    total_face_sel: int = None
    ' Selected face count in editmode\n\n    :type: int\n    '
    total_vert_sel: int = None
    ' Selected vertex count in editmode\n\n    :type: int\n    '
    use_auto_smooth: bool = None
    ' Auto smooth (based on smooth/sharp faces/edges and angle between faces), or use custom split normals data if available\n\n    :type: bool\n    '
    use_auto_texspace: bool = None
    " Adjust active object's texture space automatically when transforming object\n\n    :type: bool\n    "
    use_mirror_topology: bool = None
    ' Use topology based mirroring (for when both sides of mesh have matching, unique topology)\n\n    :type: bool\n    '
    use_mirror_vertex_groups: bool = None
    ' Mirror the left/right vertex groups when painting. The symmetry axis is determined by the symmetry settings\n\n    :type: bool\n    '
    use_mirror_x: bool = None
    ' Enable symmetry in the X axis\n\n    :type: bool\n    '
    use_mirror_y: bool = None
    ' Enable symmetry in the Y axis\n\n    :type: bool\n    '
    use_mirror_z: bool = None
    ' Enable symmetry in the Z axis\n\n    :type: bool\n    '
    use_paint_mask: bool = None
    ' Face selection masking for painting\n\n    :type: bool\n    '
    use_paint_mask_vertex: bool = None
    ' Vertex selection masking for painting\n\n    :type: bool\n    '
    use_remesh_fix_poles: bool = None
    ' Produces less poles and a better topology flow\n\n    :type: bool\n    '
    use_remesh_preserve_paint_mask: bool = None
    ' Keep the current mask on the new mesh\n\n    :type: bool\n    '
    use_remesh_preserve_sculpt_face_sets: bool = None
    ' Keep the current Face Sets on the new mesh\n\n    :type: bool\n    '
    use_remesh_preserve_vertex_colors: bool = None
    ' Keep the current vertex colors on the new mesh\n\n    :type: bool\n    '
    use_remesh_preserve_volume: bool = None
    ' Projects the mesh to preserve the volume and details of the original mesh\n\n    :type: bool\n    '
    uv_layer_clone: 'MeshUVLoopLayer' = None
    " UV loop layer to be used as cloning source\n\n    :type: 'MeshUVLoopLayer'\n    "
    uv_layer_clone_index: int = None
    ' Clone UV loop layer index\n\n    :type: int\n    '
    uv_layer_stencil: 'MeshUVLoopLayer' = None
    " UV loop layer to mask the painted area\n\n    :type: 'MeshUVLoopLayer'\n    "
    uv_layer_stencil_index: int = None
    ' Mask UV loop layer index\n\n    :type: int\n    '
    uv_layers: 'UVLoopLayers' = None
    " All UV loop layers\n\n    :type: 'UVLoopLayers'\n    "
    vertex_colors: 'LoopColors' = None
    " Legacy vertex color layers. Deprecated, use color attributes instead\n\n    :type: 'LoopColors'\n    "
    vertex_creases: bpy_prop_collection['MeshVertexCreaseLayer'] = None
    " Sharpness of the vertices\n\n    :type: bpy_prop_collection['MeshVertexCreaseLayer']\n    "
    vertex_layers_float: 'VertexFloatProperties' = None
    " \n\n    :type: 'VertexFloatProperties'\n    "
    vertex_layers_int: 'VertexIntProperties' = None
    " \n\n    :type: 'VertexIntProperties'\n    "
    vertex_layers_string: 'VertexStringProperties' = None
    " \n\n    :type: 'VertexStringProperties'\n    "
    vertex_normals: bpy_prop_collection['MeshNormalValue'] = None
    " The normal direction of each vertex, defined as the average of the surrounding face normals\n\n    :type: bpy_prop_collection['MeshNormalValue']\n    "
    vertex_paint_masks: bpy_prop_collection['MeshPaintMaskLayer'] = None
    " Vertex paint mask\n\n    :type: bpy_prop_collection['MeshPaintMaskLayer']\n    "
    vertices: 'MeshVertices' = None
    " Vertices of the mesh\n\n    :type: 'MeshVertices'\n    "
    edge_keys = None
    ' (readonly)'

    def transform(self, matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'], shape_keys: bool=False):
        """ Transform mesh vertices by a matrix (Warning: inverts normals if matrix is negative)

        :param matrix: Matrix
        :type matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']
        :param shape_keys: Transform Shape Keys
        :type shape_keys: bool
        """
        pass

    def flip_normals(self):
        """ Invert winding of all polygons (clears tessellation, does not handle custom normals)

        """
        pass

    def calc_normals(self):
        """ Calculate vertex normals

        """
        pass

    def create_normals_split(self):
        """ Empty split vertex normals

        """
        pass

    def calc_normals_split(self):
        """ Calculate split vertex normals, which preserve sharp edges

        """
        pass

    def free_normals_split(self):
        """ Free split vertex normals

        """
        pass

    def split_faces(self, free_loop_normals: bool=True):
        """ Split faces based on the edge angle

        :param free_loop_normals: Free Loop Normals, Deprecated, has no effect
        :type free_loop_normals: bool
        """
        pass

    def calc_tangents(self, uvmap: str=''):
        """ Compute tangents and bitangent signs, to be used together with the split normals to get a complete tangent space for normal mapping (split normals are also computed if not yet present)

        :param uvmap: Name of the UV map to use for tangent space computation
        :type uvmap: str
        """
        pass

    def free_tangents(self):
        """ Free tangents

        """
        pass

    def calc_loop_triangles(self):
        """ Calculate loop triangle tessellation (supports editmode too)

        """
        pass

    def calc_smooth_groups(self, use_bitflags: bool=False):
        """ Calculate smooth groups from sharp edges

        :param use_bitflags: Produce bitflags groups instead of simple numeric values
        :type use_bitflags: bool
        """
        pass

    def normals_split_custom_set(self, normals: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float], typing.Tuple[float], typing.Tuple[float]]]):
        """ Define custom split normals of this mesh (use zero-vectors to keep auto ones)

        :param normals: Normals
        :type normals: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float], typing.Tuple[float], typing.Tuple[float]]]
        """
        pass

    def normals_split_custom_set_from_vertices(self, normals: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float], typing.Tuple[float], typing.Tuple[float]]]):
        """ Define custom split normals of this mesh, from vertices' normals (use zero-vectors to keep auto ones)

        :param normals: Normals
        :type normals: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float], typing.Tuple[float], typing.Tuple[float]]]
        """
        pass

    def update(self, calc_edges: bool=False, calc_edges_loose: bool=False):
        """ update

        :param calc_edges: Calculate Edges, Force recalculation of edges
        :type calc_edges: bool
        :param calc_edges_loose: Calculate Loose Edges, Calculate the loose state of each edge
        :type calc_edges_loose: bool
        """
        pass

    def update_gpu_tag(self):
        """ update_gpu_tag

        """
        pass

    def unit_test_compare(self, mesh: 'Mesh'=None, threshold: float=7.1526e-06) -> str:
        """ unit_test_compare

        :param mesh: Mesh to compare to
        :type mesh: 'Mesh'
        :param threshold: Threshold, Comparison tolerance threshold
        :type threshold: float
        :rtype: str
        :return: Return value, String description of result of comparison
        """
        pass

    def clear_geometry(self):
        """ Remove all geometry from the mesh. Note that this does not free shape keys or materials

        """
        pass

    def validate(self, verbose: bool=False, clean_customdata: bool=True) -> bool:
        """ Validate geometry, return True when the mesh has had invalid geometry corrected/removed

        :param verbose: Verbose, Output information about the errors found
        :type verbose: bool
        :param clean_customdata: Clean Custom Data, Remove temp/cached custom-data layers, like e.g. normals...
        :type clean_customdata: bool
        :rtype: bool
        :return: Result
        """
        pass

    def validate_material_indices(self) -> bool:
        """ Validate material indices of polygons, return True when the mesh has had invalid indices corrected (to default 0)

        :rtype: bool
        :return: Result
        """
        pass

    def count_selected_items(self) -> typing.Union[bpy_prop_array[int], typing.Sequence[int]]:
        """ Return the number of selected items (vert, edge, face)

        :rtype: typing.Union[bpy_prop_array[int], typing.Sequence[int]]
        :return: Result
        """
        pass

    def from_pydata(self, vertices: typing.List, edges: typing.List, faces: typing.List):
        """ Make a mesh from a list of vertices/edges/faces Until we have a nicer way to make geometry, use this.

        :param vertices: float triplets each representing (X, Y, Z) eg: [(0.0, 1.0, 0.5), ...].
        :type vertices: typing.List
        :param edges: int pairs, each pair contains two indices to the *vertices* argument. eg: [(1, 2), ...] When an empty iterable is passed in, the edges are inferred from the polygons.
        :type edges: typing.List
        :param faces: iterator of faces, each faces contains three or more indices to the *vertices* argument. eg: [(5, 6, 8, 9), (1, 2, 3), ...]
        :type faces: typing.List
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MetaBall(ID, bpy_struct):
    """ Metaball data-block to defined blobby surfaces
    """
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    cycles: typing.Any = None
    ' Cycles mesh settings\n\n    :type: typing.Any\n    '
    elements: 'MetaBallElements' = None
    " Metaball elements\n\n    :type: 'MetaBallElements'\n    "
    is_editmode: bool = None
    ' True when used in editmode\n\n    :type: bool\n    '
    materials: 'IDMaterials' = None
    " \n\n    :type: 'IDMaterials'\n    "
    render_resolution: float = None
    ' Polygonization resolution in rendering\n\n    :type: float\n    '
    resolution: float = None
    ' Polygonization resolution in the 3D viewport\n\n    :type: float\n    '
    texspace_location: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Texture space location\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    texspace_size: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Texture space size\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    threshold: float = None
    ' Influence of metaball elements\n\n    :type: float\n    '
    update_method: typing.Union[str, int] = None
    " Metaball edit update behavior * ``UPDATE_ALWAYS`` Always -- While editing, update metaball always. * ``HALFRES`` Half -- While editing, update metaball in half resolution. * ``FAST`` Fast -- While editing, update metaball without polygonization. * ``NEVER`` Never -- While editing, don't update metaball at all.\n\n    :type: typing.Union[str, int]\n    "
    use_auto_texspace: bool = None
    " Adjust active object's texture space automatically when transforming object\n\n    :type: bool\n    "

    def transform(self, matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']):
        """ Transform metaball elements by a matrix

        :param matrix: Matrix
        :type matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']
        """
        pass

    def update_gpu_tag(self):
        """ update_gpu_tag

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieClip(ID, bpy_struct):
    """ MovieClip data-block referencing an external movie file
    """
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    colorspace_settings: 'ColorManagedInputColorspaceSettings' = None
    " Input color space settings\n\n    :type: 'ColorManagedInputColorspaceSettings'\n    "
    display_aspect: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Display Aspect for this clip, does not affect rendering\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    filepath: str = None
    ' Filename of the movie or sequence file\n\n    :type: str\n    '
    fps: float = None
    ' Detected frame rate of the movie clip in frames per second\n\n    :type: float\n    '
    frame_duration: int = None
    ' Detected duration of movie clip in frames\n\n    :type: int\n    '
    frame_offset: int = None
    ' Offset of footage first frame relative to its file name (affects only how footage is loading, does not change data associated with a clip)\n\n    :type: int\n    '
    frame_start: int = None
    ' Global scene frame number at which this movie starts playing (affects all data associated with a clip)\n\n    :type: int\n    '
    grease_pencil: 'GreasePencil' = None
    " Grease pencil data for this movie clip\n\n    :type: 'GreasePencil'\n    "
    proxy: 'MovieClipProxy' = None
    " \n\n    :type: 'MovieClipProxy'\n    "
    size: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    " Width and height in pixels, zero when image data can't be loaded\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    "
    source: typing.Union[str, int] = None
    ' Where the clip comes from * ``SEQUENCE`` Image Sequence -- Multiple image files, as a sequence. * ``MOVIE`` Movie File -- Movie file.\n\n    :type: typing.Union[str, int]\n    '
    tracking: 'MovieTracking' = None
    " \n\n    :type: 'MovieTracking'\n    "
    use_proxy: bool = None
    ' Use a preview proxy and/or timecode index for this clip\n\n    :type: bool\n    '
    use_proxy_custom_directory: bool = None
    ' Create proxy images in a custom directory (default is movie location)\n\n    :type: bool\n    '

    def metadata(self) -> 'IDPropertyWrapPtr':
        """ Retrieve metadata of the movie file

        :rtype: 'IDPropertyWrapPtr'
        :return: Dict-like object containing the metadata
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeTree(ID, bpy_struct):
    """ Node tree consisting of linked nodes used for shading, textures and compositing
    """
    active_input: int = None
    ' Index of the active input\n\n    :type: int\n    '
    active_output: int = None
    ' Index of the active output\n\n    :type: int\n    '
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    bl_description: str = None
    ' \n\n    :type: str\n    '
    bl_icon: typing.Union[str, int] = None
    ' The node tree icon\n\n    :type: typing.Union[str, int]\n    '
    bl_idname: str = None
    ' \n\n    :type: str\n    '
    bl_label: str = None
    ' The node tree label\n\n    :type: str\n    '
    grease_pencil: 'GreasePencil' = None
    " Grease Pencil data-block\n\n    :type: 'GreasePencil'\n    "
    inputs: 'NodeTreeInputs' = None
    " Node tree inputs\n\n    :type: 'NodeTreeInputs'\n    "
    links: 'NodeLinks' = None
    " \n\n    :type: 'NodeLinks'\n    "
    nodes: 'Nodes' = None
    " \n\n    :type: 'Nodes'\n    "
    outputs: 'NodeTreeOutputs' = None
    " Node tree outputs\n\n    :type: 'NodeTreeOutputs'\n    "
    type: typing.Union[str, int] = None
    ' Node Tree type (deprecated, bl_idname is the actual node tree type identifier) * ``UNDEFINED`` Undefined -- Undefined type of nodes (can happen e.g. when a linked node tree goes missing). * ``SHADER`` Shader -- Shader nodes. * ``TEXTURE`` Texture -- Texture nodes. * ``COMPOSITING`` Compositing -- Compositing nodes. * ``GEOMETRY`` Geometry -- Geometry nodes.\n\n    :type: typing.Union[str, int]\n    '
    view_center: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " The current location (offset) of the view for this Node Tree\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "

    def interface_update(self, context: 'Context'):
        """ Updated node group interface

        :param context: 
        :type context: 'Context'
        """
        pass

    @classmethod
    def poll(cls, context: 'Context'):
        """ Check visibility in the editor

        :param context: 
        :type context: 'Context'
        """
        pass

    def update(self):
        """ Update on editor changes

        """
        pass

    @classmethod
    def get_from_context(cls, context: 'Context'):
        """ Get a node tree from the context

        :param context: 
        :type context: 'Context'
        """
        pass

    @classmethod
    def valid_socket_type(cls, idname: str):
        """ Check if the socket type is valid for the node tree

        :param idname: Socket Type, Identifier of the socket type
        :type idname: str
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Object(ID, bpy_struct):
    """ Object data-block defining an object in a scene
    """
    active_material: 'Material' = None
    " Active material being displayed\n\n    :type: 'Material'\n    "
    active_material_index: int = None
    ' Index of active material slot\n\n    :type: int\n    '
    active_shape_key: 'ShapeKey' = None
    " Current shape key\n\n    :type: 'ShapeKey'\n    "
    active_shape_key_index: int = None
    ' Current shape key index\n\n    :type: int\n    '
    add_rest_position_attribute: bool = None
    ' Add a "rest_position" attribute that is a copy of the position attribute before shape keys and modifiers are evaluated\n\n    :type: bool\n    '
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    animation_visualization: 'AnimViz' = None
    " Animation data for this data-block\n\n    :type: 'AnimViz'\n    "
    bound_box: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float, float, float, float, float], typing.Tuple[float, float, float, float, float, float, float, float], typing.Tuple[float, float, float, float, float, float, float, float]]] = None
    " Object's bounding box in object-space coordinates, all values are -1.0 when not available\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float, float, float, float, float], typing.Tuple[float, float, float, float, float, float, float, float], typing.Tuple[float, float, float, float, float, float, float, float]]]\n    "
    collision: 'CollisionSettings' = None
    " Settings for using the object as a collider in physics simulation\n\n    :type: 'CollisionSettings'\n    "
    color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Object color and alpha, used when faces have the ObColor mode enabled\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    constraints: 'ObjectConstraints' = None
    " Constraints affecting the transformation of the object\n\n    :type: 'ObjectConstraints'\n    "
    cycles: typing.Any = None
    ' Cycles object settings\n\n    :type: typing.Any\n    '
    data: 'ID' = None
    " Object data\n\n    :type: 'ID'\n    "
    delta_location: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Extra translation added to the location of the object\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    delta_rotation_euler: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler'] = None
    " Extra rotation added to the rotation of the object (when using Euler rotations)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler']\n    "
    delta_rotation_quaternion: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion'] = None
    " Extra rotation added to the rotation of the object (when using Quaternion rotations)\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion']\n    "
    delta_scale: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Extra scaling added to the scale of the object\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    dimensions: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Absolute bounding box dimensions of the object. Warning: Assigning to it or its members multiple consecutive times will not work correctly, as this needs up-to-date evaluated data\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    display: 'ObjectDisplay' = None
    " Object display settings for 3D viewport\n\n    :type: 'ObjectDisplay'\n    "
    display_bounds_type: typing.Union[str, int] = None
    ' Object boundary display type * ``BOX`` Box -- Display bounds as box. * ``SPHERE`` Sphere -- Display bounds as sphere. * ``CYLINDER`` Cylinder -- Display bounds as cylinder. * ``CONE`` Cone -- Display bounds as cone. * ``CAPSULE`` Capsule -- Display bounds as capsule.\n\n    :type: typing.Union[str, int]\n    '
    display_type: typing.Union[str, int] = None
    ' How to display object in viewport * ``BOUNDS`` Bounds -- Display the bounds of the object. * ``WIRE`` Wire -- Display the object as a wireframe. * ``SOLID`` Solid -- Display the object as a solid (if solid drawing is enabled in the viewport). * ``TEXTURED`` Textured -- Display the object with textures (if textures are enabled in the viewport).\n\n    :type: typing.Union[str, int]\n    '
    empty_display_size: float = None
    ' Size of display for empties in the viewport\n\n    :type: float\n    '
    empty_display_type: typing.Union[str, int] = None
    ' Viewport display style for empties\n\n    :type: typing.Union[str, int]\n    '
    empty_image_depth: typing.Union[str, int] = None
    ' Determine which other objects will occlude the image\n\n    :type: typing.Union[str, int]\n    '
    empty_image_offset: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Origin offset distance\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    empty_image_side: typing.Union[str, int] = None
    ' Show front/back side\n\n    :type: typing.Union[str, int]\n    '
    face_maps: 'FaceMaps' = None
    " Maps of faces of the object\n\n    :type: 'FaceMaps'\n    "
    field: 'FieldSettings' = None
    " Settings for using the object as a field in physics simulation\n\n    :type: 'FieldSettings'\n    "
    grease_pencil_modifiers: 'ObjectGpencilModifiers' = None
    " Modifiers affecting the data of the grease pencil object\n\n    :type: 'ObjectGpencilModifiers'\n    "
    hide_render: bool = None
    ' Globally disable in renders\n\n    :type: bool\n    '
    hide_select: bool = None
    ' Disable selection in viewport\n\n    :type: bool\n    '
    hide_viewport: bool = None
    ' Globally disable in viewports\n\n    :type: bool\n    '
    image_user: 'ImageUser' = None
    " Parameters defining which layer, pass and frame of the image is displayed\n\n    :type: 'ImageUser'\n    "
    instance_collection: 'Collection' = None
    " Instance an existing collection\n\n    :type: 'Collection'\n    "
    instance_faces_scale: float = None
    ' Scale the face instance objects\n\n    :type: float\n    '
    instance_type: typing.Union[str, int] = None
    ' If not None, object instancing method to use * ``NONE`` None. * ``VERTS`` Vertices -- Instantiate child objects on all vertices. * ``FACES`` Faces -- Instantiate child objects on all faces. * ``COLLECTION`` Collection -- Enable collection instancing.\n\n    :type: typing.Union[str, int]\n    '
    is_from_instancer: bool = None
    ' Object comes from a instancer\n\n    :type: bool\n    '
    is_from_set: bool = None
    ' Object comes from a background set\n\n    :type: bool\n    '
    is_holdout: bool = None
    ' Render objects as a holdout or matte, creating a hole in the image with zero alpha, to fill out in compositing with real footage or another render\n\n    :type: bool\n    '
    is_instancer: bool = None
    ' \n\n    :type: bool\n    '
    is_shadow_catcher: bool = None
    ' Only render shadows and reflections on this object, for compositing renders into real footage. Objects with this setting are considered to already exist in the footage, objects without it are synthetic objects being composited into it\n\n    :type: bool\n    '
    lightgroup: str = None
    ' Lightgroup that the object belongs to\n\n    :type: str\n    '
    lineart: 'ObjectLineArt' = None
    " Line art settings for the object\n\n    :type: 'ObjectLineArt'\n    "
    location: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Location of the object\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    lock_location: typing.List[bool] = None
    ' Lock editing of location when transforming\n\n    :type: typing.List[bool]\n    '
    lock_rotation: typing.List[bool] = None
    ' Lock editing of rotation when transforming\n\n    :type: typing.List[bool]\n    '
    lock_rotation_w: bool = None
    " Lock editing of 'angle' component of four-component rotations when transforming\n\n    :type: bool\n    "
    lock_rotations_4d: bool = None
    ' Lock editing of four component rotations by components (instead of as Eulers)\n\n    :type: bool\n    '
    lock_scale: typing.List[bool] = None
    ' Lock editing of scale when transforming\n\n    :type: typing.List[bool]\n    '
    material_slots: bpy_prop_collection['MaterialSlot'] = None
    " Material slots in the object\n\n    :type: bpy_prop_collection['MaterialSlot']\n    "
    matrix_basis: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " Matrix access to location, rotation and scale (including deltas), before constraints and parenting are applied\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    matrix_local: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " Parent relative transformation matrix. Warning: Only takes into account object parenting, so e.g. in case of bone parenting you get a matrix relative to the Armature object, not to the actual parent bone\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    matrix_parent_inverse: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " Inverse of object's parent matrix at time of parenting\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    matrix_world: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " Worldspace transformation matrix\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    mode: typing.Union[str, int] = None
    ' Object interaction mode\n\n    :type: typing.Union[str, int]\n    '
    modifiers: 'ObjectModifiers' = None
    " Modifiers affecting the geometric data of the object\n\n    :type: 'ObjectModifiers'\n    "
    motion_path: 'MotionPath' = None
    " Motion Path for this element\n\n    :type: 'MotionPath'\n    "
    parent: 'Object' = None
    " Parent object\n\n    :type: 'Object'\n    "
    parent_bone: str = None
    ' Name of parent bone in case of a bone parenting relation\n\n    :type: str\n    '
    parent_type: typing.Union[str, int] = None
    ' Type of parent relation * ``OBJECT`` Object -- The object is parented to an object. * ``ARMATURE`` Armature. * ``LATTICE`` Lattice -- The object is parented to a lattice. * ``VERTEX`` Vertex -- The object is parented to a vertex. * ``VERTEX_3`` 3 Vertices. * ``BONE`` Bone -- The object is parented to a bone.\n\n    :type: typing.Union[str, int]\n    '
    parent_vertices: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Indices of vertices in case of a vertex parenting relation\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    particle_systems: 'ParticleSystems' = None
    " Particle systems emitted from the object\n\n    :type: 'ParticleSystems'\n    "
    pass_index: int = None
    ' Index number for the "Object Index" render pass\n\n    :type: int\n    '
    pose: 'Pose' = None
    " Current pose for armatures\n\n    :type: 'Pose'\n    "
    rigid_body: 'RigidBodyObject' = None
    " Settings for rigid body simulation\n\n    :type: 'RigidBodyObject'\n    "
    rigid_body_constraint: 'RigidBodyConstraint' = None
    " Constraint constraining rigid bodies\n\n    :type: 'RigidBodyConstraint'\n    "
    rotation_axis_angle: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Angle of Rotation for Axis-Angle rotation representation\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    rotation_euler: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler'] = None
    " Rotation in Eulers\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler']\n    "
    rotation_mode: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    rotation_quaternion: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion'] = None
    " Rotation in Quaternions\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Quaternion']\n    "
    scale: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Scaling of the object\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    shader_effects: 'ObjectShaderFx' = None
    " Effects affecting display of object\n\n    :type: 'ObjectShaderFx'\n    "
    show_all_edges: bool = None
    ' Display all edges for mesh objects\n\n    :type: bool\n    '
    show_axis: bool = None
    " Display the object's origin and axes\n\n    :type: bool\n    "
    show_bounds: bool = None
    " Display the object's bounds\n\n    :type: bool\n    "
    show_empty_image_only_axis_aligned: bool = None
    ' Only display the image when it is aligned with the view axis\n\n    :type: bool\n    '
    show_empty_image_orthographic: bool = None
    ' Display image in orthographic mode\n\n    :type: bool\n    '
    show_empty_image_perspective: bool = None
    ' Display image in perspective mode\n\n    :type: bool\n    '
    show_in_front: bool = None
    ' Make the object display in front of others\n\n    :type: bool\n    '
    show_instancer_for_render: bool = None
    ' Make instancer visible when rendering\n\n    :type: bool\n    '
    show_instancer_for_viewport: bool = None
    ' Make instancer visible in the viewport\n\n    :type: bool\n    '
    show_name: bool = None
    " Display the object's name\n\n    :type: bool\n    "
    show_only_shape_key: bool = None
    ' Always show the current shape for this object\n\n    :type: bool\n    '
    show_texture_space: bool = None
    " Display the object's texture space\n\n    :type: bool\n    "
    show_transparent: bool = None
    ' Display material transparency in the object\n\n    :type: bool\n    '
    show_wire: bool = None
    " Display the object's wireframe over solid shading\n\n    :type: bool\n    "
    soft_body: 'SoftBodySettings' = None
    " Settings for soft body simulation\n\n    :type: 'SoftBodySettings'\n    "
    track_axis: typing.Union[str, int] = None
    " Axis that points in the 'forward' direction (applies to Instance Vertices when Align to Vertex Normal is enabled)\n\n    :type: typing.Union[str, int]\n    "
    type: typing.Union[str, int] = None
    ' Type of object\n\n    :type: typing.Union[str, int]\n    '
    up_axis: typing.Union[str, int] = None
    ' Axis that points in the upward direction (applies to Instance Vertices when Align to Vertex Normal is enabled)\n\n    :type: typing.Union[str, int]\n    '
    use_camera_lock_parent: bool = None
    " View Lock 3D viewport camera transformation affects the object's parent instead\n\n    :type: bool\n    "
    use_dynamic_topology_sculpting: bool = None
    ' \n\n    :type: bool\n    '
    use_empty_image_alpha: bool = None
    ' Use alpha blending instead of alpha test (can produce sorting artifacts)\n\n    :type: bool\n    '
    use_grease_pencil_lights: bool = None
    ' Lights affect grease pencil object\n\n    :type: bool\n    '
    use_instance_faces_scale: bool = None
    ' Scale instance based on face size\n\n    :type: bool\n    '
    use_instance_vertices_rotation: bool = None
    ' Rotate instance according to vertex normal\n\n    :type: bool\n    '
    use_mesh_mirror_x: bool = None
    ' Enable mesh symmetry in the X axis\n\n    :type: bool\n    '
    use_mesh_mirror_y: bool = None
    ' Enable mesh symmetry in the Y axis\n\n    :type: bool\n    '
    use_mesh_mirror_z: bool = None
    ' Enable mesh symmetry in the Z axis\n\n    :type: bool\n    '
    use_shape_key_edit_mode: bool = None
    ' Apply shape keys in edit mode (for meshes only)\n\n    :type: bool\n    '
    vertex_groups: 'VertexGroups' = None
    " Vertex groups of the object\n\n    :type: 'VertexGroups'\n    "
    visible_camera: bool = None
    ' Object visibility to camera rays\n\n    :type: bool\n    '
    visible_diffuse: bool = None
    ' Object visibility to diffuse rays\n\n    :type: bool\n    '
    visible_glossy: bool = None
    ' Object visibility to glossy rays\n\n    :type: bool\n    '
    visible_shadow: bool = None
    ' Object visibility to shadow rays\n\n    :type: bool\n    '
    visible_transmission: bool = None
    ' Object visibility to transmission rays\n\n    :type: bool\n    '
    visible_volume_scatter: bool = None
    ' Object visibility to volume scattering rays\n\n    :type: bool\n    '
    children = None
    ' All the children of this object. .. note:: Takes ``O(len(bpy.data.objects))`` time. (readonly)'
    children_recursive = None
    ' A list of all children from this object. .. note:: Takes ``O(len(bpy.data.objects))`` time. (readonly)'
    users_collection = None
    ' The collections this object is in. (readonly)'
    users_scene = None
    ' The scenes this object is in. .. note:: Takes ``O(len(bpy.data.scenes) * len(bpy.data.objects))`` time. (readonly)'

    def select_get(self, view_layer: 'ViewLayer'=None) -> bool:
        """ Test if the object is selected. The selection state is per view layer

        :param view_layer: Use this instead of the active view layer
        :type view_layer: 'ViewLayer'
        :rtype: bool
        :return: Object selected
        """
        pass

    def select_set(self, state: bool, view_layer: 'ViewLayer'=None):
        """ Select or deselect the object. The selection state is per view layer

        :param state: Selection state to define
        :type state: bool
        :param view_layer: Use this instead of the active view layer
        :type view_layer: 'ViewLayer'
        """
        pass

    def hide_get(self, view_layer: 'ViewLayer'=None) -> bool:
        """ Test if the object is hidden for viewport editing. This hiding state is per view layer

        :param view_layer: Use this instead of the active view layer
        :type view_layer: 'ViewLayer'
        :rtype: bool
        :return: Object hidden
        """
        pass

    def hide_set(self, state: bool, view_layer: 'ViewLayer'=None):
        """ Hide the object for viewport editing. This hiding state is per view layer

        :param state: Hide state to define
        :type state: bool
        :param view_layer: Use this instead of the active view layer
        :type view_layer: 'ViewLayer'
        """
        pass

    def visible_get(self, view_layer: 'ViewLayer'=None, viewport: 'SpaceView3D'=None) -> bool:
        """ Test if the object is visible in the 3D viewport, taking into account all visibility settings

        :param view_layer: Use this instead of the active view layer
        :type view_layer: 'ViewLayer'
        :param viewport: Use this instead of the active 3D viewport
        :type viewport: 'SpaceView3D'
        :rtype: bool
        :return: Object visible
        """
        pass

    def holdout_get(self, view_layer: 'ViewLayer'=None) -> bool:
        """ Test if object is masked in the view layer

        :param view_layer: Use this instead of the active view layer
        :type view_layer: 'ViewLayer'
        :rtype: bool
        :return: Object holdout
        """
        pass

    def indirect_only_get(self, view_layer: 'ViewLayer'=None) -> bool:
        """ Test if object is set to contribute only indirectly (through shadows and reflections) in the view layer

        :param view_layer: Use this instead of the active view layer
        :type view_layer: 'ViewLayer'
        :rtype: bool
        :return: Object indirect only
        """
        pass

    def local_view_get(self, viewport: 'SpaceView3D') -> bool:
        """ Get the local view state for this object

        :param viewport: Viewport in local view
        :type viewport: 'SpaceView3D'
        :rtype: bool
        :return: Object local view state
        """
        pass

    def local_view_set(self, viewport: 'SpaceView3D', state: bool):
        """ Set the local view state for this object

        :param viewport: Viewport in local view
        :type viewport: 'SpaceView3D'
        :param state: Local view state to define
        :type state: bool
        """
        pass

    def visible_in_viewport_get(self, viewport: 'SpaceView3D') -> bool:
        """ Check for local view and local collections for this viewport and object

        :param viewport: Viewport in local collections
        :type viewport: 'SpaceView3D'
        :rtype: bool
        :return: Object viewport visibility
        """
        pass

    def convert_space(self, pose_bone: 'PoseBone'=None, matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']=((0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0)), from_space: typing.Union[str, int]='WORLD', to_space: typing.Union[str, int]='WORLD') -> typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']:
        """ Convert (transform) the given matrix from one space to another

        :param pose_bone: Bone to use to define spaces (may be None, in which case only the two 'WORLD' and 'LOCAL' spaces are usable)
        :type pose_bone: 'PoseBone'
        :param matrix: The matrix to transform
        :type matrix: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']
        :param from_space: The space in which 'matrix' is currently * ``WORLD`` World Space -- The most global space in Blender. * ``POSE`` Pose Space -- The pose space of a bone (its armature's object space). * ``LOCAL_WITH_PARENT`` Local With Parent -- The rest pose local space of a bone (this matrix includes parent transforms). * ``LOCAL`` Local Space -- The local space of an object/bone.
        :type from_space: typing.Union[str, int]
        :param to_space: The space to which you want to transform 'matrix' * ``WORLD`` World Space -- The most global space in Blender. * ``POSE`` Pose Space -- The pose space of a bone (its armature's object space). * ``LOCAL_WITH_PARENT`` Local With Parent -- The rest pose local space of a bone (this matrix includes parent transforms). * ``LOCAL`` Local Space -- The local space of an object/bone.
        :type to_space: typing.Union[str, int]
        :rtype: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']
        :return: The transformed matrix
        """
        pass

    def calc_matrix_camera(self, depsgraph: 'Depsgraph', x: int=1, y: int=1, scale_x: float=1.0, scale_y: float=1.0) -> typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']:
        """ Generate the camera projection matrix of this object (mostly useful for Camera and Light types)

        :param depsgraph: Depsgraph to get evaluated data from
        :type depsgraph: 'Depsgraph'
        :param x: Width of the render area
        :type x: int
        :param y: Height of the render area
        :type y: int
        :param scale_x: Width scaling factor
        :type scale_x: float
        :param scale_y: Height scaling factor
        :type scale_y: float
        :rtype: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']
        :return: The camera projection matrix
        """
        pass

    def camera_fit_coords(self, depsgraph: 'Depsgraph', coordinates: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float], 'mathutils.Vector']):
        """ Compute the coordinate (and scale for ortho cameras) given object should be to 'see' all given coordinates

        :param depsgraph: Depsgraph to get evaluated data from
        :type depsgraph: 'Depsgraph'
        :param coordinates: Coordinates to fit in
        :type coordinates: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float], 'mathutils.Vector']
        """
        pass

    def crazyspace_eval(self, depsgraph: 'Depsgraph', scene: 'Scene'):
        """ Compute orientation mapping between vertices of an original object and object with shape keys and deforming modifiers applied.The evaluation is to be freed with the crazyspace_eval_free function

        :param depsgraph: Dependency Graph, Evaluated dependency graph
        :type depsgraph: 'Depsgraph'
        :param scene: Scene, Scene of the object
        :type scene: 'Scene'
        """
        pass

    def crazyspace_displacement_to_deformed(self, vertex_index: int=0, displacement: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']=(0.0, 0.0, 0.0)) -> typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']:
        """ Convert displacement vector from non-deformed object space to deformed object space

        :param vertex_index: vertex_index
        :type vertex_index: int
        :param displacement: displacement
        :type displacement: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']
        :rtype: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']
        :return: displacement_deformed
        """
        pass

    def crazyspace_displacement_to_original(self, vertex_index: int=0, displacement: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']=(0.0, 0.0, 0.0)) -> typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']:
        """ Free evaluated state of crazyspace

        :param vertex_index: vertex_index
        :type vertex_index: int
        :param displacement: displacement
        :type displacement: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']
        :rtype: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']
        :return: displacement_original
        """
        pass

    def crazyspace_eval_clear(self):
        """ crazyspace_eval_clear

        """
        pass

    def to_mesh(self, preserve_all_data_layers: bool=False, depsgraph: 'Depsgraph'=None) -> 'Mesh':
        """ Create a Mesh data-block from the current state of the object. The object owns the data-block. To force free it use to_mesh_clear(). The result is temporary and can not be used by objects from the main database

        :param preserve_all_data_layers: Preserve all data layers in the mesh, like UV maps and vertex groups. By default Blender only computes the subset of data layers needed for viewport display and rendering, for better performance
        :type preserve_all_data_layers: bool
        :param depsgraph: Dependency Graph, Evaluated dependency graph which is required when preserve_all_data_layers is true
        :type depsgraph: 'Depsgraph'
        :rtype: 'Mesh'
        :return: Mesh created from object
        """
        pass

    def to_mesh_clear(self):
        """ Clears mesh data-block created by to_mesh()

        """
        pass

    def to_curve(self, depsgraph: 'Depsgraph', apply_modifiers: bool=False) -> 'Curve':
        """ Create a Curve data-block from the current state of the object. This only works for curve and text objects. The object owns the data-block. To force free it, use to_curve_clear(). The result is temporary and can not be used by objects from the main database

        :param depsgraph: Dependency Graph, Evaluated dependency graph
        :type depsgraph: 'Depsgraph'
        :param apply_modifiers: Apply the deform modifiers on the control points of the curve. This is only supported for curve objects
        :type apply_modifiers: bool
        :rtype: 'Curve'
        :return: Curve created from object
        """
        pass

    def to_curve_clear(self):
        """ Clears curve data-block created by to_curve()

        """
        pass

    def find_armature(self) -> 'Object':
        """ Find armature influencing this object as a parent or via a modifier

        :rtype: 'Object'
        :return: Armature object influencing this object or NULL
        """
        pass

    def shape_key_add(self, name: str='Key', from_mix: bool=True) -> 'ShapeKey':
        """ Add shape key to this object

        :param name: Unique name for the new keyblock
        :type name: str
        :param from_mix: Create new shape from existing mix of shapes
        :type from_mix: bool
        :rtype: 'ShapeKey'
        :return: New shape keyblock
        """
        pass

    def shape_key_remove(self, key: 'ShapeKey'):
        """ Remove a Shape Key from this object

        :param key: Keyblock to be removed
        :type key: 'ShapeKey'
        """
        pass

    def shape_key_clear(self):
        """ Remove all Shape Keys from this object

        """
        pass

    def ray_cast(self, origin: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'], direction: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'], distance: float=1.70141e+38, depsgraph: 'Depsgraph'=None):
        """ Cast a ray onto evaluated geometry, in object space (using context's or provided depsgraph to get evaluated mesh if needed)

        :param origin: Origin of the ray, in object space
        :type origin: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']
        :param direction: Direction of the ray, in object space
        :type direction: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']
        :param distance: Maximum distance
        :type distance: float
        :param depsgraph: Depsgraph to use to get evaluated data, when called from original object (only needed if current Context's depsgraph is not suitable)
        :type depsgraph: 'Depsgraph'
        """
        pass

    def closest_point_on_mesh(self, origin: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'], distance: float=1.84467e+19, depsgraph: 'Depsgraph'=None):
        """ Find the nearest point on evaluated geometry, in object space (using context's or provided depsgraph to get evaluated mesh if needed)

        :param origin: Point to find closest geometry from (in object space)
        :type origin: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']
        :param distance: Maximum distance
        :type distance: float
        :param depsgraph: Depsgraph to use to get evaluated data, when called from original object (only needed if current Context's depsgraph is not suitable)
        :type depsgraph: 'Depsgraph'
        """
        pass

    def is_modified(self, scene: 'Scene', settings: typing.Union[str, int]) -> bool:
        """ Determine if this object is modified from the base mesh data

        :param scene: Scene in which to check the object
        :type scene: 'Scene'
        :param settings: Modifier settings to apply * ``PREVIEW`` Preview -- Apply modifier preview settings. * ``RENDER`` Render -- Apply modifier render settings.
        :type settings: typing.Union[str, int]
        :rtype: bool
        :return: Whether the object is modified
        """
        pass

    def is_deform_modified(self, scene: 'Scene', settings: typing.Union[str, int]) -> bool:
        """ Determine if this object is modified by a deformation from the base mesh data

        :param scene: Scene in which to check the object
        :type scene: 'Scene'
        :param settings: Modifier settings to apply * ``PREVIEW`` Preview -- Apply modifier preview settings. * ``RENDER`` Render -- Apply modifier render settings.
        :type settings: typing.Union[str, int]
        :rtype: bool
        :return: Whether the object is deform-modified
        """
        pass

    def update_from_editmode(self) -> bool:
        """ Load the objects edit-mode data into the object data

        :rtype: bool
        :return: Success
        """
        pass

    def cache_release(self):
        """ Release memory used by caches associated with this object. Intended to be used by render engines only

        """
        pass

    def generate_gpencil_strokes(self, grease_pencil_object: 'Object', use_collections: bool=True, scale_thickness: float=1.0, sample: float=0.0) -> bool:
        """ Convert a curve object to grease pencil strokes.

        :param grease_pencil_object: Grease Pencil object used to create new strokes
        :type grease_pencil_object: 'Object'
        :param use_collections: Use Collections
        :type use_collections: bool
        :param scale_thickness: Thickness scaling factor
        :type scale_thickness: float
        :param sample: Sample distance, zero to disable
        :type sample: float
        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PaintCurve(ID, bpy_struct):

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Palette(ID, bpy_struct):
    colors: 'PaletteColors' = None
    " \n\n    :type: 'PaletteColors'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ParticleSettings(ID, bpy_struct):
    """ Particle settings, reusable by multiple particle systems
    """
    active_instanceweight: 'ParticleDupliWeight' = None
    " \n\n    :type: 'ParticleDupliWeight'\n    "
    active_instanceweight_index: int = None
    ' \n\n    :type: int\n    '
    active_texture: 'Texture' = None
    " Active texture slot being displayed\n\n    :type: 'Texture'\n    "
    active_texture_index: int = None
    ' Index of active texture slot\n\n    :type: int\n    '
    adaptive_angle: int = None
    ' How many degrees path has to curve to make another render segment\n\n    :type: int\n    '
    adaptive_pixel: int = None
    ' How many pixels path has to cover to make another render segment\n\n    :type: int\n    '
    angular_velocity_factor: float = None
    ' Angular velocity amount (in radians per second)\n\n    :type: float\n    '
    angular_velocity_mode: typing.Union[str, int] = None
    ' What axis is used to change particle rotation with time\n\n    :type: typing.Union[str, int]\n    '
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    apply_effector_to_children: bool = None
    ' Apply effectors to children\n\n    :type: bool\n    '
    apply_guide_to_children: bool = None
    ' \n\n    :type: bool\n    '
    bending_random: float = None
    ' Random stiffness of hairs\n\n    :type: float\n    '
    boids: 'BoidSettings' = None
    " \n\n    :type: 'BoidSettings'\n    "
    branch_threshold: float = None
    ' Threshold of branching\n\n    :type: float\n    '
    brownian_factor: float = None
    ' Amount of random, erratic particle movement\n\n    :type: float\n    '
    child_length: float = None
    ' Length of child paths\n\n    :type: float\n    '
    child_length_threshold: float = None
    ' Amount of particles left untouched by child path length\n\n    :type: float\n    '
    child_nbr: int = None
    ' Number of children per parent\n\n    :type: int\n    '
    child_parting_factor: float = None
    ' Create parting in the children based on parent strands\n\n    :type: float\n    '
    child_parting_max: float = None
    ' Maximum root to tip angle (tip distance/root distance for long hair)\n\n    :type: float\n    '
    child_parting_min: float = None
    ' Minimum root to tip angle (tip distance/root distance for long hair)\n\n    :type: float\n    '
    child_radius: float = None
    ' Radius of children around parent\n\n    :type: float\n    '
    child_roundness: float = None
    ' Roundness of children around parent\n\n    :type: float\n    '
    child_size: float = None
    ' A multiplier for the child particle size\n\n    :type: float\n    '
    child_size_random: float = None
    ' Random variation to the size of the child particles\n\n    :type: float\n    '
    child_type: typing.Union[str, int] = None
    ' Create child particles\n\n    :type: typing.Union[str, int]\n    '
    clump_curve: 'CurveMapping' = None
    " Curve defining clump tapering\n\n    :type: 'CurveMapping'\n    "
    clump_factor: float = None
    ' Amount of clumping\n\n    :type: float\n    '
    clump_noise_size: float = None
    ' Size of clump noise\n\n    :type: float\n    '
    clump_shape: float = None
    ' Shape of clumping\n\n    :type: float\n    '
    collision_collection: 'Collection' = None
    " Limit colliders to this collection\n\n    :type: 'Collection'\n    "
    color_maximum: float = None
    ' Maximum length of the particle color vector\n\n    :type: float\n    '
    count: int = None
    ' Total number of particles\n\n    :type: int\n    '
    courant_target: float = None
    ' The relative distance a particle can move before requiring more subframes (target Courant number); 0.01 to 0.3 is the recommended range\n\n    :type: float\n    '
    create_long_hair_children: bool = None
    ' Calculate children that suit long hair well\n\n    :type: bool\n    '
    damping: float = None
    ' Amount of damping\n\n    :type: float\n    '
    display_color: typing.Union[str, int] = None
    ' Display additional particle data as a color\n\n    :type: typing.Union[str, int]\n    '
    display_method: typing.Union[str, int] = None
    ' How particles are displayed in viewport\n\n    :type: typing.Union[str, int]\n    '
    display_percentage: int = None
    ' Percentage of particles to display in 3D view\n\n    :type: int\n    '
    display_size: float = None
    ' Size of particles on viewport\n\n    :type: float\n    '
    display_step: int = None
    ' How many steps paths are displayed with (power of 2)\n\n    :type: int\n    '
    distribution: typing.Union[str, int] = None
    ' How to distribute particles on selected element\n\n    :type: typing.Union[str, int]\n    '
    drag_factor: float = None
    ' Amount of air drag\n\n    :type: float\n    '
    effect_hair: float = None
    ' Hair stiffness for effectors\n\n    :type: float\n    '
    effector_amount: int = None
    ' How many particles are effectors (0 is all particles)\n\n    :type: int\n    '
    effector_weights: 'EffectorWeights' = None
    " \n\n    :type: 'EffectorWeights'\n    "
    emit_from: typing.Union[str, int] = None
    ' Where to emit particles from\n\n    :type: typing.Union[str, int]\n    '
    factor_random: float = None
    ' Give the starting velocity a random variation\n\n    :type: float\n    '
    fluid: 'SPHFluidSettings' = None
    " \n\n    :type: 'SPHFluidSettings'\n    "
    force_field_1: 'FieldSettings' = None
    " \n\n    :type: 'FieldSettings'\n    "
    force_field_2: 'FieldSettings' = None
    " \n\n    :type: 'FieldSettings'\n    "
    frame_end: float = None
    ' Frame number to stop emitting particles\n\n    :type: float\n    '
    frame_start: float = None
    ' Frame number to start emitting particles\n\n    :type: float\n    '
    grid_random: float = None
    ' Add random offset to the grid locations\n\n    :type: float\n    '
    grid_resolution: int = None
    ' The resolution of the particle grid\n\n    :type: int\n    '
    hair_length: float = None
    ' Length of the hair\n\n    :type: float\n    '
    hair_step: int = None
    ' Number of hair segments\n\n    :type: int\n    '
    hexagonal_grid: bool = None
    ' Create the grid in a hexagonal pattern\n\n    :type: bool\n    '
    instance_collection: 'Collection' = None
    " Show objects in this collection in place of particles\n\n    :type: 'Collection'\n    "
    instance_object: 'Object' = None
    " Show this object in place of particles\n\n    :type: 'Object'\n    "
    instance_weights: bpy_prop_collection['ParticleDupliWeight'] = None
    " Weights for all of the objects in the instance collection\n\n    :type: bpy_prop_collection['ParticleDupliWeight']\n    "
    integrator: typing.Union[str, int] = None
    ' Algorithm used to calculate physics, from the fastest to the most stable and accurate: Midpoint, Euler, Verlet, RK4\n\n    :type: typing.Union[str, int]\n    '
    invert_grid: bool = None
    ' Invert what is considered object and what is not\n\n    :type: bool\n    '
    is_fluid: bool = None
    ' Particles were created by a fluid simulation\n\n    :type: bool\n    '
    jitter_factor: float = None
    ' Amount of jitter applied to the sampling\n\n    :type: float\n    '
    keyed_loops: int = None
    ' Number of times the keys are looped\n\n    :type: int\n    '
    keys_step: int = None
    ' \n\n    :type: int\n    '
    kink: typing.Union[str, int] = None
    ' Type of periodic offset on the path\n\n    :type: typing.Union[str, int]\n    '
    kink_amplitude: float = None
    ' The amplitude of the offset\n\n    :type: float\n    '
    kink_amplitude_clump: float = None
    ' How much clump affects kink amplitude\n\n    :type: float\n    '
    kink_amplitude_random: float = None
    ' Random variation of the amplitude\n\n    :type: float\n    '
    kink_axis: typing.Union[str, int] = None
    ' Which axis to use for offset\n\n    :type: typing.Union[str, int]\n    '
    kink_axis_random: float = None
    ' Random variation of the orientation\n\n    :type: float\n    '
    kink_extra_steps: int = None
    ' Extra steps for resolution of special kink features\n\n    :type: int\n    '
    kink_flat: float = None
    ' How flat the hairs are\n\n    :type: float\n    '
    kink_frequency: float = None
    ' The frequency of the offset (1/total length)\n\n    :type: float\n    '
    kink_shape: float = None
    ' Adjust the offset to the beginning/end\n\n    :type: float\n    '
    length_random: float = None
    ' Give path length a random variation\n\n    :type: float\n    '
    lifetime: float = None
    ' Life span of the particles\n\n    :type: float\n    '
    lifetime_random: float = None
    ' Give the particle life a random variation\n\n    :type: float\n    '
    line_length_head: float = None
    " Length of the line's head\n\n    :type: float\n    "
    line_length_tail: float = None
    " Length of the line's tail\n\n    :type: float\n    "
    lock_boids_to_surface: bool = None
    ' Constrain boids to a surface\n\n    :type: bool\n    '
    mass: float = None
    ' Mass of the particles\n\n    :type: float\n    '
    material: int = None
    ' Index of material slot used for rendering particles\n\n    :type: int\n    '
    material_slot: typing.Union[str, int] = None
    ' Material slot used for rendering particles\n\n    :type: typing.Union[str, int]\n    '
    normal_factor: float = None
    ' Let the surface normal give the particle a starting velocity\n\n    :type: float\n    '
    object_align_factor: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Let the emitter object orientation give the particle a starting velocity\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    object_factor: float = None
    ' Let the object give the particle a starting velocity\n\n    :type: float\n    '
    particle_factor: float = None
    ' Let the target particle give the particle a starting velocity\n\n    :type: float\n    '
    particle_size: float = None
    ' The size of the particles\n\n    :type: float\n    '
    path_end: float = None
    ' End time of path\n\n    :type: float\n    '
    path_start: float = None
    ' Starting time of path\n\n    :type: float\n    '
    phase_factor: float = None
    ' Rotation around the chosen orientation axis\n\n    :type: float\n    '
    phase_factor_random: float = None
    ' Randomize rotation around the chosen orientation axis\n\n    :type: float\n    '
    physics_type: typing.Union[str, int] = None
    ' Particle physics type\n\n    :type: typing.Union[str, int]\n    '
    radius_scale: float = None
    ' Multiplier of diameter properties\n\n    :type: float\n    '
    react_event: typing.Union[str, int] = None
    ' The event of target particles to react on\n\n    :type: typing.Union[str, int]\n    '
    reactor_factor: float = None
    " Let the vector away from the target particle's location give the particle a starting velocity\n\n    :type: float\n    "
    render_step: int = None
    ' How many steps paths are rendered with (power of 2)\n\n    :type: int\n    '
    render_type: typing.Union[str, int] = None
    ' How particles are rendered\n\n    :type: typing.Union[str, int]\n    '
    rendered_child_count: int = None
    ' Number of children per parent for rendering\n\n    :type: int\n    '
    root_radius: float = None
    ' Strand diameter width at the root\n\n    :type: float\n    '
    rotation_factor_random: float = None
    ' Randomize particle orientation\n\n    :type: float\n    '
    rotation_mode: typing.Union[str, int] = None
    " Particle orientation axis (does not affect Explode modifier's results)\n\n    :type: typing.Union[str, int]\n    "
    roughness_1: float = None
    ' Amount of location dependent roughness\n\n    :type: float\n    '
    roughness_1_size: float = None
    ' Size of location dependent roughness\n\n    :type: float\n    '
    roughness_2: float = None
    ' Amount of random roughness\n\n    :type: float\n    '
    roughness_2_size: float = None
    ' Size of random roughness\n\n    :type: float\n    '
    roughness_2_threshold: float = None
    ' Amount of particles left untouched by random roughness\n\n    :type: float\n    '
    roughness_curve: 'CurveMapping' = None
    " Curve defining roughness\n\n    :type: 'CurveMapping'\n    "
    roughness_end_shape: float = None
    ' Shape of endpoint roughness\n\n    :type: float\n    '
    roughness_endpoint: float = None
    ' Amount of endpoint roughness\n\n    :type: float\n    '
    shape: float = None
    ' Strand shape parameter\n\n    :type: float\n    '
    show_guide_hairs: bool = None
    ' Show guide hairs\n\n    :type: bool\n    '
    show_hair_grid: bool = None
    ' Show hair simulation grid\n\n    :type: bool\n    '
    show_health: bool = None
    ' Display boid health\n\n    :type: bool\n    '
    show_number: bool = None
    ' Show particle number\n\n    :type: bool\n    '
    show_size: bool = None
    ' Show particle size\n\n    :type: bool\n    '
    show_unborn: bool = None
    ' Show particles before they are emitted\n\n    :type: bool\n    '
    show_velocity: bool = None
    ' Show particle velocity\n\n    :type: bool\n    '
    size_random: float = None
    ' Give the particle size a random variation\n\n    :type: float\n    '
    subframes: int = None
    ' Subframes to simulate for improved stability and finer granularity simulations (dt = timestep / (subframes + 1))\n\n    :type: int\n    '
    tangent_factor: float = None
    ' Let the surface tangent give the particle a starting velocity\n\n    :type: float\n    '
    tangent_phase: float = None
    ' Rotate the surface tangent\n\n    :type: float\n    '
    texture_slots: 'ParticleSettingsTextureSlots' = None
    " Texture slots defining the mapping and influence of textures\n\n    :type: 'ParticleSettingsTextureSlots'\n    "
    time_tweak: float = None
    ' A multiplier for physics timestep (1.0 means one frame = 1/25 seconds)\n\n    :type: float\n    '
    timestep: float = None
    ' The simulation timestep per frame (seconds per frame)\n\n    :type: float\n    '
    tip_radius: float = None
    ' Strand diameter width at the tip\n\n    :type: float\n    '
    trail_count: int = None
    ' Number of trail particles\n\n    :type: int\n    '
    twist: float = None
    ' Number of turns around parent along the strand\n\n    :type: float\n    '
    twist_curve: 'CurveMapping' = None
    " Curve defining twist\n\n    :type: 'CurveMapping'\n    "
    type: typing.Union[str, int] = None
    ' Particle type\n\n    :type: typing.Union[str, int]\n    '
    use_absolute_path_time: bool = None
    ' Path timing is in absolute frames\n\n    :type: bool\n    '
    use_adaptive_subframes: bool = None
    ' Automatically set the number of subframes\n\n    :type: bool\n    '
    use_advanced_hair: bool = None
    ' Use full physics calculations for growing hair\n\n    :type: bool\n    '
    use_close_tip: bool = None
    ' Set tip radius to zero\n\n    :type: bool\n    '
    use_clump_curve: bool = None
    ' Use a curve to define clump tapering\n\n    :type: bool\n    '
    use_clump_noise: bool = None
    ' Create random clumps around the parent\n\n    :type: bool\n    '
    use_collection_count: bool = None
    ' Use object multiple times in the same collection\n\n    :type: bool\n    '
    use_collection_pick_random: bool = None
    ' Pick objects from collection randomly\n\n    :type: bool\n    '
    use_dead: bool = None
    ' Show particles after they have died\n\n    :type: bool\n    '
    use_die_on_collision: bool = None
    ' Particles die when they collide with a deflector object\n\n    :type: bool\n    '
    use_dynamic_rotation: bool = None
    ' Particle rotations are affected by collisions and effectors\n\n    :type: bool\n    '
    use_emit_random: bool = None
    ' Emit in random order of elements\n\n    :type: bool\n    '
    use_even_distribution: bool = None
    ' Use even distribution from faces based on face areas or edge lengths\n\n    :type: bool\n    '
    use_global_instance: bool = None
    " Use object's global coordinates for duplication\n\n    :type: bool\n    "
    use_hair_bspline: bool = None
    ' Interpolate hair using B-Splines\n\n    :type: bool\n    '
    use_modifier_stack: bool = None
    ' Emit particles from mesh with modifiers applied (must use same subdivision surface level for viewport and render for correct results)\n\n    :type: bool\n    '
    use_multiply_size_mass: bool = None
    ' Multiply mass by particle size\n\n    :type: bool\n    '
    use_parent_particles: bool = None
    ' Render parent particles\n\n    :type: bool\n    '
    use_react_multiple: bool = None
    ' React multiple times\n\n    :type: bool\n    '
    use_react_start_end: bool = None
    ' Give birth to unreacted particles eventually\n\n    :type: bool\n    '
    use_regrow_hair: bool = None
    ' Regrow hair for each frame\n\n    :type: bool\n    '
    use_render_adaptive: bool = None
    ' Display steps of the particle path\n\n    :type: bool\n    '
    use_rotation_instance: bool = None
    " Use object's rotation for duplication (global x-axis is aligned particle rotation axis)\n\n    :type: bool\n    "
    use_rotations: bool = None
    ' Calculate particle rotations\n\n    :type: bool\n    '
    use_roughness_curve: bool = None
    ' Use a curve to define roughness\n\n    :type: bool\n    '
    use_scale_instance: bool = None
    " Use object's scale for duplication\n\n    :type: bool\n    "
    use_self_effect: bool = None
    ' Particle effectors affect themselves\n\n    :type: bool\n    '
    use_size_deflect: bool = None
    " Use particle's size in deflection\n\n    :type: bool\n    "
    use_strand_primitive: bool = None
    ' Use the strand primitive for rendering\n\n    :type: bool\n    '
    use_twist_curve: bool = None
    ' Use a curve to define twist\n\n    :type: bool\n    '
    use_velocity_length: bool = None
    ' Multiply line length by particle speed\n\n    :type: bool\n    '
    use_whole_collection: bool = None
    ' Use whole collection at once\n\n    :type: bool\n    '
    userjit: int = None
    ' Emission locations per face (0 = automatic)\n\n    :type: int\n    '
    virtual_parents: float = None
    ' Relative amount of virtual parents\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PointCloud(ID, bpy_struct):
    """ Point cloud data-block
    """
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    attributes: 'AttributeGroup' = None
    " Geometry attributes\n\n    :type: 'AttributeGroup'\n    "
    color_attributes: 'AttributeGroup' = None
    " Geometry color attributes\n\n    :type: 'AttributeGroup'\n    "
    materials: 'IDMaterials' = None
    " \n\n    :type: 'IDMaterials'\n    "
    points: bpy_prop_collection['Point'] = None
    " \n\n    :type: bpy_prop_collection['Point']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Scene(ID, bpy_struct):
    """ Scene data-block, consisting in objects and defining time and render related settings
    """
    active_clip: 'MovieClip' = None
    " Active Movie Clip that can be used by motion tracking constraints or as a camera's background image\n\n    :type: 'MovieClip'\n    "
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    audio_distance_model: typing.Union[str, int] = None
    ' Distance model for distance attenuation calculation * ``NONE`` None -- No distance attenuation. * ``INVERSE`` Inverse -- Inverse distance model. * ``INVERSE_CLAMPED`` Inverse Clamped -- Inverse distance model with clamping. * ``LINEAR`` Linear -- Linear distance model. * ``LINEAR_CLAMPED`` Linear Clamped -- Linear distance model with clamping. * ``EXPONENT`` Exponential -- Exponential distance model. * ``EXPONENT_CLAMPED`` Exponential Clamped -- Exponential distance model with clamping.\n\n    :type: typing.Union[str, int]\n    '
    audio_doppler_factor: float = None
    ' Pitch factor for Doppler effect calculation\n\n    :type: float\n    '
    audio_doppler_speed: float = None
    ' Speed of sound for Doppler effect calculation\n\n    :type: float\n    '
    audio_volume: float = None
    ' Audio volume\n\n    :type: float\n    '
    background_set: 'Scene' = None
    " Background set scene\n\n    :type: 'Scene'\n    "
    camera: 'Object' = None
    " Active camera, used for rendering the scene\n\n    :type: 'Object'\n    "
    collection: 'Collection' = None
    " Scene root collection that owns all the objects and other collections instantiated in the scene\n\n    :type: 'Collection'\n    "
    cursor: 'View3DCursor' = None
    " \n\n    :type: 'View3DCursor'\n    "
    cycles: typing.Any = None
    ' Cycles render settings\n\n    :type: typing.Any\n    '
    cycles_curves: typing.Any = None
    ' Cycles curves rendering settings\n\n    :type: typing.Any\n    '
    display: 'SceneDisplay' = None
    " Scene display settings for 3D viewport\n\n    :type: 'SceneDisplay'\n    "
    display_settings: 'ColorManagedDisplaySettings' = None
    " Settings of device saved image would be displayed on\n\n    :type: 'ColorManagedDisplaySettings'\n    "
    eevee: 'SceneEEVEE' = None
    " Eevee settings for the scene\n\n    :type: 'SceneEEVEE'\n    "
    frame_current: int = None
    ' Current frame, to update animation data from python frame_set() instead\n\n    :type: int\n    '
    frame_current_final: float = None
    ' Current frame with subframe and time remapping applied\n\n    :type: float\n    '
    frame_end: int = None
    ' Final frame of the playback/rendering range\n\n    :type: int\n    '
    frame_float: float = None
    ' \n\n    :type: float\n    '
    frame_preview_end: int = None
    ' Alternative end frame for UI playback\n\n    :type: int\n    '
    frame_preview_start: int = None
    ' Alternative start frame for UI playback\n\n    :type: int\n    '
    frame_start: int = None
    ' First frame of the playback/rendering range\n\n    :type: int\n    '
    frame_step: int = None
    ' Number of frames to skip forward while rendering/playing back each frame\n\n    :type: int\n    '
    frame_subframe: float = None
    ' \n\n    :type: float\n    '
    gravity: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Constant acceleration in a given direction\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    grease_pencil: 'GreasePencil' = None
    " Grease Pencil data-block used for annotations in the 3D view\n\n    :type: 'GreasePencil'\n    "
    grease_pencil_settings: 'SceneGpencil' = None
    " Grease Pencil settings for the scene\n\n    :type: 'SceneGpencil'\n    "
    is_nla_tweakmode: bool = None
    ' Whether there is any action referenced by NLA being edited (strictly read-only)\n\n    :type: bool\n    '
    keying_sets: 'KeyingSets' = None
    " Absolute Keying Sets for this Scene\n\n    :type: 'KeyingSets'\n    "
    keying_sets_all: 'KeyingSetsAll' = None
    " All Keying Sets available for use (Builtins and Absolute Keying Sets for this Scene)\n\n    :type: 'KeyingSetsAll'\n    "
    lock_frame_selection_to_range: bool = None
    " Don't allow frame to be selected with mouse outside of frame range\n\n    :type: bool\n    "
    node_tree: 'NodeTree' = None
    " Compositing node tree\n\n    :type: 'NodeTree'\n    "
    objects: 'SceneObjects' = None
    " \n\n    :type: 'SceneObjects'\n    "
    render: 'RenderSettings' = None
    " \n\n    :type: 'RenderSettings'\n    "
    rigidbody_world: 'RigidBodyWorld' = None
    " \n\n    :type: 'RigidBodyWorld'\n    "
    safe_areas: 'DisplaySafeAreas' = None
    " \n\n    :type: 'DisplaySafeAreas'\n    "
    sequence_editor: 'SequenceEditor' = None
    " \n\n    :type: 'SequenceEditor'\n    "
    sequencer_colorspace_settings: 'ColorManagedSequencerColorspaceSettings' = None
    " Settings of color space sequencer is working in\n\n    :type: 'ColorManagedSequencerColorspaceSettings'\n    "
    show_keys_from_selected_only: bool = None
    ' Consider keyframes for active object and/or its selected bones only (in timeline and when jumping between keyframes)\n\n    :type: bool\n    '
    show_subframe: bool = None
    ' Show current scene subframe and allow set it using interface tools\n\n    :type: bool\n    '
    sync_mode: typing.Union[str, int] = None
    ' How to sync playback * ``NONE`` Play Every Frame -- Do not sync, play every frame. * ``FRAME_DROP`` Frame Dropping -- Drop frames if playback is too slow. * ``AUDIO_SYNC`` Sync to Audio -- Sync to audio playback, dropping frames.\n\n    :type: typing.Union[str, int]\n    '
    timeline_markers: 'TimelineMarkers' = None
    " Markers used in all timelines for the current scene\n\n    :type: 'TimelineMarkers'\n    "
    tool_settings: 'ToolSettings' = None
    " \n\n    :type: 'ToolSettings'\n    "
    transform_orientation_slots: bpy_prop_collection['TransformOrientationSlot'] = None
    " \n\n    :type: bpy_prop_collection['TransformOrientationSlot']\n    "
    unit_settings: 'UnitSettings' = None
    " Unit editing settings\n\n    :type: 'UnitSettings'\n    "
    use_audio: bool = None
    ' Play back of audio from Sequence Editor will be muted\n\n    :type: bool\n    '
    use_audio_scrub: bool = None
    ' Play audio from Sequence Editor while scrubbing\n\n    :type: bool\n    '
    use_gravity: bool = None
    ' Use global gravity for all dynamics\n\n    :type: bool\n    '
    use_nodes: bool = None
    ' Enable the compositing node tree\n\n    :type: bool\n    '
    use_preview_range: bool = None
    ' Use an alternative start/end frame range for animation playback and view renders\n\n    :type: bool\n    '
    use_stamp_note: str = None
    ' User defined note for the render stamping\n\n    :type: str\n    '
    view_layers: 'ViewLayers' = None
    " \n\n    :type: 'ViewLayers'\n    "
    view_settings: 'ColorManagedViewSettings' = None
    " Color management settings applied on image before saving\n\n    :type: 'ColorManagedViewSettings'\n    "
    world: 'World' = None
    " World used for rendering the scene\n\n    :type: 'World'\n    "

    @classmethod
    def update_render_engine(cls):
        """ Trigger a render engine update

        """
        pass

    def statistics(self, view_layer: 'ViewLayer') -> str:
        """ statistics

        :param view_layer: View Layer
        :type view_layer: 'ViewLayer'
        :rtype: str
        :return: Statistics
        """
        pass

    def frame_set(self, frame: int, subframe: float=0.0):
        """ Set scene frame updating all objects immediately

        :param frame: Frame number to set
        :type frame: int
        :param subframe: Subframe time, between 0.0 and 1.0
        :type subframe: float
        """
        pass

    def uvedit_aspect(self, object: 'Object') -> typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']:
        """ Get uv aspect for current object

        :param object: Object
        :type object: 'Object'
        :rtype: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']
        :return: aspect
        """
        pass

    def ray_cast(self, depsgraph: 'Depsgraph', origin: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'], direction: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'], distance: float=1.70141e+38):
        """ Cast a ray onto in object space

        :param depsgraph: The current dependency graph
        :type depsgraph: 'Depsgraph'
        :param origin: 
        :type origin: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']
        :param direction: 
        :type direction: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']
        :param distance: Maximum distance
        :type distance: float
        """
        pass

    def sequence_editor_create(self) -> 'SequenceEditor':
        """ Ensure sequence editor is valid in this scene

        :rtype: 'SequenceEditor'
        :return: New sequence editor data or NULL
        """
        pass

    def sequence_editor_clear(self):
        """ Clear sequence editor in this scene

        """
        pass

    def alembic_export(self, filepath: str, frame_start: int=1, frame_end: int=1, xform_samples: int=1, geom_samples: int=1, shutter_open: float=0.0, shutter_close: float=1.0, selected_only: bool=False, uvs: bool=True, normals: bool=True, vcolors: bool=False, apply_subdiv: bool=True, flatten: bool=False, visible_objects_only: bool=False, face_sets: bool=False, subdiv_schema: bool=False, export_hair: bool=True, export_particles: bool=True, packuv: bool=False, scale: float=1.0, triangulate: bool=False, quad_method: typing.Union[str, int]='BEAUTY', ngon_method: typing.Union[str, int]='BEAUTY'):
        """ Export to Alembic file (deprecated, use the Alembic export operator)

        :param filepath: File Path, File path to write Alembic file
        :type filepath: str
        :param frame_start: Start, Start Frame
        :type frame_start: int
        :param frame_end: End, End Frame
        :type frame_end: int
        :param xform_samples: Xform samples, Transform samples per frame
        :type xform_samples: int
        :param geom_samples: Geom samples, Geometry samples per frame
        :type geom_samples: int
        :param shutter_open: Shutter open
        :type shutter_open: float
        :param shutter_close: Shutter close
        :type shutter_close: float
        :param selected_only: Selected only, Export only selected objects
        :type selected_only: bool
        :param uvs: UVs, Export UVs
        :type uvs: bool
        :param normals: Normals, Export normals
        :type normals: bool
        :param vcolors: Color Attributes, Export color attributes
        :type vcolors: bool
        :param apply_subdiv: Subsurfs as meshes, Export subdivision surfaces as meshes
        :type apply_subdiv: bool
        :param flatten: Flatten hierarchy, Flatten hierarchy
        :type flatten: bool
        :param visible_objects_only: Visible layers only, Export only objects in visible layers
        :type visible_objects_only: bool
        :param face_sets: Facesets, Export face sets
        :type face_sets: bool
        :param subdiv_schema: Use Alembic subdivision Schema, Use Alembic subdivision Schema
        :type subdiv_schema: bool
        :param export_hair: Export Hair, Exports hair particle systems as animated curves
        :type export_hair: bool
        :param export_particles: Export Particles, Exports non-hair particle systems
        :type export_particles: bool
        :param packuv: Export with packed UV islands, Export with packed UV islands
        :type packuv: bool
        :param scale: Scale, Value by which to enlarge or shrink the objects with respect to the world's origin
        :type scale: float
        :param triangulate: Triangulate, Export polygons (quads and n-gons) as triangles
        :type triangulate: bool
        :param quad_method: Quad Method, Method for splitting the quads into triangles
        :type quad_method: typing.Union[str, int]
        :param ngon_method: N-gon Method, Method for splitting the n-gons into triangles
        :type ngon_method: typing.Union[str, int]
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Screen(ID, bpy_struct):
    """ Screen data-block, defining the layout of areas in a window
    """
    areas: bpy_prop_collection['Area'] = None
    " Areas the screen is subdivided into\n\n    :type: bpy_prop_collection['Area']\n    "
    is_animation_playing: bool = None
    ' Animation playback is active\n\n    :type: bool\n    '
    is_scrubbing: bool = None
    ' True when the user is scrubbing through time\n\n    :type: bool\n    '
    is_temporary: bool = None
    ' \n\n    :type: bool\n    '
    show_fullscreen: bool = None
    ' An area is maximized, filling this screen\n\n    :type: bool\n    '
    show_statusbar: bool = None
    ' Show status bar\n\n    :type: bool\n    '
    use_follow: bool = None
    ' Follow current frame in editors\n\n    :type: bool\n    '
    use_play_3d_editors: bool = None
    ' \n\n    :type: bool\n    '
    use_play_animation_editors: bool = None
    ' \n\n    :type: bool\n    '
    use_play_clip_editors: bool = None
    ' \n\n    :type: bool\n    '
    use_play_image_editors: bool = None
    ' \n\n    :type: bool\n    '
    use_play_node_editors: bool = None
    ' \n\n    :type: bool\n    '
    use_play_properties_editors: bool = None
    ' \n\n    :type: bool\n    '
    use_play_sequence_editors: bool = None
    ' \n\n    :type: bool\n    '
    use_play_top_left_3d_editor: bool = None
    ' \n\n    :type: bool\n    '

    def statusbar_info(self) -> str:
        """ statusbar_info

        :rtype: str
        :return: Status Bar Info
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Simulation(ID, bpy_struct):
    """ Simulation data-block
    """
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    node_tree: 'NodeTree' = None
    " Node tree defining the simulation\n\n    :type: 'NodeTree'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Sound(ID, bpy_struct):
    """ Sound data-block referencing an external or packed sound file
    """
    channels: typing.Union[str, int] = None
    ' Definition of audio channels * ``INVALID`` Invalid -- Invalid. * ``MONO`` Mono -- Mono. * ``STEREO`` Stereo -- Stereo. * ``STEREO_LFE`` Stereo LFE -- Stereo FX. * ``CHANNELS_4`` 4 Channels -- 4 Channels. * ``CHANNELS_5`` 5 Channels -- 5 Channels. * ``SURROUND_51`` 5.1 Surround -- 5.1 Surround. * ``SURROUND_61`` 6.1 Surround -- 6.1 Surround. * ``SURROUND_71`` 7.1 Surround -- 7.1 Surround.\n\n    :type: typing.Union[str, int]\n    '
    filepath: str = None
    ' Sound sample file used by this Sound data-block\n\n    :type: str\n    '
    packed_file: 'PackedFile' = None
    " \n\n    :type: 'PackedFile'\n    "
    samplerate: int = None
    ' Samplerate of the audio in Hz\n\n    :type: int\n    '
    use_memory_cache: bool = None
    ' The sound file is decoded and loaded into RAM\n\n    :type: bool\n    '
    use_mono: bool = None
    ' If the file contains multiple audio channels they are rendered to a single one\n\n    :type: bool\n    '
    factory = None
    ' The aud.Factory object of the sound. (readonly)'

    def pack(self):
        """ Pack the sound into the current blend file

        """
        pass

    def unpack(self, method: typing.Union[str, int]='USE_LOCAL'):
        """ Unpack the sound to the samples filename

        :param method: method, How to unpack
        :type method: typing.Union[str, int]
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Speaker(ID, bpy_struct):
    """ Speaker data-block for 3D audio speaker objects
    """
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    attenuation: float = None
    ' How strong the distance affects volume, depending on distance model\n\n    :type: float\n    '
    cone_angle_inner: float = None
    ' Angle of the inner cone, in degrees, inside the cone the volume is 100%\n\n    :type: float\n    '
    cone_angle_outer: float = None
    ' Angle of the outer cone, in degrees, outside this cone the volume is the outer cone volume, between inner and outer cone the volume is interpolated\n\n    :type: float\n    '
    cone_volume_outer: float = None
    ' Volume outside the outer cone\n\n    :type: float\n    '
    distance_max: float = None
    ' Maximum distance for volume calculation, no matter how far away the object is\n\n    :type: float\n    '
    distance_reference: float = None
    ' Reference distance at which volume is 100%\n\n    :type: float\n    '
    muted: bool = None
    ' Mute the speaker\n\n    :type: bool\n    '
    pitch: float = None
    ' Playback pitch of the sound\n\n    :type: float\n    '
    sound: 'Sound' = None
    " Sound data-block used by this speaker\n\n    :type: 'Sound'\n    "
    volume: float = None
    ' How loud the sound is\n\n    :type: float\n    '
    volume_max: float = None
    ' Maximum volume, no matter how near the object is\n\n    :type: float\n    '
    volume_min: float = None
    ' Minimum volume, no matter how far away the object is\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Text(ID, bpy_struct):
    """ Text data-block referencing an external or packed text file
    """
    current_character: int = None
    ' Index of current character in current line, and also start index of character in selection if one exists\n\n    :type: int\n    '
    current_line: 'TextLine' = None
    " Current line, and start line of selection if one exists\n\n    :type: 'TextLine'\n    "
    current_line_index: int = None
    ' Index of current TextLine in TextLine collection\n\n    :type: int\n    '
    filepath: str = None
    ' Filename of the text file\n\n    :type: str\n    '
    indentation: typing.Union[str, int] = None
    ' Use tabs or spaces for indentation * ``TABS`` Tabs -- Indent using tabs. * ``SPACES`` Spaces -- Indent using spaces.\n\n    :type: typing.Union[str, int]\n    '
    is_dirty: bool = None
    ' Text file has been edited since last save\n\n    :type: bool\n    '
    is_in_memory: bool = None
    ' Text file is in memory, without a corresponding file on disk\n\n    :type: bool\n    '
    is_modified: bool = None
    ' Text file on disk is different than the one in memory\n\n    :type: bool\n    '
    lines: bpy_prop_collection['TextLine'] = None
    " Lines of text\n\n    :type: bpy_prop_collection['TextLine']\n    "
    select_end_character: int = None
    ' Index of character after end of selection in the selection end line\n\n    :type: int\n    '
    select_end_line: 'TextLine' = None
    " End line of selection\n\n    :type: 'TextLine'\n    "
    select_end_line_index: int = None
    ' Index of last TextLine in selection\n\n    :type: int\n    '
    use_module: bool = None
    ' Run this text as a Python script on loading\n\n    :type: bool\n    '

    def clear(self):
        """ clear the text block

        """
        pass

    def write(self, text: str):
        """ write text at the cursor location and advance to the end of the text block

        :param text: New text for this data-block
        :type text: str
        """
        pass

    def from_string(self, text: str):
        """ Replace text with this string.

        :param text: 
        :type text: str
        """
        pass

    def as_string(self):
        """ Return the text as a string

        """
        pass

    def is_syntax_highlight_supported(self):
        """ Returns True if the editor supports syntax highlighting for the current text datablock

        """
        pass

    def select_set(self, line_start: int, char_start: int, line_end: int, char_end: int):
        """ Set selection range by line and character index

        :param line_start: Start Line
        :type line_start: int
        :param char_start: Start Character
        :type char_start: int
        :param line_end: End Line
        :type line_end: int
        :param char_end: End Character
        :type char_end: int
        """
        pass

    def cursor_set(self, line: int, character: int=0, select: bool=False):
        """ Set cursor by line and (optionally) character index

        :param line: Line
        :type line: int
        :param character: Character
        :type character: int
        :param select: Select when moving the cursor
        :type select: bool
        """
        pass

    def as_module(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def region_as_string(self, range: typing.Any=None) -> str:
        """ 

        :param range: The region of text to be returned, defaulting to the selection when no range is passed. Each int pair represents a line and column: ((start_line, start_column), (end_line, end_column)) The values match Python's slicing logic (negative values count backwards from the end, the end value is not inclusive).
        :type range: typing.Any
        :rtype: str
        :return: The specified region as a string.
        """
        pass

    def region_from_string(self, body: str, range: typing.Any=None):
        """ 

        :param body: The text to be inserted.
        :type body: str
        :param range: The region of text to be returned, defaulting to the selection when no range is passed. Each int pair represents a line and column: ((start_line, start_column), (end_line, end_column)) The values match Python's slicing logic (negative values count backwards from the end, the end value is not inclusive).
        :type range: typing.Any
        """
        pass

class Texture(ID, bpy_struct):
    """ Texture data-block used by materials, lights, worlds and brushes
    """
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    color_ramp: 'ColorRamp' = None
    " \n\n    :type: 'ColorRamp'\n    "
    contrast: float = None
    ' Adjust the contrast of the texture\n\n    :type: float\n    '
    factor_blue: float = None
    ' \n\n    :type: float\n    '
    factor_green: float = None
    ' \n\n    :type: float\n    '
    factor_red: float = None
    ' \n\n    :type: float\n    '
    intensity: float = None
    ' Adjust the brightness of the texture\n\n    :type: float\n    '
    node_tree: 'NodeTree' = None
    " Node tree for node-based textures\n\n    :type: 'NodeTree'\n    "
    saturation: float = None
    ' Adjust the saturation of colors in the texture\n\n    :type: float\n    '
    type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    use_clamp: bool = None
    ' Set negative texture RGB and intensity values to zero, for some uses like displacement this option can be disabled to get the full range\n\n    :type: bool\n    '
    use_color_ramp: bool = None
    ' Map the texture intensity to the color ramp. Note that the alpha value is used for image textures, enable "Calculate Alpha" for images without an alpha channel\n\n    :type: bool\n    '
    use_nodes: bool = None
    ' Make this a node-based texture\n\n    :type: bool\n    '
    use_preview_alpha: bool = None
    ' Show Alpha in Preview Render\n\n    :type: bool\n    '
    users_material = None
    ' Materials that use this texture (readonly)'
    users_object_modifier = None
    ' Object modifiers that use this texture (readonly)'

    def evaluate(self, value: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']) -> typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']:
        """ Evaluate the texture at the a given coordinate and returns the result

        :param value: The coordinates (x,y,z) of the texture, in case of a 3D texture, the z value is the slice of the texture that is evaluated. For 2D textures such as images, the z value is ignored
        :type value: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']
        :rtype: typing.Union[typing.List[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']
        :return: The result of the texture where (x,y,z,w) are (red, green, blue, intensity). For grayscale textures, often intensity only will be used
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class VectorFont(ID, bpy_struct):
    """ Vector font for Text objects
    """
    filepath: str = None
    ' \n\n    :type: str\n    '
    packed_file: 'PackedFile' = None
    " \n\n    :type: 'PackedFile'\n    "

    def pack(self):
        """ Pack the font into the current blend file

        """
        pass

    def unpack(self, method: typing.Union[str, int]='USE_LOCAL'):
        """ Unpack the font to the samples filename

        :param method: method, How to unpack
        :type method: typing.Union[str, int]
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Volume(ID, bpy_struct):
    """ Volume data-block for 3D volume grids
    """
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    display: 'VolumeDisplay' = None
    " Volume display settings for 3D viewport\n\n    :type: 'VolumeDisplay'\n    "
    filepath: str = None
    ' Volume file used by this Volume data-block\n\n    :type: str\n    '
    frame_duration: int = None
    ' Number of frames of the sequence to use\n\n    :type: int\n    '
    frame_offset: int = None
    ' Offset the number of the frame to use in the animation\n\n    :type: int\n    '
    frame_start: int = None
    ' Global starting frame of the sequence, assuming first has a #1\n\n    :type: int\n    '
    grids: 'VolumeGrids' = None
    " 3D volume grids\n\n    :type: 'VolumeGrids'\n    "
    is_sequence: bool = None
    ' Whether the cache is separated in a series of files\n\n    :type: bool\n    '
    materials: 'IDMaterials' = None
    " \n\n    :type: 'IDMaterials'\n    "
    packed_file: 'PackedFile' = None
    " \n\n    :type: 'PackedFile'\n    "
    render: 'VolumeRender' = None
    " Volume render settings for 3D viewport\n\n    :type: 'VolumeRender'\n    "
    sequence_mode: typing.Union[str, int] = None
    ' Sequence playback mode * ``CLIP`` Clip -- Hide frames outside the specified frame range. * ``EXTEND`` Extend -- Repeat the start frame before, and the end frame after the frame range. * ``REPEAT`` Repeat -- Cycle the frames in the sequence. * ``PING_PONG`` Ping-Pong -- Repeat the frames, reversing the playback direction every other cycle.\n\n    :type: typing.Union[str, int]\n    '
    velocity_grid: str = None
    ' Name of the velocity field, or the base name if the velocity is split into multiple grids\n\n    :type: str\n    '
    velocity_scale: float = None
    ' Factor to control the amount of motion blur\n\n    :type: float\n    '
    velocity_unit: typing.Union[str, int] = None
    " Define how the velocity vectors are interpreted with regard to time, 'frame' means the delta time is 1 frame, 'second' means the delta time is 1 / FPS\n\n    :type: typing.Union[str, int]\n    "
    velocity_x_grid: str = None
    ' Name of the grid for the X axis component of the velocity field if it was split into multiple grids\n\n    :type: str\n    '
    velocity_y_grid: str = None
    ' Name of the grid for the Y axis component of the velocity field if it was split into multiple grids\n\n    :type: str\n    '
    velocity_z_grid: str = None
    ' Name of the grid for the Z axis component of the velocity field if it was split into multiple grids\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class WindowManager(ID, bpy_struct):
    """ Window manager data-block defining open windows and other user interface data
    """
    addon_filter: typing.Union[str, int] = None
    ' Filter add-ons by category\n\n    :type: typing.Union[str, int]\n    '
    addon_search: str = None
    ' Filter by add-on name, author & category\n\n    :type: str\n    '
    addon_support: typing.Union[typing.Set[str], typing.Set[int]] = None
    ' Display support level * ``OFFICIAL`` Official -- Officially supported. * ``COMMUNITY`` Community -- Maintained by community developers. * ``TESTING`` Testing -- Newly contributed scripts (excluded from release builds).\n\n    :type: typing.Union[typing.Set[str], typing.Set[int]]\n    '
    asset_path_dummy: str = None
    ' Full path to the Blender file containing the active asset\n\n    :type: str\n    '
    is_interface_locked: bool = None
    " If true, the interface is currently locked by a running job and data shouldn't be modified from application timers. Otherwise, the running job might conflict with the handler causing unexpected results or even crashes\n\n    :type: bool\n    "
    keyconfigs: 'KeyConfigurations' = None
    " Registered key configurations\n\n    :type: 'KeyConfigurations'\n    "
    operators: bpy_prop_collection['Operator'] = None
    " Operator registry\n\n    :type: bpy_prop_collection['Operator']\n    "
    pose_assets: bpy_prop_collection['AssetHandle'] = None
    " \n\n    :type: bpy_prop_collection['AssetHandle']\n    "
    poselib_flipped: bool = None
    ' \n\n    :type: bool\n    '
    poselib_previous_action: 'Action' = None
    " \n\n    :type: 'Action'\n    "
    preset_name: str = None
    ' Name for new preset\n\n    :type: str\n    '
    windows: bpy_prop_collection['Window'] = None
    " Open windows\n\n    :type: bpy_prop_collection['Window']\n    "
    xr_session_settings: 'XrSessionSettings' = None
    " \n\n    :type: 'XrSessionSettings'\n    "
    xr_session_state: 'XrSessionState' = None
    " Runtime state information about the VR session\n\n    :type: 'XrSessionState'\n    "
    clipboard: str = None
    ' Clipboard text storage.\n\n    :type: str\n    '

    @classmethod
    def fileselect_add(cls, operator: 'Operator'):
        """ Opens a file selector with an operator. The string properties 'filepath', 'filename', 'directory' and a 'files' collection are assigned when present in the operator

        :param operator: Operator to call
        :type operator: 'Operator'
        """
        pass

    @classmethod
    def modal_handler_add(cls, operator: 'Operator') -> bool:
        """ Add a modal handler to the window manager, for the given modal operator (called by invoke() with self, just before returning {'RUNNING_MODAL'})

        :param operator: Operator to call
        :type operator: 'Operator'
        :rtype: bool
        :return: Whether adding the handler was successful
        """
        pass

    def event_timer_add(self, time_step: float, window: 'Window'=None):
        """ Add a timer to the given window, to generate periodic 'TIMER' events

        :param time_step: Time Step, Interval in seconds between timer events
        :type time_step: float
        :param window: Window to attach the timer to, or None
        :type window: 'Window'
        """
        pass

    def event_timer_remove(self, timer: 'Timer'):
        """ event_timer_remove

        :param timer: 
        :type timer: 'Timer'
        """
        pass

    @classmethod
    def gizmo_group_type_ensure(cls, identifier: str):
        """ Activate an existing widget group (when the persistent option isn't set)

        :param identifier: Gizmo group type name
        :type identifier: str
        """
        pass

    @classmethod
    def gizmo_group_type_unlink_delayed(cls, identifier: str):
        """ Unlink a widget group (when the persistent option is set)

        :param identifier: Gizmo group type name
        :type identifier: str
        """
        pass

    def progress_begin(self, min: float, max: float):
        """ Start progress report

        :param min: min, any value in range [0,9999]
        :type min: float
        :param max: max, any value in range [min+1,9998]
        :type max: float
        """
        pass

    def progress_update(self, value: float):
        """ Update the progress feedback

        :param value: value, Any value between min and max as set in progress_begin()
        :type value: float
        """
        pass

    def progress_end(self):
        """ Terminate progress report

        """
        pass

    @classmethod
    def invoke_props_popup(cls, operator: 'Operator', event: 'Event') -> typing.Union[typing.Set[int], typing.Set[str]]:
        """ Operator popup invoke (show operator properties and execute it automatically on changes)

        :param operator: Operator to call
        :type operator: 'Operator'
        :param event: Event
        :type event: 'Event'
        :rtype: typing.Union[typing.Set[int], typing.Set[str]]
        :return: result
        """
        pass

    @classmethod
    def invoke_props_dialog(cls, operator: 'Operator', width: int=300) -> typing.Union[typing.Set[int], typing.Set[str]]:
        """ Operator dialog (non-autoexec popup) invoke (show operator properties and only execute it on click on OK button)

        :param operator: Operator to call
        :type operator: 'Operator'
        :param width: Width of the popup
        :type width: int
        :rtype: typing.Union[typing.Set[int], typing.Set[str]]
        :return: result
        """
        pass

    @classmethod
    def invoke_search_popup(cls, operator: 'Operator'):
        """ Operator search popup invoke which searches values of the operator's `bpy.types.Operator.bl_property` (which must be an EnumProperty), executing it on confirmation

        :param operator: Operator to call
        :type operator: 'Operator'
        """
        pass

    @classmethod
    def invoke_popup(cls, operator: 'Operator', width: int=300) -> typing.Union[typing.Set[int], typing.Set[str]]:
        """ Operator popup invoke (only shows operator's properties, without executing it)

        :param operator: Operator to call
        :type operator: 'Operator'
        :param width: Width of the popup
        :type width: int
        :rtype: typing.Union[typing.Set[int], typing.Set[str]]
        :return: result
        """
        pass

    @classmethod
    def invoke_confirm(cls, operator: 'Operator', event: 'Event') -> typing.Union[typing.Set[int], typing.Set[str]]:
        """ Operator confirmation popup (only to let user confirm the execution, no operator properties shown)

        :param operator: Operator to call
        :type operator: 'Operator'
        :param event: Event
        :type event: 'Event'
        :rtype: typing.Union[typing.Set[int], typing.Set[str]]
        :return: result
        """
        pass

    @classmethod
    def popmenu_begin__internal(cls, title: str, icon: typing.Union[str, int]='NONE'):
        """ popmenu_begin__internal

        :param title: 
        :type title: str
        :param icon: icon
        :type icon: typing.Union[str, int]
        """
        pass

    @classmethod
    def popmenu_end__internal(cls, menu: 'UIPopupMenu'):
        """ popmenu_end__internal

        :param menu: 
        :type menu: 'UIPopupMenu'
        """
        pass

    @classmethod
    def popover_begin__internal(cls, ui_units_x: int=0, from_active_button: bool=False):
        """ popover_begin__internal

        :param ui_units_x: ui_units_x
        :type ui_units_x: int
        :param from_active_button: Use Button, Use the active button for positioning
        :type from_active_button: bool
        """
        pass

    @classmethod
    def popover_end__internal(cls, menu: 'UIPopover', keymap: 'KeyMap'=None):
        """ popover_end__internal

        :param menu: 
        :type menu: 'UIPopover'
        :param keymap: Key Map, Active key map
        :type keymap: 'KeyMap'
        """
        pass

    @classmethod
    def piemenu_begin__internal(cls, title: str, icon: typing.Union[str, int]='NONE', event: 'Event'=None):
        """ piemenu_begin__internal

        :param title: 
        :type title: str
        :param icon: icon
        :type icon: typing.Union[str, int]
        :param event: 
        :type event: 'Event'
        """
        pass

    @classmethod
    def piemenu_end__internal(cls, menu: 'UIPieMenu'):
        """ piemenu_end__internal

        :param menu: 
        :type menu: 'UIPieMenu'
        """
        pass

    @classmethod
    def operator_properties_last(cls, operator: str):
        """ operator_properties_last

        :param operator: 
        :type operator: str
        """
        pass

    def print_undo_steps(self):
        """ print_undo_steps

        """
        pass

    @classmethod
    def tag_script_reload(cls):
        """ Tag for refreshing the interface after scripts have been reloaded

        """
        pass

    def popover(self, draw_func, *, ui_units_x=0, keymap=None, from_active_button=False):
        """ 

        """
        pass

    def popup_menu(self, draw_func, *, title='', icon='NONE'):
        """ Popup menus can be useful for creating menus without having to register menu classes. Note that they will not block the scripts execution, so the caller can't wait for user input.

        """
        pass

    def popup_menu_pie(self, event, draw_func, *, title='', icon='NONE'):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    @staticmethod
    def draw_cursor_add():
        """ Undocumented, consider `contributing <https://developer.blender.org/T51061>`__.

        """
        pass

    @staticmethod
    def draw_cursor_remove():
        """ Undocumented, consider `contributing <https://developer.blender.org/T51061>`__.

        """
        pass

class WorkSpace(ID, bpy_struct):
    """ Workspace data-block, defining the working environment for the user
    """
    active_pose_asset_index: int = None
    ' Per workspace index of the active pose asset\n\n    :type: int\n    '
    asset_library_ref: typing.Union[str, int] = None
    ' Active asset library to show in the UI, not used by the Asset Browser (which has its own active asset library)\n\n    :type: typing.Union[str, int]\n    '
    object_mode: typing.Union[str, int] = None
    ' Switch to this object mode when activating the workspace\n\n    :type: typing.Union[str, int]\n    '
    owner_ids: 'wmOwnerIDs' = None
    " \n\n    :type: 'wmOwnerIDs'\n    "
    screens: bpy_prop_collection['Screen'] = None
    " Screen layouts of a workspace\n\n    :type: bpy_prop_collection['Screen']\n    "
    tools: 'wmTools' = None
    " \n\n    :type: 'wmTools'\n    "
    use_filter_by_owner: bool = None
    ' Filter the UI by tags\n\n    :type: bool\n    '
    use_pin_scene: bool = None
    ' Remember the last used scene for the workspace and switch to it whenever this workspace is activated again\n\n    :type: bool\n    '

    @classmethod
    def status_text_set_internal(cls, text: str):
        """ Set the status bar text, typically key shortcuts for modal operators

        :param text: Text, New string for the status bar, None clears the text
        :type text: str
        """
        pass

    def status_text_set(self, text):
        """ Set the status text or None to clear, When text is a function, this will be called with the (header, context) arguments.

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class World(ID, bpy_struct):
    """ World data-block describing the environment and ambient lighting of a scene
    """
    animation_data: 'AnimData' = None
    " Animation data for this data-block\n\n    :type: 'AnimData'\n    "
    color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of the background\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    cycles: typing.Any = None
    ' Cycles world settings\n\n    :type: typing.Any\n    '
    cycles_visibility: typing.Any = None
    ' Cycles visibility settings\n\n    :type: typing.Any\n    '
    light_settings: 'WorldLighting' = None
    " World lighting settings\n\n    :type: 'WorldLighting'\n    "
    lightgroup: str = None
    ' Lightgroup that the world belongs to\n\n    :type: str\n    '
    mist_settings: 'WorldMistSettings' = None
    " World mist settings\n\n    :type: 'WorldMistSettings'\n    "
    node_tree: 'NodeTree' = None
    " Node tree for node based worlds\n\n    :type: 'NodeTree'\n    "
    use_nodes: bool = None
    ' Use shader nodes to render the world\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class IDOverrideLibraryProperties(bpy_prop_collection[IDOverrideLibraryProperty], bpy_struct):
    """ Collection of override properties
    """

    def add(self, rna_path: str) -> 'IDOverrideLibraryProperty':
        """ Add a property to the override library when it doesn't exist yet

        :param rna_path: RNA Path, RNA-Path of the property to add
        :type rna_path: str
        :rtype: 'IDOverrideLibraryProperty'
        :return: New Property, Newly created override property or existing one
        """
        pass

    def remove(self, property: 'IDOverrideLibraryProperty'):
        """ Remove and delete a property

        :param property: Property, Override property to be deleted
        :type property: 'IDOverrideLibraryProperty'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class IDOverrideLibraryPropertyOperations(bpy_prop_collection[IDOverrideLibraryPropertyOperation], bpy_struct):
    """ Collection of override operations
    """

    def add(self, operation: typing.Union[str, int], subitem_reference_name: str='', subitem_local_name: str='', subitem_reference_index: int=-1, subitem_local_index: int=-1) -> 'IDOverrideLibraryPropertyOperation':
        """ Add a new operation

        :param operation: Operation, What override operation is performed * ``NOOP`` No-Op -- Does nothing, prevents adding actual overrides (NOT USED). * ``REPLACE`` Replace -- Replace value of reference by overriding one. * ``DIFF_ADD`` Differential -- Stores and apply difference between reference and local value (NOT USED). * ``DIFF_SUB`` Differential -- Stores and apply difference between reference and local value (NOT USED). * ``FACT_MULTIPLY`` Factor -- Stores and apply multiplication factor between reference and local value (NOT USED). * ``INSERT_AFTER`` Insert After -- Insert a new item into collection after the one referenced in subitem_reference_name or _index. * ``INSERT_BEFORE`` Insert Before -- Insert a new item into collection before the one referenced in subitem_reference_name or _index (NOT USED).
        :type operation: typing.Union[str, int]
        :param subitem_reference_name: Subitem Reference Name, Used to handle insertions into collection
        :type subitem_reference_name: str
        :param subitem_local_name: Subitem Local Name, Used to handle insertions into collection
        :type subitem_local_name: str
        :param subitem_reference_index: Subitem Reference Index, Used to handle insertions into collection
        :type subitem_reference_index: int
        :param subitem_local_index: Subitem Local Index, Used to handle insertions into collection
        :type subitem_local_index: int
        :rtype: 'IDOverrideLibraryPropertyOperation'
        :return: New Operation, Created operation
        """
        pass

    def remove(self, operation: 'IDOverrideLibraryPropertyOperation'):
        """ Remove and delete an operation

        :param operation: Operation, Override operation to be deleted
        :type operation: 'IDOverrideLibraryPropertyOperation'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Itasc(IKParam, bpy_struct):
    """ Parameters for the iTaSC IK solver
    """
    damping_epsilon: float = None
    ' Singular value under which damping is progressively applied (higher values produce results with more stability, less reactivity)\n\n    :type: float\n    '
    damping_max: float = None
    ' Maximum damping coefficient when singular value is nearly 0 (higher values produce results with more stability, less reactivity)\n\n    :type: float\n    '
    feedback: float = None
    ' Feedback coefficient for error correction, average response time is 1/feedback\n\n    :type: float\n    '
    iterations: int = None
    ' Maximum number of iterations for convergence in case of reiteration\n\n    :type: int\n    '
    mode: typing.Union[str, int] = None
    ' * ``ANIMATION`` Animation -- Stateless solver computing pose starting from current action and non-IK constraints. * ``SIMULATION`` Simulation -- State-full solver running in real-time context and ignoring actions and non-IK constraints.\n\n    :type: typing.Union[str, int]\n    '
    precision: float = None
    ' Precision of convergence in case of reiteration\n\n    :type: float\n    '
    reiteration_method: typing.Union[str, int] = None
    ' Defines if the solver is allowed to reiterate (converge until precision is met) on none, first or all frames * ``NEVER`` Never -- The solver does not reiterate, not even on first frame (starts from rest pose). * ``INITIAL`` Initial -- The solver reiterates (converges) on the first frame but not on subsequent frame. * ``ALWAYS`` Always -- The solver reiterates (converges) on all frames.\n\n    :type: typing.Union[str, int]\n    '
    solver: typing.Union[str, int] = None
    ' Solving method selection: automatic damping or manual damping * ``SDLS`` SDLS -- Selective Damped Least Square. * ``DLS`` DLS -- Damped Least Square with Numerical Filtering.\n\n    :type: typing.Union[str, int]\n    '
    step_count: int = None
    ' Divide the frame interval into this many steps\n\n    :type: int\n    '
    step_max: float = None
    ' Higher bound for timestep in second in case of automatic substeps\n\n    :type: float\n    '
    step_min: float = None
    ' Lower bound for timestep in second in case of automatic substeps\n\n    :type: float\n    '
    use_auto_step: bool = None
    ' Automatically determine the optimal number of steps for best performance/accuracy trade off\n\n    :type: bool\n    '
    velocity_max: float = None
    ' Maximum joint velocity in radians/second\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class KeyConfigurations(bpy_prop_collection[KeyConfig], bpy_struct):
    """ Collection of KeyConfigs
    """
    active: 'KeyConfig' = None
    " Active key configuration (preset)\n\n    :type: 'KeyConfig'\n    "
    addon: 'KeyConfig' = None
    " Key configuration that can be extended by add-ons, and is added to the active configuration when handling events\n\n    :type: 'KeyConfig'\n    "
    default: 'KeyConfig' = None
    " Default builtin key configuration\n\n    :type: 'KeyConfig'\n    "
    user: 'KeyConfig' = None
    " Final key configuration that combines keymaps from the active and add-on configurations, and can be edited by the user\n\n    :type: 'KeyConfig'\n    "

    def new(self, name: str) -> 'KeyConfig':
        """ new

        :param name: Name
        :type name: str
        :rtype: 'KeyConfig'
        :return: Key Configuration, Added key configuration
        """
        pass

    def remove(self, keyconfig: 'KeyConfig'):
        """ remove

        :param keyconfig: Key Configuration, Removed key configuration
        :type keyconfig: 'KeyConfig'
        """
        pass

    def find_item_from_operator(self, idname: str, context: typing.Union[str, int]='INVOKE_DEFAULT', properties: 'OperatorProperties'=None, include: typing.Union[typing.Set[int], typing.Set[str]]={'ACTIONZONE', 'KEYBOARD', 'MOUSE', 'NDOF'}, exclude: typing.Union[typing.Set[int], typing.Set[str]]={}):
        """ find_item_from_operator

        :param idname: Operator Identifier
        :type idname: str
        :param context: context
        :type context: typing.Union[str, int]
        :param properties: 
        :type properties: 'OperatorProperties'
        :param include: Include
        :type include: typing.Union[typing.Set[int], typing.Set[str]]
        :param exclude: Exclude
        :type exclude: typing.Union[typing.Set[int], typing.Set[str]]
        """
        pass

    def update(self):
        """ update

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class KeyMaps(bpy_prop_collection[KeyMap], bpy_struct):
    """ Collection of keymaps
    """

    def new(self, name: str, space_type: typing.Union[str, int]='EMPTY', region_type: typing.Union[str, int]='WINDOW', modal: bool=False, tool: bool=False) -> 'KeyMap':
        """ Ensure the keymap exists. This will return the one with the given name/space type/region type, or create a new one if it does not exist yet.

        :param name: Name
        :type name: str
        :param space_type: Space Type
        :type space_type: typing.Union[str, int]
        :param region_type: Region Type
        :type region_type: typing.Union[str, int]
        :param modal: Modal, Keymap for modal operators
        :type modal: bool
        :param tool: Tool, Keymap for active tools
        :type tool: bool
        :rtype: 'KeyMap'
        :return: Key Map, Added key map
        """
        pass

    def remove(self, keymap: 'KeyMap'):
        """ remove

        :param keymap: Key Map, Removed key map
        :type keymap: 'KeyMap'
        """
        pass

    def find(self, name: str, space_type: typing.Union[str, int]='EMPTY', region_type: typing.Union[str, int]='WINDOW') -> 'KeyMap':
        """ find

        :param name: Name
        :type name: str
        :param space_type: Space Type
        :type space_type: typing.Union[str, int]
        :param region_type: Region Type
        :type region_type: typing.Union[str, int]
        :rtype: 'KeyMap'
        :return: Key Map, Corresponding key map
        """
        pass

    def find_modal(self, name: str) -> 'KeyMap':
        """ find_modal

        :param name: Operator Name
        :type name: str
        :rtype: 'KeyMap'
        :return: Key Map, Corresponding key map
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class KeyMapItems(bpy_prop_collection[KeyMapItem], bpy_struct):
    """ Collection of keymap items
    """

    def new(self, idname: str, type: typing.Union[str, int], value: typing.Union[str, int], any: bool=False, shift: int=0, ctrl: int=0, alt: int=0, oskey: int=0, key_modifier: typing.Union[str, int]='NONE', direction: typing.Union[str, int]='ANY', repeat: bool=False, head: bool=False) -> 'KeyMapItem':
        """ new

        :param idname: Operator Identifier
        :type idname: str
        :param type: Type
        :type type: typing.Union[str, int]
        :param value: Value
        :type value: typing.Union[str, int]
        :param any: Any
        :type any: bool
        :param shift: Shift
        :type shift: int
        :param ctrl: Ctrl
        :type ctrl: int
        :param alt: Alt
        :type alt: int
        :param oskey: OS Key
        :type oskey: int
        :param key_modifier: Key Modifier
        :type key_modifier: typing.Union[str, int]
        :param direction: Direction
        :type direction: typing.Union[str, int]
        :param repeat: Repeat, When set, accept key-repeat events
        :type repeat: bool
        :param head: At Head, Force item to be added at start (not end) of key map so that it doesn't get blocked by an existing key map item
        :type head: bool
        :rtype: 'KeyMapItem'
        :return: Item, Added key map item
        """
        pass

    def new_modal(self, propvalue: str, type: typing.Union[str, int], value: typing.Union[str, int], any: bool=False, shift: int=0, ctrl: int=0, alt: int=0, oskey: int=0, key_modifier: typing.Union[str, int]='NONE', direction: typing.Union[str, int]='ANY', repeat: bool=False) -> 'KeyMapItem':
        """ new_modal

        :param propvalue: Property Value
        :type propvalue: str
        :param type: Type
        :type type: typing.Union[str, int]
        :param value: Value
        :type value: typing.Union[str, int]
        :param any: Any
        :type any: bool
        :param shift: Shift
        :type shift: int
        :param ctrl: Ctrl
        :type ctrl: int
        :param alt: Alt
        :type alt: int
        :param oskey: OS Key
        :type oskey: int
        :param key_modifier: Key Modifier
        :type key_modifier: typing.Union[str, int]
        :param direction: Direction
        :type direction: typing.Union[str, int]
        :param repeat: Repeat, When set, accept key-repeat events
        :type repeat: bool
        :rtype: 'KeyMapItem'
        :return: Item, Added key map item
        """
        pass

    def new_from_item(self, item: 'KeyMapItem', head: bool=False) -> 'KeyMapItem':
        """ new_from_item

        :param item: Item, Item to use as a reference
        :type item: 'KeyMapItem'
        :param head: At Head
        :type head: bool
        :rtype: 'KeyMapItem'
        :return: Item, Added key map item
        """
        pass

    def remove(self, item: 'KeyMapItem'):
        """ remove

        :param item: Item
        :type item: 'KeyMapItem'
        """
        pass

    def from_id(self, id: int) -> 'KeyMapItem':
        """ from_id

        :param id: id, ID of the item
        :type id: int
        :rtype: 'KeyMapItem'
        :return: Item
        """
        pass

    def find_from_operator(self, idname: str, properties: 'OperatorProperties'=None, include: typing.Union[typing.Set[int], typing.Set[str]]={'ACTIONZONE', 'KEYBOARD', 'MOUSE', 'NDOF'}, exclude: typing.Union[typing.Set[int], typing.Set[str]]={}):
        """ find_from_operator

        :param idname: Operator Identifier
        :type idname: str
        :param properties: 
        :type properties: 'OperatorProperties'
        :param include: Include
        :type include: typing.Union[typing.Set[int], typing.Set[str]]
        :param exclude: Exclude
        :type exclude: typing.Union[typing.Set[int], typing.Set[str]]
        """
        pass

    def match_event(self, event: 'Event'):
        """ match_event

        :param event: 
        :type event: 'Event'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FCurveKeyframePoints(bpy_prop_collection[Keyframe], bpy_struct):
    """ Collection of keyframe points
    """

    def insert(self, frame: float, value: float, options: typing.Union[typing.Set[str], typing.Set[int]]={}, keyframe_type: typing.Union[str, int]='KEYFRAME') -> 'Keyframe':
        """ Add a keyframe point to a F-Curve

        :param frame: X Value of this keyframe point
        :type frame: float
        :param value: Y Value of this keyframe point
        :type value: float
        :param options: Keyframe options * ``REPLACE`` Replace -- Don't add any new keyframes, but just replace existing ones. * ``NEEDED`` Needed -- Only adds keyframes that are needed. * ``FAST`` Fast -- Fast keyframe insertion to avoid recalculating the curve each time.
        :type options: typing.Union[typing.Set[str], typing.Set[int]]
        :param keyframe_type: Type of keyframe to insert
        :type keyframe_type: typing.Union[str, int]
        :rtype: 'Keyframe'
        :return: Newly created keyframe
        """
        pass

    def add(self, count: int):
        """ Add a keyframe point to a F-Curve

        :param count: Number, Number of points to add to the spline
        :type count: int
        """
        pass

    def remove(self, keyframe: 'Keyframe', fast: bool=False):
        """ Remove keyframe from an F-Curve

        :param keyframe: Keyframe to remove
        :type keyframe: 'Keyframe'
        :param fast: Fast, Fast keyframe removal to avoid recalculating the curve each time
        :type fast: bool
        """
        pass

    def clear(self):
        """ Remove all keyframes from an F-Curve

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class KeyingSets(bpy_prop_collection[KeyingSet], bpy_struct):
    """ Scene keying sets
    """
    active: 'KeyingSet' = None
    " Active Keying Set used to insert/delete keyframes\n\n    :type: 'KeyingSet'\n    "
    active_index: int = None
    " Current Keying Set index (negative for 'builtin' and positive for 'absolute')\n\n    :type: int\n    "

    def new(self, idname: str='KeyingSet', name: str='KeyingSet') -> 'KeyingSet':
        """ Add a new Keying Set to Scene

        :param idname: IDName, Internal identifier of Keying Set
        :type idname: str
        :param name: Name, User visible name of Keying Set
        :type name: str
        :rtype: 'KeyingSet'
        :return: Newly created Keying Set
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class KeyingSetsAll(bpy_prop_collection[KeyingSet], bpy_struct):
    """ All available keying sets
    """
    active: 'KeyingSet' = None
    " Active Keying Set used to insert/delete keyframes\n\n    :type: 'KeyingSet'\n    "
    active_index: int = None
    " Current Keying Set index (negative for 'builtin' and positive for 'absolute')\n\n    :type: int\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class KeyingSetPaths(bpy_prop_collection[KeyingSetPath], bpy_struct):
    """ Collection of keying set paths
    """
    active: 'KeyingSetPath' = None
    " Active Keying Set used to insert/delete keyframes\n\n    :type: 'KeyingSetPath'\n    "
    active_index: int = None
    ' Current Keying Set index\n\n    :type: int\n    '

    def add(self, target_id: 'ID', data_path: str, index: int=-1, group_method: typing.Union[str, int]='KEYINGSET', group_name: str='') -> 'KeyingSetPath':
        """ Add a new path for the Keying Set

        :param target_id: Target ID, ID data-block for the destination
        :type target_id: 'ID'
        :param data_path: Data-Path, RNA-Path to destination property
        :type data_path: str
        :param index: Index, The index of the destination property (i.e. axis of Location/Rotation/etc.), or -1 for the entire array
        :type index: int
        :param group_method: Grouping Method, Method used to define which Group-name to use
        :type group_method: typing.Union[str, int]
        :param group_name: Group Name, Name of Action Group to assign destination to (only if grouping mode is to use this name)
        :type group_name: str
        :rtype: 'KeyingSetPath'
        :return: New Path, Path created and added to the Keying Set
        """
        pass

    def remove(self, path: 'KeyingSetPath'):
        """ Remove the given path from the Keying Set

        :param path: Path
        :type path: 'KeyingSetPath'
        """
        pass

    def clear(self):
        """ Remove all the paths from the Keying Set

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Lightgroups(bpy_prop_collection[Lightgroup], bpy_struct):
    """ Collection of Lightgroups
    """

    def add(self, name: str='') -> 'Lightgroup':
        """ add

        :param name: Name, Name of newly created lightgroup
        :type name: str
        :rtype: 'Lightgroup'
        :return: Newly created Lightgroup
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleAlphaModifier(LineStyleModifier, bpy_struct):
    """ Base type to define alpha transparency modifiers
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleColorModifier(LineStyleModifier, bpy_struct):
    """ Base type to define line color modifiers
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleGeometryModifier(LineStyleModifier, bpy_struct):
    """ Base type to define stroke geometry modifiers
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleThicknessModifier(LineStyleModifier, bpy_struct):
    """ Base type to define line thickness modifiers
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MaskLayers(bpy_prop_collection[MaskLayer], bpy_struct):
    """ Collection of layers used by mask
    """
    active: 'MaskLayer' = None
    " Active layer in this mask\n\n    :type: 'MaskLayer'\n    "

    def new(self, name: str='') -> 'MaskLayer':
        """ Add layer to this mask

        :param name: Name, Name of new layer
        :type name: str
        :rtype: 'MaskLayer'
        :return: New mask layer
        """
        pass

    def remove(self, layer: 'MaskLayer'):
        """ Remove layer from this mask

        :param layer: Shape to be removed
        :type layer: 'MaskLayer'
        """
        pass

    def clear(self):
        """ Remove all mask layers

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MaskSplines(bpy_prop_collection[MaskSpline], bpy_struct):
    """ Collection of masking splines
    """
    active: 'MaskSpline' = None
    " Active spline of masking layer\n\n    :type: 'MaskSpline'\n    "
    active_point: 'MaskSplinePoint' = None
    " Active spline of masking layer\n\n    :type: 'MaskSplinePoint'\n    "

    def new(self) -> 'MaskSpline':
        """ Add a new spline to the layer

        :rtype: 'MaskSpline'
        :return: The newly created spline
        """
        pass

    def remove(self, spline: 'MaskSpline'):
        """ Remove a spline from a layer

        :param spline: The spline to remove
        :type spline: 'MaskSpline'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MaskSplinePoints(bpy_prop_collection[MaskSplinePoint], bpy_struct):
    """ Collection of masking spline points
    """

    def add(self, count: int):
        """ Add a number of point to this spline

        :param count: Number, Number of points to add to the spline
        :type count: int
        """
        pass

    def remove(self, point: 'MaskSplinePoint'):
        """ Remove a point from a spline

        :param point: The point to remove
        :type point: 'MaskSplinePoint'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshEdges(bpy_prop_collection[MeshEdge], bpy_struct):
    """ Collection of mesh edges
    """

    def add(self, count: int):
        """ add

        :param count: Count, Number of edges to add
        :type count: int
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshFaceMapLayers(bpy_prop_collection[MeshFaceMapLayer], bpy_struct):
    """ Collection of mesh face maps
    """
    active: 'MeshFaceMapLayer' = None
    " \n\n    :type: 'MeshFaceMapLayer'\n    "

    def new(self, name: str='Face Map') -> 'MeshFaceMapLayer':
        """ Add a float property layer to Mesh

        :param name: Face map name
        :type name: str
        :rtype: 'MeshFaceMapLayer'
        :return: The newly created layer
        """
        pass

    def remove(self, layer: 'MeshFaceMapLayer'):
        """ Remove a face map layer

        :param layer: The layer to remove
        :type layer: 'MeshFaceMapLayer'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshLoops(bpy_prop_collection[MeshLoop], bpy_struct):
    """ Collection of mesh loops
    """

    def add(self, count: int):
        """ add

        :param count: Count, Number of loops to add
        :type count: int
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LoopColors(bpy_prop_collection[MeshLoopColorLayer], bpy_struct):
    """ Collection of vertex colors
    """
    active: 'MeshLoopColorLayer' = None
    " Active vertex color layer\n\n    :type: 'MeshLoopColorLayer'\n    "
    active_index: int = None
    ' Active vertex color index\n\n    :type: int\n    '

    def new(self, name: str='Col', do_init: bool=True) -> 'MeshLoopColorLayer':
        """ Add a vertex color layer to Mesh

        :param name: Vertex color name
        :type name: str
        :param do_init: Whether new layer's data should be initialized by copying current active one
        :type do_init: bool
        :rtype: 'MeshLoopColorLayer'
        :return: The newly created layer
        """
        pass

    def remove(self, layer: 'MeshLoopColorLayer'):
        """ Remove a vertex color layer

        :param layer: The layer to remove
        :type layer: 'MeshLoopColorLayer'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshLoopTriangles(bpy_prop_collection[MeshLoopTriangle], bpy_struct):
    """ Tessellation of mesh polygons into triangles
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshPolygons(bpy_prop_collection[MeshPolygon], bpy_struct):
    """ Collection of mesh polygons
    """
    active: int = None
    ' The active polygon for this mesh\n\n    :type: int\n    '

    def add(self, count: int):
        """ add

        :param count: Count, Number of polygons to add
        :type count: int
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PolygonFloatProperties(bpy_prop_collection[MeshPolygonFloatPropertyLayer], bpy_struct):
    """ Collection of float properties
    """

    def new(self, name: str='Float Prop') -> 'MeshPolygonFloatPropertyLayer':
        """ Add a float property layer to Mesh

        :param name: Float property name
        :type name: str
        :rtype: 'MeshPolygonFloatPropertyLayer'
        :return: The newly created layer
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PolygonIntProperties(bpy_prop_collection[MeshPolygonIntPropertyLayer], bpy_struct):
    """ Collection of int properties
    """

    def new(self, name: str='Int Prop') -> 'MeshPolygonIntPropertyLayer':
        """ Add a integer property layer to Mesh

        :param name: Int property name
        :type name: str
        :rtype: 'MeshPolygonIntPropertyLayer'
        :return: The newly created layer
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PolygonStringProperties(bpy_prop_collection[MeshPolygonStringPropertyLayer], bpy_struct):
    """ Collection of string properties
    """

    def new(self, name: str='String Prop') -> 'MeshPolygonStringPropertyLayer':
        """ Add a string property layer to Mesh

        :param name: String property name
        :type name: str
        :rtype: 'MeshPolygonStringPropertyLayer'
        :return: The newly created layer
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class UVLoopLayers(bpy_prop_collection[MeshUVLoopLayer], bpy_struct):
    """ Collection of UV map layers
    """
    active: 'MeshUVLoopLayer' = None
    " Active UV Map layer\n\n    :type: 'MeshUVLoopLayer'\n    "
    active_index: int = None
    ' Active UV map index\n\n    :type: int\n    '

    def new(self, name: str='UVMap', do_init: bool=True) -> 'MeshUVLoopLayer':
        """ Add a UV map layer to Mesh

        :param name: UV map name
        :type name: str
        :param do_init: Whether new layer's data should be initialized by copying current active one, or if none is active, with a default UVmap
        :type do_init: bool
        :rtype: 'MeshUVLoopLayer'
        :return: The newly created layer
        """
        pass

    def remove(self, layer: 'MeshUVLoopLayer'):
        """ Remove a vertex color layer

        :param layer: The layer to remove
        :type layer: 'MeshUVLoopLayer'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class VertColors(bpy_prop_collection[MeshVertColorLayer], bpy_struct):
    """ Collection of sculpt vertex colors
    """
    active: 'MeshVertColorLayer' = None
    " Active sculpt vertex color layer\n\n    :type: 'MeshVertColorLayer'\n    "
    active_index: int = None
    ' Active sculpt vertex color index\n\n    :type: int\n    '

    def new(self, name: str='Col', do_init: bool=True) -> 'MeshVertColorLayer':
        """ Add a sculpt vertex color layer to Mesh

        :param name: Sculpt Vertex color name
        :type name: str
        :param do_init: Whether new layer's data should be initialized by copying current active one
        :type do_init: bool
        :rtype: 'MeshVertColorLayer'
        :return: The newly created layer
        """
        pass

    def remove(self, layer: 'MeshVertColorLayer'):
        """ Remove a vertex color layer

        :param layer: The layer to remove
        :type layer: 'MeshVertColorLayer'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshVertices(bpy_prop_collection[MeshVertex], bpy_struct):
    """ Collection of mesh vertices
    """

    def add(self, count: int):
        """ add

        :param count: Count, Number of vertices to add
        :type count: int
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class VertexFloatProperties(bpy_prop_collection[MeshVertexFloatPropertyLayer], bpy_struct):
    """ Collection of float properties
    """

    def new(self, name: str='Float Prop') -> 'MeshVertexFloatPropertyLayer':
        """ Add a float property layer to Mesh

        :param name: Float property name
        :type name: str
        :rtype: 'MeshVertexFloatPropertyLayer'
        :return: The newly created layer
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class VertexIntProperties(bpy_prop_collection[MeshVertexIntPropertyLayer], bpy_struct):
    """ Collection of int properties
    """

    def new(self, name: str='Int Prop') -> 'MeshVertexIntPropertyLayer':
        """ Add a integer property layer to Mesh

        :param name: Int property name
        :type name: str
        :rtype: 'MeshVertexIntPropertyLayer'
        :return: The newly created layer
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class VertexStringProperties(bpy_prop_collection[MeshVertexStringPropertyLayer], bpy_struct):
    """ Collection of string properties
    """

    def new(self, name: str='String Prop') -> 'MeshVertexStringPropertyLayer':
        """ Add a string property layer to Mesh

        :param name: String property name
        :type name: str
        :rtype: 'MeshVertexStringPropertyLayer'
        :return: The newly created layer
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MetaBallElements(bpy_prop_collection[MetaElement], bpy_struct):
    """ Collection of metaball elements
    """
    active: 'MetaElement' = None
    " Last selected element\n\n    :type: 'MetaElement'\n    "

    def new(self, type: typing.Union[str, int]='BALL') -> 'MetaElement':
        """ Add a new element to the metaball

        :param type: Type for the new metaball element
        :type type: typing.Union[str, int]
        :rtype: 'MetaElement'
        :return: The newly created metaball element
        """
        pass

    def remove(self, element: 'MetaElement'):
        """ Remove an element from the metaball

        :param element: The element to remove
        :type element: 'MetaElement'
        """
        pass

    def clear(self):
        """ Remove all elements from the metaball

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ArmatureModifier(Modifier, bpy_struct):
    """ Armature deformation modifier
    """
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    object: 'Object' = None
    " Armature object to deform with\n\n    :type: 'Object'\n    "
    use_bone_envelopes: bool = None
    ' Bind Bone envelopes to armature modifier\n\n    :type: bool\n    '
    use_deform_preserve_volume: bool = None
    ' Deform rotation interpolation with quaternions\n\n    :type: bool\n    '
    use_multi_modifier: bool = None
    ' Use same input as previous modifier, and mix results using overall vgroup\n\n    :type: bool\n    '
    use_vertex_groups: bool = None
    ' Bind vertex groups to armature modifier\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Name of Vertex Group which determines influence of modifier per point\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ArrayModifier(Modifier, bpy_struct):
    """ Array duplication modifier
    """
    constant_offset_displace: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Value for the distance between arrayed items\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    count: int = None
    ' Number of duplicates to make\n\n    :type: int\n    '
    curve: 'Object' = None
    " Curve object to fit array length to\n\n    :type: 'Object'\n    "
    end_cap: 'Object' = None
    " Mesh object to use as an end cap\n\n    :type: 'Object'\n    "
    fit_length: float = None
    ' Length to fit array within\n\n    :type: float\n    '
    fit_type: typing.Union[str, int] = None
    ' Array length calculation method * ``FIXED_COUNT`` Fixed Count -- Duplicate the object a certain number of times. * ``FIT_LENGTH`` Fit Length -- Duplicate the object as many times as fits in a certain length. * ``FIT_CURVE`` Fit Curve -- Fit the duplicated objects to a curve.\n\n    :type: typing.Union[str, int]\n    '
    merge_threshold: float = None
    ' Limit below which to merge vertices\n\n    :type: float\n    '
    offset_object: 'Object' = None
    " Use the location and rotation of another object to determine the distance and rotational change between arrayed items\n\n    :type: 'Object'\n    "
    offset_u: float = None
    ' Amount to offset array UVs on the U axis\n\n    :type: float\n    '
    offset_v: float = None
    ' Amount to offset array UVs on the V axis\n\n    :type: float\n    '
    relative_offset_displace: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " The size of the geometry will determine the distance between arrayed items\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    start_cap: 'Object' = None
    " Mesh object to use as a start cap\n\n    :type: 'Object'\n    "
    use_constant_offset: bool = None
    ' Add a constant offset\n\n    :type: bool\n    '
    use_merge_vertices: bool = None
    ' Merge vertices in adjacent duplicates\n\n    :type: bool\n    '
    use_merge_vertices_cap: bool = None
    ' Merge vertices in first and last duplicates\n\n    :type: bool\n    '
    use_object_offset: bool = None
    " Add another object's transformation to the total offset\n\n    :type: bool\n    "
    use_relative_offset: bool = None
    " Add an offset relative to the object's bounding box\n\n    :type: bool\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BevelModifier(Modifier, bpy_struct):
    """ Bevel modifier to make edges and vertices more rounded
    """
    affect: typing.Union[str, int] = None
    ' Affect edges or vertices * ``VERTICES`` Vertices -- Affect only vertices. * ``EDGES`` Edges -- Affect only edges.\n\n    :type: typing.Union[str, int]\n    '
    angle_limit: float = None
    ' Angle above which to bevel edges\n\n    :type: float\n    '
    custom_profile: 'CurveProfile' = None
    " The path for the custom profile\n\n    :type: 'CurveProfile'\n    "
    face_strength_mode: typing.Union[str, int] = None
    ' Whether to set face strength, and which faces to set it on * ``FSTR_NONE`` None -- Do not set face strength. * ``FSTR_NEW`` New -- Set face strength on new faces only. * ``FSTR_AFFECTED`` Affected -- Set face strength on new and affected faces only. * ``FSTR_ALL`` All -- Set face strength on all faces.\n\n    :type: typing.Union[str, int]\n    '
    harden_normals: bool = None
    ' Match normals of new faces to adjacent faces\n\n    :type: bool\n    '
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    limit_method: typing.Union[str, int] = None
    ' * ``NONE`` None -- Bevel the entire mesh by a constant amount. * ``ANGLE`` Angle -- Only bevel edges with sharp enough angles between faces. * ``WEIGHT`` Weight -- Use bevel weights to determine how much bevel is applied in edge mode. * ``VGROUP`` Vertex Group -- Use vertex group weights to select whether vertex or edge is beveled.\n\n    :type: typing.Union[str, int]\n    '
    loop_slide: bool = None
    ' Prefer sliding along edges to having even widths\n\n    :type: bool\n    '
    mark_seam: bool = None
    ' Mark Seams along beveled edges\n\n    :type: bool\n    '
    mark_sharp: bool = None
    ' Mark beveled edges as sharp\n\n    :type: bool\n    '
    material: int = None
    ' Material index of generated faces, -1 for automatic\n\n    :type: int\n    '
    miter_inner: typing.Union[str, int] = None
    ' Pattern to use for inside of miters * ``MITER_SHARP`` Sharp -- Inside of miter is sharp. * ``MITER_ARC`` Arc -- Inside of miter is arc.\n\n    :type: typing.Union[str, int]\n    '
    miter_outer: typing.Union[str, int] = None
    ' Pattern to use for outside of miters * ``MITER_SHARP`` Sharp -- Outside of miter is sharp. * ``MITER_PATCH`` Patch -- Outside of miter is squared-off patch. * ``MITER_ARC`` Arc -- Outside of miter is arc.\n\n    :type: typing.Union[str, int]\n    '
    offset_type: typing.Union[str, int] = None
    ' What distance Width measures * ``OFFSET`` Offset -- Amount is offset of new edges from original. * ``WIDTH`` Width -- Amount is width of new face. * ``DEPTH`` Depth -- Amount is perpendicular distance from original edge to bevel face. * ``PERCENT`` Percent -- Amount is percent of adjacent edge length. * ``ABSOLUTE`` Absolute -- Amount is absolute distance along adjacent edge.\n\n    :type: typing.Union[str, int]\n    '
    profile: float = None
    ' The profile shape (0.5 = round)\n\n    :type: float\n    '
    profile_type: typing.Union[str, int] = None
    ' The type of shape used to rebuild a beveled section * ``SUPERELLIPSE`` Superellipse -- The profile can be a concave or convex curve. * ``CUSTOM`` Custom -- The profile can be any arbitrary path between its endpoints.\n\n    :type: typing.Union[str, int]\n    '
    segments: int = None
    ' Number of segments for round edges/verts\n\n    :type: int\n    '
    spread: float = None
    ' Spread distance for inner miter arcs\n\n    :type: float\n    '
    use_clamp_overlap: bool = None
    ' Clamp the width to avoid overlap\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Vertex group name\n\n    :type: str\n    '
    vmesh_method: typing.Union[str, int] = None
    ' The method to use to create the mesh at intersections * ``ADJ`` Grid Fill -- Default patterned fill. * ``CUTOFF`` Cutoff -- A cut-off at the end of each profile before the intersection.\n\n    :type: typing.Union[str, int]\n    '
    width: float = None
    ' Bevel amount\n\n    :type: float\n    '
    width_pct: float = None
    ' Bevel amount for percentage method\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BooleanModifier(Modifier, bpy_struct):
    """ Boolean operations modifier
    """
    collection: 'Collection' = None
    " Use mesh objects in this collection for Boolean operation\n\n    :type: 'Collection'\n    "
    debug_options: typing.Union[typing.Set[str], typing.Set[int]] = None
    " Debugging options, only when started with '-d'\n\n    :type: typing.Union[typing.Set[str], typing.Set[int]]\n    "
    double_threshold: float = None
    ' Threshold for checking overlapping geometry\n\n    :type: float\n    '
    material_mode: typing.Union[str, int] = None
    " Method for setting materials on the new faces * ``INDEX`` Index Based -- Set the material on new faces based on the order of the material slot lists. If a material doesn't exist on the modifier object, the face will use the same material slot or the first if the object doesn't have enough slots. * ``TRANSFER`` Transfer -- Transfer materials from non-empty slots to the result mesh, adding new materials as necessary. For empty slots, fall back to using the same material index as the operand mesh.\n\n    :type: typing.Union[str, int]\n    "
    object: 'Object' = None
    " Mesh object to use for Boolean operation\n\n    :type: 'Object'\n    "
    operand_type: typing.Union[str, int] = None
    ' * ``OBJECT`` Object -- Use a mesh object as the operand for the Boolean operation. * ``COLLECTION`` Collection -- Use a collection of mesh objects as the operand for the Boolean operation.\n\n    :type: typing.Union[str, int]\n    '
    operation: typing.Union[str, int] = None
    ' * ``INTERSECT`` Intersect -- Keep the part of the mesh that is common between all operands. * ``UNION`` Union -- Combine meshes in an additive way. * ``DIFFERENCE`` Difference -- Combine meshes in a subtractive way.\n\n    :type: typing.Union[str, int]\n    '
    solver: typing.Union[str, int] = None
    ' Method for calculating booleans * ``FAST`` Fast -- Simple solver for the best performance, without support for overlapping geometry. * ``EXACT`` Exact -- Advanced solver for the best result.\n\n    :type: typing.Union[str, int]\n    '
    use_hole_tolerant: bool = None
    ' Better results when there are holes (slower)\n\n    :type: bool\n    '
    use_self: bool = None
    ' Allow self-intersection in operands\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BuildModifier(Modifier, bpy_struct):
    """ Build effect modifier
    """
    frame_duration: float = None
    ' Total time the build effect requires\n\n    :type: float\n    '
    frame_start: float = None
    ' Start frame of the effect\n\n    :type: float\n    '
    seed: int = None
    ' Seed for random if used\n\n    :type: int\n    '
    use_random_order: bool = None
    ' Randomize the faces or edges during build\n\n    :type: bool\n    '
    use_reverse: bool = None
    ' Deconstruct the mesh instead of building it\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CastModifier(Modifier, bpy_struct):
    """ Modifier to cast to other shapes
    """
    cast_type: typing.Union[str, int] = None
    ' Target object shape\n\n    :type: typing.Union[str, int]\n    '
    factor: float = None
    ' \n\n    :type: float\n    '
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    object: 'Object' = None
    " Control object: if available, its location determines the center of the effect\n\n    :type: 'Object'\n    "
    radius: float = None
    ' Only deform vertices within this distance from the center of the effect (leave as 0 for infinite.)\n\n    :type: float\n    '
    size: float = None
    ' Size of projection shape (leave as 0 for auto)\n\n    :type: float\n    '
    use_radius_as_size: bool = None
    ' Use radius as size of projection shape (0 = auto)\n\n    :type: bool\n    '
    use_transform: bool = None
    ' Use object transform to control projection shape\n\n    :type: bool\n    '
    use_x: bool = None
    ' \n\n    :type: bool\n    '
    use_y: bool = None
    ' \n\n    :type: bool\n    '
    use_z: bool = None
    ' \n\n    :type: bool\n    '
    vertex_group: str = None
    ' Vertex group name\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ClothModifier(Modifier, bpy_struct):
    """ Cloth simulation modifier
    """
    collision_settings: 'ClothCollisionSettings' = None
    " \n\n    :type: 'ClothCollisionSettings'\n    "
    hair_grid_max: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    hair_grid_min: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    hair_grid_resolution: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' \n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    point_cache: 'PointCache' = None
    " \n\n    :type: 'PointCache'\n    "
    settings: 'ClothSettings' = None
    " \n\n    :type: 'ClothSettings'\n    "
    solver_result: 'ClothSolverResult' = None
    " \n\n    :type: 'ClothSolverResult'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CollisionModifier(Modifier, bpy_struct):
    """ Collision modifier defining modifier stack position used for collision
    """
    settings: 'CollisionSettings' = None
    " \n\n    :type: 'CollisionSettings'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CorrectiveSmoothModifier(Modifier, bpy_struct):
    """ Correct distortion caused by deformation
    """
    factor: float = None
    ' Smooth factor effect\n\n    :type: float\n    '
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    is_bind: bool = None
    ' \n\n    :type: bool\n    '
    iterations: int = None
    ' \n\n    :type: int\n    '
    rest_source: typing.Union[str, int] = None
    ' Select the source of rest positions * ``ORCO`` Original Coords -- Use base mesh vertex coords as the rest position. * ``BIND`` Bind Coords -- Use bind vertex coords for rest position.\n\n    :type: typing.Union[str, int]\n    '
    scale: float = None
    ' Compensate for scale applied by other modifiers\n\n    :type: float\n    '
    smooth_type: typing.Union[str, int] = None
    ' Method used for smoothing * ``SIMPLE`` Simple -- Use the average of adjacent edge-vertices. * ``LENGTH_WEIGHTED`` Length Weight -- Use the average of adjacent edge-vertices weighted by their length.\n\n    :type: typing.Union[str, int]\n    '
    use_only_smooth: bool = None
    ' Apply smoothing without reconstructing the surface\n\n    :type: bool\n    '
    use_pin_boundary: bool = None
    ' Excludes boundary vertices from being smoothed\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Name of Vertex Group which determines influence of modifier per point\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CurveModifier(Modifier, bpy_struct):
    """ Curve deformation modifier
    """
    deform_axis: typing.Union[str, int] = None
    ' The axis that the curve deforms along\n\n    :type: typing.Union[str, int]\n    '
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    object: 'Object' = None
    " Curve object to deform with\n\n    :type: 'Object'\n    "
    vertex_group: str = None
    ' Name of Vertex Group which determines influence of modifier per point\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class DataTransferModifier(Modifier, bpy_struct):
    """ Modifier transferring some data from a source mesh
    """
    data_types_edges: typing.Union[typing.Set[str], typing.Set[int]] = None
    ' Which edge data layers to transfer * ``SHARP_EDGE`` Sharp -- Transfer sharp mark. * ``SEAM`` UV Seam -- Transfer UV seam mark. * ``CREASE`` Crease -- Transfer subdivision crease values. * ``BEVEL_WEIGHT_EDGE`` Bevel Weight -- Transfer bevel weights. * ``FREESTYLE_EDGE`` Freestyle -- Transfer Freestyle edge mark.\n\n    :type: typing.Union[typing.Set[str], typing.Set[int]]\n    '
    data_types_loops: typing.Union[typing.Set[str], typing.Set[int]] = None
    ' Which face corner data layers to transfer * ``CUSTOM_NORMAL`` Custom Normals -- Transfer custom normals. * ``VCOL`` Colors -- Transfer color attributes. * ``UV`` UVs -- Transfer UV layers.\n\n    :type: typing.Union[typing.Set[str], typing.Set[int]]\n    '
    data_types_polys: typing.Union[typing.Set[str], typing.Set[int]] = None
    ' Which poly data layers to transfer * ``SMOOTH`` Smooth -- Transfer flat/smooth mark. * ``FREESTYLE_FACE`` Freestyle Mark -- Transfer Freestyle face mark.\n\n    :type: typing.Union[typing.Set[str], typing.Set[int]]\n    '
    data_types_verts: typing.Union[typing.Set[str], typing.Set[int]] = None
    ' Which vertex data layers to transfer * ``VGROUP_WEIGHTS`` Vertex Groups -- Transfer active or all vertex groups. * ``BEVEL_WEIGHT_VERT`` Bevel Weight -- Transfer bevel weights. * ``VCOL`` Colors -- Transfer color attributes.\n\n    :type: typing.Union[typing.Set[str], typing.Set[int]]\n    '
    edge_mapping: typing.Union[str, int] = None
    ' Method used to map source edges to destination ones\n\n    :type: typing.Union[str, int]\n    '
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    islands_precision: float = None
    ' Factor controlling precision of islands handling (typically, 0.1 should be enough, higher values can make things really slow)\n\n    :type: float\n    '
    layers_uv_select_dst: typing.Union[str, int] = None
    ' How to match source and destination layers\n\n    :type: typing.Union[str, int]\n    '
    layers_uv_select_src: typing.Union[str, int] = None
    ' Which layers to transfer, in case of multi-layers types\n\n    :type: typing.Union[str, int]\n    '
    layers_vcol_loop_select_dst: typing.Union[str, int] = None
    ' How to match source and destination layers\n\n    :type: typing.Union[str, int]\n    '
    layers_vcol_loop_select_src: typing.Union[str, int] = None
    ' Which layers to transfer, in case of multi-layers types\n\n    :type: typing.Union[str, int]\n    '
    layers_vcol_vert_select_dst: typing.Union[str, int] = None
    ' How to match source and destination layers\n\n    :type: typing.Union[str, int]\n    '
    layers_vcol_vert_select_src: typing.Union[str, int] = None
    ' Which layers to transfer, in case of multi-layers types\n\n    :type: typing.Union[str, int]\n    '
    layers_vgroup_select_dst: typing.Union[str, int] = None
    ' How to match source and destination layers\n\n    :type: typing.Union[str, int]\n    '
    layers_vgroup_select_src: typing.Union[str, int] = None
    ' Which layers to transfer, in case of multi-layers types\n\n    :type: typing.Union[str, int]\n    '
    loop_mapping: typing.Union[str, int] = None
    " Method used to map source faces' corners to destination ones\n\n    :type: typing.Union[str, int]\n    "
    max_distance: float = None
    ' Maximum allowed distance between source and destination element, for non-topology mappings\n\n    :type: float\n    '
    mix_factor: float = None
    ' Factor to use when applying data to destination (exact behavior depends on mix mode, multiplied with weights from vertex group when defined)\n\n    :type: float\n    '
    mix_mode: typing.Union[str, int] = None
    ' How to affect destination elements with source values\n\n    :type: typing.Union[str, int]\n    '
    object: 'Object' = None
    " Object to transfer data from\n\n    :type: 'Object'\n    "
    poly_mapping: typing.Union[str, int] = None
    ' Method used to map source faces to destination ones\n\n    :type: typing.Union[str, int]\n    '
    ray_radius: float = None
    " 'Width' of rays (especially useful when raycasting against vertices or edges)\n\n    :type: float\n    "
    use_edge_data: bool = None
    ' Enable edge data transfer\n\n    :type: bool\n    '
    use_loop_data: bool = None
    ' Enable face corner data transfer\n\n    :type: bool\n    '
    use_max_distance: bool = None
    ' Source elements must be closer than given distance from destination one\n\n    :type: bool\n    '
    use_object_transform: bool = None
    ' Evaluate source and destination meshes in global space\n\n    :type: bool\n    '
    use_poly_data: bool = None
    ' Enable face data transfer\n\n    :type: bool\n    '
    use_vert_data: bool = None
    ' Enable vertex data transfer\n\n    :type: bool\n    '
    vert_mapping: typing.Union[str, int] = None
    ' Method used to map source vertices to destination ones\n\n    :type: typing.Union[str, int]\n    '
    vertex_group: str = None
    ' Vertex group name for selecting the affected areas\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class DecimateModifier(Modifier, bpy_struct):
    """ Decimation modifier
    """
    angle_limit: float = None
    ' Only dissolve angles below this (planar only)\n\n    :type: float\n    '
    decimate_type: typing.Union[str, int] = None
    ' * ``COLLAPSE`` Collapse -- Use edge collapsing. * ``UNSUBDIV`` Un-Subdivide -- Use un-subdivide face reduction. * ``DISSOLVE`` Planar -- Dissolve geometry to form planar polygons.\n\n    :type: typing.Union[str, int]\n    '
    delimit: typing.Union[typing.Set[int], typing.Set[str]] = None
    ' Limit merging geometry\n\n    :type: typing.Union[typing.Set[int], typing.Set[str]]\n    '
    face_count: int = None
    ' The current number of faces in the decimated mesh\n\n    :type: int\n    '
    invert_vertex_group: bool = None
    ' Invert vertex group influence (collapse only)\n\n    :type: bool\n    '
    iterations: int = None
    ' Number of times reduce the geometry (unsubdivide only)\n\n    :type: int\n    '
    ratio: float = None
    ' Ratio of triangles to reduce to (collapse only)\n\n    :type: float\n    '
    symmetry_axis: typing.Union[str, int] = None
    ' Axis of symmetry\n\n    :type: typing.Union[str, int]\n    '
    use_collapse_triangulate: bool = None
    ' Keep triangulated faces resulting from decimation (collapse only)\n\n    :type: bool\n    '
    use_dissolve_boundaries: bool = None
    ' Dissolve all vertices in between face boundaries (planar only)\n\n    :type: bool\n    '
    use_symmetry: bool = None
    ' Maintain symmetry on an axis\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Vertex group name (collapse only)\n\n    :type: str\n    '
    vertex_group_factor: float = None
    ' Vertex group strength\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class DisplaceModifier(Modifier, bpy_struct):
    """ Displacement modifier
    """
    direction: typing.Union[str, int] = None
    " * ``X`` X -- Use the texture's intensity value to displace in the X direction. * ``Y`` Y -- Use the texture's intensity value to displace in the Y direction. * ``Z`` Z -- Use the texture's intensity value to displace in the Z direction. * ``NORMAL`` Normal -- Use the texture's intensity value to displace along the vertex normal. * ``CUSTOM_NORMAL`` Custom Normal -- Use the texture's intensity value to displace along the (averaged) custom normal (falls back to vertex). * ``RGB_TO_XYZ`` RGB to XYZ -- Use the texture's RGB values to displace the mesh in the XYZ direction.\n\n    :type: typing.Union[str, int]\n    "
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    mid_level: float = None
    ' Material value that gives no displacement\n\n    :type: float\n    '
    space: typing.Union[str, int] = None
    ' * ``LOCAL`` Local -- Direction is defined in local coordinates. * ``GLOBAL`` Global -- Direction is defined in global coordinates.\n\n    :type: typing.Union[str, int]\n    '
    strength: float = None
    ' Amount to displace geometry\n\n    :type: float\n    '
    texture: 'Texture' = None
    " \n\n    :type: 'Texture'\n    "
    texture_coords: typing.Union[str, int] = None
    " * ``LOCAL`` Local -- Use the local coordinate system for the texture coordinates. * ``GLOBAL`` Global -- Use the global coordinate system for the texture coordinates. * ``OBJECT`` Object -- Use the linked object's local coordinate system for the texture coordinates. * ``UV`` UV -- Use UV coordinates for the texture coordinates.\n\n    :type: typing.Union[str, int]\n    "
    texture_coords_bone: str = None
    ' Bone to set the texture coordinates\n\n    :type: str\n    '
    texture_coords_object: 'Object' = None
    " Object to set the texture coordinates\n\n    :type: 'Object'\n    "
    uv_layer: str = None
    ' UV map name\n\n    :type: str\n    '
    vertex_group: str = None
    ' Name of Vertex Group which determines influence of modifier per point\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class DynamicPaintModifier(Modifier, bpy_struct):
    """ Dynamic Paint modifier
    """
    brush_settings: 'DynamicPaintBrushSettings' = None
    " \n\n    :type: 'DynamicPaintBrushSettings'\n    "
    canvas_settings: 'DynamicPaintCanvasSettings' = None
    " \n\n    :type: 'DynamicPaintCanvasSettings'\n    "
    ui_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class EdgeSplitModifier(Modifier, bpy_struct):
    """ Edge splitting modifier to create sharp edges
    """
    split_angle: float = None
    ' Angle above which to split edges\n\n    :type: float\n    '
    use_edge_angle: bool = None
    ' Split edges with high angle between faces\n\n    :type: bool\n    '
    use_edge_sharp: bool = None
    ' Split edges that are marked as sharp\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ExplodeModifier(Modifier, bpy_struct):
    """ Explosion effect modifier based on a particle system
    """
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    particle_uv: str = None
    ' UV map to change with particle age\n\n    :type: str\n    '
    protect: float = None
    ' Clean vertex group edges\n\n    :type: float\n    '
    show_alive: bool = None
    ' Show mesh when particles are alive\n\n    :type: bool\n    '
    show_dead: bool = None
    ' Show mesh when particles are dead\n\n    :type: bool\n    '
    show_unborn: bool = None
    ' Show mesh when particles are unborn\n\n    :type: bool\n    '
    use_edge_cut: bool = None
    ' Cut face edges for nicer shrapnel\n\n    :type: bool\n    '
    use_size: bool = None
    ' Use particle size for the shrapnel\n\n    :type: bool\n    '
    vertex_group: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FluidModifier(Modifier, bpy_struct):
    """ Fluid simulation modifier
    """
    domain_settings: 'FluidDomainSettings' = None
    " \n\n    :type: 'FluidDomainSettings'\n    "
    effector_settings: 'FluidEffectorSettings' = None
    " \n\n    :type: 'FluidEffectorSettings'\n    "
    flow_settings: 'FluidFlowSettings' = None
    " \n\n    :type: 'FluidFlowSettings'\n    "
    fluid_type: typing.Union[str, int] = None
    ' * ``NONE`` None. * ``DOMAIN`` Domain. * ``FLOW`` Flow -- Inflow/Outflow. * ``EFFECTOR`` Effector.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class HookModifier(Modifier, bpy_struct):
    """ Hook modifier to modify the location of vertices
    """
    center: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Center of the hook, used for falloff and display\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    falloff_curve: 'CurveMapping' = None
    " Custom falloff curve\n\n    :type: 'CurveMapping'\n    "
    falloff_radius: float = None
    ' If not zero, the distance from the hook where influence ends\n\n    :type: float\n    '
    falloff_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    matrix_inverse: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix'] = None
    " Reverse the transformation between this object and its target\n\n    :type: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']\n    "
    object: 'Object' = None
    " Parent Object for hook, also recalculates and clears offset\n\n    :type: 'Object'\n    "
    strength: float = None
    ' Relative force of the hook\n\n    :type: float\n    '
    subtarget: str = None
    ' Name of Parent Bone for hook (if applicable), also recalculates and clears offset\n\n    :type: str\n    '
    use_falloff_uniform: bool = None
    ' Compensate for non-uniform object scale\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Name of Vertex Group which determines influence of modifier per point\n\n    :type: str\n    '
    vertex_indices: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Indices of vertices bound to the modifier. For bezier curves, handles count as additional vertices\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '

    def vertex_indices_set(self, indices: typing.Union[bpy_prop_array[int], typing.Sequence[int]]):
        """ Validates and assigns the array of vertex indices bound to the modifier

        :param indices: Vertex Indices
        :type indices: typing.Union[bpy_prop_array[int], typing.Sequence[int]]
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LaplacianDeformModifier(Modifier, bpy_struct):
    """ Mesh deform modifier
    """
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    is_bind: bool = None
    ' Whether geometry has been bound to anchors\n\n    :type: bool\n    '
    iterations: int = None
    ' \n\n    :type: int\n    '
    vertex_group: str = None
    ' Name of Vertex Group which determines Anchors\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LaplacianSmoothModifier(Modifier, bpy_struct):
    """ Smoothing effect modifier
    """
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    iterations: int = None
    ' \n\n    :type: int\n    '
    lambda_border: float = None
    ' Lambda factor in border\n\n    :type: float\n    '
    lambda_factor: float = None
    ' Smooth factor effect\n\n    :type: float\n    '
    use_normalized: bool = None
    ' Improve and stabilize the enhanced shape\n\n    :type: bool\n    '
    use_volume_preserve: bool = None
    ' Apply volume preservation after smooth\n\n    :type: bool\n    '
    use_x: bool = None
    ' Smooth object along X axis\n\n    :type: bool\n    '
    use_y: bool = None
    ' Smooth object along Y axis\n\n    :type: bool\n    '
    use_z: bool = None
    ' Smooth object along Z axis\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Name of Vertex Group which determines influence of modifier per point\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LatticeModifier(Modifier, bpy_struct):
    """ Lattice deformation modifier
    """
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    object: 'Object' = None
    " Lattice object to deform with\n\n    :type: 'Object'\n    "
    strength: float = None
    ' Strength of modifier effect\n\n    :type: float\n    '
    vertex_group: str = None
    ' Name of Vertex Group which determines influence of modifier per point\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MaskModifier(Modifier, bpy_struct):
    """ Mask modifier to hide parts of the mesh
    """
    armature: 'Object' = None
    " Armature to use as source of bones to mask\n\n    :type: 'Object'\n    "
    invert_vertex_group: bool = None
    ' Use vertices that are not part of region defined\n\n    :type: bool\n    '
    mode: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    threshold: float = None
    ' Weights over this threshold remain\n\n    :type: float\n    '
    use_smooth: bool = None
    ' Use vertex group weights to cut faces at the weight contour\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Vertex group name\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshCacheModifier(Modifier, bpy_struct):
    """ Cache Mesh
    """
    cache_format: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    deform_mode: typing.Union[str, int] = None
    ' * ``OVERWRITE`` Overwrite -- Replace vertex coords with cached values. * ``INTEGRATE`` Integrate -- Integrate deformation from this modifiers input with the mesh-cache coords (useful for shape keys).\n\n    :type: typing.Union[str, int]\n    '
    eval_factor: float = None
    ' Evaluation time in seconds\n\n    :type: float\n    '
    eval_frame: float = None
    ' The frame to evaluate (starting at 0)\n\n    :type: float\n    '
    eval_time: float = None
    ' Evaluation time in seconds\n\n    :type: float\n    '
    factor: float = None
    ' Influence of the deformation\n\n    :type: float\n    '
    filepath: str = None
    ' Path to external displacements file\n\n    :type: str\n    '
    flip_axis: typing.Union[typing.Set[int], typing.Set[str]] = None
    ' \n\n    :type: typing.Union[typing.Set[int], typing.Set[str]]\n    '
    forward_axis: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    frame_scale: float = None
    ' Evaluation time in seconds\n\n    :type: float\n    '
    frame_start: float = None
    ' Add this to the start frame\n\n    :type: float\n    '
    interpolation: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    play_mode: typing.Union[str, int] = None
    " * ``SCENE`` Scene -- Use the time from the scene. * ``CUSTOM`` Custom -- Use the modifier's own time evaluation.\n\n    :type: typing.Union[str, int]\n    "
    time_mode: typing.Union[str, int] = None
    ' Method to control playback time * ``FRAME`` Frame -- Control playback using a frame-number (ignoring time FPS and start frame from the file). * ``TIME`` Time -- Control playback using time in seconds. * ``FACTOR`` Factor -- Control playback using a value between 0 and 1.\n\n    :type: typing.Union[str, int]\n    '
    up_axis: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    vertex_group: str = None
    ' Name of the Vertex Group which determines the influence of the modifier per point\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshDeformModifier(Modifier, bpy_struct):
    """ Mesh deformation modifier to deform with other meshes
    """
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    is_bound: bool = None
    ' Whether geometry has been bound to control cage\n\n    :type: bool\n    '
    object: 'Object' = None
    " Mesh object to deform with\n\n    :type: 'Object'\n    "
    precision: int = None
    ' The grid size for binding\n\n    :type: int\n    '
    use_dynamic_bind: bool = None
    ' Recompute binding dynamically on top of other deformers (slower and more memory consuming)\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Vertex group name\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshSequenceCacheModifier(Modifier, bpy_struct):
    """ Cache Mesh
    """
    cache_file: 'CacheFile' = None
    " \n\n    :type: 'CacheFile'\n    "
    object_path: str = None
    ' Path to the object in the Alembic archive used to lookup geometric data\n\n    :type: str\n    '
    read_data: typing.Union[typing.Set[str], typing.Set[int]] = None
    ' Data to read from the cache\n\n    :type: typing.Union[typing.Set[str], typing.Set[int]]\n    '
    use_vertex_interpolation: bool = None
    ' Allow interpolation of vertex positions\n\n    :type: bool\n    '
    velocity_scale: float = None
    ' Multiplier used to control the magnitude of the velocity vectors for time effects\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MeshToVolumeModifier(Modifier, bpy_struct):
    density: float = None
    ' Density of the new volume\n\n    :type: float\n    '
    exterior_band_width: float = None
    ' Width of the volume outside of the mesh\n\n    :type: float\n    '
    interior_band_width: float = None
    ' Width of the volume inside of the mesh\n\n    :type: float\n    '
    object: 'Object' = None
    " Object\n\n    :type: 'Object'\n    "
    resolution_mode: typing.Union[str, int] = None
    ' Mode for how the desired voxel size is specified * ``VOXEL_AMOUNT`` Voxel Amount -- Desired number of voxels along one axis. * ``VOXEL_SIZE`` Voxel Size -- Desired voxel side length.\n\n    :type: typing.Union[str, int]\n    '
    use_fill_volume: bool = None
    ' Initialize the density grid in every cell inside the enclosed volume\n\n    :type: bool\n    '
    voxel_amount: int = None
    ' Approximate number of voxels along one axis\n\n    :type: int\n    '
    voxel_size: float = None
    ' Smaller values result in a higher resolution output\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MirrorModifier(Modifier, bpy_struct):
    """ Mirroring modifier
    """
    bisect_threshold: float = None
    ' Distance from the bisect plane within which vertices are removed\n\n    :type: float\n    '
    merge_threshold: float = None
    ' Distance within which mirrored vertices are merged\n\n    :type: float\n    '
    mirror_object: 'Object' = None
    " Object to use as mirror\n\n    :type: 'Object'\n    "
    mirror_offset_u: float = None
    ' Amount to offset mirrored UVs flipping point from the 0.5 on the U axis\n\n    :type: float\n    '
    mirror_offset_v: float = None
    ' Amount to offset mirrored UVs flipping point from the 0.5 point on the V axis\n\n    :type: float\n    '
    offset_u: float = None
    ' Mirrored UV offset on the U axis\n\n    :type: float\n    '
    offset_v: float = None
    ' Mirrored UV offset on the V axis\n\n    :type: float\n    '
    use_axis: typing.List[bool] = None
    ' Enable axis mirror\n\n    :type: typing.List[bool]\n    '
    use_bisect_axis: typing.List[bool] = None
    ' Cuts the mesh across the mirror plane\n\n    :type: typing.List[bool]\n    '
    use_bisect_flip_axis: typing.List[bool] = None
    ' Flips the direction of the slice\n\n    :type: typing.List[bool]\n    '
    use_clip: bool = None
    ' Prevent vertices from going through the mirror during transform\n\n    :type: bool\n    '
    use_mirror_merge: bool = None
    ' Merge vertices within the merge threshold\n\n    :type: bool\n    '
    use_mirror_u: bool = None
    ' Mirror the U texture coordinate around the flip offset point\n\n    :type: bool\n    '
    use_mirror_udim: bool = None
    ' Mirror the texture coordinate around each tile center\n\n    :type: bool\n    '
    use_mirror_v: bool = None
    ' Mirror the V texture coordinate around the flip offset point\n\n    :type: bool\n    '
    use_mirror_vertex_groups: bool = None
    ' Mirror vertex groups (e.g. .R->.L)\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MultiresModifier(Modifier, bpy_struct):
    """ Multiresolution mesh modifier
    """
    boundary_smooth: typing.Union[str, int] = None
    ' Controls how open boundaries are smoothed\n\n    :type: typing.Union[str, int]\n    '
    filepath: str = None
    ' Path to external displacements file\n\n    :type: str\n    '
    is_external: bool = None
    ' Store multires displacements outside the .blend file, to save memory\n\n    :type: bool\n    '
    levels: int = None
    ' Number of subdivisions to use in the viewport\n\n    :type: int\n    '
    quality: int = None
    ' Accuracy of vertex positions, lower value is faster but less precise\n\n    :type: int\n    '
    render_levels: int = None
    ' The subdivision level visible at render time\n\n    :type: int\n    '
    sculpt_levels: int = None
    ' Number of subdivisions to use in sculpt mode\n\n    :type: int\n    '
    show_only_control_edges: bool = None
    ' Skip drawing/rendering of interior subdivided edges\n\n    :type: bool\n    '
    total_levels: int = None
    ' Number of subdivisions for which displacements are stored\n\n    :type: int\n    '
    use_creases: bool = None
    ' Use mesh crease information to sharpen edges or corners\n\n    :type: bool\n    '
    use_custom_normals: bool = None
    ' Interpolates existing custom normals to resulting mesh\n\n    :type: bool\n    '
    use_sculpt_base_mesh: bool = None
    ' Make Sculpt Mode tools deform the base mesh while previewing the displacement of higher subdivision levels\n\n    :type: bool\n    '
    uv_smooth: typing.Union[str, int] = None
    ' Controls how smoothing is applied to UVs\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodesModifier(Modifier, bpy_struct):
    node_group: 'NodeTree' = None
    " Node group that controls what this modifier does\n\n    :type: 'NodeTree'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NormalEditModifier(Modifier, bpy_struct):
    """ Modifier affecting/generating custom normals
    """
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    mix_factor: float = None
    ' How much of generated normals to mix with exiting ones\n\n    :type: float\n    '
    mix_limit: float = None
    ' Maximum angle between old and new normals\n\n    :type: float\n    '
    mix_mode: typing.Union[str, int] = None
    ' How to mix generated normals with existing ones * ``COPY`` Copy -- Copy new normals (overwrite existing). * ``ADD`` Add -- Copy sum of new and old normals. * ``SUB`` Subtract -- Copy new normals minus old normals. * ``MUL`` Multiply -- Copy product of old and new normals (not cross product).\n\n    :type: typing.Union[str, int]\n    '
    mode: typing.Union[str, int] = None
    " How to affect (generate) normals * ``RADIAL`` Radial -- From an ellipsoid (shape defined by the boundbox's dimensions, target is optional). * ``DIRECTIONAL`` Directional -- Normals 'track' (point to) the target object.\n\n    :type: typing.Union[str, int]\n    "
    no_polynors_fix: bool = None
    ' Do not flip polygons when their normals are not consistent with their newly computed custom vertex normals\n\n    :type: bool\n    '
    offset: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Offset from object's center\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    target: 'Object' = None
    " Target object used to affect normals\n\n    :type: 'Object'\n    "
    use_direction_parallel: bool = None
    " Use same direction for all normals, from origin to target's center (Directional mode only)\n\n    :type: bool\n    "
    vertex_group: str = None
    ' Vertex group name for selecting/weighting the affected areas\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ObjectModifiers(bpy_prop_collection[Modifier], bpy_struct):
    """ Collection of object modifiers
    """
    active: 'Modifier' = None
    " The active modifier in the list\n\n    :type: 'Modifier'\n    "

    def new(self, name: str, type: typing.Union[str, int]) -> 'Modifier':
        """ Add a new modifier

        :param name: New name for the modifier
        :type name: str
        :param type: Modifier type to add
        :type type: typing.Union[str, int]
        :rtype: 'Modifier'
        :return: Newly created modifier
        """
        pass

    def remove(self, modifier: 'Modifier'):
        """ Remove an existing modifier from the object

        :param modifier: Modifier to remove
        :type modifier: 'Modifier'
        """
        pass

    def clear(self):
        """ Remove all modifiers from the object

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class OceanModifier(Modifier, bpy_struct):
    """ Simulate an ocean surface
    """
    bake_foam_fade: float = None
    ' How much foam accumulates over time (baked ocean only)\n\n    :type: float\n    '
    choppiness: float = None
    " Choppiness of the wave's crest (adds some horizontal component to the displacement)\n\n    :type: float\n    "
    damping: float = None
    ' Damp reflected waves going in opposite direction to the wind\n\n    :type: float\n    '
    depth: float = None
    ' Depth of the solid ground below the water surface\n\n    :type: float\n    '
    fetch_jonswap: float = None
    " This is the distance from a lee shore, called the fetch, or the distance over which the wind blows with constant velocity. Used by 'JONSWAP' and 'TMA' models\n\n    :type: float\n    "
    filepath: str = None
    ' Path to a folder to store external baked images\n\n    :type: str\n    '
    foam_coverage: float = None
    ' Amount of generated foam\n\n    :type: float\n    '
    foam_layer_name: str = None
    ' Name of the vertex color layer used for foam\n\n    :type: str\n    '
    frame_end: int = None
    ' End frame of the ocean baking\n\n    :type: int\n    '
    frame_start: int = None
    ' Start frame of the ocean baking\n\n    :type: int\n    '
    geometry_mode: typing.Union[str, int] = None
    ' Method of modifying geometry * ``GENERATE`` Generate -- Generate ocean surface geometry at the specified resolution. * ``DISPLACE`` Displace -- Displace existing geometry according to simulation.\n\n    :type: typing.Union[str, int]\n    '
    invert_spray: bool = None
    ' Invert the spray direction map\n\n    :type: bool\n    '
    is_cached: bool = None
    ' Whether the ocean is using cached data or simulating\n\n    :type: bool\n    '
    random_seed: int = None
    ' Seed of the random generator\n\n    :type: int\n    '
    repeat_x: int = None
    ' Repetitions of the generated surface in X\n\n    :type: int\n    '
    repeat_y: int = None
    ' Repetitions of the generated surface in Y\n\n    :type: int\n    '
    resolution: int = None
    ' Resolution of the generated surface for rendering and baking\n\n    :type: int\n    '
    sharpen_peak_jonswap: float = None
    " Peak sharpening for 'JONSWAP' and 'TMA' models\n\n    :type: float\n    "
    size: float = None
    ' Surface scale factor (does not affect the height of the waves)\n\n    :type: float\n    '
    spatial_size: int = None
    ' Size of the simulation domain (in meters), and of the generated geometry (in BU)\n\n    :type: int\n    '
    spectrum: typing.Union[str, int] = None
    " Spectrum to use * ``PHILLIPS`` Turbulent Ocean -- Use for turbulent seas with foam. * ``PIERSON_MOSKOWITZ`` Established Ocean -- Use for a large area, established ocean (Pierson-Moskowitz method). * ``JONSWAP`` Established Ocean (Sharp Peaks) -- Use for established oceans ('JONSWAP', Pierson-Moskowitz method) with peak sharpening. * ``TEXEL_MARSEN_ARSLOE`` Shallow Water -- Use for shallow water ('JONSWAP', 'TMA' - Texel-Marsen-Arsloe method).\n\n    :type: typing.Union[str, int]\n    "
    spray_layer_name: str = None
    ' Name of the vertex color layer used for the spray direction map\n\n    :type: str\n    '
    time: float = None
    ' Current time of the simulation\n\n    :type: float\n    '
    use_foam: bool = None
    ' Generate foam mask as a vertex color channel\n\n    :type: bool\n    '
    use_normals: bool = None
    " Output normals for bump mapping - disabling can speed up performance if it's not needed\n\n    :type: bool\n    "
    use_spray: bool = None
    ' Generate map of spray direction as a vertex color channel\n\n    :type: bool\n    '
    viewport_resolution: int = None
    ' Viewport resolution of the generated surface\n\n    :type: int\n    '
    wave_alignment: float = None
    ' How much the waves are aligned to each other\n\n    :type: float\n    '
    wave_direction: float = None
    ' Main direction of the waves when they are (partially) aligned\n\n    :type: float\n    '
    wave_scale: float = None
    ' Scale of the displacement effect\n\n    :type: float\n    '
    wave_scale_min: float = None
    ' Shortest allowed wavelength\n\n    :type: float\n    '
    wind_velocity: float = None
    ' Wind speed\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ParticleInstanceModifier(Modifier, bpy_struct):
    """ Particle system instancing modifier
    """
    axis: typing.Union[str, int] = None
    ' Pole axis for rotation\n\n    :type: typing.Union[str, int]\n    '
    index_layer_name: str = None
    ' Custom data layer name for the index\n\n    :type: str\n    '
    object: 'Object' = None
    " Object that has the particle system\n\n    :type: 'Object'\n    "
    particle_amount: float = None
    ' Amount of particles to use for instancing\n\n    :type: float\n    '
    particle_offset: float = None
    ' Relative offset of particles to use for instancing, to avoid overlap of multiple instances\n\n    :type: float\n    '
    particle_system: 'ParticleSystem' = None
    " \n\n    :type: 'ParticleSystem'\n    "
    particle_system_index: int = None
    ' \n\n    :type: int\n    '
    position: float = None
    ' Position along path\n\n    :type: float\n    '
    random_position: float = None
    ' Randomize position along path\n\n    :type: float\n    '
    random_rotation: float = None
    ' Randomize rotation around path\n\n    :type: float\n    '
    rotation: float = None
    ' Rotation around path\n\n    :type: float\n    '
    show_alive: bool = None
    ' Show instances when particles are alive\n\n    :type: bool\n    '
    show_dead: bool = None
    ' Show instances when particles are dead\n\n    :type: bool\n    '
    show_unborn: bool = None
    ' Show instances when particles are unborn\n\n    :type: bool\n    '
    space: typing.Union[str, int] = None
    ' Space to use for copying mesh data * ``LOCAL`` Local -- Use offset from the particle object in the instance object. * ``WORLD`` World -- Use world space offset in the instance object.\n\n    :type: typing.Union[str, int]\n    '
    use_children: bool = None
    ' Create instances from child particles\n\n    :type: bool\n    '
    use_normal: bool = None
    ' Create instances from normal particles\n\n    :type: bool\n    '
    use_path: bool = None
    ' Create instances along particle paths\n\n    :type: bool\n    '
    use_preserve_shape: bool = None
    " Don't stretch the object\n\n    :type: bool\n    "
    use_size: bool = None
    ' Use particle size to scale the instances\n\n    :type: bool\n    '
    value_layer_name: str = None
    ' Custom data layer name for the randomized value\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ParticleSystemModifier(Modifier, bpy_struct):
    """ Particle system simulation modifier
    """
    particle_system: 'ParticleSystem' = None
    " Particle System that this modifier controls\n\n    :type: 'ParticleSystem'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class RemeshModifier(Modifier, bpy_struct):
    """ Generate a new surface with regular topology that follows the shape of the input mesh
    """
    adaptivity: float = None
    ' Reduces the final face count by simplifying geometry where detail is not needed, generating triangles. A value greater than 0 disables Fix Poles\n\n    :type: float\n    '
    mode: typing.Union[str, int] = None
    ' * ``BLOCKS`` Blocks -- Output a blocky surface with no smoothing. * ``SMOOTH`` Smooth -- Output a smooth surface with no sharp-features detection. * ``SHARP`` Sharp -- Output a surface that reproduces sharp edges and corners from the input mesh. * ``VOXEL`` Voxel -- Output a mesh corresponding to the volume of the original mesh.\n\n    :type: typing.Union[str, int]\n    '
    octree_depth: int = None
    ' Resolution of the octree; higher values give finer details\n\n    :type: int\n    '
    scale: float = None
    ' The ratio of the largest dimension of the model over the size of the grid\n\n    :type: float\n    '
    sharpness: float = None
    ' Tolerance for outliers; lower values filter noise while higher values will reproduce edges closer to the input\n\n    :type: float\n    '
    threshold: float = None
    ' If removing disconnected pieces, minimum size of components to preserve as a ratio of the number of polygons in the largest component\n\n    :type: float\n    '
    use_remove_disconnected: bool = None
    ' \n\n    :type: bool\n    '
    use_smooth_shade: bool = None
    ' Output faces with smooth shading rather than flat shaded\n\n    :type: bool\n    '
    voxel_size: float = None
    ' Size of the voxel in object space used for volume evaluation. Lower values preserve finer details\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ScrewModifier(Modifier, bpy_struct):
    """ Revolve edges
    """
    angle: float = None
    ' Angle of revolution\n\n    :type: float\n    '
    axis: typing.Union[str, int] = None
    ' Screw axis\n\n    :type: typing.Union[str, int]\n    '
    iterations: int = None
    ' Number of times to apply the screw operation\n\n    :type: int\n    '
    merge_threshold: float = None
    ' Limit below which to merge vertices\n\n    :type: float\n    '
    object: 'Object' = None
    " Object to define the screw axis\n\n    :type: 'Object'\n    "
    render_steps: int = None
    ' Number of steps in the revolution\n\n    :type: int\n    '
    screw_offset: float = None
    ' Offset the revolution along its axis\n\n    :type: float\n    '
    steps: int = None
    ' Number of steps in the revolution\n\n    :type: int\n    '
    use_merge_vertices: bool = None
    ' Merge adjacent vertices (screw offset must be zero)\n\n    :type: bool\n    '
    use_normal_calculate: bool = None
    ' Calculate the order of edges (needed for meshes, but not curves)\n\n    :type: bool\n    '
    use_normal_flip: bool = None
    ' Flip normals of lathed faces\n\n    :type: bool\n    '
    use_object_screw_offset: bool = None
    ' Use the distance between the objects to make a screw\n\n    :type: bool\n    '
    use_smooth_shade: bool = None
    ' Output faces with smooth shading rather than flat shaded\n\n    :type: bool\n    '
    use_stretch_u: bool = None
    " Stretch the U coordinates between 0 and 1 when UV's are present\n\n    :type: bool\n    "
    use_stretch_v: bool = None
    " Stretch the V coordinates between 0 and 1 when UV's are present\n\n    :type: bool\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShrinkwrapModifier(Modifier, bpy_struct):
    """ Shrink wrapping modifier to shrink wrap and object to a target
    """
    auxiliary_target: 'Object' = None
    " Additional mesh target to shrink to\n\n    :type: 'Object'\n    "
    cull_face: typing.Union[str, int] = None
    ' Stop vertices from projecting to a face on the target when facing towards/away\n\n    :type: typing.Union[str, int]\n    '
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    offset: float = None
    ' Distance to keep from the target\n\n    :type: float\n    '
    project_limit: float = None
    ' Limit the distance used for projection (zero disables)\n\n    :type: float\n    '
    subsurf_levels: int = None
    " Number of subdivisions that must be performed before extracting vertices' positions and normals\n\n    :type: int\n    "
    target: 'Object' = None
    " Mesh target to shrink to\n\n    :type: 'Object'\n    "
    use_invert_cull: bool = None
    ' When projecting in the negative direction invert the face cull mode\n\n    :type: bool\n    '
    use_negative_direction: bool = None
    ' Allow vertices to move in the negative direction of axis\n\n    :type: bool\n    '
    use_positive_direction: bool = None
    ' Allow vertices to move in the positive direction of axis\n\n    :type: bool\n    '
    use_project_x: bool = None
    ' \n\n    :type: bool\n    '
    use_project_y: bool = None
    ' \n\n    :type: bool\n    '
    use_project_z: bool = None
    ' \n\n    :type: bool\n    '
    vertex_group: str = None
    ' Vertex group name\n\n    :type: str\n    '
    wrap_method: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    wrap_mode: typing.Union[str, int] = None
    ' Select how vertices are constrained to the target surface\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SimpleDeformModifier(Modifier, bpy_struct):
    """ Simple deformation modifier to apply effects such as twisting and bending
    """
    angle: float = None
    ' Angle of deformation\n\n    :type: float\n    '
    deform_axis: typing.Union[str, int] = None
    ' Deform around local axis\n\n    :type: typing.Union[str, int]\n    '
    deform_method: typing.Union[str, int] = None
    ' * ``TWIST`` Twist -- Rotate around the Z axis of the modifier space. * ``BEND`` Bend -- Bend the mesh over the Z axis of the modifier space. * ``TAPER`` Taper -- Linearly scale along Z axis of the modifier space. * ``STRETCH`` Stretch -- Stretch the object along the Z axis of the modifier space.\n\n    :type: typing.Union[str, int]\n    '
    factor: float = None
    ' Amount to deform object\n\n    :type: float\n    '
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    limits: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Lower/Upper limits for deform\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    lock_x: bool = None
    ' Do not allow deformation along the X axis\n\n    :type: bool\n    '
    lock_y: bool = None
    ' Do not allow deformation along the Y axis\n\n    :type: bool\n    '
    lock_z: bool = None
    ' Do not allow deformation along the Z axis\n\n    :type: bool\n    '
    origin: 'Object' = None
    " Offset the origin and orientation of the deformation\n\n    :type: 'Object'\n    "
    vertex_group: str = None
    ' Vertex group name\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SkinModifier(Modifier, bpy_struct):
    """ Generate Skin
    """
    branch_smoothing: float = None
    ' Smooth complex geometry around branches\n\n    :type: float\n    '
    use_smooth_shade: bool = None
    ' Output faces with smooth shading rather than flat shaded\n\n    :type: bool\n    '
    use_x_symmetry: bool = None
    ' Avoid making unsymmetrical quads across the X axis\n\n    :type: bool\n    '
    use_y_symmetry: bool = None
    ' Avoid making unsymmetrical quads across the Y axis\n\n    :type: bool\n    '
    use_z_symmetry: bool = None
    ' Avoid making unsymmetrical quads across the Z axis\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SmoothModifier(Modifier, bpy_struct):
    """ Smoothing effect modifier
    """
    factor: float = None
    ' Strength of modifier effect\n\n    :type: float\n    '
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    iterations: int = None
    ' \n\n    :type: int\n    '
    use_x: bool = None
    ' Smooth object along X axis\n\n    :type: bool\n    '
    use_y: bool = None
    ' Smooth object along Y axis\n\n    :type: bool\n    '
    use_z: bool = None
    ' Smooth object along Z axis\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Name of Vertex Group which determines influence of modifier per point\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SoftBodyModifier(Modifier, bpy_struct):
    """ Soft body simulation modifier
    """
    point_cache: 'PointCache' = None
    " \n\n    :type: 'PointCache'\n    "
    settings: 'SoftBodySettings' = None
    " \n\n    :type: 'SoftBodySettings'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SolidifyModifier(Modifier, bpy_struct):
    """ Create a solid skin, compensating for sharp angles
    """
    bevel_convex: float = None
    ' Edge bevel weight to be added to outside edges\n\n    :type: float\n    '
    edge_crease_inner: float = None
    ' Assign a crease to inner edges\n\n    :type: float\n    '
    edge_crease_outer: float = None
    ' Assign a crease to outer edges\n\n    :type: float\n    '
    edge_crease_rim: float = None
    ' Assign a crease to the edges making up the rim\n\n    :type: float\n    '
    invert_vertex_group: bool = None
    ' Invert the vertex group influence\n\n    :type: bool\n    '
    material_offset: int = None
    ' Offset material index of generated faces\n\n    :type: int\n    '
    material_offset_rim: int = None
    ' Offset material index of generated rim faces\n\n    :type: int\n    '
    nonmanifold_boundary_mode: typing.Union[str, int] = None
    ' Selects the boundary adjustment algorithm * ``NONE`` None -- No shape correction. * ``ROUND`` Round -- Round open perimeter shape. * ``FLAT`` Flat -- Flat open perimeter shape.\n\n    :type: typing.Union[str, int]\n    '
    nonmanifold_merge_threshold: float = None
    ' Distance within which degenerated geometry is merged\n\n    :type: float\n    '
    nonmanifold_thickness_mode: typing.Union[str, int] = None
    ' Selects the used thickness algorithm * ``FIXED`` Fixed -- Most basic thickness calculation. * ``EVEN`` Even -- Even thickness calculation which takes the angle between faces into account. * ``CONSTRAINTS`` Constraints -- Thickness calculation using constraints, most advanced.\n\n    :type: typing.Union[str, int]\n    '
    offset: float = None
    ' Offset the thickness from the center\n\n    :type: float\n    '
    rim_vertex_group: str = None
    ' Vertex group that the generated rim geometry will be weighted to\n\n    :type: str\n    '
    shell_vertex_group: str = None
    ' Vertex group that the generated shell geometry will be weighted to\n\n    :type: str\n    '
    solidify_mode: typing.Union[str, int] = None
    ' Selects the used algorithm * ``EXTRUDE`` Simple -- Output a solidified version of a mesh by simple extrusion. * ``NON_MANIFOLD`` Complex -- Output a manifold mesh even if the base mesh is non-manifold, where edges have 3 or more connecting faces. This method is slower.\n\n    :type: typing.Union[str, int]\n    '
    thickness: float = None
    ' Thickness of the shell\n\n    :type: float\n    '
    thickness_clamp: float = None
    ' Offset clamp based on geometry scale\n\n    :type: float\n    '
    thickness_vertex_group: float = None
    ' Thickness factor to use for zero vertex group influence\n\n    :type: float\n    '
    use_even_offset: bool = None
    ' Maintain thickness by adjusting for sharp corners (slow, disable when not needed)\n\n    :type: bool\n    '
    use_flat_faces: bool = None
    ' Make faces use the minimal vertex weight assigned to their vertices(ensures new faces remain parallel to their original ones, slow, disable when not needed)\n\n    :type: bool\n    '
    use_flip_normals: bool = None
    ' Invert the face direction\n\n    :type: bool\n    '
    use_quality_normals: bool = None
    ' Calculate normals which result in more even thickness (slow, disable when not needed)\n\n    :type: bool\n    '
    use_rim: bool = None
    ' Create edge loops between the inner and outer surfaces on face edges (slow, disable when not needed)\n\n    :type: bool\n    '
    use_rim_only: bool = None
    ' Only add the rim to the original data\n\n    :type: bool\n    '
    use_thickness_angle_clamp: bool = None
    ' Clamp thickness based on angles\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Vertex group name\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SubsurfModifier(Modifier, bpy_struct):
    """ Subdivision surface modifier
    """
    boundary_smooth: typing.Union[str, int] = None
    ' Controls how open boundaries are smoothed\n\n    :type: typing.Union[str, int]\n    '
    levels: int = None
    ' Number of subdivisions to perform\n\n    :type: int\n    '
    quality: int = None
    ' Accuracy of vertex positions, lower value is faster but less precise\n\n    :type: int\n    '
    render_levels: int = None
    ' Number of subdivisions to perform when rendering\n\n    :type: int\n    '
    show_only_control_edges: bool = None
    ' Skip displaying interior subdivided edges\n\n    :type: bool\n    '
    subdivision_type: typing.Union[str, int] = None
    ' Select type of subdivision algorithm\n\n    :type: typing.Union[str, int]\n    '
    use_creases: bool = None
    ' Use mesh crease information to sharpen edges or corners\n\n    :type: bool\n    '
    use_custom_normals: bool = None
    ' Interpolates existing custom normals to resulting mesh\n\n    :type: bool\n    '
    use_limit_surface: bool = None
    ' Place vertices at the surface that would be produced with infinite levels of subdivision (smoothest possible shape)\n\n    :type: bool\n    '
    uv_smooth: typing.Union[str, int] = None
    ' Controls how smoothing is applied to UVs\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SurfaceDeformModifier(Modifier, bpy_struct):
    falloff: float = None
    ' Controls how much nearby polygons influence deformation\n\n    :type: float\n    '
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    is_bound: bool = None
    ' Whether geometry has been bound to target mesh\n\n    :type: bool\n    '
    strength: float = None
    ' Strength of modifier deformations\n\n    :type: float\n    '
    target: 'Object' = None
    " Mesh object to deform with\n\n    :type: 'Object'\n    "
    use_sparse_bind: bool = None
    ' Only record binding data for vertices matching the vertex group at the time of bind\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Vertex group name for selecting/weighting the affected areas\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SurfaceModifier(Modifier, bpy_struct):
    """ Surface modifier defining modifier stack position used for surface fields
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TriangulateModifier(Modifier, bpy_struct):
    """ Triangulate Mesh
    """
    keep_custom_normals: bool = None
    ' Try to preserve custom normals. Warning: Depending on chosen triangulation method, shading may not be fully preserved, "Fixed" method usually gives the best result here\n\n    :type: bool\n    '
    min_vertices: int = None
    ' Triangulate only polygons with vertex count greater than or equal to this number\n\n    :type: int\n    '
    ngon_method: typing.Union[str, int] = None
    ' Method for splitting the n-gons into triangles\n\n    :type: typing.Union[str, int]\n    '
    quad_method: typing.Union[str, int] = None
    ' Method for splitting the quads into triangles\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class UVProjectModifier(Modifier, bpy_struct):
    """ UV projection modifier to set UVs from a projector
    """
    aspect_x: float = None
    ' Horizontal aspect ratio (only used for camera projectors)\n\n    :type: float\n    '
    aspect_y: float = None
    ' Vertical aspect ratio (only used for camera projectors)\n\n    :type: float\n    '
    projector_count: int = None
    ' Number of projectors to use\n\n    :type: int\n    '
    projectors: bpy_prop_collection['UVProjector'] = None
    " \n\n    :type: bpy_prop_collection['UVProjector']\n    "
    scale_x: float = None
    ' Horizontal scale (only used for camera projectors)\n\n    :type: float\n    '
    scale_y: float = None
    ' Vertical scale (only used for camera projectors)\n\n    :type: float\n    '
    uv_layer: str = None
    ' UV map name\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class UVWarpModifier(Modifier, bpy_struct):
    """ Add target position to uv coordinates
    """
    axis_u: typing.Union[str, int] = None
    ' Pole axis for rotation\n\n    :type: typing.Union[str, int]\n    '
    axis_v: typing.Union[str, int] = None
    ' Pole axis for rotation\n\n    :type: typing.Union[str, int]\n    '
    bone_from: str = None
    ' Bone defining offset\n\n    :type: str\n    '
    bone_to: str = None
    ' Bone defining offset\n\n    :type: str\n    '
    center: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Center point for rotate/scale\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    object_from: 'Object' = None
    " Object defining offset\n\n    :type: 'Object'\n    "
    object_to: 'Object' = None
    " Object defining offset\n\n    :type: 'Object'\n    "
    offset: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " 2D Offset for the warp\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    rotation: float = None
    ' 2D Rotation for the warp\n\n    :type: float\n    '
    scale: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " 2D Scale for the warp\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    uv_layer: str = None
    ' UV Layer name\n\n    :type: str\n    '
    vertex_group: str = None
    ' Vertex group name\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class VertexWeightEditModifier(Modifier, bpy_struct):
    """ Edit the weights of vertices in a group
    """
    add_threshold: float = None
    " Lower bound for a vertex's weight to be added to the vgroup\n\n    :type: float\n    "
    default_weight: float = None
    ' Default weight a vertex will have if it is not in the vgroup\n\n    :type: float\n    '
    falloff_type: typing.Union[str, int] = None
    ' How weights are mapped to their new values * ``LINEAR`` Linear -- Null action. * ``CURVE`` Custom Curve. * ``SHARP`` Sharp. * ``SMOOTH`` Smooth. * ``ROOT`` Root. * ``ICON_SPHERECURVE`` Sphere. * ``RANDOM`` Random. * ``STEP`` Median Step -- Map all values below 0.5 to 0.0, and all others to 1.0.\n\n    :type: typing.Union[str, int]\n    '
    invert_falloff: bool = None
    ' Invert the resulting falloff weight\n\n    :type: bool\n    '
    invert_mask_vertex_group: bool = None
    ' Invert vertex group mask influence\n\n    :type: bool\n    '
    map_curve: 'CurveMapping' = None
    " Custom mapping curve\n\n    :type: 'CurveMapping'\n    "
    mask_constant: float = None
    ' Global influence of current modifications on vgroup\n\n    :type: float\n    '
    mask_tex_map_bone: str = None
    ' Which bone to take texture coordinates from\n\n    :type: str\n    '
    mask_tex_map_object: 'Object' = None
    " Which object to take texture coordinates from\n\n    :type: 'Object'\n    "
    mask_tex_mapping: typing.Union[str, int] = None
    ' Which texture coordinates to use for mapping * ``LOCAL`` Local -- Use local generated coordinates. * ``GLOBAL`` Global -- Use global coordinates. * ``OBJECT`` Object -- Use local generated coordinates of another object. * ``UV`` UV -- Use coordinates from a UV layer.\n\n    :type: typing.Union[str, int]\n    '
    mask_tex_use_channel: typing.Union[str, int] = None
    ' Which texture channel to use for masking\n\n    :type: typing.Union[str, int]\n    '
    mask_tex_uv_layer: str = None
    ' UV map name\n\n    :type: str\n    '
    mask_texture: 'Texture' = None
    " Masking texture\n\n    :type: 'Texture'\n    "
    mask_vertex_group: str = None
    ' Masking vertex group name\n\n    :type: str\n    '
    normalize: bool = None
    ' Normalize the resulting weights (otherwise they are only clamped within 0.0 to 1.0 range)\n\n    :type: bool\n    '
    remove_threshold: float = None
    " Upper bound for a vertex's weight to be removed from the vgroup\n\n    :type: float\n    "
    use_add: bool = None
    ' Add vertices with weight over threshold to vgroup\n\n    :type: bool\n    '
    use_remove: bool = None
    ' Remove vertices with weight below threshold from vgroup\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Vertex group name\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class VertexWeightMixModifier(Modifier, bpy_struct):
    """ Mix the weights of two vertex groups
    """
    default_weight_a: float = None
    ' Default weight a vertex will have if it is not in the first A vgroup\n\n    :type: float\n    '
    default_weight_b: float = None
    ' Default weight a vertex will have if it is not in the second B vgroup\n\n    :type: float\n    '
    invert_mask_vertex_group: bool = None
    ' Invert vertex group mask influence\n\n    :type: bool\n    '
    invert_vertex_group_a: bool = None
    ' Invert the influence of vertex group A\n\n    :type: bool\n    '
    invert_vertex_group_b: bool = None
    ' Invert the influence of vertex group B\n\n    :type: bool\n    '
    mask_constant: float = None
    ' Global influence of current modifications on vgroup\n\n    :type: float\n    '
    mask_tex_map_bone: str = None
    ' Which bone to take texture coordinates from\n\n    :type: str\n    '
    mask_tex_map_object: 'Object' = None
    " Which object to take texture coordinates from\n\n    :type: 'Object'\n    "
    mask_tex_mapping: typing.Union[str, int] = None
    ' Which texture coordinates to use for mapping * ``LOCAL`` Local -- Use local generated coordinates. * ``GLOBAL`` Global -- Use global coordinates. * ``OBJECT`` Object -- Use local generated coordinates of another object. * ``UV`` UV -- Use coordinates from a UV layer.\n\n    :type: typing.Union[str, int]\n    '
    mask_tex_use_channel: typing.Union[str, int] = None
    ' Which texture channel to use for masking\n\n    :type: typing.Union[str, int]\n    '
    mask_tex_uv_layer: str = None
    ' UV map name\n\n    :type: str\n    '
    mask_texture: 'Texture' = None
    " Masking texture\n\n    :type: 'Texture'\n    "
    mask_vertex_group: str = None
    ' Masking vertex group name\n\n    :type: str\n    '
    mix_mode: typing.Union[str, int] = None
    " How weights from vgroup B affect weights of vgroup A * ``SET`` Replace -- Replace VGroup A's weights by VGroup B's ones. * ``ADD`` Add -- Add VGroup B's weights to VGroup A's ones. * ``SUB`` Subtract -- Subtract VGroup B's weights from VGroup A's ones. * ``MUL`` Multiply -- Multiply VGroup A's weights by VGroup B's ones. * ``DIV`` Divide -- Divide VGroup A's weights by VGroup B's ones. * ``DIF`` Difference -- Difference between VGroup A's and VGroup B's weights. * ``AVG`` Average -- Average value of VGroup A's and VGroup B's weights. * ``MIN`` Minimum -- Minimum of VGroup A's and VGroup B's weights. * ``MAX`` Maximum -- Maximum of VGroup A's and VGroup B's weights.\n\n    :type: typing.Union[str, int]\n    "
    mix_set: typing.Union[str, int] = None
    ' Which vertices should be affected * ``ALL`` All -- Affect all vertices (might add some to VGroup A). * ``A`` VGroup A -- Affect vertices in VGroup A. * ``B`` VGroup B -- Affect vertices in VGroup B (might add some to VGroup A). * ``OR`` VGroup A or B -- Affect vertices in at least one of both VGroups (might add some to VGroup A). * ``AND`` VGroup A and B -- Affect vertices in both groups.\n\n    :type: typing.Union[str, int]\n    '
    normalize: bool = None
    ' Normalize the resulting weights (otherwise they are only clamped within 0.0 to 1.0 range)\n\n    :type: bool\n    '
    vertex_group_a: str = None
    ' First vertex group name\n\n    :type: str\n    '
    vertex_group_b: str = None
    ' Second vertex group name\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class VertexWeightProximityModifier(Modifier, bpy_struct):
    """ Set the weights of vertices in a group from a target object's distance
    """
    falloff_type: typing.Union[str, int] = None
    ' How weights are mapped to their new values * ``LINEAR`` Linear -- Null action. * ``CURVE`` Custom Curve. * ``SHARP`` Sharp. * ``SMOOTH`` Smooth. * ``ROOT`` Root. * ``ICON_SPHERECURVE`` Sphere. * ``RANDOM`` Random. * ``STEP`` Median Step -- Map all values below 0.5 to 0.0, and all others to 1.0.\n\n    :type: typing.Union[str, int]\n    '
    invert_falloff: bool = None
    ' Invert the resulting falloff weight\n\n    :type: bool\n    '
    invert_mask_vertex_group: bool = None
    ' Invert vertex group mask influence\n\n    :type: bool\n    '
    map_curve: 'CurveMapping' = None
    " Custom mapping curve\n\n    :type: 'CurveMapping'\n    "
    mask_constant: float = None
    ' Global influence of current modifications on vgroup\n\n    :type: float\n    '
    mask_tex_map_bone: str = None
    ' Which bone to take texture coordinates from\n\n    :type: str\n    '
    mask_tex_map_object: 'Object' = None
    " Which object to take texture coordinates from\n\n    :type: 'Object'\n    "
    mask_tex_mapping: typing.Union[str, int] = None
    ' Which texture coordinates to use for mapping * ``LOCAL`` Local -- Use local generated coordinates. * ``GLOBAL`` Global -- Use global coordinates. * ``OBJECT`` Object -- Use local generated coordinates of another object. * ``UV`` UV -- Use coordinates from a UV layer.\n\n    :type: typing.Union[str, int]\n    '
    mask_tex_use_channel: typing.Union[str, int] = None
    ' Which texture channel to use for masking\n\n    :type: typing.Union[str, int]\n    '
    mask_tex_uv_layer: str = None
    ' UV map name\n\n    :type: str\n    '
    mask_texture: 'Texture' = None
    " Masking texture\n\n    :type: 'Texture'\n    "
    mask_vertex_group: str = None
    ' Masking vertex group name\n\n    :type: str\n    '
    max_dist: float = None
    ' Distance mapping to weight 1.0\n\n    :type: float\n    '
    min_dist: float = None
    ' Distance mapping to weight 0.0\n\n    :type: float\n    '
    normalize: bool = None
    ' Normalize the resulting weights (otherwise they are only clamped within 0.0 to 1.0 range)\n\n    :type: bool\n    '
    proximity_geometry: typing.Union[typing.Set[str], typing.Set[int]] = None
    " Use the shortest computed distance to target object's geometry as weight * ``VERTEX`` Vertex -- Compute distance to nearest vertex. * ``EDGE`` Edge -- Compute distance to nearest edge. * ``FACE`` Face -- Compute distance to nearest face.\n\n    :type: typing.Union[typing.Set[str], typing.Set[int]]\n    "
    proximity_mode: typing.Union[str, int] = None
    " Which distances to target object to use * ``OBJECT`` Object -- Use distance between affected and target objects. * ``GEOMETRY`` Geometry -- Use distance between affected object's vertices and target object, or target object's geometry.\n\n    :type: typing.Union[str, int]\n    "
    target: 'Object' = None
    " Object to calculate vertices distances from\n\n    :type: 'Object'\n    "
    vertex_group: str = None
    ' Vertex group name\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class VolumeDisplaceModifier(Modifier, bpy_struct):
    strength: float = None
    ' Strength of the displacement\n\n    :type: float\n    '
    texture: 'Texture' = None
    " \n\n    :type: 'Texture'\n    "
    texture_map_mode: typing.Union[str, int] = None
    " * ``LOCAL`` Local -- Use the local coordinate system for the texture coordinates. * ``GLOBAL`` Global -- Use the global coordinate system for the texture coordinates. * ``OBJECT`` Object -- Use the linked object's local coordinate system for the texture coordinates.\n\n    :type: typing.Union[str, int]\n    "
    texture_map_object: 'Object' = None
    " Object to use for texture mapping\n\n    :type: 'Object'\n    "
    texture_mid_level: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Subtracted from the texture color to get a displacement vector\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    texture_sample_radius: float = None
    ' Smaller values result in better performance but might cut off the volume\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class VolumeToMeshModifier(Modifier, bpy_struct):
    adaptivity: float = None
    ' Reduces the final face count by simplifying geometry where detail is not needed\n\n    :type: float\n    '
    grid_name: str = None
    ' Grid in the volume object that is converted to a mesh\n\n    :type: str\n    '
    object: 'Object' = None
    " Object\n\n    :type: 'Object'\n    "
    resolution_mode: typing.Union[str, int] = None
    ' Mode for how the desired voxel size is specified * ``GRID`` Grid -- Use resolution of the volume grid. * ``VOXEL_AMOUNT`` Voxel Amount -- Desired number of voxels along one axis. * ``VOXEL_SIZE`` Voxel Size -- Desired voxel side length.\n\n    :type: typing.Union[str, int]\n    '
    threshold: float = None
    ' Voxels with a larger value are inside the generated mesh\n\n    :type: float\n    '
    use_smooth_shade: bool = None
    ' Output faces with smooth shading rather than flat shaded\n\n    :type: bool\n    '
    voxel_amount: int = None
    ' Approximate number of voxels along one axis\n\n    :type: int\n    '
    voxel_size: float = None
    ' Smaller values result in a higher resolution output\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class WarpModifier(Modifier, bpy_struct):
    """ Warp modifier
    """
    bone_from: str = None
    ' Bone to transform from\n\n    :type: str\n    '
    bone_to: str = None
    ' Bone defining offset\n\n    :type: str\n    '
    falloff_curve: 'CurveMapping' = None
    " Custom falloff curve\n\n    :type: 'CurveMapping'\n    "
    falloff_radius: float = None
    ' Radius to apply\n\n    :type: float\n    '
    falloff_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    object_from: 'Object' = None
    " Object to transform from\n\n    :type: 'Object'\n    "
    object_to: 'Object' = None
    " Object to transform to\n\n    :type: 'Object'\n    "
    strength: float = None
    ' \n\n    :type: float\n    '
    texture: 'Texture' = None
    " \n\n    :type: 'Texture'\n    "
    texture_coords: typing.Union[str, int] = None
    " * ``LOCAL`` Local -- Use the local coordinate system for the texture coordinates. * ``GLOBAL`` Global -- Use the global coordinate system for the texture coordinates. * ``OBJECT`` Object -- Use the linked object's local coordinate system for the texture coordinates. * ``UV`` UV -- Use UV coordinates for the texture coordinates.\n\n    :type: typing.Union[str, int]\n    "
    texture_coords_bone: str = None
    ' Bone to set the texture coordinates\n\n    :type: str\n    '
    texture_coords_object: 'Object' = None
    " Object to set the texture coordinates\n\n    :type: 'Object'\n    "
    use_volume_preserve: bool = None
    ' Preserve volume when rotations are used\n\n    :type: bool\n    '
    uv_layer: str = None
    ' UV map name\n\n    :type: str\n    '
    vertex_group: str = None
    ' Vertex group name for modulating the deform\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class WaveModifier(Modifier, bpy_struct):
    """ Wave effect modifier
    """
    damping_time: float = None
    ' Number of frames in which the wave damps out after it dies\n\n    :type: float\n    '
    falloff_radius: float = None
    ' Distance after which it fades out\n\n    :type: float\n    '
    height: float = None
    ' Height of the wave\n\n    :type: float\n    '
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    lifetime: float = None
    ' Lifetime of the wave in frames, zero means infinite\n\n    :type: float\n    '
    narrowness: float = None
    ' Distance between the top and the base of a wave, the higher the value, the more narrow the wave\n\n    :type: float\n    '
    speed: float = None
    ' Speed of the wave, towards the starting point when negative\n\n    :type: float\n    '
    start_position_object: 'Object' = None
    " Object which defines the wave center\n\n    :type: 'Object'\n    "
    start_position_x: float = None
    ' X coordinate of the start position\n\n    :type: float\n    '
    start_position_y: float = None
    ' Y coordinate of the start position\n\n    :type: float\n    '
    texture: 'Texture' = None
    " \n\n    :type: 'Texture'\n    "
    texture_coords: typing.Union[str, int] = None
    " * ``LOCAL`` Local -- Use the local coordinate system for the texture coordinates. * ``GLOBAL`` Global -- Use the global coordinate system for the texture coordinates. * ``OBJECT`` Object -- Use the linked object's local coordinate system for the texture coordinates. * ``UV`` UV -- Use UV coordinates for the texture coordinates.\n\n    :type: typing.Union[str, int]\n    "
    texture_coords_bone: str = None
    ' Bone to set the texture coordinates\n\n    :type: str\n    '
    texture_coords_object: 'Object' = None
    " Object to set the texture coordinates\n\n    :type: 'Object'\n    "
    time_offset: float = None
    ' Either the starting frame (for positive speed) or ending frame (for negative speed.)\n\n    :type: float\n    '
    use_cyclic: bool = None
    ' Cyclic wave effect\n\n    :type: bool\n    '
    use_normal: bool = None
    ' Displace along normals\n\n    :type: bool\n    '
    use_normal_x: bool = None
    ' Enable displacement along the X normal\n\n    :type: bool\n    '
    use_normal_y: bool = None
    ' Enable displacement along the Y normal\n\n    :type: bool\n    '
    use_normal_z: bool = None
    ' Enable displacement along the Z normal\n\n    :type: bool\n    '
    use_x: bool = None
    ' X axis motion\n\n    :type: bool\n    '
    use_y: bool = None
    ' Y axis motion\n\n    :type: bool\n    '
    uv_layer: str = None
    ' UV map name\n\n    :type: str\n    '
    vertex_group: str = None
    ' Vertex group name for modulating the wave\n\n    :type: str\n    '
    width: float = None
    ' Distance between the waves\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class WeightedNormalModifier(Modifier, bpy_struct):
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    keep_sharp: bool = None
    ' Keep sharp edges as computed for default split normals, instead of setting a single weighted normal for each vertex\n\n    :type: bool\n    '
    mode: typing.Union[str, int] = None
    ' Weighted vertex normal mode to use * ``FACE_AREA`` Face Area -- Generate face area weighted normals. * ``CORNER_ANGLE`` Corner Angle -- Generate corner angle weighted normals. * ``FACE_AREA_WITH_ANGLE`` Face Area & Angle -- Generated normals weighted by both face area and angle.\n\n    :type: typing.Union[str, int]\n    '
    thresh: float = None
    ' Threshold value for different weights to be considered equal\n\n    :type: float\n    '
    use_face_influence: bool = None
    ' Use influence of face for weighting\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Vertex group name for modifying the selected areas\n\n    :type: str\n    '
    weight: int = None
    " Corrective factor applied to faces' weights, 50 is neutral, lower values increase weight of weak faces, higher values increase weight of strong faces\n\n    :type: int\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class WeldModifier(Modifier, bpy_struct):
    """ Weld modifier
    """
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    loose_edges: bool = None
    ' Collapse edges without faces, cloth sewing edges\n\n    :type: bool\n    '
    merge_threshold: float = None
    ' Limit below which to merge vertices\n\n    :type: float\n    '
    mode: typing.Union[str, int] = None
    ' Mode defines the merge rule * ``ALL`` All -- Full merge by distance. * ``CONNECTED`` Connected -- Only merge along the edges.\n\n    :type: typing.Union[str, int]\n    '
    vertex_group: str = None
    ' Vertex group name for selecting the affected areas\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class WireframeModifier(Modifier, bpy_struct):
    """ Wireframe effect modifier
    """
    crease_weight: float = None
    ' Crease weight (if active)\n\n    :type: float\n    '
    invert_vertex_group: bool = None
    ' Invert vertex group influence\n\n    :type: bool\n    '
    material_offset: int = None
    ' Offset material index of generated faces\n\n    :type: int\n    '
    offset: float = None
    ' Offset the thickness from the center\n\n    :type: float\n    '
    thickness: float = None
    ' Thickness factor\n\n    :type: float\n    '
    thickness_vertex_group: float = None
    ' Thickness factor to use for zero vertex group influence\n\n    :type: float\n    '
    use_boundary: bool = None
    ' Support face boundaries\n\n    :type: bool\n    '
    use_crease: bool = None
    ' Crease hub edges for improved subdivision surface\n\n    :type: bool\n    '
    use_even_offset: bool = None
    ' Scale the offset to give more even thickness\n\n    :type: bool\n    '
    use_relative_offset: bool = None
    ' Scale the offset by surrounding geometry\n\n    :type: bool\n    '
    use_replace: bool = None
    ' Remove original geometry\n\n    :type: bool\n    '
    vertex_group: str = None
    ' Vertex group name for selecting the affected areas\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieTrackingReconstructedCameras(bpy_prop_collection[MovieReconstructedCamera], bpy_struct):
    """ Collection of solved cameras
    """

    def find_frame(self, frame: int=1) -> 'MovieReconstructedCamera':
        """ Find a reconstructed camera for a give frame number

        :param frame: Frame, Frame number to find camera for
        :type frame: int
        :rtype: 'MovieReconstructedCamera'
        :return: Camera for a given frame
        """
        pass

    def matrix_from_frame(self, frame: int=1) -> typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']:
        """ Return interpolated camera matrix for a given frame

        :param frame: Frame, Frame number to find camera for
        :type frame: int
        :rtype: typing.Union[typing.List[typing.List[float]], typing.Tuple[typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float], typing.Tuple[float, float, float, float]], 'mathutils.Matrix']
        :return: Matrix, Interpolated camera matrix for a given frame
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieTrackingMarkers(bpy_prop_collection[MovieTrackingMarker], bpy_struct):
    """ Collection of markers for movie tracking track
    """

    def find_frame(self, frame: int, exact: bool=True) -> 'MovieTrackingMarker':
        """ Get marker for specified frame

        :param frame: Frame, Frame number to find marker for
        :type frame: int
        :param exact: Exact, Get marker at exact frame number rather than get estimated marker
        :type exact: bool
        :rtype: 'MovieTrackingMarker'
        :return: Marker for specified frame
        """
        pass

    def insert_frame(self, frame: int, co: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']=(0.0, 0.0)) -> 'MovieTrackingMarker':
        """ Insert a new marker at the specified frame

        :param frame: Frame, Frame number to insert marker to
        :type frame: int
        :param co: Coordinate, Place new marker at the given frame using specified in normalized space coordinates
        :type co: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']
        :rtype: 'MovieTrackingMarker'
        :return: Newly created marker
        """
        pass

    def delete_frame(self, frame: int):
        """ Delete marker at specified frame

        :param frame: Frame, Frame number to delete marker from
        :type frame: int
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieTrackingObjects(bpy_prop_collection[MovieTrackingObject], bpy_struct):
    """ Collection of movie tracking objects
    """
    active: 'MovieTrackingObject' = None
    " Active object in this tracking data object\n\n    :type: 'MovieTrackingObject'\n    "

    def new(self, name: str) -> 'MovieTrackingObject':
        """ Add tracking object to this movie clip

        :param name: Name of new object
        :type name: str
        :rtype: 'MovieTrackingObject'
        :return: New motion tracking object
        """
        pass

    def remove(self, object: 'MovieTrackingObject'):
        """ Remove tracking object from this movie clip

        :param object: Motion tracking object to be removed
        :type object: 'MovieTrackingObject'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieTrackingPlaneMarkers(bpy_prop_collection[MovieTrackingPlaneMarker], bpy_struct):
    """ Collection of markers for movie tracking plane track
    """

    def find_frame(self, frame: int, exact: bool=True) -> 'MovieTrackingPlaneMarker':
        """ Get plane marker for specified frame

        :param frame: Frame, Frame number to find marker for
        :type frame: int
        :param exact: Exact, Get plane marker at exact frame number rather than get estimated marker
        :type exact: bool
        :rtype: 'MovieTrackingPlaneMarker'
        :return: Plane marker for specified frame
        """
        pass

    def insert_frame(self, frame: int) -> 'MovieTrackingPlaneMarker':
        """ Insert a new plane marker at the specified frame

        :param frame: Frame, Frame number to insert marker to
        :type frame: int
        :rtype: 'MovieTrackingPlaneMarker'
        :return: Newly created plane marker
        """
        pass

    def delete_frame(self, frame: int):
        """ Delete plane marker at specified frame

        :param frame: Frame, Frame number to delete plane marker from
        :type frame: int
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieTrackingObjectPlaneTracks(bpy_prop_collection[MovieTrackingPlaneTrack], bpy_struct):
    """ Collection of tracking plane tracks
    """
    active: 'MovieTrackingTrack' = None
    " Active track in this tracking data object\n\n    :type: 'MovieTrackingTrack'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieTrackingPlaneTracks(bpy_prop_collection[MovieTrackingPlaneTrack], bpy_struct):
    """ Collection of movie tracking plane tracks
    """
    active: 'MovieTrackingPlaneTrack' = None
    " Active plane track in this tracking data object. Deprecated, use objects[name].plane_tracks.active\n\n    :type: 'MovieTrackingPlaneTrack'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieTrackingObjectTracks(bpy_prop_collection[MovieTrackingTrack], bpy_struct):
    """ Collection of movie tracking tracks
    """
    active: 'MovieTrackingTrack' = None
    " Active track in this tracking data object\n\n    :type: 'MovieTrackingTrack'\n    "

    def new(self, name: str='', frame: int=1) -> 'MovieTrackingTrack':
        """ create new motion track in this movie clip

        :param name: Name of new track
        :type name: str
        :param frame: Frame, Frame number to add tracks on
        :type frame: int
        :rtype: 'MovieTrackingTrack'
        :return: Newly created track
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieTrackingTracks(bpy_prop_collection[MovieTrackingTrack], bpy_struct):
    """ Collection of movie tracking tracks
    """
    active: 'MovieTrackingTrack' = None
    " Active track in this tracking data object. Deprecated, use objects[name].tracks.active\n\n    :type: 'MovieTrackingTrack'\n    "

    def new(self, name: str='', frame: int=1) -> 'MovieTrackingTrack':
        """ Create new motion track in this movie clip

        :param name: Name of new track
        :type name: str
        :param frame: Frame, Frame number to add track on
        :type frame: int
        :rtype: 'MovieTrackingTrack'
        :return: Newly created track
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NlaStrips(bpy_prop_collection[NlaStrip], bpy_struct):
    """ Collection of Nla Strips
    """

    def new(self, name: str, start: int, action: 'Action') -> 'NlaStrip':
        """ Add a new Action-Clip strip to the track

        :param name: Name for the NLA Strips
        :type name: str
        :param start: Start Frame, Start frame for this strip
        :type start: int
        :param action: Action to assign to this strip
        :type action: 'Action'
        :rtype: 'NlaStrip'
        :return: New NLA Strip
        """
        pass

    def remove(self, strip: 'NlaStrip'):
        """ Remove a NLA Strip

        :param strip: NLA Strip to remove
        :type strip: 'NlaStrip'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NlaTracks(bpy_prop_collection[NlaTrack], bpy_struct):
    """ Collection of NLA Tracks
    """
    active: 'NlaTrack' = None
    " Active NLA Track\n\n    :type: 'NlaTrack'\n    "

    def new(self, prev: 'NlaTrack'=None) -> 'NlaTrack':
        """ Add a new NLA Track

        :param prev: NLA Track to add the new one after
        :type prev: 'NlaTrack'
        :rtype: 'NlaTrack'
        :return: New NLA Track
        """
        pass

    def remove(self, track: 'NlaTrack'):
        """ Remove a NLA Track

        :param track: NLA Track to remove
        :type track: 'NlaTrack'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeCustomGroup(Node, bpy_struct):
    """ Base node type for custom registered node group types
    """
    node_tree: 'NodeTree' = None
    " \n\n    :type: 'NodeTree'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeInternal(Node, bpy_struct):

    @classmethod
    def poll(cls, node_tree: 'NodeTree'):
        """ If non-null output is returned, the node type can be added to the tree

        :param node_tree: Node Tree
        :type node_tree: 'NodeTree'
        """
        pass

    def poll_instance(self, node_tree: 'NodeTree'):
        """ If non-null output is returned, the node can be added to the tree

        :param node_tree: Node Tree
        :type node_tree: 'NodeTree'
        """
        pass

    def update(self):
        """ Update on node graph topology changes (adding or removing nodes and links)

        """
        pass

    def draw_buttons(self, context: 'Context', layout: 'UILayout'):
        """ Draw node buttons

        :param context: 
        :type context: 'Context'
        :param layout: Layout, Layout in the UI
        :type layout: 'UILayout'
        """
        pass

    def draw_buttons_ext(self, context: 'Context', layout: 'UILayout'):
        """ Draw node buttons in the sidebar

        :param context: 
        :type context: 'Context'
        :param layout: Layout, Layout in the UI
        :type layout: 'UILayout'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Nodes(bpy_prop_collection[Node], bpy_struct):
    """ Collection of Nodes
    """
    active: 'Node' = None
    " Active node in this tree\n\n    :type: 'Node'\n    "

    def new(self, type: str) -> 'Node':
        """ Add a node to this node tree

        :param type: should be same as node.bl_idname, not node.type!)
        :type type: str
        :rtype: 'Node'
        :return: New node
        """
        pass

    def remove(self, node: 'Node'):
        """ Remove a node from this node tree

        :param node: The node to remove
        :type node: 'Node'
        """
        pass

    def clear(self):
        """ Remove all nodes from this node tree

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeLinks(bpy_prop_collection[NodeLink], bpy_struct):
    """ Collection of Node Links
    """

    def new(self, input: 'NodeSocket', output: 'NodeSocket', verify_limits: bool=True) -> 'NodeLink':
        """ Add a node link to this node tree

        :param input: The input socket
        :type input: 'NodeSocket'
        :param output: The output socket
        :type output: 'NodeSocket'
        :param verify_limits: Verify Limits, Remove existing links if connection limit is exceeded
        :type verify_limits: bool
        :rtype: 'NodeLink'
        :return: New node link
        """
        pass

    def remove(self, link: 'NodeLink'):
        """ remove a node link from the node tree

        :param link: The node link to remove
        :type link: 'NodeLink'
        """
        pass

    def clear(self):
        """ remove all node links from the node tree

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeOutputFileFileSlots(bpy_prop_collection[NodeOutputFileSlotFile], bpy_struct):
    """ Collection of File Output node slots
    """

    def new(self, name: str) -> 'NodeSocket':
        """ Add a file slot to this node

        :param name: Name
        :type name: str
        :rtype: 'NodeSocket'
        :return: New socket
        """
        pass

    def remove(self, socket: 'NodeSocket'):
        """ Remove a file slot from this node

        :param socket: The socket to remove
        :type socket: 'NodeSocket'
        """
        pass

    def clear(self):
        """ Remove all file slots from this node

        """
        pass

    def move(self, from_index: int, to_index: int):
        """ Move a file slot to another position

        :param from_index: From Index, Index of the socket to move
        :type from_index: int
        :param to_index: To Index, Target index for the socket
        :type to_index: int
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeOutputFileLayerSlots(bpy_prop_collection[NodeOutputFileSlotLayer], bpy_struct):
    """ Collection of File Output node slots
    """

    def new(self, name: str) -> 'NodeSocket':
        """ Add a file slot to this node

        :param name: Name
        :type name: str
        :rtype: 'NodeSocket'
        :return: New socket
        """
        pass

    def remove(self, socket: 'NodeSocket'):
        """ Remove a file slot from this node

        :param socket: The socket to remove
        :type socket: 'NodeSocket'
        """
        pass

    def clear(self):
        """ Remove all file slots from this node

        """
        pass

    def move(self, from_index: int, to_index: int):
        """ Move a file slot to another position

        :param from_index: From Index, Index of the socket to move
        :type from_index: int
        :param to_index: To Index, Target index for the socket
        :type to_index: int
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeInputs(bpy_prop_collection[NodeSocket], bpy_struct):
    """ Collection of Node Sockets
    """

    def new(self, type: str, name: str, identifier: str='') -> 'NodeSocket':
        """ Add a socket to this node

        :param type: Type, Data type
        :type type: str
        :param name: Name
        :type name: str
        :param identifier: Identifier, Unique socket identifier
        :type identifier: str
        :rtype: 'NodeSocket'
        :return: New socket
        """
        pass

    def remove(self, socket: 'NodeSocket'):
        """ Remove a socket from this node

        :param socket: The socket to remove
        :type socket: 'NodeSocket'
        """
        pass

    def clear(self):
        """ Remove all sockets from this node

        """
        pass

    def move(self, from_index: int, to_index: int):
        """ Move a socket to another position

        :param from_index: From Index, Index of the socket to move
        :type from_index: int
        :param to_index: To Index, Target index for the socket
        :type to_index: int
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeOutputs(bpy_prop_collection[NodeSocket], bpy_struct):
    """ Collection of Node Sockets
    """

    def new(self, type: str, name: str, identifier: str='') -> 'NodeSocket':
        """ Add a socket to this node

        :param type: Type, Data type
        :type type: str
        :param name: Name
        :type name: str
        :param identifier: Identifier, Unique socket identifier
        :type identifier: str
        :rtype: 'NodeSocket'
        :return: New socket
        """
        pass

    def remove(self, socket: 'NodeSocket'):
        """ Remove a socket from this node

        :param socket: The socket to remove
        :type socket: 'NodeSocket'
        """
        pass

    def clear(self):
        """ Remove all sockets from this node

        """
        pass

    def move(self, from_index: int, to_index: int):
        """ Move a socket to another position

        :param from_index: From Index, Index of the socket to move
        :type from_index: int
        :param to_index: To Index, Target index for the socket
        :type to_index: int
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketStandard(NodeSocket, bpy_struct):
    links = None
    ' List of node links from or to this socket. (readonly)'

    def draw(self, context: 'Context', layout: 'UILayout', node: 'Node', text: str):
        """ Draw socket

        :param context: 
        :type context: 'Context'
        :param layout: Layout, Layout in the UI
        :type layout: 'UILayout'
        :param node: Node, Node the socket belongs to
        :type node: 'Node'
        :param text: Text, Text label to draw alongside properties
        :type text: str
        """
        pass

    def draw_color(self, context: 'Context', node: 'Node') -> typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']:
        """ Color of the socket icon

        :param context: 
        :type context: 'Context'
        :param node: Node, Node the socket belongs to
        :type node: 'Node'
        :rtype: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']
        :return: Color
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceStandard(NodeSocketInterface, bpy_struct):
    type: typing.Union[str, int] = None
    ' Data type\n\n    :type: typing.Union[str, int]\n    '

    def draw(self, context: 'Context', layout: 'UILayout'):
        """ Draw template settings

        :param context: 
        :type context: 'Context'
        :param layout: Layout, Layout in the UI
        :type layout: 'UILayout'
        """
        pass

    def draw_color(self, context: 'Context') -> typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']:
        """ Color of the socket icon

        :param context: 
        :type context: 'Context'
        :rtype: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']
        :return: Color
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeTreeInputs(bpy_prop_collection[NodeSocketInterface], bpy_struct):
    """ Collection of Node Tree Sockets
    """

    def new(self, type: str, name: str) -> 'NodeSocketInterface':
        """ Add a socket to this node tree

        :param type: Type, Data type
        :type type: str
        :param name: Name
        :type name: str
        :rtype: 'NodeSocketInterface'
        :return: New socket
        """
        pass

    def remove(self, socket: 'NodeSocketInterface'):
        """ Remove a socket from this node tree

        :param socket: The socket to remove
        :type socket: 'NodeSocketInterface'
        """
        pass

    def clear(self):
        """ Remove all sockets from this node tree

        """
        pass

    def move(self, from_index: int, to_index: int):
        """ Move a socket to another position

        :param from_index: From Index, Index of the socket to move
        :type from_index: int
        :param to_index: To Index, Target index for the socket
        :type to_index: int
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeTreeOutputs(bpy_prop_collection[NodeSocketInterface], bpy_struct):
    """ Collection of Node Tree Sockets
    """

    def new(self, type: str, name: str) -> 'NodeSocketInterface':
        """ Add a socket to this node tree

        :param type: Type, Data type
        :type type: str
        :param name: Name
        :type name: str
        :rtype: 'NodeSocketInterface'
        :return: New socket
        """
        pass

    def remove(self, socket: 'NodeSocketInterface'):
        """ Remove a socket from this node tree

        :param socket: The socket to remove
        :type socket: 'NodeSocketInterface'
        """
        pass

    def clear(self):
        """ Remove all sockets from this node tree

        """
        pass

    def move(self, from_index: int, to_index: int):
        """ Move a socket to another position

        :param from_index: From Index, Index of the socket to move
        :type from_index: int
        :param to_index: To Index, Target index for the socket
        :type to_index: int
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SpaceNodeEditorPath(bpy_prop_collection[NodeTreePath], bpy_struct):
    """ Get the node tree path as a string
    """
    to_string: str = None
    ' \n\n    :type: str\n    '

    def clear(self):
        """ Reset the node tree path

        """
        pass

    def start(self, node_tree: 'NodeTree'):
        """ Set the root node tree

        :param node_tree: Node Tree
        :type node_tree: 'NodeTree'
        """
        pass

    def append(self, node_tree: 'NodeTree', node: 'Node'=None):
        """ Append a node group tree to the path

        :param node_tree: Node Tree, Node tree to append to the node editor path
        :type node_tree: 'NodeTree'
        :param node: Node, Group node linking to this node tree
        :type node: 'Node'
        """
        pass

    def pop(self):
        """ Remove the last node tree from the path

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CurvesSculpt(Paint, bpy_struct):

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GpPaint(Paint, bpy_struct):
    color_mode: typing.Union[str, int] = None
    ' Paint Mode * ``MATERIAL`` Material -- Paint using the active material base color. * ``VERTEXCOLOR`` Color Attribute -- Paint the material with a color attribute.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GpSculptPaint(Paint, bpy_struct):

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GpVertexPaint(Paint, bpy_struct):

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GpWeightPaint(Paint, bpy_struct):

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ImagePaint(Paint, bpy_struct):
    """ Properties of image and texture painting mode
    """
    canvas: 'Image' = None
    " Image used as canvas\n\n    :type: 'Image'\n    "
    clone_image: 'Image' = None
    " Image used as clone source\n\n    :type: 'Image'\n    "
    dither: float = None
    ' Amount of dithering when painting on byte images\n\n    :type: float\n    '
    interpolation: typing.Union[str, int] = None
    ' Texture filtering type * ``LINEAR`` Linear -- Linear interpolation. * ``CLOSEST`` Closest -- No interpolation (sample closest texel).\n\n    :type: typing.Union[str, int]\n    '
    invert_stencil: bool = None
    ' Invert the stencil layer\n\n    :type: bool\n    '
    missing_materials: bool = None
    ' The mesh is missing materials\n\n    :type: bool\n    '
    missing_stencil: bool = None
    ' Image Painting does not have a stencil\n\n    :type: bool\n    '
    missing_texture: bool = None
    ' Image Painting does not have a texture to paint on\n\n    :type: bool\n    '
    missing_uvs: bool = None
    ' A UV layer is missing on the mesh\n\n    :type: bool\n    '
    mode: typing.Union[str, int] = None
    ' Mode of operation for projection painting * ``MATERIAL`` Material -- Detect image slots from the material. * ``IMAGE`` Single Image -- Set image for texture painting directly.\n\n    :type: typing.Union[str, int]\n    '
    normal_angle: int = None
    ' Paint most on faces pointing towards the view according to this angle\n\n    :type: int\n    '
    screen_grab_size: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Size to capture the image for re-projecting\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    seam_bleed: int = None
    ' Extend paint beyond the faces UVs to reduce seams (in pixels, slower)\n\n    :type: int\n    '
    stencil_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Stencil color in the viewport\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    stencil_image: 'Image' = None
    " Image used as stencil\n\n    :type: 'Image'\n    "
    use_backface_culling: bool = None
    ' Ignore faces pointing away from the view (faster)\n\n    :type: bool\n    '
    use_clone_layer: bool = None
    ' Use another UV map as clone source, otherwise use the 3D cursor as the source\n\n    :type: bool\n    '
    use_normal_falloff: bool = None
    ' Paint most on faces pointing towards the view\n\n    :type: bool\n    '
    use_occlude: bool = None
    ' Only paint onto the faces directly under the brush (slower)\n\n    :type: bool\n    '
    use_stencil_layer: bool = None
    ' Set the mask layer from the UV map buttons\n\n    :type: bool\n    '

    def detect_data(self):
        """ Check if required texpaint data exist

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class Sculpt(Paint, bpy_struct):
    automasking_cavity_blur_steps: int = None
    ' The number of times the cavity mask is blurred\n\n    :type: int\n    '
    automasking_cavity_curve: 'CurveMapping' = None
    " Curve used for the sensitivity\n\n    :type: 'CurveMapping'\n    "
    automasking_cavity_curve_op: 'CurveMapping' = None
    " Curve used for the sensitivity\n\n    :type: 'CurveMapping'\n    "
    automasking_cavity_factor: float = None
    ' The contrast of the cavity mask\n\n    :type: float\n    '
    automasking_start_normal_falloff: float = None
    ' Extend the angular range with a falloff gradient\n\n    :type: float\n    '
    automasking_start_normal_limit: float = None
    ' The range of angles that will be affected\n\n    :type: float\n    '
    automasking_view_normal_falloff: float = None
    ' Extend the angular range with a falloff gradient\n\n    :type: float\n    '
    automasking_view_normal_limit: float = None
    ' The range of angles that will be affected\n\n    :type: float\n    '
    constant_detail_resolution: float = None
    ' Maximum edge length for dynamic topology sculpting (as divisor of blender unit - higher value means smaller edge length)\n\n    :type: float\n    '
    detail_percent: float = None
    ' Maximum edge length for dynamic topology sculpting (in brush percenage)\n\n    :type: float\n    '
    detail_refine_method: typing.Union[str, int] = None
    ' In dynamic-topology mode, how to add or remove mesh detail * ``SUBDIVIDE`` Subdivide Edges -- Subdivide long edges to add mesh detail where needed. * ``COLLAPSE`` Collapse Edges -- Collapse short edges to remove mesh detail where possible. * ``SUBDIVIDE_COLLAPSE`` Subdivide Collapse -- Both subdivide long edges and collapse short edges to refine mesh detail.\n\n    :type: typing.Union[str, int]\n    '
    detail_size: float = None
    ' Maximum edge length for dynamic topology sculpting (in pixels)\n\n    :type: float\n    '
    detail_type_method: typing.Union[str, int] = None
    ' In dynamic-topology mode, how mesh detail size is calculated * ``RELATIVE`` Relative Detail -- Mesh detail is relative to the brush size and detail size. * ``CONSTANT`` Constant Detail -- Mesh detail is constant in world space according to detail size. * ``BRUSH`` Brush Detail -- Mesh detail is relative to brush radius. * ``MANUAL`` Manual Detail -- Mesh detail does not change on each stroke, only when using Flood Fill.\n\n    :type: typing.Union[str, int]\n    '
    gravity: float = None
    ' Amount of gravity after each dab\n\n    :type: float\n    '
    gravity_object: 'Object' = None
    " Object whose Z axis defines orientation of gravity\n\n    :type: 'Object'\n    "
    lock_x: bool = None
    ' Disallow changes to the X axis of vertices\n\n    :type: bool\n    '
    lock_y: bool = None
    ' Disallow changes to the Y axis of vertices\n\n    :type: bool\n    '
    lock_z: bool = None
    ' Disallow changes to the Z axis of vertices\n\n    :type: bool\n    '
    radial_symmetry: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Number of times to copy strokes across the surface\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    symmetrize_direction: typing.Union[str, int] = None
    ' Source and destination for symmetrize operator\n\n    :type: typing.Union[str, int]\n    '
    transform_mode: typing.Union[str, int] = None
    ' How the transformation is going to be applied to the target * ``ALL_VERTICES`` All Vertices -- Applies the transformation to all vertices in the mesh. * ``RADIUS_ELASTIC`` Elastic -- Applies the transformation simulating elasticity using the radius of the cursor.\n\n    :type: typing.Union[str, int]\n    '
    use_automasking_boundary_edges: bool = None
    ' Do not affect non manifold boundary edges\n\n    :type: bool\n    '
    use_automasking_boundary_face_sets: bool = None
    ' Do not affect vertices that belong to a Face Set boundary\n\n    :type: bool\n    '
    use_automasking_cavity: bool = None
    ' Do not affect vertices on peaks, based on the surface curvature\n\n    :type: bool\n    '
    use_automasking_cavity_inverted: bool = None
    ' Do not affect vertices within crevices, based on the surface curvature\n\n    :type: bool\n    '
    use_automasking_custom_cavity_curve: bool = None
    ' Use custom curve\n\n    :type: bool\n    '
    use_automasking_face_sets: bool = None
    ' Affect only vertices that share Face Sets with the active vertex\n\n    :type: bool\n    '
    use_automasking_start_normal: bool = None
    ' Affect only vertices with a similar normal to where the stroke starts\n\n    :type: bool\n    '
    use_automasking_topology: bool = None
    ' Affect only vertices connected to the active vertex under the brush\n\n    :type: bool\n    '
    use_automasking_view_normal: bool = None
    ' Affect only vertices with a normal that faces the viewer\n\n    :type: bool\n    '
    use_automasking_view_occlusion: bool = None
    ' Only affect vertices that are not occluded by other faces. (Slower performance)\n\n    :type: bool\n    '
    use_deform_only: bool = None
    ' Use only deformation modifiers (temporary disable all constructive modifiers except multi-resolution)\n\n    :type: bool\n    '
    use_smooth_shading: bool = None
    ' Show faces in dynamic-topology mode with smooth shading rather than flat shaded\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class UvSculpt(Paint, bpy_struct):

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class VertexPaint(Paint, bpy_struct):
    """ Properties of vertex and weight paint mode
    """
    radial_symmetry: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Number of times to copy strokes across the surface\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    use_group_restrict: bool = None
    ' Restrict painting to vertices in the group\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PaletteColors(bpy_prop_collection[PaletteColor], bpy_struct):
    """ Collection of palette colors
    """
    active: 'PaletteColor' = None
    " \n\n    :type: 'PaletteColor'\n    "

    def new(self) -> 'PaletteColor':
        """ Add a new color to the palette

        :rtype: 'PaletteColor'
        :return: The newly created color
        """
        pass

    def remove(self, color: 'PaletteColor'):
        """ Remove a color from the palette

        :param color: The color to remove
        :type color: 'PaletteColor'
        """
        pass

    def clear(self):
        """ Remove all colors from the palette

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ParticleSystems(bpy_prop_collection[ParticleSystem], bpy_struct):
    """ Collection of particle systems
    """
    active: 'ParticleSystem' = None
    " Active particle system being displayed\n\n    :type: 'ParticleSystem'\n    "
    active_index: int = None
    ' Index of active particle system slot\n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PathCompareCollection(bpy_prop_collection[PathCompare], bpy_struct):
    """ Collection of paths
    """

    @classmethod
    def new(cls):
        """ Add a new path

        """
        pass

    @classmethod
    def remove(cls, pathcmp: 'PathCompare'):
        """ Remove path

        :param pathcmp: 
        :type pathcmp: 'PathCompare'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PointCaches(bpy_prop_collection[PointCacheItem], bpy_struct):
    """ Collection of point caches
    """
    active_index: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BoolProperty(Property, bpy_struct):
    """ RNA boolean property definition
    """
    array_dimensions: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Length of each dimension of the array\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    array_length: int = None
    ' Maximum length of the array, 0 means unlimited\n\n    :type: int\n    '
    default: bool = None
    ' Default value for this number\n\n    :type: bool\n    '
    default_array: typing.List[bool] = None
    ' Default value for this array\n\n    :type: typing.List[bool]\n    '
    is_array: bool = None
    ' \n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CollectionProperty(Property, bpy_struct):
    """ RNA collection property to define lists, arrays and mappings
    """
    fixed_type: 'Struct' = None
    " Fixed pointer type, empty if variable type\n\n    :type: 'Struct'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class EnumProperty(Property, bpy_struct):
    """ RNA enumeration property definition, to choose from a number of predefined options
    """
    default: typing.Union[str, int] = None
    ' Default value for this enum\n\n    :type: typing.Union[str, int]\n    '
    default_flag: typing.Union[typing.Set[str], typing.Set[int]] = None
    ' Default value for this enum\n\n    :type: typing.Union[typing.Set[str], typing.Set[int]]\n    '
    enum_items: bpy_prop_collection['EnumPropertyItem'] = None
    " Possible values for the property\n\n    :type: bpy_prop_collection['EnumPropertyItem']\n    "
    enum_items_static: bpy_prop_collection['EnumPropertyItem'] = None
    " Possible values for the property (never calls optional dynamic generation of those)\n\n    :type: bpy_prop_collection['EnumPropertyItem']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FloatProperty(Property, bpy_struct):
    """ RNA floating-point number (single precision) property definition
    """
    array_dimensions: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Length of each dimension of the array\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    array_length: int = None
    ' Maximum length of the array, 0 means unlimited\n\n    :type: int\n    '
    default: float = None
    ' Default value for this number\n\n    :type: float\n    '
    default_array: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Default value for this array\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    hard_max: float = None
    ' Maximum value used by buttons\n\n    :type: float\n    '
    hard_min: float = None
    ' Minimum value used by buttons\n\n    :type: float\n    '
    is_array: bool = None
    ' \n\n    :type: bool\n    '
    precision: int = None
    " Number of digits after the dot used by buttons. Fraction is automatically hidden for exact integer values of fields with unit 'NONE' or 'TIME' (frame count) and step divisible by 100\n\n    :type: int\n    "
    soft_max: float = None
    ' Maximum value used by buttons\n\n    :type: float\n    '
    soft_min: float = None
    ' Minimum value used by buttons\n\n    :type: float\n    '
    step: float = None
    ' Step size used by number buttons, for floats 1/100th of the step size\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class IntProperty(Property, bpy_struct):
    """ RNA integer number property definition
    """
    array_dimensions: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Length of each dimension of the array\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    array_length: int = None
    ' Maximum length of the array, 0 means unlimited\n\n    :type: int\n    '
    default: int = None
    ' Default value for this number\n\n    :type: int\n    '
    default_array: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Default value for this array\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    hard_max: int = None
    ' Maximum value used by buttons\n\n    :type: int\n    '
    hard_min: int = None
    ' Minimum value used by buttons\n\n    :type: int\n    '
    is_array: bool = None
    ' \n\n    :type: bool\n    '
    soft_max: int = None
    ' Maximum value used by buttons\n\n    :type: int\n    '
    soft_min: int = None
    ' Minimum value used by buttons\n\n    :type: int\n    '
    step: int = None
    ' Step size used by number buttons, for floats 1/100th of the step size\n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PointerProperty(Property, bpy_struct):
    """ RNA pointer property to point to another RNA struct
    """
    fixed_type: 'Struct' = None
    " Fixed pointer type, empty if variable type\n\n    :type: 'Struct'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class StringProperty(Property, bpy_struct):
    """ RNA text string property definition
    """
    default: str = None
    ' String default value\n\n    :type: str\n    '
    length_max: int = None
    ' Maximum length of the string, 0 means unlimited\n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class AssetHandle(PropertyGroup, bpy_struct):
    """ Reference to some asset
    """
    file_data: 'FileSelectEntry' = None
    " TEMPORARY, DO NOT USE - File data used to refer to the asset\n\n    :type: 'FileSelectEntry'\n    "
    local_id: 'ID' = None
    " The local data-block this asset represents; only valid if that is a data-block in this file\n\n    :type: 'ID'\n    "

    @classmethod
    def get_full_library_path(cls, asset_file_handle: 'FileSelectEntry', asset_library_ref: typing.Optional['AssetLibraryReference']=None) -> str:
        """ get_full_library_path

        :param asset_file_handle: 
        :type asset_file_handle: 'FileSelectEntry'
        :param asset_library_ref: The asset library containing the given asset. Deprecated and optional argument, will be ignored. Kept for API compatibility only
        :type asset_library_ref: typing.Optional['AssetLibraryReference']
        :rtype: str
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class OperatorFileListElement(PropertyGroup, bpy_struct):
    name: str = None
    ' Name of a file or directory within a file list\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class OperatorMousePath(PropertyGroup, bpy_struct):
    """ Mouse path values for operators that record such paths
    """
    loc: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Mouse location\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    time: float = None
    ' Time of mouse location\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class OperatorStrokeElement(PropertyGroup, bpy_struct):
    is_start: bool = None
    ' \n\n    :type: bool\n    '
    location: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    mouse: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    mouse_event: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    pen_flip: bool = None
    ' \n\n    :type: bool\n    '
    pressure: float = None
    ' Tablet pressure\n\n    :type: float\n    '
    size: float = None
    ' Brush size in screen space\n\n    :type: float\n    '
    time: float = None
    ' \n\n    :type: float\n    '
    x_tilt: float = None
    ' \n\n    :type: float\n    '
    y_tilt: float = None
    ' \n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SelectedUvElement(PropertyGroup, bpy_struct):
    element_index: int = None
    ' \n\n    :type: int\n    '
    face_index: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class RenderPasses(bpy_prop_collection[RenderPass], bpy_struct):
    """ Collection of render passes
    """

    def find_by_type(self, pass_type: typing.Union[str, int], view: str) -> 'RenderPass':
        """ Get the render pass for a given type and view

        :param pass_type: Pass
        :type pass_type: typing.Union[str, int]
        :param view: View, Render view to get pass from
        :type view: str
        :rtype: 'RenderPass'
        :return: The matching render pass
        """
        pass

    def find_by_name(self, name: str, view: str) -> 'RenderPass':
        """ Get the render pass for a given name and view

        :param name: Pass
        :type name: str
        :param view: View, Render view to get pass from
        :type view: str
        :rtype: 'RenderPass'
        :return: The matching render pass
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class RenderSlots(bpy_prop_collection[RenderSlot], bpy_struct):
    """ Collection of render layers
    """
    active: 'RenderSlot' = None
    " Active render slot of the image\n\n    :type: 'RenderSlot'\n    "
    active_index: int = None
    ' Active render slot of the image\n\n    :type: int\n    '

    def new(self, name: str='') -> 'RenderSlot':
        """ Add a render slot to the image

        :param name: Name, New name for the render slot
        :type name: str
        :rtype: 'RenderSlot'
        :return: Newly created render layer
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class RenderViews(bpy_prop_collection[SceneRenderView], bpy_struct):
    """ Collection of render views
    """
    active: 'SceneRenderView' = None
    " Active Render View\n\n    :type: 'SceneRenderView'\n    "
    active_index: int = None
    ' Active index in render view array\n\n    :type: int\n    '

    def new(self, name: str) -> 'SceneRenderView':
        """ Add a render view to scene

        :param name: New name for the marker (not unique)
        :type name: str
        :rtype: 'SceneRenderView'
        :return: Newly created render view
        """
        pass

    def remove(self, view: 'SceneRenderView'):
        """ Remove a render view

        :param view: Render view to remove
        :type view: 'SceneRenderView'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class EffectSequence(Sequence, bpy_struct):
    """ Sequence strip applying an effect on the images created by other strips
    """
    alpha_mode: typing.Union[str, int] = None
    ' Representation of alpha information in the RGBA pixels * ``STRAIGHT`` Straight -- RGB channels in transparent pixels are unaffected by the alpha channel. * ``PREMUL`` Premultiplied -- RGB channels in transparent pixels are multiplied by the alpha channel.\n\n    :type: typing.Union[str, int]\n    '
    color_multiply: float = None
    ' \n\n    :type: float\n    '
    color_saturation: float = None
    " Adjust the intensity of the input's color\n\n    :type: float\n    "
    crop: 'SequenceCrop' = None
    " \n\n    :type: 'SequenceCrop'\n    "
    proxy: 'SequenceProxy' = None
    " \n\n    :type: 'SequenceProxy'\n    "
    strobe: float = None
    ' Only display every nth frame\n\n    :type: float\n    '
    transform: 'SequenceTransform' = None
    " \n\n    :type: 'SequenceTransform'\n    "
    use_deinterlace: bool = None
    ' Remove fields from video movies\n\n    :type: bool\n    '
    use_flip_x: bool = None
    ' Flip on the X axis\n\n    :type: bool\n    '
    use_flip_y: bool = None
    ' Flip on the Y axis\n\n    :type: bool\n    '
    use_float: bool = None
    ' Convert input to float data\n\n    :type: bool\n    '
    use_proxy: bool = None
    ' Use a preview proxy and/or time-code index for this strip\n\n    :type: bool\n    '
    use_reverse_frames: bool = None
    ' Reverse frame order\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ImageSequence(Sequence, bpy_struct):
    """ Sequence strip to load one or more images
    """
    alpha_mode: typing.Union[str, int] = None
    ' Representation of alpha information in the RGBA pixels * ``STRAIGHT`` Straight -- RGB channels in transparent pixels are unaffected by the alpha channel. * ``PREMUL`` Premultiplied -- RGB channels in transparent pixels are multiplied by the alpha channel.\n\n    :type: typing.Union[str, int]\n    '
    animation_offset_end: int = None
    ' Animation end offset (trim end)\n\n    :type: int\n    '
    animation_offset_start: int = None
    ' Animation start offset (trim start)\n\n    :type: int\n    '
    color_multiply: float = None
    ' \n\n    :type: float\n    '
    color_saturation: float = None
    " Adjust the intensity of the input's color\n\n    :type: float\n    "
    colorspace_settings: 'ColorManagedInputColorspaceSettings' = None
    " Input color space settings\n\n    :type: 'ColorManagedInputColorspaceSettings'\n    "
    crop: 'SequenceCrop' = None
    " \n\n    :type: 'SequenceCrop'\n    "
    directory: str = None
    ' \n\n    :type: str\n    '
    elements: 'SequenceElements' = None
    " \n\n    :type: 'SequenceElements'\n    "
    proxy: 'SequenceProxy' = None
    " \n\n    :type: 'SequenceProxy'\n    "
    speed_factor: float = None
    ' Multiply playback speed\n\n    :type: float\n    '
    stereo_3d_format: 'Stereo3dFormat' = None
    " Settings for stereo 3D\n\n    :type: 'Stereo3dFormat'\n    "
    strobe: float = None
    ' Only display every nth frame\n\n    :type: float\n    '
    transform: 'SequenceTransform' = None
    " \n\n    :type: 'SequenceTransform'\n    "
    use_deinterlace: bool = None
    ' Remove fields from video movies\n\n    :type: bool\n    '
    use_flip_x: bool = None
    ' Flip on the X axis\n\n    :type: bool\n    '
    use_flip_y: bool = None
    ' Flip on the Y axis\n\n    :type: bool\n    '
    use_float: bool = None
    ' Convert input to float data\n\n    :type: bool\n    '
    use_multiview: bool = None
    ' Use Multiple Views (when available)\n\n    :type: bool\n    '
    use_proxy: bool = None
    ' Use a preview proxy and/or time-code index for this strip\n\n    :type: bool\n    '
    use_reverse_frames: bool = None
    ' Reverse frame order\n\n    :type: bool\n    '
    views_format: typing.Union[str, int] = None
    ' Mode to load image views\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MaskSequence(Sequence, bpy_struct):
    """ Sequence strip to load a video from a mask
    """
    alpha_mode: typing.Union[str, int] = None
    ' Representation of alpha information in the RGBA pixels * ``STRAIGHT`` Straight -- RGB channels in transparent pixels are unaffected by the alpha channel. * ``PREMUL`` Premultiplied -- RGB channels in transparent pixels are multiplied by the alpha channel.\n\n    :type: typing.Union[str, int]\n    '
    animation_offset_end: int = None
    ' Animation end offset (trim end)\n\n    :type: int\n    '
    animation_offset_start: int = None
    ' Animation start offset (trim start)\n\n    :type: int\n    '
    color_multiply: float = None
    ' \n\n    :type: float\n    '
    color_saturation: float = None
    " Adjust the intensity of the input's color\n\n    :type: float\n    "
    crop: 'SequenceCrop' = None
    " \n\n    :type: 'SequenceCrop'\n    "
    mask: 'Mask' = None
    " Mask that this sequence uses\n\n    :type: 'Mask'\n    "
    speed_factor: float = None
    ' Multiply playback speed\n\n    :type: float\n    '
    strobe: float = None
    ' Only display every nth frame\n\n    :type: float\n    '
    transform: 'SequenceTransform' = None
    " \n\n    :type: 'SequenceTransform'\n    "
    use_deinterlace: bool = None
    ' Remove fields from video movies\n\n    :type: bool\n    '
    use_flip_x: bool = None
    ' Flip on the X axis\n\n    :type: bool\n    '
    use_flip_y: bool = None
    ' Flip on the Y axis\n\n    :type: bool\n    '
    use_float: bool = None
    ' Convert input to float data\n\n    :type: bool\n    '
    use_reverse_frames: bool = None
    ' Reverse frame order\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MetaSequence(Sequence, bpy_struct):
    """ Sequence strip to group other strips as a single sequence strip
    """
    alpha_mode: typing.Union[str, int] = None
    ' Representation of alpha information in the RGBA pixels * ``STRAIGHT`` Straight -- RGB channels in transparent pixels are unaffected by the alpha channel. * ``PREMUL`` Premultiplied -- RGB channels in transparent pixels are multiplied by the alpha channel.\n\n    :type: typing.Union[str, int]\n    '
    animation_offset_end: int = None
    ' Animation end offset (trim end)\n\n    :type: int\n    '
    animation_offset_start: int = None
    ' Animation start offset (trim start)\n\n    :type: int\n    '
    channels: bpy_prop_collection['SequenceTimelineChannel'] = None
    " \n\n    :type: bpy_prop_collection['SequenceTimelineChannel']\n    "
    color_multiply: float = None
    ' \n\n    :type: float\n    '
    color_saturation: float = None
    " Adjust the intensity of the input's color\n\n    :type: float\n    "
    crop: 'SequenceCrop' = None
    " \n\n    :type: 'SequenceCrop'\n    "
    proxy: 'SequenceProxy' = None
    " \n\n    :type: 'SequenceProxy'\n    "
    sequences: 'SequencesMeta' = None
    " Sequences nested in meta strip\n\n    :type: 'SequencesMeta'\n    "
    speed_factor: float = None
    ' Multiply playback speed\n\n    :type: float\n    '
    strobe: float = None
    ' Only display every nth frame\n\n    :type: float\n    '
    transform: 'SequenceTransform' = None
    " \n\n    :type: 'SequenceTransform'\n    "
    use_deinterlace: bool = None
    ' Remove fields from video movies\n\n    :type: bool\n    '
    use_flip_x: bool = None
    ' Flip on the X axis\n\n    :type: bool\n    '
    use_flip_y: bool = None
    ' Flip on the Y axis\n\n    :type: bool\n    '
    use_float: bool = None
    ' Convert input to float data\n\n    :type: bool\n    '
    use_proxy: bool = None
    ' Use a preview proxy and/or time-code index for this strip\n\n    :type: bool\n    '
    use_reverse_frames: bool = None
    ' Reverse frame order\n\n    :type: bool\n    '

    def separate(self):
        """ Separate meta

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieClipSequence(Sequence, bpy_struct):
    """ Sequence strip to load a video from the clip editor
    """
    alpha_mode: typing.Union[str, int] = None
    ' Representation of alpha information in the RGBA pixels * ``STRAIGHT`` Straight -- RGB channels in transparent pixels are unaffected by the alpha channel. * ``PREMUL`` Premultiplied -- RGB channels in transparent pixels are multiplied by the alpha channel.\n\n    :type: typing.Union[str, int]\n    '
    animation_offset_end: int = None
    ' Animation end offset (trim end)\n\n    :type: int\n    '
    animation_offset_start: int = None
    ' Animation start offset (trim start)\n\n    :type: int\n    '
    color_multiply: float = None
    ' \n\n    :type: float\n    '
    color_saturation: float = None
    " Adjust the intensity of the input's color\n\n    :type: float\n    "
    crop: 'SequenceCrop' = None
    " \n\n    :type: 'SequenceCrop'\n    "
    fps: float = None
    ' Frames per second\n\n    :type: float\n    '
    speed_factor: float = None
    ' Multiply playback speed\n\n    :type: float\n    '
    stabilize2d: bool = None
    ' Use the 2D stabilized version of the clip\n\n    :type: bool\n    '
    strobe: float = None
    ' Only display every nth frame\n\n    :type: float\n    '
    transform: 'SequenceTransform' = None
    " \n\n    :type: 'SequenceTransform'\n    "
    undistort: bool = None
    ' Use the undistorted version of the clip\n\n    :type: bool\n    '
    use_deinterlace: bool = None
    ' Remove fields from video movies\n\n    :type: bool\n    '
    use_flip_x: bool = None
    ' Flip on the X axis\n\n    :type: bool\n    '
    use_flip_y: bool = None
    ' Flip on the Y axis\n\n    :type: bool\n    '
    use_float: bool = None
    ' Convert input to float data\n\n    :type: bool\n    '
    use_reverse_frames: bool = None
    ' Reverse frame order\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MovieSequence(Sequence, bpy_struct):
    """ Sequence strip to load a video
    """
    alpha_mode: typing.Union[str, int] = None
    ' Representation of alpha information in the RGBA pixels * ``STRAIGHT`` Straight -- RGB channels in transparent pixels are unaffected by the alpha channel. * ``PREMUL`` Premultiplied -- RGB channels in transparent pixels are multiplied by the alpha channel.\n\n    :type: typing.Union[str, int]\n    '
    animation_offset_end: int = None
    ' Animation end offset (trim end)\n\n    :type: int\n    '
    animation_offset_start: int = None
    ' Animation start offset (trim start)\n\n    :type: int\n    '
    color_multiply: float = None
    ' \n\n    :type: float\n    '
    color_saturation: float = None
    " Adjust the intensity of the input's color\n\n    :type: float\n    "
    colorspace_settings: 'ColorManagedInputColorspaceSettings' = None
    " Input color space settings\n\n    :type: 'ColorManagedInputColorspaceSettings'\n    "
    crop: 'SequenceCrop' = None
    " \n\n    :type: 'SequenceCrop'\n    "
    elements: bpy_prop_collection['SequenceElement'] = None
    " \n\n    :type: bpy_prop_collection['SequenceElement']\n    "
    filepath: str = None
    ' \n\n    :type: str\n    '
    fps: float = None
    ' Frames per second\n\n    :type: float\n    '
    proxy: 'SequenceProxy' = None
    " \n\n    :type: 'SequenceProxy'\n    "
    speed_factor: float = None
    ' Multiply playback speed\n\n    :type: float\n    '
    stereo_3d_format: 'Stereo3dFormat' = None
    " Settings for stereo 3D\n\n    :type: 'Stereo3dFormat'\n    "
    stream_index: int = None
    ' For files with several movie streams, use the stream with the given index\n\n    :type: int\n    '
    strobe: float = None
    ' Only display every nth frame\n\n    :type: float\n    '
    transform: 'SequenceTransform' = None
    " \n\n    :type: 'SequenceTransform'\n    "
    use_deinterlace: bool = None
    ' Remove fields from video movies\n\n    :type: bool\n    '
    use_flip_x: bool = None
    ' Flip on the X axis\n\n    :type: bool\n    '
    use_flip_y: bool = None
    ' Flip on the Y axis\n\n    :type: bool\n    '
    use_float: bool = None
    ' Convert input to float data\n\n    :type: bool\n    '
    use_multiview: bool = None
    ' Use Multiple Views (when available)\n\n    :type: bool\n    '
    use_proxy: bool = None
    ' Use a preview proxy and/or time-code index for this strip\n\n    :type: bool\n    '
    use_reverse_frames: bool = None
    ' Reverse frame order\n\n    :type: bool\n    '
    views_format: typing.Union[str, int] = None
    ' Mode to load movie views\n\n    :type: typing.Union[str, int]\n    '

    def reload_if_needed(self) -> bool:
        """ reload_if_needed

        :rtype: bool
        :return: True if the strip can produce frames, False otherwise
        """
        pass

    def metadata(self) -> 'IDPropertyWrapPtr':
        """ Retrieve metadata of the movie file

        :rtype: 'IDPropertyWrapPtr'
        :return: Dict-like object containing the metadata
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SceneSequence(Sequence, bpy_struct):
    """ Sequence strip to used the rendered image of a scene
    """
    alpha_mode: typing.Union[str, int] = None
    ' Representation of alpha information in the RGBA pixels * ``STRAIGHT`` Straight -- RGB channels in transparent pixels are unaffected by the alpha channel. * ``PREMUL`` Premultiplied -- RGB channels in transparent pixels are multiplied by the alpha channel.\n\n    :type: typing.Union[str, int]\n    '
    animation_offset_end: int = None
    ' Animation end offset (trim end)\n\n    :type: int\n    '
    animation_offset_start: int = None
    ' Animation start offset (trim start)\n\n    :type: int\n    '
    color_multiply: float = None
    ' \n\n    :type: float\n    '
    color_saturation: float = None
    " Adjust the intensity of the input's color\n\n    :type: float\n    "
    crop: 'SequenceCrop' = None
    " \n\n    :type: 'SequenceCrop'\n    "
    fps: float = None
    ' Frames per second\n\n    :type: float\n    '
    proxy: 'SequenceProxy' = None
    " \n\n    :type: 'SequenceProxy'\n    "
    scene: 'Scene' = None
    " Scene that this sequence uses\n\n    :type: 'Scene'\n    "
    scene_camera: 'Object' = None
    " Override the scenes active camera\n\n    :type: 'Object'\n    "
    scene_input: typing.Union[str, int] = None
    " Input type to use for the Scene strip * ``CAMERA`` Camera -- Use the Scene's 3D camera as input. * ``SEQUENCER`` Sequencer -- Use the Scene's Sequencer timeline as input.\n\n    :type: typing.Union[str, int]\n    "
    speed_factor: float = None
    ' Multiply playback speed\n\n    :type: float\n    '
    strobe: float = None
    ' Only display every nth frame\n\n    :type: float\n    '
    transform: 'SequenceTransform' = None
    " \n\n    :type: 'SequenceTransform'\n    "
    use_annotations: bool = None
    ' Show Annotations in OpenGL previews\n\n    :type: bool\n    '
    use_deinterlace: bool = None
    ' Remove fields from video movies\n\n    :type: bool\n    '
    use_flip_x: bool = None
    ' Flip on the X axis\n\n    :type: bool\n    '
    use_flip_y: bool = None
    ' Flip on the Y axis\n\n    :type: bool\n    '
    use_float: bool = None
    ' Convert input to float data\n\n    :type: bool\n    '
    use_proxy: bool = None
    ' Use a preview proxy and/or time-code index for this strip\n\n    :type: bool\n    '
    use_reverse_frames: bool = None
    ' Reverse frame order\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SequencesMeta(bpy_prop_collection[Sequence], bpy_struct):
    """ Collection of Sequences
    """

    def new_clip(self, name: str, clip: 'MovieClip', channel: int, frame_start: int) -> 'Sequence':
        """ Add a new movie clip sequence

        :param name: Name for the new sequence
        :type name: str
        :param clip: Movie clip to add
        :type clip: 'MovieClip'
        :param channel: Channel, The channel for the new sequence
        :type channel: int
        :param frame_start: The start frame for the new sequence
        :type frame_start: int
        :rtype: 'Sequence'
        :return: New Sequence
        """
        pass

    def new_mask(self, name: str, mask: 'Mask', channel: int, frame_start: int) -> 'Sequence':
        """ Add a new mask sequence

        :param name: Name for the new sequence
        :type name: str
        :param mask: Mask to add
        :type mask: 'Mask'
        :param channel: Channel, The channel for the new sequence
        :type channel: int
        :param frame_start: The start frame for the new sequence
        :type frame_start: int
        :rtype: 'Sequence'
        :return: New Sequence
        """
        pass

    def new_scene(self, name: str, scene: 'Scene', channel: int, frame_start: int) -> 'Sequence':
        """ Add a new scene sequence

        :param name: Name for the new sequence
        :type name: str
        :param scene: Scene to add
        :type scene: 'Scene'
        :param channel: Channel, The channel for the new sequence
        :type channel: int
        :param frame_start: The start frame for the new sequence
        :type frame_start: int
        :rtype: 'Sequence'
        :return: New Sequence
        """
        pass

    def new_image(self, name: str, filepath: str, channel: int, frame_start: int, fit_method: typing.Union[str, int]='ORIGINAL') -> 'Sequence':
        """ Add a new image sequence

        :param name: Name for the new sequence
        :type name: str
        :param filepath: Filepath to image
        :type filepath: str
        :param channel: Channel, The channel for the new sequence
        :type channel: int
        :param frame_start: The start frame for the new sequence
        :type frame_start: int
        :param fit_method: Image Fit Method * ``FIT`` Scale to Fit -- Scale image so fits in preview. * ``FILL`` Scale to Fill -- Scale image so it fills preview completely. * ``STRETCH`` Stretch to Fill -- Stretch image so it fills preview. * ``ORIGINAL`` Use Original Size -- Don't scale the image.
        :type fit_method: typing.Union[str, int]
        :rtype: 'Sequence'
        :return: New Sequence
        """
        pass

    def new_movie(self, name: str, filepath: str, channel: int, frame_start: int, fit_method: typing.Union[str, int]='ORIGINAL') -> 'Sequence':
        """ Add a new movie sequence

        :param name: Name for the new sequence
        :type name: str
        :param filepath: Filepath to movie
        :type filepath: str
        :param channel: Channel, The channel for the new sequence
        :type channel: int
        :param frame_start: The start frame for the new sequence
        :type frame_start: int
        :param fit_method: Image Fit Method * ``FIT`` Scale to Fit -- Scale image so fits in preview. * ``FILL`` Scale to Fill -- Scale image so it fills preview completely. * ``STRETCH`` Stretch to Fill -- Stretch image so it fills preview. * ``ORIGINAL`` Use Original Size -- Don't scale the image.
        :type fit_method: typing.Union[str, int]
        :rtype: 'Sequence'
        :return: New Sequence
        """
        pass

    def new_sound(self, name: str, filepath: str, channel: int, frame_start: int) -> 'Sequence':
        """ Add a new sound sequence

        :param name: Name for the new sequence
        :type name: str
        :param filepath: Filepath to movie
        :type filepath: str
        :param channel: Channel, The channel for the new sequence
        :type channel: int
        :param frame_start: The start frame for the new sequence
        :type frame_start: int
        :rtype: 'Sequence'
        :return: New Sequence
        """
        pass

    def new_meta(self, name: str, channel: int, frame_start: int) -> 'Sequence':
        """ Add a new meta sequence

        :param name: Name for the new sequence
        :type name: str
        :param channel: Channel, The channel for the new sequence
        :type channel: int
        :param frame_start: The start frame for the new sequence
        :type frame_start: int
        :rtype: 'Sequence'
        :return: New Sequence
        """
        pass

    def new_effect(self, name: str, type: typing.Union[str, int], channel: int, frame_start: int, frame_end: int=0, seq1: 'Sequence'=None, seq2: 'Sequence'=None, seq3: 'Sequence'=None) -> 'Sequence':
        """ Add a new effect sequence

        :param name: Name for the new sequence
        :type name: str
        :param type: Type, type for the new sequence
        :type type: typing.Union[str, int]
        :param channel: Channel, The channel for the new sequence
        :type channel: int
        :param frame_start: The start frame for the new sequence
        :type frame_start: int
        :param frame_end: The end frame for the new sequence
        :type frame_end: int
        :param seq1: Sequence 1 for effect
        :type seq1: 'Sequence'
        :param seq2: Sequence 2 for effect
        :type seq2: 'Sequence'
        :param seq3: Sequence 3 for effect
        :type seq3: 'Sequence'
        :rtype: 'Sequence'
        :return: New Sequence
        """
        pass

    def remove(self, sequence: 'Sequence'):
        """ Remove a Sequence

        :param sequence: Sequence to remove
        :type sequence: 'Sequence'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SequencesTopLevel(bpy_prop_collection[Sequence], bpy_struct):
    """ Collection of Sequences
    """

    def new_clip(self, name: str, clip: 'MovieClip', channel: int, frame_start: int) -> 'Sequence':
        """ Add a new movie clip sequence

        :param name: Name for the new sequence
        :type name: str
        :param clip: Movie clip to add
        :type clip: 'MovieClip'
        :param channel: Channel, The channel for the new sequence
        :type channel: int
        :param frame_start: The start frame for the new sequence
        :type frame_start: int
        :rtype: 'Sequence'
        :return: New Sequence
        """
        pass

    def new_mask(self, name: str, mask: 'Mask', channel: int, frame_start: int) -> 'Sequence':
        """ Add a new mask sequence

        :param name: Name for the new sequence
        :type name: str
        :param mask: Mask to add
        :type mask: 'Mask'
        :param channel: Channel, The channel for the new sequence
        :type channel: int
        :param frame_start: The start frame for the new sequence
        :type frame_start: int
        :rtype: 'Sequence'
        :return: New Sequence
        """
        pass

    def new_scene(self, name: str, scene: 'Scene', channel: int, frame_start: int) -> 'Sequence':
        """ Add a new scene sequence

        :param name: Name for the new sequence
        :type name: str
        :param scene: Scene to add
        :type scene: 'Scene'
        :param channel: Channel, The channel for the new sequence
        :type channel: int
        :param frame_start: The start frame for the new sequence
        :type frame_start: int
        :rtype: 'Sequence'
        :return: New Sequence
        """
        pass

    def new_image(self, name: str, filepath: str, channel: int, frame_start: int, fit_method: typing.Union[str, int]='ORIGINAL') -> 'Sequence':
        """ Add a new image sequence

        :param name: Name for the new sequence
        :type name: str
        :param filepath: Filepath to image
        :type filepath: str
        :param channel: Channel, The channel for the new sequence
        :type channel: int
        :param frame_start: The start frame for the new sequence
        :type frame_start: int
        :param fit_method: Image Fit Method * ``FIT`` Scale to Fit -- Scale image so fits in preview. * ``FILL`` Scale to Fill -- Scale image so it fills preview completely. * ``STRETCH`` Stretch to Fill -- Stretch image so it fills preview. * ``ORIGINAL`` Use Original Size -- Don't scale the image.
        :type fit_method: typing.Union[str, int]
        :rtype: 'Sequence'
        :return: New Sequence
        """
        pass

    def new_movie(self, name: str, filepath: str, channel: int, frame_start: int, fit_method: typing.Union[str, int]='ORIGINAL') -> 'Sequence':
        """ Add a new movie sequence

        :param name: Name for the new sequence
        :type name: str
        :param filepath: Filepath to movie
        :type filepath: str
        :param channel: Channel, The channel for the new sequence
        :type channel: int
        :param frame_start: The start frame for the new sequence
        :type frame_start: int
        :param fit_method: Image Fit Method * ``FIT`` Scale to Fit -- Scale image so fits in preview. * ``FILL`` Scale to Fill -- Scale image so it fills preview completely. * ``STRETCH`` Stretch to Fill -- Stretch image so it fills preview. * ``ORIGINAL`` Use Original Size -- Don't scale the image.
        :type fit_method: typing.Union[str, int]
        :rtype: 'Sequence'
        :return: New Sequence
        """
        pass

    def new_sound(self, name: str, filepath: str, channel: int, frame_start: int) -> 'Sequence':
        """ Add a new sound sequence

        :param name: Name for the new sequence
        :type name: str
        :param filepath: Filepath to movie
        :type filepath: str
        :param channel: Channel, The channel for the new sequence
        :type channel: int
        :param frame_start: The start frame for the new sequence
        :type frame_start: int
        :rtype: 'Sequence'
        :return: New Sequence
        """
        pass

    def new_meta(self, name: str, channel: int, frame_start: int) -> 'Sequence':
        """ Add a new meta sequence

        :param name: Name for the new sequence
        :type name: str
        :param channel: Channel, The channel for the new sequence
        :type channel: int
        :param frame_start: The start frame for the new sequence
        :type frame_start: int
        :rtype: 'Sequence'
        :return: New Sequence
        """
        pass

    def new_effect(self, name: str, type: typing.Union[str, int], channel: int, frame_start: int, frame_end: int=0, seq1: 'Sequence'=None, seq2: 'Sequence'=None, seq3: 'Sequence'=None) -> 'Sequence':
        """ Add a new effect sequence

        :param name: Name for the new sequence
        :type name: str
        :param type: Type, type for the new sequence
        :type type: typing.Union[str, int]
        :param channel: Channel, The channel for the new sequence
        :type channel: int
        :param frame_start: The start frame for the new sequence
        :type frame_start: int
        :param frame_end: The end frame for the new sequence
        :type frame_end: int
        :param seq1: Sequence 1 for effect
        :type seq1: 'Sequence'
        :param seq2: Sequence 2 for effect
        :type seq2: 'Sequence'
        :param seq3: Sequence 3 for effect
        :type seq3: 'Sequence'
        :rtype: 'Sequence'
        :return: New Sequence
        """
        pass

    def remove(self, sequence: 'Sequence'):
        """ Remove a Sequence

        :param sequence: Sequence to remove
        :type sequence: 'Sequence'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SoundSequence(Sequence, bpy_struct):
    """ Sequence strip defining a sound to be played over a period of time
    """
    animation_offset_end: int = None
    ' Animation end offset (trim end)\n\n    :type: int\n    '
    animation_offset_start: int = None
    ' Animation start offset (trim start)\n\n    :type: int\n    '
    pan: float = None
    ' Playback panning of the sound (only for Mono sources)\n\n    :type: float\n    '
    show_waveform: bool = None
    ' Display the audio waveform inside the strip\n\n    :type: bool\n    '
    sound: 'Sound' = None
    " Sound data-block used by this sequence\n\n    :type: 'Sound'\n    "
    speed_factor: float = None
    ' Multiply playback speed\n\n    :type: float\n    '
    volume: float = None
    ' Playback volume of the sound\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SequenceColorBalance(SequenceColorBalanceData, bpy_struct):
    """ Color balance parameters for a sequence strip
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SequenceElements(bpy_prop_collection[SequenceElement], bpy_struct):
    """ Collection of SequenceElement
    """

    def append(self, filename: str) -> 'SequenceElement':
        """ Push an image from ImageSequence.directory

        :param filename: Filepath to image
        :type filename: str
        :rtype: 'SequenceElement'
        :return: New SequenceElement
        """
        pass

    def pop(self, index: int):
        """ Pop an image off the collection

        :param index: Index of image to remove
        :type index: int
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BrightContrastModifier(SequenceModifier, bpy_struct):
    """ Bright/contrast modifier data for sequence strip
    """
    bright: float = None
    ' Adjust the luminosity of the colors\n\n    :type: float\n    '
    contrast: float = None
    ' Adjust the difference in luminosity between pixels\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ColorBalanceModifier(SequenceModifier, bpy_struct):
    """ Color balance modifier for sequence strip
    """
    color_balance: 'SequenceColorBalanceData' = None
    " \n\n    :type: 'SequenceColorBalanceData'\n    "
    color_multiply: float = None
    ' Multiply the intensity of each pixel\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CurvesModifier(SequenceModifier, bpy_struct):
    """ RGB curves modifier for sequence strip
    """
    curve_mapping: 'CurveMapping' = None
    " \n\n    :type: 'CurveMapping'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class HueCorrectModifier(SequenceModifier, bpy_struct):
    """ Hue correction modifier for sequence strip
    """
    curve_mapping: 'CurveMapping' = None
    " \n\n    :type: 'CurveMapping'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SequenceModifiers(bpy_prop_collection[SequenceModifier], bpy_struct):
    """ Collection of strip modifiers
    """

    def new(self, name: str, type: typing.Union[str, int]) -> 'SequenceModifier':
        """ Add a new modifier

        :param name: New name for the modifier
        :type name: str
        :param type: Modifier type to add
        :type type: typing.Union[str, int]
        :rtype: 'SequenceModifier'
        :return: Newly created modifier
        """
        pass

    def remove(self, modifier: 'SequenceModifier'):
        """ Remove an existing modifier from the sequence

        :param modifier: Modifier to remove
        :type modifier: 'SequenceModifier'
        """
        pass

    def clear(self):
        """ Remove all modifiers from the sequence

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SequencerTonemapModifierData(SequenceModifier, bpy_struct):
    """ Tone mapping modifier
    """
    adaptation: float = None
    ' If 0, global; if 1, based on pixel intensity\n\n    :type: float\n    '
    contrast: float = None
    ' Set to 0 to use estimate from input image\n\n    :type: float\n    '
    correction: float = None
    ' If 0, same for all channels; if 1, each independent\n\n    :type: float\n    '
    gamma: float = None
    ' If not used, set to 1\n\n    :type: float\n    '
    intensity: float = None
    ' If less than zero, darkens image; otherwise, makes it brighter\n\n    :type: float\n    '
    key: float = None
    ' The value the average luminance is mapped to\n\n    :type: float\n    '
    offset: float = None
    ' Normally always 1, but can be used as an extra control to alter the brightness curve\n\n    :type: float\n    '
    tonemap_type: typing.Union[str, int] = None
    ' Tone mapping algorithm\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class WhiteBalanceModifier(SequenceModifier, bpy_struct):
    """ White balance modifier for sequence strip
    """
    white_value: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " This color defines white in the strip\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ObjectShaderFx(bpy_prop_collection[ShaderFx], bpy_struct):
    """ Collection of object effects
    """

    def new(self, name: str, type: typing.Union[str, int]) -> 'ShaderFx':
        """ Add a new shader fx

        :param name: New name for the effect
        :type name: str
        :param type: Effect type to add
        :type type: typing.Union[str, int]
        :rtype: 'ShaderFx'
        :return: Newly created effect
        """
        pass

    def remove(self, shader_fx: 'ShaderFx'):
        """ Remove an existing effect from the object

        :param shader_fx: Effect to remove
        :type shader_fx: 'ShaderFx'
        """
        pass

    def clear(self):
        """ Remove all effects from the object

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderFxBlur(ShaderFx, bpy_struct):
    """ Gaussian Blur effect
    """
    rotation: float = None
    ' Rotation of the effect\n\n    :type: float\n    '
    samples: int = None
    ' Number of Blur Samples (zero, disable blur)\n\n    :type: int\n    '
    size: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Factor of Blur\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    use_dof_mode: bool = None
    ' Blur using camera depth of field\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderFxColorize(ShaderFx, bpy_struct):
    """ Colorize effect
    """
    factor: float = None
    ' Mix factor\n\n    :type: float\n    '
    high_color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Second color used for effect\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    low_color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " First color used for effect\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    mode: typing.Union[str, int] = None
    ' Effect mode\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderFxFlip(ShaderFx, bpy_struct):
    """ Flip effect
    """
    use_flip_x: bool = None
    ' Flip image horizontally\n\n    :type: bool\n    '
    use_flip_y: bool = None
    ' Flip image vertically\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderFxGlow(ShaderFx, bpy_struct):
    """ Glow effect
    """
    blend_mode: typing.Union[str, int] = None
    ' Blend mode\n\n    :type: typing.Union[str, int]\n    '
    glow_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color used for generated glow\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    mode: typing.Union[str, int] = None
    ' Glow mode\n\n    :type: typing.Union[str, int]\n    '
    opacity: float = None
    ' Effect Opacity\n\n    :type: float\n    '
    rotation: float = None
    ' Rotation of the effect\n\n    :type: float\n    '
    samples: int = None
    ' Number of Blur Samples\n\n    :type: int\n    '
    select_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color selected to apply glow\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    size: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Size of the effect\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    threshold: float = None
    ' Limit to select color for glow effect\n\n    :type: float\n    '
    use_glow_under: bool = None
    ' Glow only areas with alpha (not supported with Regular blend mode)\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderFxPixel(ShaderFx, bpy_struct):
    """ Pixelate effect
    """
    size: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Pixel size\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    use_antialiasing: bool = None
    ' Antialias pixels\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderFxRim(ShaderFx, bpy_struct):
    """ Rim effect
    """
    blur: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Number of pixels for blurring rim (set to 0 to disable)\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    mask_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color that must be kept\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    mode: typing.Union[str, int] = None
    ' Blend mode\n\n    :type: typing.Union[str, int]\n    '
    offset: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Offset of the rim\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    rim_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color used for Rim\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    samples: int = None
    ' Number of Blur Samples (zero, disable blur)\n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderFxShadow(ShaderFx, bpy_struct):
    """ Shadow effect
    """
    amplitude: float = None
    ' Amplitude of Wave\n\n    :type: float\n    '
    blur: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Number of pixels for blurring shadow (set to 0 to disable)\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    object: 'Object' = None
    " Object to determine center of rotation\n\n    :type: 'Object'\n    "
    offset: typing.Union[bpy_prop_array[int], typing.Sequence[int]] = None
    ' Offset of the shadow\n\n    :type: typing.Union[bpy_prop_array[int], typing.Sequence[int]]\n    '
    orientation: typing.Union[str, int] = None
    ' Direction of the wave\n\n    :type: typing.Union[str, int]\n    '
    period: float = None
    ' Period of Wave\n\n    :type: float\n    '
    phase: float = None
    ' Phase Shift of Wave\n\n    :type: float\n    '
    rotation: float = None
    ' Rotation around center or object\n\n    :type: float\n    '
    samples: int = None
    ' Number of Blur Samples (zero, disable blur)\n\n    :type: int\n    '
    scale: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Scale of the shadow\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    shadow_color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Color used for Shadow\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    use_object: bool = None
    ' Use object as center of rotation\n\n    :type: bool\n    '
    use_wave: bool = None
    ' Use wave effect\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderFxSwirl(ShaderFx, bpy_struct):
    """ Swirl effect
    """
    angle: float = None
    ' Angle of rotation\n\n    :type: float\n    '
    object: 'Object' = None
    " Object to determine center location\n\n    :type: 'Object'\n    "
    radius: int = None
    ' Radius to apply\n\n    :type: int\n    '
    use_transparent: bool = None
    ' Make image transparent outside of radius\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderFxWave(ShaderFx, bpy_struct):
    """ Wave Deformation effect
    """
    amplitude: float = None
    ' Amplitude of Wave\n\n    :type: float\n    '
    orientation: typing.Union[str, int] = None
    ' Direction of the wave\n\n    :type: typing.Union[str, int]\n    '
    period: float = None
    ' Period of Wave\n\n    :type: float\n    '
    phase: float = None
    ' Phase Shift of Wave\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class AreaSpaces(bpy_prop_collection[Space], bpy_struct):
    """ Collection of spaces
    """
    active: 'Space' = None
    " Space currently being displayed in this area\n\n    :type: 'Space'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SpaceClipEditor(Space, bpy_struct):
    """ Clip editor space data
    """
    annotation_source: typing.Union[str, int] = None
    ' Where the annotation comes from * ``CLIP`` Clip -- Show annotation data-block which belongs to movie clip. * ``TRACK`` Track -- Show annotation data-block which belongs to active track.\n\n    :type: typing.Union[str, int]\n    '
    blend_factor: float = None
    ' Overlay blending factor of rasterized mask\n\n    :type: float\n    '
    clip: 'MovieClip' = None
    " Movie clip displayed and edited in this space\n\n    :type: 'MovieClip'\n    "
    clip_user: 'MovieClipUser' = None
    " Parameters defining which frame of the movie clip is displayed\n\n    :type: 'MovieClipUser'\n    "
    cursor_location: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " 2D cursor location for this view\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    lock_selection: bool = None
    ' Lock viewport to selected markers during playback\n\n    :type: bool\n    '
    lock_time_cursor: bool = None
    ' Lock curves view to time cursor during playback and tracking\n\n    :type: bool\n    '
    mask: 'Mask' = None
    " Mask displayed and edited in this space\n\n    :type: 'Mask'\n    "
    mask_display_type: typing.Union[str, int] = None
    ' Display type for mask splines * ``OUTLINE`` Outline -- Display white edges with black outline. * ``DASH`` Dash -- Display dashed black-white edges. * ``BLACK`` Black -- Display black edges. * ``WHITE`` White -- Display white edges.\n\n    :type: typing.Union[str, int]\n    '
    mask_overlay_mode: typing.Union[str, int] = None
    ' Overlay mode of rasterized mask * ``ALPHACHANNEL`` Alpha Channel -- Show alpha channel of the mask. * ``COMBINED`` Combined -- Combine space background image with the mask.\n\n    :type: typing.Union[str, int]\n    '
    mode: typing.Union[str, int] = None
    ' Editing context being displayed\n\n    :type: typing.Union[str, int]\n    '
    path_length: int = None
    ' Length of displaying path, in frames\n\n    :type: int\n    '
    pivot_point: typing.Union[str, int] = None
    " Pivot center for rotation/scaling * ``BOUNDING_BOX_CENTER`` Bounding Box Center -- Pivot around bounding box center of selected object(s). * ``CURSOR`` 2D Cursor -- Pivot around the 2D cursor. * ``INDIVIDUAL_ORIGINS`` Individual Origins -- Pivot around each object's own origin. * ``MEDIAN_POINT`` Median Point -- Pivot around the median point of selected objects.\n\n    :type: typing.Union[str, int]\n    "
    scopes: 'MovieClipScopes' = None
    " Scopes to visualize movie clip statistics\n\n    :type: 'MovieClipScopes'\n    "
    show_annotation: bool = None
    ' Show annotations for this view\n\n    :type: bool\n    '
    show_blue_channel: bool = None
    ' Show blue channel in the frame\n\n    :type: bool\n    '
    show_bundles: bool = None
    ' Show projection of 3D markers into footage\n\n    :type: bool\n    '
    show_disabled: bool = None
    ' Show disabled tracks from the footage\n\n    :type: bool\n    '
    show_filters: bool = None
    ' Show filters for graph editor\n\n    :type: bool\n    '
    show_gizmo: bool = None
    ' Show gizmos of all types\n\n    :type: bool\n    '
    show_gizmo_navigate: bool = None
    ' Viewport navigation gizmo\n\n    :type: bool\n    '
    show_graph_frames: bool = None
    ' Show curve for per-frame average error (camera motion should be solved first)\n\n    :type: bool\n    '
    show_graph_hidden: bool = None
    " Include channels from objects/bone that aren't visible\n\n    :type: bool\n    "
    show_graph_only_selected: bool = None
    ' Only include channels relating to selected objects and data\n\n    :type: bool\n    '
    show_graph_tracks_error: bool = None
    ' Display the reprojection error curve for selected tracks\n\n    :type: bool\n    '
    show_graph_tracks_motion: bool = None
    ' Display the speed curves (in "x" direction red, in "y" direction green) for the selected tracks\n\n    :type: bool\n    '
    show_green_channel: bool = None
    ' Show green channel in the frame\n\n    :type: bool\n    '
    show_grid: bool = None
    ' Show grid showing lens distortion\n\n    :type: bool\n    '
    show_marker_pattern: bool = None
    ' Show pattern boundbox for markers\n\n    :type: bool\n    '
    show_marker_search: bool = None
    ' Show search boundbox for markers\n\n    :type: bool\n    '
    show_mask_overlay: bool = None
    ' \n\n    :type: bool\n    '
    show_mask_spline: bool = None
    ' \n\n    :type: bool\n    '
    show_metadata: bool = None
    ' Show metadata of clip\n\n    :type: bool\n    '
    show_names: bool = None
    ' Show track names and status\n\n    :type: bool\n    '
    show_red_channel: bool = None
    ' Show red channel in the frame\n\n    :type: bool\n    '
    show_region_hud: bool = None
    ' \n\n    :type: bool\n    '
    show_region_toolbar: bool = None
    ' \n\n    :type: bool\n    '
    show_region_ui: bool = None
    ' \n\n    :type: bool\n    '
    show_seconds: bool = None
    ' Show timing in seconds not frames\n\n    :type: bool\n    '
    show_stable: bool = None
    ' Show stable footage in editor (if stabilization is enabled)\n\n    :type: bool\n    '
    show_tiny_markers: bool = None
    ' Show markers in a more compact manner\n\n    :type: bool\n    '
    show_track_path: bool = None
    ' Show path of how track moves\n\n    :type: bool\n    '
    use_grayscale_preview: bool = None
    ' Display frame in grayscale mode\n\n    :type: bool\n    '
    use_manual_calibration: bool = None
    ' Use manual calibration helpers\n\n    :type: bool\n    '
    use_mute_footage: bool = None
    ' Mute footage and show black background instead\n\n    :type: bool\n    '
    view: typing.Union[str, int] = None
    ' Type of the clip editor view * ``CLIP`` Clip -- Show editing clip preview. * ``GRAPH`` Graph -- Show graph view for active element. * ``DOPESHEET`` Dopesheet -- Dopesheet view for tracking data.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def draw_handler_add(self, callback: typing.Any, args: typing.Tuple, region_type: str, draw_type: str) -> typing.Any:
        """ Add a new draw handler to this space type. It will be called every time the specified region in the space type will be drawn. Note: All arguments are positional only for now.

        :param callback: A function that will be called when the region is drawn. It gets the specified arguments as input.
        :type callback: typing.Any
        :param args: Arguments that will be passed to the callback.
        :type args: typing.Tuple
        :param region_type: `bpy.types.Region.type`)
        :type region_type: str
        :param draw_type: Usually ``POST_PIXEL`` for 2D drawing and ``POST_VIEW`` for 3D drawing. In some cases ``PRE_VIEW`` can be used. ``BACKDROP`` can be used for backdrops in the node editor.
        :type draw_type: str
        :rtype: typing.Any
        :return: Handler that can be removed later on.
        """
        pass

    def draw_handler_remove(self, handler: typing.Any, region_type: str):
        """ Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any
        :param region_type: Region type the callback was added to.
        :type region_type: str
        """
        pass

class SpaceConsole(Space, bpy_struct):
    """ Interactive python console
    """
    font_size: int = None
    ' Font size to use for displaying the text\n\n    :type: int\n    '
    history: bpy_prop_collection['ConsoleLine'] = None
    " Command history\n\n    :type: bpy_prop_collection['ConsoleLine']\n    "
    language: str = None
    ' Command line prompt language\n\n    :type: str\n    '
    prompt: str = None
    ' Command line prompt\n\n    :type: str\n    '
    scrollback: bpy_prop_collection['ConsoleLine'] = None
    " Command output\n\n    :type: bpy_prop_collection['ConsoleLine']\n    "
    select_end: int = None
    ' \n\n    :type: int\n    '
    select_start: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def draw_handler_add(self, callback: typing.Any, args: typing.Tuple, region_type: str, draw_type: str) -> typing.Any:
        """ Add a new draw handler to this space type. It will be called every time the specified region in the space type will be drawn. Note: All arguments are positional only for now.

        :param callback: A function that will be called when the region is drawn. It gets the specified arguments as input.
        :type callback: typing.Any
        :param args: Arguments that will be passed to the callback.
        :type args: typing.Tuple
        :param region_type: `bpy.types.Region.type`)
        :type region_type: str
        :param draw_type: Usually ``POST_PIXEL`` for 2D drawing and ``POST_VIEW`` for 3D drawing. In some cases ``PRE_VIEW`` can be used. ``BACKDROP`` can be used for backdrops in the node editor.
        :type draw_type: str
        :rtype: typing.Any
        :return: Handler that can be removed later on.
        """
        pass

    def draw_handler_remove(self, handler: typing.Any, region_type: str):
        """ Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any
        :param region_type: Region type the callback was added to.
        :type region_type: str
        """
        pass

class SpaceDopeSheetEditor(Space, bpy_struct):
    """ Dope Sheet space data
    """
    action: 'Action' = None
    " Action displayed and edited in this space\n\n    :type: 'Action'\n    "
    auto_snap: typing.Union[str, int] = None
    ' Automatic time snapping settings for transformations * ``NONE`` No Auto-Snap. * ``STEP`` Frame Step -- Snap to 1.0 frame intervals. * ``TIME_STEP`` Second Step -- Snap to 1.0 second intervals. * ``FRAME`` Nearest Frame -- Snap to actual frames (nla-action time). * ``SECOND`` Nearest Second -- Snap to actual seconds (nla-action time). * ``MARKER`` Nearest Marker -- Snap to nearest marker.\n\n    :type: typing.Union[str, int]\n    '
    cache_cloth: bool = None
    " Show the active object's cloth point cache\n\n    :type: bool\n    "
    cache_dynamicpaint: bool = None
    " Show the active object's Dynamic Paint cache\n\n    :type: bool\n    "
    cache_particles: bool = None
    " Show the active object's particle point cache\n\n    :type: bool\n    "
    cache_rigidbody: bool = None
    " Show the active object's Rigid Body cache\n\n    :type: bool\n    "
    cache_smoke: bool = None
    " Show the active object's smoke cache\n\n    :type: bool\n    "
    cache_softbody: bool = None
    " Show the active object's softbody point cache\n\n    :type: bool\n    "
    dopesheet: 'DopeSheet' = None
    " Settings for filtering animation data\n\n    :type: 'DopeSheet'\n    "
    mode: typing.Union[str, int] = None
    " Editing context being displayed * ``DOPESHEET`` Dope Sheet -- Edit all keyframes in scene. * ``TIMELINE`` Timeline -- Timeline and playback controls. * ``ACTION`` Action Editor -- Edit keyframes in active object's Object-level action. * ``SHAPEKEY`` Shape Key Editor -- Edit keyframes in active object's Shape Keys action. * ``GPENCIL`` Grease Pencil -- Edit timings for all Grease Pencil sketches in file. * ``MASK`` Mask -- Edit timings for Mask Editor splines. * ``CACHEFILE`` Cache File -- Edit timings for Cache File data-blocks.\n\n    :type: typing.Union[str, int]\n    "
    show_cache: bool = None
    ' Show the status of cached frames in the timeline\n\n    :type: bool\n    '
    show_extremes: bool = None
    ' Mark keyframes where the key value flow changes direction, based on comparison with adjacent keys\n\n    :type: bool\n    '
    show_interpolation: bool = None
    ' Display keyframe handle types and non-bezier interpolation modes\n\n    :type: bool\n    '
    show_markers: bool = None
    ' If any exists, show markers in a separate row at the bottom of the editor\n\n    :type: bool\n    '
    show_pose_markers: bool = None
    ' Show markers belonging to the active action instead of Scene markers (Action and Shape Key Editors only)\n\n    :type: bool\n    '
    show_region_hud: bool = None
    ' \n\n    :type: bool\n    '
    show_region_ui: bool = None
    ' \n\n    :type: bool\n    '
    show_seconds: bool = None
    ' Show timing in seconds not frames\n\n    :type: bool\n    '
    show_sliders: bool = None
    ' Show sliders beside F-Curve channels\n\n    :type: bool\n    '
    ui_mode: typing.Union[str, int] = None
    " Editing context being displayed * ``DOPESHEET`` Dope Sheet -- Edit all keyframes in scene. * ``ACTION`` Action Editor -- Edit keyframes in active object's Object-level action. * ``SHAPEKEY`` Shape Key Editor -- Edit keyframes in active object's Shape Keys action. * ``GPENCIL`` Grease Pencil -- Edit timings for all Grease Pencil sketches in file. * ``MASK`` Mask -- Edit timings for Mask Editor splines. * ``CACHEFILE`` Cache File -- Edit timings for Cache File data-blocks.\n\n    :type: typing.Union[str, int]\n    "
    use_auto_merge_keyframes: bool = None
    ' Automatically merge nearby keyframes\n\n    :type: bool\n    '
    use_marker_sync: bool = None
    ' Sync Markers with keyframe edits\n\n    :type: bool\n    '
    use_realtime_update: bool = None
    ' When transforming keyframes, changes to the animation data are flushed to other views\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def draw_handler_add(self, callback: typing.Any, args: typing.Tuple, region_type: str, draw_type: str) -> typing.Any:
        """ Add a new draw handler to this space type. It will be called every time the specified region in the space type will be drawn. Note: All arguments are positional only for now.

        :param callback: A function that will be called when the region is drawn. It gets the specified arguments as input.
        :type callback: typing.Any
        :param args: Arguments that will be passed to the callback.
        :type args: typing.Tuple
        :param region_type: `bpy.types.Region.type`)
        :type region_type: str
        :param draw_type: Usually ``POST_PIXEL`` for 2D drawing and ``POST_VIEW`` for 3D drawing. In some cases ``PRE_VIEW`` can be used. ``BACKDROP`` can be used for backdrops in the node editor.
        :type draw_type: str
        :rtype: typing.Any
        :return: Handler that can be removed later on.
        """
        pass

    def draw_handler_remove(self, handler: typing.Any, region_type: str):
        """ Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any
        :param region_type: Region type the callback was added to.
        :type region_type: str
        """
        pass

class SpaceFileBrowser(Space, bpy_struct):
    """ File browser space data
    """
    active_operator: 'Operator' = None
    " \n\n    :type: 'Operator'\n    "
    bookmarks: bpy_prop_collection['FileBrowserFSMenuEntry'] = None
    " User's bookmarks\n\n    :type: bpy_prop_collection['FileBrowserFSMenuEntry']\n    "
    bookmarks_active: int = None
    ' Index of active bookmark (-1 if none)\n\n    :type: int\n    '
    browse_mode: typing.Union[str, int] = None
    ' Type of the File Editor view (regular file browsing or asset browsing)\n\n    :type: typing.Union[str, int]\n    '
    operator: 'Operator' = None
    " \n\n    :type: 'Operator'\n    "
    params: 'FileSelectParams' = None
    " Parameters and Settings for the Filebrowser\n\n    :type: 'FileSelectParams'\n    "
    recent_folders: bpy_prop_collection['FileBrowserFSMenuEntry'] = None
    " \n\n    :type: bpy_prop_collection['FileBrowserFSMenuEntry']\n    "
    recent_folders_active: int = None
    ' Index of active recent folder (-1 if none)\n\n    :type: int\n    '
    show_region_tool_props: bool = None
    ' \n\n    :type: bool\n    '
    show_region_toolbar: bool = None
    ' \n\n    :type: bool\n    '
    show_region_ui: bool = None
    ' \n\n    :type: bool\n    '
    system_bookmarks: bpy_prop_collection['FileBrowserFSMenuEntry'] = None
    " System's bookmarks\n\n    :type: bpy_prop_collection['FileBrowserFSMenuEntry']\n    "
    system_bookmarks_active: int = None
    ' Index of active system bookmark (-1 if none)\n\n    :type: int\n    '
    system_folders: bpy_prop_collection['FileBrowserFSMenuEntry'] = None
    " System's folders (usually root, available hard drives, etc)\n\n    :type: bpy_prop_collection['FileBrowserFSMenuEntry']\n    "
    system_folders_active: int = None
    ' Index of active system folder (-1 if none)\n\n    :type: int\n    '

    def activate_asset_by_id(self, id_to_activate: 'ID', deferred: bool=False):
        """ Activate and select the asset entry that represents the given ID

        :param id_to_activate: id_to_activate
        :type id_to_activate: 'ID'
        :param deferred: Whether to activate the ID immediately (false) or after the file browser refreshes (true)
        :type deferred: bool
        """
        pass

    def activate_file_by_relative_path(self, relative_path: str=''):
        """ Set active file and add to selection based on relative path to current File Browser directory

        :param relative_path: relative_path
        :type relative_path: str
        """
        pass

    def deselect_all(self):
        """ Deselect all files

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def draw_handler_add(self, callback: typing.Any, args: typing.Tuple, region_type: str, draw_type: str) -> typing.Any:
        """ Add a new draw handler to this space type. It will be called every time the specified region in the space type will be drawn. Note: All arguments are positional only for now.

        :param callback: A function that will be called when the region is drawn. It gets the specified arguments as input.
        :type callback: typing.Any
        :param args: Arguments that will be passed to the callback.
        :type args: typing.Tuple
        :param region_type: `bpy.types.Region.type`)
        :type region_type: str
        :param draw_type: Usually ``POST_PIXEL`` for 2D drawing and ``POST_VIEW`` for 3D drawing. In some cases ``PRE_VIEW`` can be used. ``BACKDROP`` can be used for backdrops in the node editor.
        :type draw_type: str
        :rtype: typing.Any
        :return: Handler that can be removed later on.
        """
        pass

    def draw_handler_remove(self, handler: typing.Any, region_type: str):
        """ Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any
        :param region_type: Region type the callback was added to.
        :type region_type: str
        """
        pass

class SpaceGraphEditor(Space, bpy_struct):
    """ Graph Editor space data
    """
    auto_snap: typing.Union[str, int] = None
    ' Automatic time snapping settings for transformations * ``NONE`` No Auto-Snap. * ``STEP`` Frame Step -- Snap to 1.0 frame intervals. * ``TIME_STEP`` Second Step -- Snap to 1.0 second intervals. * ``FRAME`` Nearest Frame -- Snap to actual frames (nla-action time). * ``SECOND`` Nearest Second -- Snap to actual seconds (nla-action time). * ``MARKER`` Nearest Marker -- Snap to nearest marker.\n\n    :type: typing.Union[str, int]\n    '
    cursor_position_x: float = None
    ' Graph Editor 2D-Value cursor - X-Value component\n\n    :type: float\n    '
    cursor_position_y: float = None
    ' Graph Editor 2D-Value cursor - Y-Value component\n\n    :type: float\n    '
    dopesheet: 'DopeSheet' = None
    " Settings for filtering animation data\n\n    :type: 'DopeSheet'\n    "
    has_ghost_curves: bool = None
    ' Graph Editor instance has some ghost curves stored\n\n    :type: bool\n    '
    mode: typing.Union[str, int] = None
    ' Editing context being displayed\n\n    :type: typing.Union[str, int]\n    '
    pivot_point: typing.Union[str, int] = None
    ' Pivot center for rotation/scaling\n\n    :type: typing.Union[str, int]\n    '
    show_cursor: bool = None
    ' Show 2D cursor\n\n    :type: bool\n    '
    show_extrapolation: bool = None
    ' \n\n    :type: bool\n    '
    show_handles: bool = None
    ' Show handles of Bezier control points\n\n    :type: bool\n    '
    show_markers: bool = None
    ' If any exists, show markers in a separate row at the bottom of the editor\n\n    :type: bool\n    '
    show_region_hud: bool = None
    ' \n\n    :type: bool\n    '
    show_region_ui: bool = None
    ' \n\n    :type: bool\n    '
    show_seconds: bool = None
    ' Show timing in seconds not frames\n\n    :type: bool\n    '
    show_sliders: bool = None
    ' Show sliders beside F-Curve channels\n\n    :type: bool\n    '
    use_auto_merge_keyframes: bool = None
    ' Automatically merge nearby keyframes\n\n    :type: bool\n    '
    use_auto_normalization: bool = None
    ' Automatically recalculate curve normalization on every curve edit\n\n    :type: bool\n    '
    use_beauty_drawing: bool = None
    ' Display F-Curves using Anti-Aliasing and other fancy effects (disable for better performance)\n\n    :type: bool\n    '
    use_normalization: bool = None
    ' Display curves in normalized range from -1 to 1, for easier editing of multiple curves with different ranges\n\n    :type: bool\n    '
    use_only_selected_curves_handles: bool = None
    ' Only keyframes of selected F-Curves are visible and editable\n\n    :type: bool\n    '
    use_only_selected_keyframe_handles: bool = None
    ' Only show and edit handles of selected keyframes\n\n    :type: bool\n    '
    use_realtime_update: bool = None
    ' When transforming keyframes, changes to the animation data are flushed to other views\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def draw_handler_add(self, callback: typing.Any, args: typing.Tuple, region_type: str, draw_type: str) -> typing.Any:
        """ Add a new draw handler to this space type. It will be called every time the specified region in the space type will be drawn. Note: All arguments are positional only for now.

        :param callback: A function that will be called when the region is drawn. It gets the specified arguments as input.
        :type callback: typing.Any
        :param args: Arguments that will be passed to the callback.
        :type args: typing.Tuple
        :param region_type: `bpy.types.Region.type`)
        :type region_type: str
        :param draw_type: Usually ``POST_PIXEL`` for 2D drawing and ``POST_VIEW`` for 3D drawing. In some cases ``PRE_VIEW`` can be used. ``BACKDROP`` can be used for backdrops in the node editor.
        :type draw_type: str
        :rtype: typing.Any
        :return: Handler that can be removed later on.
        """
        pass

    def draw_handler_remove(self, handler: typing.Any, region_type: str):
        """ Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any
        :param region_type: Region type the callback was added to.
        :type region_type: str
        """
        pass

class SpaceImageEditor(Space, bpy_struct):
    """ Image and UV editor space data
    """
    blend_factor: float = None
    ' Overlay blending factor of rasterized mask\n\n    :type: float\n    '
    cursor_location: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " 2D cursor location for this view\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    display_channels: typing.Union[str, int] = None
    ' Channels of the image to display * ``COLOR_ALPHA`` Color and Alpha -- Display image with RGB colors and alpha transparency. * ``COLOR`` Color -- Display image with RGB colors. * ``ALPHA`` Alpha -- Display alpha transparency channel. * ``Z_BUFFER`` Z-Buffer -- Display Z-buffer associated with image (mapped from camera clip start to end). * ``RED`` Red. * ``GREEN`` Green. * ``BLUE`` Blue.\n\n    :type: typing.Union[str, int]\n    '
    grease_pencil: 'GreasePencil' = None
    " Grease pencil data for this space\n\n    :type: 'GreasePencil'\n    "
    image: 'Image' = None
    " Image displayed and edited in this space\n\n    :type: 'Image'\n    "
    image_user: 'ImageUser' = None
    " Parameters defining which layer, pass and frame of the image is displayed\n\n    :type: 'ImageUser'\n    "
    mask: 'Mask' = None
    " Mask displayed and edited in this space\n\n    :type: 'Mask'\n    "
    mask_display_type: typing.Union[str, int] = None
    ' Display type for mask splines * ``OUTLINE`` Outline -- Display white edges with black outline. * ``DASH`` Dash -- Display dashed black-white edges. * ``BLACK`` Black -- Display black edges. * ``WHITE`` White -- Display white edges.\n\n    :type: typing.Union[str, int]\n    '
    mask_overlay_mode: typing.Union[str, int] = None
    ' Overlay mode of rasterized mask * ``ALPHACHANNEL`` Alpha Channel -- Show alpha channel of the mask. * ``COMBINED`` Combined -- Combine space background image with the mask.\n\n    :type: typing.Union[str, int]\n    '
    mode: typing.Union[str, int] = None
    ' Editing context being displayed\n\n    :type: typing.Union[str, int]\n    '
    overlay: 'SpaceImageOverlay' = None
    " Settings for display of overlays in the UV/Image editor\n\n    :type: 'SpaceImageOverlay'\n    "
    pivot_point: typing.Union[str, int] = None
    " Rotation/Scaling Pivot * ``BOUNDING_BOX_CENTER`` Bounding Box Center -- Pivot around bounding box center of selected object(s). * ``CURSOR`` 3D Cursor -- Pivot around the 3D cursor. * ``INDIVIDUAL_ORIGINS`` Individual Origins -- Pivot around each object's own origin. * ``MEDIAN_POINT`` Median Point -- Pivot around the median point of selected objects. * ``ACTIVE_ELEMENT`` Active Element -- Pivot around active object.\n\n    :type: typing.Union[str, int]\n    "
    sample_histogram: 'Histogram' = None
    " Sampled colors along line\n\n    :type: 'Histogram'\n    "
    scopes: 'Scopes' = None
    " Scopes to visualize image statistics\n\n    :type: 'Scopes'\n    "
    show_annotation: bool = None
    ' Show annotations for this view\n\n    :type: bool\n    '
    show_gizmo: bool = None
    ' Show gizmos of all types\n\n    :type: bool\n    '
    show_gizmo_navigate: bool = None
    ' Viewport navigation gizmo\n\n    :type: bool\n    '
    show_mask_overlay: bool = None
    ' \n\n    :type: bool\n    '
    show_mask_spline: bool = None
    ' \n\n    :type: bool\n    '
    show_maskedit: bool = None
    ' Show Mask editing related properties\n\n    :type: bool\n    '
    show_paint: bool = None
    ' Show paint related properties\n\n    :type: bool\n    '
    show_region_hud: bool = None
    ' \n\n    :type: bool\n    '
    show_region_tool_header: bool = None
    ' \n\n    :type: bool\n    '
    show_region_toolbar: bool = None
    ' \n\n    :type: bool\n    '
    show_region_ui: bool = None
    ' \n\n    :type: bool\n    '
    show_render: bool = None
    ' Show render related properties\n\n    :type: bool\n    '
    show_repeat: bool = None
    ' Display the image repeated outside of the main view\n\n    :type: bool\n    '
    show_stereo_3d: bool = None
    ' Display the image in Stereo 3D\n\n    :type: bool\n    '
    show_uvedit: bool = None
    ' Show UV editing related properties\n\n    :type: bool\n    '
    ui_mode: typing.Union[str, int] = None
    ' Editing context being displayed * ``VIEW`` View -- View the image. * ``PAINT`` Paint -- 2D image painting mode. * ``MASK`` Mask -- Mask editing.\n\n    :type: typing.Union[str, int]\n    '
    use_image_pin: bool = None
    ' Display current image regardless of object selection\n\n    :type: bool\n    '
    use_realtime_update: bool = None
    ' Update other affected window spaces automatically to reflect changes during interactive operations such as transform\n\n    :type: bool\n    '
    uv_editor: 'SpaceUVEditor' = None
    " UV editor settings\n\n    :type: 'SpaceUVEditor'\n    "
    zoom: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Zoom factor\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def draw_handler_add(self, callback: typing.Any, args: typing.Tuple, region_type: str, draw_type: str) -> typing.Any:
        """ Add a new draw handler to this space type. It will be called every time the specified region in the space type will be drawn. Note: All arguments are positional only for now.

        :param callback: A function that will be called when the region is drawn. It gets the specified arguments as input.
        :type callback: typing.Any
        :param args: Arguments that will be passed to the callback.
        :type args: typing.Tuple
        :param region_type: `bpy.types.Region.type`)
        :type region_type: str
        :param draw_type: Usually ``POST_PIXEL`` for 2D drawing and ``POST_VIEW`` for 3D drawing. In some cases ``PRE_VIEW`` can be used. ``BACKDROP`` can be used for backdrops in the node editor.
        :type draw_type: str
        :rtype: typing.Any
        :return: Handler that can be removed later on.
        """
        pass

    def draw_handler_remove(self, handler: typing.Any, region_type: str):
        """ Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any
        :param region_type: Region type the callback was added to.
        :type region_type: str
        """
        pass

class SpaceInfo(Space, bpy_struct):
    """ Info space data
    """
    show_report_debug: bool = None
    ' Display debug reporting info\n\n    :type: bool\n    '
    show_report_error: bool = None
    ' Display error text\n\n    :type: bool\n    '
    show_report_info: bool = None
    ' Display general information\n\n    :type: bool\n    '
    show_report_operator: bool = None
    ' Display the operator log\n\n    :type: bool\n    '
    show_report_warning: bool = None
    ' Display warnings\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def draw_handler_add(self, callback: typing.Any, args: typing.Tuple, region_type: str, draw_type: str) -> typing.Any:
        """ Add a new draw handler to this space type. It will be called every time the specified region in the space type will be drawn. Note: All arguments are positional only for now.

        :param callback: A function that will be called when the region is drawn. It gets the specified arguments as input.
        :type callback: typing.Any
        :param args: Arguments that will be passed to the callback.
        :type args: typing.Tuple
        :param region_type: `bpy.types.Region.type`)
        :type region_type: str
        :param draw_type: Usually ``POST_PIXEL`` for 2D drawing and ``POST_VIEW`` for 3D drawing. In some cases ``PRE_VIEW`` can be used. ``BACKDROP`` can be used for backdrops in the node editor.
        :type draw_type: str
        :rtype: typing.Any
        :return: Handler that can be removed later on.
        """
        pass

    def draw_handler_remove(self, handler: typing.Any, region_type: str):
        """ Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any
        :param region_type: Region type the callback was added to.
        :type region_type: str
        """
        pass

class SpaceNLA(Space, bpy_struct):
    """ NLA editor space data
    """
    auto_snap: typing.Union[str, int] = None
    ' Automatic time snapping settings for transformations * ``NONE`` No Auto-Snap. * ``STEP`` Frame Step -- Snap to 1.0 frame intervals. * ``TIME_STEP`` Second Step -- Snap to 1.0 second intervals. * ``FRAME`` Nearest Frame -- Snap to actual frames (nla-action time). * ``SECOND`` Nearest Second -- Snap to actual seconds (nla-action time). * ``MARKER`` Nearest Marker -- Snap to nearest marker.\n\n    :type: typing.Union[str, int]\n    '
    dopesheet: 'DopeSheet' = None
    " Settings for filtering animation data\n\n    :type: 'DopeSheet'\n    "
    show_local_markers: bool = None
    ' Show action-local markers on the strips, useful when synchronizing timing across strips\n\n    :type: bool\n    '
    show_markers: bool = None
    ' If any exists, show markers in a separate row at the bottom of the editor\n\n    :type: bool\n    '
    show_region_hud: bool = None
    ' \n\n    :type: bool\n    '
    show_region_ui: bool = None
    ' \n\n    :type: bool\n    '
    show_seconds: bool = None
    ' Show timing in seconds not frames\n\n    :type: bool\n    '
    show_strip_curves: bool = None
    ' Show influence F-Curves on strips\n\n    :type: bool\n    '
    use_realtime_update: bool = None
    ' When transforming strips, changes to the animation data are flushed to other views\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def draw_handler_add(self, callback: typing.Any, args: typing.Tuple, region_type: str, draw_type: str) -> typing.Any:
        """ Add a new draw handler to this space type. It will be called every time the specified region in the space type will be drawn. Note: All arguments are positional only for now.

        :param callback: A function that will be called when the region is drawn. It gets the specified arguments as input.
        :type callback: typing.Any
        :param args: Arguments that will be passed to the callback.
        :type args: typing.Tuple
        :param region_type: `bpy.types.Region.type`)
        :type region_type: str
        :param draw_type: Usually ``POST_PIXEL`` for 2D drawing and ``POST_VIEW`` for 3D drawing. In some cases ``PRE_VIEW`` can be used. ``BACKDROP`` can be used for backdrops in the node editor.
        :type draw_type: str
        :rtype: typing.Any
        :return: Handler that can be removed later on.
        """
        pass

    def draw_handler_remove(self, handler: typing.Any, region_type: str):
        """ Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any
        :param region_type: Region type the callback was added to.
        :type region_type: str
        """
        pass

class SpaceNodeEditor(Space, bpy_struct):
    """ Node editor space data
    """
    backdrop_channels: typing.Union[str, int] = None
    ' Channels of the image to draw * ``COLOR_ALPHA`` Color and Alpha -- Display image with RGB colors and alpha transparency. * ``COLOR`` Color -- Display image with RGB colors. * ``ALPHA`` Alpha -- Display alpha transparency channel. * ``RED`` Red. * ``GREEN`` Green. * ``BLUE`` Blue.\n\n    :type: typing.Union[str, int]\n    '
    backdrop_offset: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Backdrop offset\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    backdrop_zoom: float = None
    ' Backdrop zoom factor\n\n    :type: float\n    '
    cursor_location: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Location for adding new nodes\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    edit_tree: 'NodeTree' = None
    " Node tree being displayed and edited\n\n    :type: 'NodeTree'\n    "
    id: 'ID' = None
    " Data-block whose nodes are being edited\n\n    :type: 'ID'\n    "
    id_from: 'ID' = None
    " Data-block from which the edited data-block is linked\n\n    :type: 'ID'\n    "
    insert_offset_direction: typing.Union[str, int] = None
    ' Direction to offset nodes on insertion\n\n    :type: typing.Union[str, int]\n    '
    node_tree: 'NodeTree' = None
    " Base node tree from context\n\n    :type: 'NodeTree'\n    "
    overlay: 'SpaceNodeOverlay' = None
    " Settings for display of overlays in the Node Editor\n\n    :type: 'SpaceNodeOverlay'\n    "
    path: 'SpaceNodeEditorPath' = None
    " Path from the data-block to the currently edited node tree\n\n    :type: 'SpaceNodeEditorPath'\n    "
    pin: bool = None
    ' Use the pinned node tree\n\n    :type: bool\n    '
    shader_type: typing.Union[str, int] = None
    ' Type of data to take shader from * ``OBJECT`` Object -- Edit shader nodes from Object. * ``WORLD`` World -- Edit shader nodes from World. * ``LINESTYLE`` Line Style -- Edit shader nodes from Line Style.\n\n    :type: typing.Union[str, int]\n    '
    show_annotation: bool = None
    ' Show annotations for this view\n\n    :type: bool\n    '
    show_backdrop: bool = None
    ' Use active Viewer Node output as backdrop for compositing nodes\n\n    :type: bool\n    '
    show_region_toolbar: bool = None
    ' \n\n    :type: bool\n    '
    show_region_ui: bool = None
    ' \n\n    :type: bool\n    '
    texture_type: typing.Union[str, int] = None
    ' Type of data to take texture from * ``WORLD`` World -- Edit texture nodes from World. * ``BRUSH`` Brush -- Edit texture nodes from Brush. * ``LINESTYLE`` Line Style -- Edit texture nodes from Line Style.\n\n    :type: typing.Union[str, int]\n    '
    tree_type: typing.Union[str, int] = None
    ' Node tree type to display and edit\n\n    :type: typing.Union[str, int]\n    '
    use_auto_render: bool = None
    ' Re-render and composite changed layers on 3D edits\n\n    :type: bool\n    '
    use_insert_offset: bool = None
    ' Automatically offset the following or previous nodes in a chain when inserting a new node\n\n    :type: bool\n    '

    def cursor_location_from_region(self, x: int, y: int):
        """ Set the cursor location using region coordinates

        :param x: x, Region x coordinate
        :type x: int
        :param y: y, Region y coordinate
        :type y: int
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def draw_handler_add(self, callback: typing.Any, args: typing.Tuple, region_type: str, draw_type: str) -> typing.Any:
        """ Add a new draw handler to this space type. It will be called every time the specified region in the space type will be drawn. Note: All arguments are positional only for now.

        :param callback: A function that will be called when the region is drawn. It gets the specified arguments as input.
        :type callback: typing.Any
        :param args: Arguments that will be passed to the callback.
        :type args: typing.Tuple
        :param region_type: `bpy.types.Region.type`)
        :type region_type: str
        :param draw_type: Usually ``POST_PIXEL`` for 2D drawing and ``POST_VIEW`` for 3D drawing. In some cases ``PRE_VIEW`` can be used. ``BACKDROP`` can be used for backdrops in the node editor.
        :type draw_type: str
        :rtype: typing.Any
        :return: Handler that can be removed later on.
        """
        pass

    def draw_handler_remove(self, handler: typing.Any, region_type: str):
        """ Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any
        :param region_type: Region type the callback was added to.
        :type region_type: str
        """
        pass

class SpaceOutliner(Space, bpy_struct):
    """ Outliner space data
    """
    display_mode: typing.Union[str, int] = None
    ' Type of information to display * ``SCENES`` Scenes -- Display scenes and their view layers, collections and objects. * ``VIEW_LAYER`` View Layer -- Display collections and objects in the view layer. * ``SEQUENCE`` Video Sequencer -- Display data belonging to the Video Sequencer. * ``LIBRARIES`` Blender File -- Display data of current file and linked libraries. * ``DATA_API`` Data API -- Display low level Blender data and its properties. * ``LIBRARY_OVERRIDES`` Library Overrides -- Display data-blocks with library overrides and list their overridden properties. * ``ORPHAN_DATA`` Orphan Data -- Display data-blocks which are unused and/or will be lost when the file is reloaded.\n\n    :type: typing.Union[str, int]\n    '
    filter_id_type: typing.Union[str, int] = None
    ' Data-block type to show\n\n    :type: typing.Union[str, int]\n    '
    filter_invert: bool = None
    ' Invert the object state filter\n\n    :type: bool\n    '
    filter_state: typing.Union[str, int] = None
    ' * ``ALL`` All -- Show all objects in the view layer. * ``VISIBLE`` Visible -- Show visible objects. * ``SELECTED`` Selected -- Show selected objects. * ``ACTIVE`` Active -- Show only the active object. * ``SELECTABLE`` Selectable -- Show only selectable objects.\n\n    :type: typing.Union[str, int]\n    '
    filter_text: str = None
    ' Live search filtering string\n\n    :type: str\n    '
    lib_override_view_mode: typing.Union[str, int] = None
    ' Choose different visualizations of library override data * ``PROPERTIES`` Properties -- Display all local override data-blocks with their overridden properties and buttons to edit them. * ``HIERARCHIES`` Hierarchies -- Display library override relationships.\n\n    :type: typing.Union[str, int]\n    '
    show_mode_column: bool = None
    ' Show the mode column for mode toggle and activation\n\n    :type: bool\n    '
    show_restrict_column_enable: bool = None
    ' Exclude from view layer\n\n    :type: bool\n    '
    show_restrict_column_hide: bool = None
    ' Temporarily hide in viewport\n\n    :type: bool\n    '
    show_restrict_column_holdout: bool = None
    ' Holdout\n\n    :type: bool\n    '
    show_restrict_column_indirect_only: bool = None
    ' Indirect only\n\n    :type: bool\n    '
    show_restrict_column_render: bool = None
    ' Globally disable in renders\n\n    :type: bool\n    '
    show_restrict_column_select: bool = None
    ' Selectable\n\n    :type: bool\n    '
    show_restrict_column_viewport: bool = None
    ' Globally disable in viewports\n\n    :type: bool\n    '
    use_filter_case_sensitive: bool = None
    ' Only use case sensitive matches of search string\n\n    :type: bool\n    '
    use_filter_children: bool = None
    ' Show children\n\n    :type: bool\n    '
    use_filter_collection: bool = None
    ' Show collections\n\n    :type: bool\n    '
    use_filter_complete: bool = None
    ' Only use complete matches of search string\n\n    :type: bool\n    '
    use_filter_id_type: bool = None
    ' Show only data-blocks of one type\n\n    :type: bool\n    '
    use_filter_lib_override_system: bool = None
    ' For libraries with overrides created, show the overridden values that are defined/controlled automatically (e.g. to make users of an overridden data-block point to the override data, not the original linked data)\n\n    :type: bool\n    '
    use_filter_object: bool = None
    ' Show objects\n\n    :type: bool\n    '
    use_filter_object_armature: bool = None
    ' Show armature objects\n\n    :type: bool\n    '
    use_filter_object_camera: bool = None
    ' Show camera objects\n\n    :type: bool\n    '
    use_filter_object_content: bool = None
    ' Show what is inside the objects elements\n\n    :type: bool\n    '
    use_filter_object_empty: bool = None
    ' Show empty objects\n\n    :type: bool\n    '
    use_filter_object_light: bool = None
    ' Show light objects\n\n    :type: bool\n    '
    use_filter_object_mesh: bool = None
    ' Show mesh objects\n\n    :type: bool\n    '
    use_filter_object_others: bool = None
    ' Show curves, lattices, light probes, fonts, ...\n\n    :type: bool\n    '
    use_filter_view_layers: bool = None
    ' Show all the view layers\n\n    :type: bool\n    '
    use_sort_alpha: bool = None
    ' \n\n    :type: bool\n    '
    use_sync_select: bool = None
    ' Sync outliner selection with other editors\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def draw_handler_add(self, callback: typing.Any, args: typing.Tuple, region_type: str, draw_type: str) -> typing.Any:
        """ Add a new draw handler to this space type. It will be called every time the specified region in the space type will be drawn. Note: All arguments are positional only for now.

        :param callback: A function that will be called when the region is drawn. It gets the specified arguments as input.
        :type callback: typing.Any
        :param args: Arguments that will be passed to the callback.
        :type args: typing.Tuple
        :param region_type: `bpy.types.Region.type`)
        :type region_type: str
        :param draw_type: Usually ``POST_PIXEL`` for 2D drawing and ``POST_VIEW`` for 3D drawing. In some cases ``PRE_VIEW`` can be used. ``BACKDROP`` can be used for backdrops in the node editor.
        :type draw_type: str
        :rtype: typing.Any
        :return: Handler that can be removed later on.
        """
        pass

    def draw_handler_remove(self, handler: typing.Any, region_type: str):
        """ Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any
        :param region_type: Region type the callback was added to.
        :type region_type: str
        """
        pass

class SpacePreferences(Space, bpy_struct):
    """ Blender preferences space data
    """
    filter_text: str = None
    ' Search term for filtering in the UI\n\n    :type: str\n    '
    filter_type: typing.Union[str, int] = None
    ' Filter method * ``NAME`` Name -- Filter based on the operator name. * ``KEY`` Key-Binding -- Filter based on key bindings.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def draw_handler_add(self, callback: typing.Any, args: typing.Tuple, region_type: str, draw_type: str) -> typing.Any:
        """ Add a new draw handler to this space type. It will be called every time the specified region in the space type will be drawn. Note: All arguments are positional only for now.

        :param callback: A function that will be called when the region is drawn. It gets the specified arguments as input.
        :type callback: typing.Any
        :param args: Arguments that will be passed to the callback.
        :type args: typing.Tuple
        :param region_type: `bpy.types.Region.type`)
        :type region_type: str
        :param draw_type: Usually ``POST_PIXEL`` for 2D drawing and ``POST_VIEW`` for 3D drawing. In some cases ``PRE_VIEW`` can be used. ``BACKDROP`` can be used for backdrops in the node editor.
        :type draw_type: str
        :rtype: typing.Any
        :return: Handler that can be removed later on.
        """
        pass

    def draw_handler_remove(self, handler: typing.Any, region_type: str):
        """ Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any
        :param region_type: Region type the callback was added to.
        :type region_type: str
        """
        pass

class SpaceProperties(Space, bpy_struct):
    """ Properties space data
    """
    context: typing.Union[str, int] = None
    ' * ``TOOL`` Tool -- Active Tool and Workspace settings. * ``SCENE`` Scene -- Scene Properties. * ``RENDER`` Render -- Render Properties. * ``OUTPUT`` Output -- Output Properties. * ``VIEW_LAYER`` View Layer -- View Layer Properties. * ``WORLD`` World -- World Properties. * ``COLLECTION`` Collection -- Collection Properties. * ``OBJECT`` Object -- Object Properties. * ``CONSTRAINT`` Constraints -- Object Constraint Properties. * ``MODIFIER`` Modifiers -- Modifier Properties. * ``DATA`` Data -- Object Data Properties. * ``BONE`` Bone -- Bone Properties. * ``BONE_CONSTRAINT`` Bone Constraints -- Bone Constraint Properties. * ``MATERIAL`` Material -- Material Properties. * ``TEXTURE`` Texture -- Texture Properties. * ``PARTICLES`` Particles -- Particle Properties. * ``PHYSICS`` Physics -- Physics Properties. * ``SHADERFX`` Effects -- Visual Effects Properties.\n\n    :type: typing.Union[str, int]\n    '
    outliner_sync: typing.Union[str, int] = None
    ' Change to the corresponding tab when outliner data icons are clicked * ``ALWAYS`` Always -- Always change tabs when clicking an icon in an outliner. * ``NEVER`` Never -- Never change tabs when clicking an icon in an outliner. * ``AUTO`` Auto -- Change tabs only when this editor shares a border with an outliner.\n\n    :type: typing.Union[str, int]\n    '
    pin_id: 'ID' = None
    " \n\n    :type: 'ID'\n    "
    search_filter: str = None
    ' Live search filtering string\n\n    :type: str\n    '
    tab_search_results: bool = None
    ' Whether or not each visible tab has a search result\n\n    :type: bool\n    '
    use_pin_id: bool = None
    ' Use the pinned context\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def draw_handler_add(self, callback: typing.Any, args: typing.Tuple, region_type: str, draw_type: str) -> typing.Any:
        """ Add a new draw handler to this space type. It will be called every time the specified region in the space type will be drawn. Note: All arguments are positional only for now.

        :param callback: A function that will be called when the region is drawn. It gets the specified arguments as input.
        :type callback: typing.Any
        :param args: Arguments that will be passed to the callback.
        :type args: typing.Tuple
        :param region_type: `bpy.types.Region.type`)
        :type region_type: str
        :param draw_type: Usually ``POST_PIXEL`` for 2D drawing and ``POST_VIEW`` for 3D drawing. In some cases ``PRE_VIEW`` can be used. ``BACKDROP`` can be used for backdrops in the node editor.
        :type draw_type: str
        :rtype: typing.Any
        :return: Handler that can be removed later on.
        """
        pass

    def draw_handler_remove(self, handler: typing.Any, region_type: str):
        """ Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any
        :param region_type: Region type the callback was added to.
        :type region_type: str
        """
        pass

class SpaceSequenceEditor(Space, bpy_struct):
    """ Sequence editor space data
    """
    cursor_location: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " 2D cursor location for this view\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    display_channel: int = None
    ' The channel number shown in the image preview. 0 is the result of all strips combined\n\n    :type: int\n    '
    display_mode: typing.Union[str, int] = None
    ' View mode to use for displaying sequencer output\n\n    :type: typing.Union[str, int]\n    '
    grease_pencil: 'GreasePencil' = None
    " Grease Pencil data for this Preview region\n\n    :type: 'GreasePencil'\n    "
    overlay_frame_type: typing.Union[str, int] = None
    ' Overlay display method * ``RECTANGLE`` Rectangle -- Show rectangle area overlay. * ``REFERENCE`` Reference -- Show reference frame only. * ``CURRENT`` Current -- Show current frame only.\n\n    :type: typing.Union[str, int]\n    '
    preview_channels: typing.Union[str, int] = None
    ' Channels of the preview to display * ``COLOR_ALPHA`` Color and Alpha -- Display image with RGB colors and alpha transparency. * ``COLOR`` Color -- Display image with RGB colors.\n\n    :type: typing.Union[str, int]\n    '
    preview_overlay: 'SequencerPreviewOverlay' = None
    " Settings for display of overlays\n\n    :type: 'SequencerPreviewOverlay'\n    "
    proxy_render_size: typing.Union[str, int] = None
    ' Display preview using full resolution or different proxy resolutions\n\n    :type: typing.Union[str, int]\n    '
    show_backdrop: bool = None
    ' Display result under strips\n\n    :type: bool\n    '
    show_frames: bool = None
    ' Display frames rather than seconds\n\n    :type: bool\n    '
    show_gizmo: bool = None
    ' Show gizmos of all types\n\n    :type: bool\n    '
    show_gizmo_context: bool = None
    ' Context sensitive gizmos for the active item\n\n    :type: bool\n    '
    show_gizmo_navigate: bool = None
    ' Viewport navigation gizmo\n\n    :type: bool\n    '
    show_gizmo_tool: bool = None
    ' Active tool gizmo\n\n    :type: bool\n    '
    show_markers: bool = None
    ' If any exists, show markers in a separate row at the bottom of the editor\n\n    :type: bool\n    '
    show_overexposed: int = None
    ' Show overexposed areas with zebra stripes\n\n    :type: int\n    '
    show_overlays: bool = None
    ' \n\n    :type: bool\n    '
    show_region_channels: bool = None
    ' \n\n    :type: bool\n    '
    show_region_hud: bool = None
    ' \n\n    :type: bool\n    '
    show_region_tool_header: bool = None
    ' \n\n    :type: bool\n    '
    show_region_toolbar: bool = None
    ' \n\n    :type: bool\n    '
    show_region_ui: bool = None
    ' \n\n    :type: bool\n    '
    show_seconds: bool = None
    ' Show timing in seconds not frames\n\n    :type: bool\n    '
    show_separate_color: bool = None
    ' Separate color channels in preview\n\n    :type: bool\n    '
    show_transform_preview: bool = None
    ' Show preview of the transformed frames\n\n    :type: bool\n    '
    timeline_overlay: 'SequencerTimelineOverlay' = None
    " Settings for display of overlays\n\n    :type: 'SequencerTimelineOverlay'\n    "
    use_clamp_view: bool = None
    ' Limit timeline height to maximum used channel slot\n\n    :type: bool\n    '
    use_marker_sync: bool = None
    ' Transform markers as well as strips\n\n    :type: bool\n    '
    use_proxies: bool = None
    ' Use optimized files for faster scrubbing when available\n\n    :type: bool\n    '
    use_zoom_to_fit: bool = None
    ' Automatically zoom preview image to make it fully fit the region\n\n    :type: bool\n    '
    view_type: typing.Union[str, int] = None
    ' Type of the Sequencer view (sequencer, preview or both)\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def draw_handler_add(self, callback: typing.Any, args: typing.Tuple, region_type: str, draw_type: str) -> typing.Any:
        """ Add a new draw handler to this space type. It will be called every time the specified region in the space type will be drawn. Note: All arguments are positional only for now.

        :param callback: A function that will be called when the region is drawn. It gets the specified arguments as input.
        :type callback: typing.Any
        :param args: Arguments that will be passed to the callback.
        :type args: typing.Tuple
        :param region_type: `bpy.types.Region.type`)
        :type region_type: str
        :param draw_type: Usually ``POST_PIXEL`` for 2D drawing and ``POST_VIEW`` for 3D drawing. In some cases ``PRE_VIEW`` can be used. ``BACKDROP`` can be used for backdrops in the node editor.
        :type draw_type: str
        :rtype: typing.Any
        :return: Handler that can be removed later on.
        """
        pass

    def draw_handler_remove(self, handler: typing.Any, region_type: str):
        """ Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any
        :param region_type: Region type the callback was added to.
        :type region_type: str
        """
        pass

class SpaceSpreadsheet(Space, bpy_struct):
    """ Spreadsheet space data
    """
    attribute_domain: typing.Union[str, int] = None
    ' Attribute domain to display\n\n    :type: typing.Union[str, int]\n    '
    columns: bpy_prop_collection['SpreadsheetColumn'] = None
    " Persistent data associated with spreadsheet columns\n\n    :type: bpy_prop_collection['SpreadsheetColumn']\n    "
    display_viewer_path_collapsed: bool = None
    ' \n\n    :type: bool\n    '
    geometry_component_type: typing.Union[str, int] = None
    ' Part of the geometry to display data from\n\n    :type: typing.Union[str, int]\n    '
    is_pinned: bool = None
    ' Context path is pinned\n\n    :type: bool\n    '
    object_eval_state: typing.Union[str, int] = None
    ' * ``EVALUATED`` Evaluated -- Use data from fully or partially evaluated object. * ``ORIGINAL`` Original -- Use data from original object without any modifiers applied. * ``VIEWER_NODE`` Viewer Node -- Use intermediate data from viewer node.\n\n    :type: typing.Union[str, int]\n    '
    row_filters: bpy_prop_collection['SpreadsheetRowFilter'] = None
    " Filters to remove rows from the displayed data\n\n    :type: bpy_prop_collection['SpreadsheetRowFilter']\n    "
    show_only_selected: bool = None
    ' Only include rows that correspond to selected elements\n\n    :type: bool\n    '
    show_region_channels: bool = None
    ' \n\n    :type: bool\n    '
    show_region_footer: bool = None
    ' \n\n    :type: bool\n    '
    show_region_ui: bool = None
    ' \n\n    :type: bool\n    '
    use_filter: bool = None
    ' \n\n    :type: bool\n    '
    viewer_path: 'ViewerPath' = None
    " Path to the data that is displayed in the spreadsheet\n\n    :type: 'ViewerPath'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def draw_handler_add(self, callback: typing.Any, args: typing.Tuple, region_type: str, draw_type: str) -> typing.Any:
        """ Add a new draw handler to this space type. It will be called every time the specified region in the space type will be drawn. Note: All arguments are positional only for now.

        :param callback: A function that will be called when the region is drawn. It gets the specified arguments as input.
        :type callback: typing.Any
        :param args: Arguments that will be passed to the callback.
        :type args: typing.Tuple
        :param region_type: `bpy.types.Region.type`)
        :type region_type: str
        :param draw_type: Usually ``POST_PIXEL`` for 2D drawing and ``POST_VIEW`` for 3D drawing. In some cases ``PRE_VIEW`` can be used. ``BACKDROP`` can be used for backdrops in the node editor.
        :type draw_type: str
        :rtype: typing.Any
        :return: Handler that can be removed later on.
        """
        pass

    def draw_handler_remove(self, handler: typing.Any, region_type: str):
        """ Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any
        :param region_type: Region type the callback was added to.
        :type region_type: str
        """
        pass

class SpaceTextEditor(Space, bpy_struct):
    """ Text editor space data
    """
    find_text: str = None
    ' Text to search for with the find tool\n\n    :type: str\n    '
    font_size: int = None
    ' Font size to use for displaying the text\n\n    :type: int\n    '
    margin_column: int = None
    ' Column number to show right margin at\n\n    :type: int\n    '
    replace_text: str = None
    ' Text to replace selected text with using the replace tool\n\n    :type: str\n    '
    show_line_highlight: bool = None
    ' Highlight the current line\n\n    :type: bool\n    '
    show_line_numbers: bool = None
    ' Show line numbers next to the text\n\n    :type: bool\n    '
    show_margin: bool = None
    ' Show right margin\n\n    :type: bool\n    '
    show_region_footer: bool = None
    ' \n\n    :type: bool\n    '
    show_region_ui: bool = None
    ' \n\n    :type: bool\n    '
    show_syntax_highlight: bool = None
    ' Syntax highlight for scripting\n\n    :type: bool\n    '
    show_word_wrap: bool = None
    ' Wrap words if there is not enough horizontal space\n\n    :type: bool\n    '
    tab_width: int = None
    ' Number of spaces to display tabs with\n\n    :type: int\n    '
    text: 'Text' = None
    " Text displayed and edited in this space\n\n    :type: 'Text'\n    "
    top: int = None
    ' Top line visible\n\n    :type: int\n    '
    use_find_all: bool = None
    ' Search in all text data-blocks, instead of only the active one\n\n    :type: bool\n    '
    use_find_wrap: bool = None
    ' Search again from the start of the file when reaching the end\n\n    :type: bool\n    '
    use_live_edit: bool = None
    ' Run python while editing\n\n    :type: bool\n    '
    use_match_case: bool = None
    ' Search string is sensitive to uppercase and lowercase letters\n\n    :type: bool\n    '
    use_overwrite: bool = None
    ' Overwrite characters when typing rather than inserting them\n\n    :type: bool\n    '
    visible_lines: int = None
    ' Amount of lines that can be visible in current editor\n\n    :type: int\n    '

    def is_syntax_highlight_supported(self):
        """ Returns True if the editor supports syntax highlighting for the current text datablock

        """
        pass

    def region_location_from_cursor(self, line: int, column: int) -> typing.Union[bpy_prop_array[int], typing.Sequence[int]]:
        """ Retrieve the region position from the given line and character position

        :param line: Line, Line index
        :type line: int
        :param column: Column, Column index
        :type column: int
        :rtype: typing.Union[bpy_prop_array[int], typing.Sequence[int]]
        :return: Region coordinates
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def draw_handler_add(self, callback: typing.Any, args: typing.Tuple, region_type: str, draw_type: str) -> typing.Any:
        """ Add a new draw handler to this space type. It will be called every time the specified region in the space type will be drawn. Note: All arguments are positional only for now.

        :param callback: A function that will be called when the region is drawn. It gets the specified arguments as input.
        :type callback: typing.Any
        :param args: Arguments that will be passed to the callback.
        :type args: typing.Tuple
        :param region_type: `bpy.types.Region.type`)
        :type region_type: str
        :param draw_type: Usually ``POST_PIXEL`` for 2D drawing and ``POST_VIEW`` for 3D drawing. In some cases ``PRE_VIEW`` can be used. ``BACKDROP`` can be used for backdrops in the node editor.
        :type draw_type: str
        :rtype: typing.Any
        :return: Handler that can be removed later on.
        """
        pass

    def draw_handler_remove(self, handler: typing.Any, region_type: str):
        """ Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any
        :param region_type: Region type the callback was added to.
        :type region_type: str
        """
        pass

class SpaceView3D(Space, bpy_struct):
    """ 3D View space data
    """
    camera: 'Object' = None
    " Active camera used in this view (when unlocked from the scene's active camera)\n\n    :type: 'Object'\n    "
    clip_end: float = None
    ' 3D View far clipping distance\n\n    :type: float\n    '
    clip_start: float = None
    ' 3D View near clipping distance (perspective view only)\n\n    :type: float\n    '
    icon_from_show_object_viewport: int = None
    ' \n\n    :type: int\n    '
    lens: float = None
    ' Viewport lens angle\n\n    :type: float\n    '
    local_view: 'SpaceView3D' = None
    " Display an isolated subset of objects, apart from the scene visibility\n\n    :type: 'SpaceView3D'\n    "
    lock_bone: str = None
    " 3D View center is locked to this bone's position\n\n    :type: str\n    "
    lock_camera: bool = None
    ' Enable view navigation within the camera view\n\n    :type: bool\n    '
    lock_cursor: bool = None
    " 3D View center is locked to the cursor's position\n\n    :type: bool\n    "
    lock_object: 'Object' = None
    " 3D View center is locked to this object's position\n\n    :type: 'Object'\n    "
    mirror_xr_session: bool = None
    ' Synchronize the viewer perspective of virtual reality sessions with this 3D viewport\n\n    :type: bool\n    '
    overlay: 'View3DOverlay' = None
    " Settings for display of overlays in the 3D viewport\n\n    :type: 'View3DOverlay'\n    "
    region_3d: 'RegionView3D' = None
    " 3D region in this space, in case of quad view the camera region\n\n    :type: 'RegionView3D'\n    "
    region_quadviews: bpy_prop_collection['RegionView3D'] = None
    " 3D regions (the third one defines quad view settings, the fourth one is same as 'region_3d')\n\n    :type: bpy_prop_collection['RegionView3D']\n    "
    render_border_max_x: float = None
    ' Maximum X value for the render region\n\n    :type: float\n    '
    render_border_max_y: float = None
    ' Maximum Y value for the render region\n\n    :type: float\n    '
    render_border_min_x: float = None
    ' Minimum X value for the render region\n\n    :type: float\n    '
    render_border_min_y: float = None
    ' Minimum Y value for the render region\n\n    :type: float\n    '
    shading: 'View3DShading' = None
    " Settings for shading in the 3D viewport\n\n    :type: 'View3DShading'\n    "
    show_bundle_names: bool = None
    ' Show names for reconstructed tracks objects\n\n    :type: bool\n    '
    show_camera_path: bool = None
    ' Show reconstructed camera path\n\n    :type: bool\n    '
    show_gizmo: bool = None
    ' Show gizmos of all types\n\n    :type: bool\n    '
    show_gizmo_camera_dof_distance: bool = None
    ' Gizmo to adjust camera focus distance (depends on limits display)\n\n    :type: bool\n    '
    show_gizmo_camera_lens: bool = None
    ' Gizmo to adjust camera focal length or orthographic scale\n\n    :type: bool\n    '
    show_gizmo_context: bool = None
    ' Context sensitive gizmos for the active item\n\n    :type: bool\n    '
    show_gizmo_empty_force_field: bool = None
    ' Gizmo to adjust the force field\n\n    :type: bool\n    '
    show_gizmo_empty_image: bool = None
    ' Gizmo to adjust image size and position\n\n    :type: bool\n    '
    show_gizmo_light_look_at: bool = None
    ' Gizmo to adjust the direction of the light\n\n    :type: bool\n    '
    show_gizmo_light_size: bool = None
    ' Gizmo to adjust spot and area size\n\n    :type: bool\n    '
    show_gizmo_navigate: bool = None
    ' Viewport navigation gizmo\n\n    :type: bool\n    '
    show_gizmo_object_rotate: bool = None
    ' Gizmo to adjust rotation\n\n    :type: bool\n    '
    show_gizmo_object_scale: bool = None
    ' Gizmo to adjust scale\n\n    :type: bool\n    '
    show_gizmo_object_translate: bool = None
    ' Gizmo to adjust location\n\n    :type: bool\n    '
    show_gizmo_tool: bool = None
    ' Active tool gizmo\n\n    :type: bool\n    '
    show_object_select_armature: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_camera: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_curve: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_curves: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_empty: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_font: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_grease_pencil: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_lattice: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_light: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_light_probe: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_mesh: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_meta: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_pointcloud: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_speaker: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_surf: bool = None
    ' \n\n    :type: bool\n    '
    show_object_select_volume: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_armature: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_camera: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_curve: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_curves: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_empty: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_font: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_grease_pencil: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_lattice: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_light: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_light_probe: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_mesh: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_meta: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_pointcloud: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_speaker: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_surf: bool = None
    ' \n\n    :type: bool\n    '
    show_object_viewport_volume: bool = None
    ' \n\n    :type: bool\n    '
    show_reconstruction: bool = None
    ' Display reconstruction data from active movie clip\n\n    :type: bool\n    '
    show_region_hud: bool = None
    ' \n\n    :type: bool\n    '
    show_region_tool_header: bool = None
    ' \n\n    :type: bool\n    '
    show_region_toolbar: bool = None
    ' \n\n    :type: bool\n    '
    show_region_ui: bool = None
    ' \n\n    :type: bool\n    '
    show_stereo_3d_cameras: bool = None
    ' Show the left and right cameras\n\n    :type: bool\n    '
    show_stereo_3d_convergence_plane: bool = None
    ' Show the stereo 3D convergence plane\n\n    :type: bool\n    '
    show_stereo_3d_volume: bool = None
    ' Show the stereo 3D frustum volume\n\n    :type: bool\n    '
    show_viewer: bool = None
    ' Display non-final geometry from viewer nodes\n\n    :type: bool\n    '
    stereo_3d_camera: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    stereo_3d_convergence_plane_alpha: float = None
    ' Opacity (alpha) of the convergence plane\n\n    :type: float\n    '
    stereo_3d_eye: typing.Union[str, int] = None
    ' Current stereo eye being displayed\n\n    :type: typing.Union[str, int]\n    '
    stereo_3d_volume_alpha: float = None
    " Opacity (alpha) of the cameras' frustum volume\n\n    :type: float\n    "
    tracks_display_size: float = None
    ' Display size of tracks from reconstructed data\n\n    :type: float\n    '
    tracks_display_type: typing.Union[str, int] = None
    ' Viewport display style for tracks\n\n    :type: typing.Union[str, int]\n    '
    use_local_camera: bool = None
    " Use a local camera in this view, rather than scene's active camera\n\n    :type: bool\n    "
    use_local_collections: bool = None
    ' Display a different set of collections in this viewport\n\n    :type: bool\n    '
    use_render_border: bool = None
    ' Use a region within the frame size for rendered viewport (when not viewing through the camera)\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def draw_handler_add(self, callback: typing.Any, args: typing.Tuple, region_type: str, draw_type: str) -> typing.Any:
        """ Add a new draw handler to this space type. It will be called every time the specified region in the space type will be drawn. Note: All arguments are positional only for now.

        :param callback: A function that will be called when the region is drawn. It gets the specified arguments as input.
        :type callback: typing.Any
        :param args: Arguments that will be passed to the callback.
        :type args: typing.Tuple
        :param region_type: `bpy.types.Region.type`)
        :type region_type: str
        :param draw_type: Usually ``POST_PIXEL`` for 2D drawing and ``POST_VIEW`` for 3D drawing. In some cases ``PRE_VIEW`` can be used. ``BACKDROP`` can be used for backdrops in the node editor.
        :type draw_type: str
        :rtype: typing.Any
        :return: Handler that can be removed later on.
        """
        pass

    def draw_handler_remove(self, handler: typing.Any, region_type: str):
        """ Remove a draw handler that was added previously.

        :param handler: The draw handler that should be removed.
        :type handler: typing.Any
        :param region_type: Region type the callback was added to.
        :type region_type: str
        """
        pass

class CurveSplines(bpy_prop_collection[Spline], bpy_struct):
    """ Collection of curve splines
    """
    active: 'Spline' = None
    " Active curve spline\n\n    :type: 'Spline'\n    "

    def new(self, type: typing.Union[str, int]) -> 'Spline':
        """ Add a new spline to the curve

        :param type: type for the new spline
        :type type: typing.Union[str, int]
        :rtype: 'Spline'
        :return: The newly created spline
        """
        pass

    def remove(self, spline: 'Spline'):
        """ Remove a spline from a curve

        :param spline: The spline to remove
        :type spline: 'Spline'
        """
        pass

    def clear(self):
        """ Remove all splines from a curve

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SplinePoints(bpy_prop_collection[SplinePoint], bpy_struct):
    """ Collection of spline points
    """

    def add(self, count: int):
        """ Add a number of points to this spline

        :param count: Number, Number of points to add to the spline
        :type count: int
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class StudioLights(bpy_prop_collection[StudioLight], bpy_struct):
    """ Collection of studio lights
    """

    def load(self, path: str, type: typing.Union[str, int]) -> 'StudioLight':
        """ Load studiolight from file

        :param path: File Path, File path where the studio light file can be found
        :type path: str
        :param type: Type, The type for the new studio light
        :type type: typing.Union[str, int]
        :rtype: 'StudioLight'
        :return: Newly created StudioLight
        """
        pass

    def new(self, path: str) -> 'StudioLight':
        """ Create studiolight from default lighting

        :param path: Path, Path to the file that will contain the lighting info (without extension)
        :type path: str
        :rtype: 'StudioLight'
        :return: Newly created StudioLight
        """
        pass

    def remove(self, studio_light: 'StudioLight'):
        """ Remove a studio light

        :param studio_light: The studio light to remove
        :type studio_light: 'StudioLight'
        """
        pass

    def refresh(self):
        """ Refresh Studio Lights from disk

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BrushTextureSlot(TextureSlot, bpy_struct):
    """ Texture slot for textures in a Brush data-block
    """
    angle: float = None
    ' Brush texture rotation\n\n    :type: float\n    '
    has_random_texture_angle: bool = None
    ' \n\n    :type: bool\n    '
    has_texture_angle: bool = None
    ' \n\n    :type: bool\n    '
    has_texture_angle_source: bool = None
    ' \n\n    :type: bool\n    '
    map_mode: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    mask_map_mode: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    random_angle: float = None
    ' Brush texture random angle\n\n    :type: float\n    '
    use_rake: bool = None
    ' \n\n    :type: bool\n    '
    use_random: bool = None
    ' \n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleTextureSlot(TextureSlot, bpy_struct):
    """ Texture slot for textures in a LineStyle data-block
    """
    alpha_factor: float = None
    ' Amount texture affects alpha\n\n    :type: float\n    '
    diffuse_color_factor: float = None
    ' Amount texture affects diffuse color\n\n    :type: float\n    '
    mapping: typing.Union[str, int] = None
    ' * ``FLAT`` Flat -- Map X and Y coordinates directly. * ``CUBE`` Cube -- Map using the normal vector. * ``TUBE`` Tube -- Map with Z as central axis. * ``SPHERE`` Sphere -- Map with Z as central axis.\n\n    :type: typing.Union[str, int]\n    '
    mapping_x: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    mapping_y: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    mapping_z: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    texture_coords: typing.Union[str, int] = None
    ' Texture coordinates used to map the texture onto the background * ``WINDOW`` Window -- Use screen coordinates as texture coordinates. * ``GLOBAL`` Global -- Use global coordinates for the texture coordinates. * ``ALONG_STROKE`` Along stroke -- Use stroke length for texture coordinates. * ``ORCO`` Generated -- Use the original undeformed coordinates of the object.\n\n    :type: typing.Union[str, int]\n    '
    use_map_alpha: bool = None
    ' The texture affects the alpha value\n\n    :type: bool\n    '
    use_map_color_diffuse: bool = None
    ' The texture affects basic color of the stroke\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ParticleSettingsTextureSlot(TextureSlot, bpy_struct):
    """ Texture slot for textures in a Particle Settings data-block
    """
    clump_factor: float = None
    ' Amount texture affects child clump\n\n    :type: float\n    '
    damp_factor: float = None
    ' Amount texture affects particle damping\n\n    :type: float\n    '
    density_factor: float = None
    ' Amount texture affects particle density\n\n    :type: float\n    '
    field_factor: float = None
    ' Amount texture affects particle force fields\n\n    :type: float\n    '
    gravity_factor: float = None
    ' Amount texture affects particle gravity\n\n    :type: float\n    '
    kink_amp_factor: float = None
    ' Amount texture affects child kink amplitude\n\n    :type: float\n    '
    kink_freq_factor: float = None
    ' Amount texture affects child kink frequency\n\n    :type: float\n    '
    length_factor: float = None
    ' Amount texture affects child hair length\n\n    :type: float\n    '
    life_factor: float = None
    ' Amount texture affects particle life time\n\n    :type: float\n    '
    mapping: typing.Union[str, int] = None
    ' * ``FLAT`` Flat -- Map X and Y coordinates directly. * ``CUBE`` Cube -- Map using the normal vector. * ``TUBE`` Tube -- Map with Z as central axis. * ``SPHERE`` Sphere -- Map with Z as central axis.\n\n    :type: typing.Union[str, int]\n    '
    mapping_x: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    mapping_y: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    mapping_z: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    object: 'Object' = None
    " Object to use for mapping with Object texture coordinates\n\n    :type: 'Object'\n    "
    rough_factor: float = None
    ' Amount texture affects child roughness\n\n    :type: float\n    '
    size_factor: float = None
    ' Amount texture affects physical particle size\n\n    :type: float\n    '
    texture_coords: typing.Union[str, int] = None
    " Texture coordinates used to map the texture onto the background * ``GLOBAL`` Global -- Use global coordinates for the texture coordinates. * ``OBJECT`` Object -- Use linked object's coordinates for texture coordinates. * ``UV`` UV -- Use UV coordinates for texture coordinates. * ``ORCO`` Generated -- Use the original undeformed coordinates of the object. * ``STRAND`` Strand / Particle -- Use normalized strand texture coordinate (1D) or particle age (X) and trail position (Y).\n\n    :type: typing.Union[str, int]\n    "
    time_factor: float = None
    ' Amount texture affects particle emission time\n\n    :type: float\n    '
    twist_factor: float = None
    ' Amount texture affects child twist\n\n    :type: float\n    '
    use_map_clump: bool = None
    ' Affect the child clumping\n\n    :type: bool\n    '
    use_map_damp: bool = None
    ' Affect the particle velocity damping\n\n    :type: bool\n    '
    use_map_density: bool = None
    ' Affect the density of the particles\n\n    :type: bool\n    '
    use_map_field: bool = None
    ' Affect the particle force fields\n\n    :type: bool\n    '
    use_map_gravity: bool = None
    ' Affect the particle gravity\n\n    :type: bool\n    '
    use_map_kink_amp: bool = None
    ' Affect the child kink amplitude\n\n    :type: bool\n    '
    use_map_kink_freq: bool = None
    ' Affect the child kink frequency\n\n    :type: bool\n    '
    use_map_length: bool = None
    ' Affect the child hair length\n\n    :type: bool\n    '
    use_map_life: bool = None
    ' Affect the life time of the particles\n\n    :type: bool\n    '
    use_map_rough: bool = None
    ' Affect the child rough\n\n    :type: bool\n    '
    use_map_size: bool = None
    ' Affect the particle size\n\n    :type: bool\n    '
    use_map_time: bool = None
    ' Affect the emission time of the particles\n\n    :type: bool\n    '
    use_map_twist: bool = None
    ' Affect the child twist\n\n    :type: bool\n    '
    use_map_velocity: bool = None
    ' Affect the particle initial velocity\n\n    :type: bool\n    '
    uv_layer: str = None
    ' UV map to use for mapping with UV texture coordinates\n\n    :type: str\n    '
    velocity_factor: float = None
    ' Amount texture affects particle initial velocity\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ActionPoseMarkers(bpy_prop_collection[TimelineMarker], bpy_struct):
    """ Collection of timeline markers
    """
    active: 'TimelineMarker' = None
    " Active pose marker for this action\n\n    :type: 'TimelineMarker'\n    "
    active_index: int = None
    ' Index of active pose marker\n\n    :type: int\n    '

    def new(self, name: str) -> 'TimelineMarker':
        """ Add a pose marker to the action

        :param name: New name for the marker (not unique)
        :type name: str
        :rtype: 'TimelineMarker'
        :return: Newly created marker
        """
        pass

    def remove(self, marker: 'TimelineMarker'):
        """ Remove a timeline marker

        :param marker: Timeline marker to remove
        :type marker: 'TimelineMarker'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TimelineMarkers(bpy_prop_collection[TimelineMarker], bpy_struct):
    """ Collection of timeline markers
    """

    def new(self, name: str, frame: int=1) -> 'TimelineMarker':
        """ Add a keyframe to the curve

        :param name: New name for the marker (not unique)
        :type name: str
        :param frame: The frame for the new marker
        :type frame: int
        :rtype: 'TimelineMarker'
        :return: Newly created timeline marker
        """
        pass

    def remove(self, marker: 'TimelineMarker'):
        """ Remove a timeline marker

        :param marker: Timeline marker to remove
        :type marker: 'TimelineMarker'
        """
        pass

    def clear(self):
        """ Remove all timeline markers

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class UDIMTiles(bpy_prop_collection[UDIMTile], bpy_struct):
    """ Collection of UDIM tiles
    """
    active: 'UDIMTile' = None
    " Active Image Tile\n\n    :type: 'UDIMTile'\n    "
    active_index: int = None
    ' Active index in tiles array\n\n    :type: int\n    '

    def new(self, tile_number: int, label: str='') -> 'UDIMTile':
        """ Add a tile to the image

        :param tile_number: Number of the newly created tile
        :type tile_number: int
        :param label: Optional label for the tile
        :type label: str
        :rtype: 'UDIMTile'
        :return: Newly created image tile
        """
        pass

    def get(self, tile_number: int) -> 'UDIMTile':
        """ Get a tile based on its tile number

        :param tile_number: Number of the tile
        :type tile_number: int
        :rtype: 'UDIMTile'
        :return: The tile
        """
        pass

    def remove(self, tile: 'UDIMTile'):
        """ Remove an image tile

        :param tile: Image tile to remove
        :type tile: 'UDIMTile'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ASSETBROWSER_UL_metadata_tags(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CLIP_UL_tracking_objects(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, item, _icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CURVES_UL_attributes(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, attribute, _icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    def filter_items(self, _context, data, property):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FILEBROWSER_UL_dir(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GPENCIL_UL_annotation_layer(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GPENCIL_UL_layer(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GPENCIL_UL_masks(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GPENCIL_UL_matslots(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GPENCIL_UL_vgroups(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class IMAGE_UL_render_slots(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, item, _icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class IMAGE_UL_udim_tiles(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, item, _icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MASK_UL_layers(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MATERIAL_UL_matslots(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MESH_UL_attributes(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, attribute, _icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    def filter_items(self, _context, data, property):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MESH_UL_color_attributes(UIList, bpy_struct):

    def draw_item(self, _context, layout, data, attribute, _icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    def filter_items(self, _context, data, property):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MESH_UL_color_attributes_selector(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, attribute, _icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    def filter_items(self, _context, data, property):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MESH_UL_fmaps(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MESH_UL_shape_keys(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, item, icon, active_data, _active_propname, index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MESH_UL_uvmaps(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MESH_UL_vgroups(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, item, icon, _active_data_, _active_propname, _index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NODE_UL_interface_sockets(UIList, bpy_struct):

    def draw_item(self, context, layout, _data, item, icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PARTICLE_UL_particle_systems(UIList, bpy_struct):

    def draw_item(self, _context, layout, data, item, icon, _active_data, _active_propname, _index, _flt_flag):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PHYSICS_UL_dynapaint_surfaces(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class POINTCLOUD_UL_attributes(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, attribute, _icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    def filter_items(self, _context, data, property):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class RENDER_UL_renderviews(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SCENE_UL_keying_set_paths(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TEXTURE_UL_texpaintslots(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, item, _icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TEXTURE_UL_texslots(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class UI_UL_list(UIList, bpy_struct):

    @staticmethod
    def filter_items_by_name(pattern, bitflag, items, propname='name', flags=None, reverse=False):
        """ Set FILTER_ITEM for items which name matches filter_name one (case-insensitive). pattern is the filtering pattern. propname is the name of the string property to use for filtering. flags must be a list of integers the same length as items, or None! return a list of flags (based on given flags if not None), or an empty list if no flags were given and no filtering has been done.

        """
        pass

    @staticmethod
    def sort_items_helper(sort_data, key, reverse=False):
        """ Common sorting utility. Returns a neworder list mapping org_idx -> new_idx. sort_data must be an (unordered) list of tuples [(org_idx, ...), (org_idx, ...), ...]. key must be the same kind of callable you would use for sorted() builtin function. reverse will reverse the sorting!

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class VIEWLAYER_UL_aov(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class VIEWLAYER_UL_linesets(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, item, icon, _active_data, _active_propname, index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class VOLUME_UL_grids(UIList, bpy_struct):

    def draw_item(self, _context, layout, _data, grid, _icon, _active_data, _active_propname, _index):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class VertexGroups(bpy_prop_collection[VertexGroup], bpy_struct):
    """ Collection of vertex groups
    """
    active: 'VertexGroup' = None
    " Vertex groups of the object\n\n    :type: 'VertexGroup'\n    "
    active_index: int = None
    ' Active index in vertex group array\n\n    :type: int\n    '

    def new(self, name: str='Group') -> 'VertexGroup':
        """ Add vertex group to object

        :param name: Vertex group name
        :type name: str
        :rtype: 'VertexGroup'
        :return: New vertex group
        """
        pass

    def remove(self, group: 'VertexGroup'):
        """ Delete vertex group from object

        :param group: Vertex group to remove
        :type group: 'VertexGroup'
        """
        pass

    def clear(self):
        """ Delete all vertex groups from object

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ViewLayers(bpy_prop_collection[ViewLayer], bpy_struct):
    """ Collection of render layers
    """

    def new(self, name: str) -> 'ViewLayer':
        """ Add a view layer to scene

        :param name: New name for the view layer (not unique)
        :type name: str
        :rtype: 'ViewLayer'
        :return: Newly created view layer
        """
        pass

    def remove(self, layer: 'ViewLayer'):
        """ Remove a view layer

        :param layer: View layer to remove
        :type layer: 'ViewLayer'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class IDViewerPathElem(ViewerPathElem, bpy_struct):
    id: 'ID' = None
    " \n\n    :type: 'ID'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ModifierViewerPathElem(ViewerPathElem, bpy_struct):
    modifier_name: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeViewerPathElem(ViewerPathElem, bpy_struct):
    node_name: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class VolumeGrids(bpy_prop_collection[VolumeGrid], bpy_struct):
    """ 3D volume grids
    """
    active_index: int = None
    ' Index of active volume grid\n\n    :type: int\n    '
    error_message: str = None
    ' If loading grids failed, error message with details\n\n    :type: str\n    '
    frame: int = None
    ' Frame number that volume grids will be loaded at, based on scene time and volume parameters\n\n    :type: int\n    '
    frame_filepath: str = None
    ' Volume file used for loading the volume at the current frame. Empty if the volume has not be loaded or the frame only exists in memory\n\n    :type: str\n    '
    is_loaded: bool = None
    ' List of grids and metadata are loaded in memory\n\n    :type: bool\n    '

    def load(self) -> bool:
        """ Load list of grids and metadata from file

        :rtype: bool
        :return: True if grid list was successfully loaded
        """
        pass

    def unload(self):
        """ Unload all grid and voxel data from memory

        """
        pass

    def save(self, filepath: str) -> bool:
        """ Save grids and metadata to file

        :param filepath: File path to save to
        :type filepath: str
        :rtype: bool
        :return: True if grid list was successfully loaded
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class wmTools(bpy_prop_collection[WorkSpaceTool], bpy_struct):

    def from_space_view3d_mode(self, mode: typing.Union[str, int], create: bool=False):
        """ 

        :param mode: 
        :type mode: typing.Union[str, int]
        :param create: Create
        :type create: bool
        """
        pass

    def from_space_image_mode(self, mode: typing.Union[str, int], create: bool=False):
        """ 

        :param mode: 
        :type mode: typing.Union[str, int]
        :param create: Create
        :type create: bool
        """
        pass

    def from_space_node(self, create: bool=False):
        """ 

        :param create: Create
        :type create: bool
        """
        pass

    def from_space_sequencer(self, mode: typing.Union[str, int], create: bool=False):
        """ 

        :param mode: 
        :type mode: typing.Union[str, int]
        :param create: Create
        :type create: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class XrActionMaps(bpy_prop_collection[XrActionMap], bpy_struct):
    """ Collection of XR action maps
    """

    @classmethod
    def new(cls, xr_session_state: 'XrSessionState', name: str, replace_existing: bool) -> 'XrActionMap':
        """ new

        :param xr_session_state: XR Session State
        :type xr_session_state: 'XrSessionState'
        :param name: Name
        :type name: str
        :param replace_existing: Replace Existing, Replace any existing actionmap with the same name
        :type replace_existing: bool
        :rtype: 'XrActionMap'
        :return: Action Map, Added action map
        """
        pass

    @classmethod
    def new_from_actionmap(cls, xr_session_state: 'XrSessionState', actionmap: 'XrActionMap') -> 'XrActionMap':
        """ new_from_actionmap

        :param xr_session_state: XR Session State
        :type xr_session_state: 'XrSessionState'
        :param actionmap: Action Map, Action map to use as a reference
        :type actionmap: 'XrActionMap'
        :rtype: 'XrActionMap'
        :return: Action Map, Added action map
        """
        pass

    @classmethod
    def remove(cls, xr_session_state: 'XrSessionState', actionmap: 'XrActionMap'):
        """ remove

        :param xr_session_state: XR Session State
        :type xr_session_state: 'XrSessionState'
        :param actionmap: Action Map, Removed action map
        :type actionmap: 'XrActionMap'
        """
        pass

    @classmethod
    def find(cls, xr_session_state: 'XrSessionState', name: str) -> 'XrActionMap':
        """ find

        :param xr_session_state: XR Session State
        :type xr_session_state: 'XrSessionState'
        :param name: Name
        :type name: str
        :rtype: 'XrActionMap'
        :return: Action Map, The action map with the given name
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class XrActionMapBindings(bpy_prop_collection[XrActionMapBinding], bpy_struct):
    """ Collection of XR action map bindings
    """

    def new(self, name: str, replace_existing: bool) -> 'XrActionMapBinding':
        """ new

        :param name: Name of the action map binding
        :type name: str
        :param replace_existing: Replace Existing, Replace any existing binding with the same name
        :type replace_existing: bool
        :rtype: 'XrActionMapBinding'
        :return: Binding, Added action map binding
        """
        pass

    def new_from_binding(self, binding: 'XrActionMapBinding') -> 'XrActionMapBinding':
        """ new_from_binding

        :param binding: Binding, Binding to use as a reference
        :type binding: 'XrActionMapBinding'
        :rtype: 'XrActionMapBinding'
        :return: Binding, Added action map binding
        """
        pass

    def remove(self, binding: 'XrActionMapBinding'):
        """ remove

        :param binding: Binding
        :type binding: 'XrActionMapBinding'
        """
        pass

    def find(self, name: str) -> 'XrActionMapBinding':
        """ find

        :param name: Name
        :type name: str
        :rtype: 'XrActionMapBinding'
        :return: Binding, The action map binding with the given name
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class XrActionMapItems(bpy_prop_collection[XrActionMapItem], bpy_struct):
    """ Collection of XR action map items
    """

    def new(self, name: str, replace_existing: bool) -> 'XrActionMapItem':
        """ new

        :param name: Name of the action map item
        :type name: str
        :param replace_existing: Replace Existing, Replace any existing item with the same name
        :type replace_existing: bool
        :rtype: 'XrActionMapItem'
        :return: Item, Added action map item
        """
        pass

    def new_from_item(self, item: 'XrActionMapItem') -> 'XrActionMapItem':
        """ new_from_item

        :param item: Item, Item to use as a reference
        :type item: 'XrActionMapItem'
        :rtype: 'XrActionMapItem'
        :return: Item, Added action map item
        """
        pass

    def remove(self, item: 'XrActionMapItem'):
        """ remove

        :param item: Item
        :type item: 'XrActionMapItem'
        """
        pass

    def find(self, name: str) -> 'XrActionMapItem':
        """ find

        :param name: Name
        :type name: str
        :rtype: 'XrActionMapItem'
        :return: Item, The action map item with the given name
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class XrComponentPaths(bpy_prop_collection[XrComponentPath], bpy_struct):
    """ Collection of OpenXR component paths
    """

    def new(self, path: str) -> 'XrComponentPath':
        """ new

        :param path: Path, OpenXR component path
        :type path: str
        :rtype: 'XrComponentPath'
        :return: Component Path, Added component path
        """
        pass

    def remove(self, component_path: 'XrComponentPath'):
        """ remove

        :param component_path: Component Path
        :type component_path: 'XrComponentPath'
        """
        pass

    def find(self, path: str) -> 'XrComponentPath':
        """ find

        :param path: Path, OpenXR component path
        :type path: str
        :rtype: 'XrComponentPath'
        :return: Component Path, The component path with the given path
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class XrUserPaths(bpy_prop_collection[XrUserPath], bpy_struct):
    """ Collection of OpenXR user paths
    """

    def new(self, path: str) -> 'XrUserPath':
        """ new

        :param path: Path, OpenXR user path
        :type path: str
        :rtype: 'XrUserPath'
        :return: User Path, Added user path
        """
        pass

    def remove(self, user_path: 'XrUserPath'):
        """ remove

        :param user_path: User Path
        :type user_path: 'XrUserPath'
        """
        pass

    def find(self, path: str) -> 'XrUserPath':
        """ find

        :param path: Path, OpenXR user path
        :type path: str
        :rtype: 'XrUserPath'
        :return: User Path, The user path with the given path
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class wmOwnerIDs(bpy_prop_collection[wmOwnerID], bpy_struct):

    def new(self, name: str):
        """ Add ui tag

        :param name: New name for the tag
        :type name: str
        """
        pass

    def remove(self, owner_id: 'wmOwnerID'):
        """ Remove ui tag

        :param owner_id: Tag to remove
        :type owner_id: 'wmOwnerID'
        """
        pass

    def clear(self):
        """ Remove all tags

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataActions(bpy_prop_collection[Action], bpy_struct):
    """ Collection of actions
    """

    def new(self, name: str) -> 'Action':
        """ Add a new action to the main database

        :param name: New name for the data-block
        :type name: str
        :rtype: 'Action'
        :return: New action data-block
        """
        pass

    def remove(self, action: 'Action', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove an action from the current blendfile

        :param action: Action to remove
        :type action: 'Action'
        :param do_unlink: Unlink all usages of this action before deleting it
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this action
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this action
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataArmatures(bpy_prop_collection[Armature], bpy_struct):
    """ Collection of armatures
    """

    def new(self, name: str) -> 'Armature':
        """ Add a new armature to the main database

        :param name: New name for the data-block
        :type name: str
        :rtype: 'Armature'
        :return: New armature data-block
        """
        pass

    def remove(self, armature: 'Armature', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove an armature from the current blendfile

        :param armature: Armature to remove
        :type armature: 'Armature'
        :param do_unlink: will also delete objects instancing that armature data)
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this armature data
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this armature data
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataBrushes(bpy_prop_collection[Brush], bpy_struct):
    """ Collection of brushes
    """

    def new(self, name: str, mode: typing.Union[str, int]='TEXTURE_PAINT') -> 'Brush':
        """ Add a new brush to the main database

        :param name: New name for the data-block
        :type name: str
        :param mode: Paint Mode for the new brush
        :type mode: typing.Union[str, int]
        :rtype: 'Brush'
        :return: New brush data-block
        """
        pass

    def remove(self, brush: 'Brush', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a brush from the current blendfile

        :param brush: Brush to remove
        :type brush: 'Brush'
        :param do_unlink: Unlink all usages of this brush before deleting it
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this brush
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this brush
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    def create_gpencil_data(self, brush: 'Brush'):
        """ Add grease pencil brush settings

        :param brush: Brush
        :type brush: 'Brush'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataCacheFiles(bpy_prop_collection[CacheFile], bpy_struct):
    """ Collection of cache files
    """

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataCameras(bpy_prop_collection[Camera], bpy_struct):
    """ Collection of cameras
    """

    def new(self, name: str) -> 'Camera':
        """ Add a new camera to the main database

        :param name: New name for the data-block
        :type name: str
        :rtype: 'Camera'
        :return: New camera data-block
        """
        pass

    def remove(self, camera: 'Camera', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a camera from the current blendfile

        :param camera: Camera to remove
        :type camera: 'Camera'
        :param do_unlink: will also delete objects instancing that camera data)
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this camera
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this camera
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataCollections(bpy_prop_collection[Collection], bpy_struct):
    """ Collection of collections
    """

    def new(self, name: str) -> 'Collection':
        """ Add a new collection to the main database

        :param name: New name for the data-block
        :type name: str
        :rtype: 'Collection'
        :return: New collection data-block
        """
        pass

    def remove(self, collection: 'Collection', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a collection from the current blendfile

        :param collection: Collection to remove
        :type collection: 'Collection'
        :param do_unlink: Unlink all usages of this collection before deleting it
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this collection
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this collection
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CollectionChildren(bpy_prop_collection[Collection], bpy_struct):
    """ Collection of child collections
    """

    def link(self, child: 'Collection'):
        """ Add this collection as child of this collection

        :param child: Collection to add
        :type child: 'Collection'
        """
        pass

    def unlink(self, child: 'Collection'):
        """ Remove this child collection from a collection

        :param child: Collection to remove
        :type child: 'Collection'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataCurves(bpy_prop_collection[Curve], bpy_struct):
    """ Collection of curves
    """

    def new(self, name: str, type: typing.Union[str, int]) -> 'Curve':
        """ Add a new curve to the main database

        :param name: New name for the data-block
        :type name: str
        :param type: Type, The type of curve to add
        :type type: typing.Union[str, int]
        :rtype: 'Curve'
        :return: New curve data-block
        """
        pass

    def remove(self, curve: 'Curve', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a curve from the current blendfile

        :param curve: Curve to remove
        :type curve: 'Curve'
        :param do_unlink: will also delete objects instancing that curve data)
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this curve data
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this curve data
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SurfaceCurve(Curve, ID, bpy_struct):
    """ Curve data-block used for storing surfaces
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextCurve(Curve, ID, bpy_struct):
    """ Curve data-block used for storing text
    """
    active_textbox: int = None
    ' \n\n    :type: int\n    '
    align_x: typing.Union[str, int] = None
    ' Text horizontal align from the object center * ``LEFT`` Left -- Align text to the left. * ``CENTER`` Center -- Center text. * ``RIGHT`` Right -- Align text to the right. * ``JUSTIFY`` Justify -- Align to the left and the right. * ``FLUSH`` Flush -- Align to the left and the right, with equal character spacing.\n\n    :type: typing.Union[str, int]\n    '
    align_y: typing.Union[str, int] = None
    ' Text vertical align from the object center * ``TOP_BASELINE`` Top Base-Line -- Align to top but use the base-line of the text. * ``TOP`` Top -- Align text to the top. * ``CENTER`` Center -- Align text to the middle. * ``BOTTOM`` Bottom -- Align text to the bottom. * ``BOTTOM_BASELINE`` Bottom Base-Line -- Align text to the bottom but use the base-line of the text.\n\n    :type: typing.Union[str, int]\n    '
    body: str = None
    ' Content of this text object\n\n    :type: str\n    '
    body_format: bpy_prop_collection['TextCharacterFormat'] = None
    " Stores the style of each character\n\n    :type: bpy_prop_collection['TextCharacterFormat']\n    "
    edit_format: 'TextCharacterFormat' = None
    " Editing settings character formatting\n\n    :type: 'TextCharacterFormat'\n    "
    family: str = None
    " Use objects as font characters (give font objects a common name followed by the character they represent, eg. 'family-a', 'family-b', etc, set this setting to 'family-', and turn on Vertex Instancing)\n\n    :type: str\n    "
    follow_curve: 'Object' = None
    " Curve deforming text object\n\n    :type: 'Object'\n    "
    font: 'VectorFont' = None
    " \n\n    :type: 'VectorFont'\n    "
    font_bold: 'VectorFont' = None
    " \n\n    :type: 'VectorFont'\n    "
    font_bold_italic: 'VectorFont' = None
    " \n\n    :type: 'VectorFont'\n    "
    font_italic: 'VectorFont' = None
    " \n\n    :type: 'VectorFont'\n    "
    offset_x: float = None
    ' Horizontal offset from the object origin\n\n    :type: float\n    '
    offset_y: float = None
    ' Vertical offset from the object origin\n\n    :type: float\n    '
    overflow: typing.Union[str, int] = None
    " Handle the text behavior when it doesn't fit in the text boxes * ``NONE`` Overflow -- Let the text overflow outside the text boxes. * ``SCALE`` Scale to Fit -- Scale down the text to fit inside the text boxes. * ``TRUNCATE`` Truncate -- Truncate the text that would go outside the text boxes.\n\n    :type: typing.Union[str, int]\n    "
    shear: float = None
    ' Italic angle of the characters\n\n    :type: float\n    '
    size: float = None
    ' \n\n    :type: float\n    '
    small_caps_scale: float = None
    ' Scale of small capitals\n\n    :type: float\n    '
    space_character: float = None
    ' \n\n    :type: float\n    '
    space_line: float = None
    ' \n\n    :type: float\n    '
    space_word: float = None
    ' \n\n    :type: float\n    '
    text_boxes: bpy_prop_collection['TextBox'] = None
    " \n\n    :type: bpy_prop_collection['TextBox']\n    "
    underline_height: float = None
    ' \n\n    :type: float\n    '
    underline_position: float = None
    ' Vertical position of underline\n\n    :type: float\n    '
    use_fast_edit: bool = None
    " Don't fill polygons while editing\n\n    :type: bool\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataHairCurves(bpy_prop_collection[Curves], bpy_struct):
    """ Collection of hair curves
    """

    def new(self, name: str) -> 'Curves':
        """ Add a new hair to the main database

        :param name: New name for the data-block
        :type name: str
        :rtype: 'Curves'
        :return: New curves data-block
        """
        pass

    def remove(self, curves: 'Curves', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a curves data-block from the current blendfile

        :param curves: Curves data-block to remove
        :type curves: 'Curves'
        :param do_unlink: will also delete objects instancing that curves data)
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this curves data
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this curves data
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataLineStyles(bpy_prop_collection[FreestyleLineStyle], bpy_struct):
    """ Collection of line styles
    """

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    def new(self, name: str) -> 'FreestyleLineStyle':
        """ Add a new line style instance to the main database

        :param name: New name for the data-block
        :type name: str
        :rtype: 'FreestyleLineStyle'
        :return: New line style data-block
        """
        pass

    def remove(self, linestyle: 'FreestyleLineStyle', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a line style instance from the current blendfile

        :param linestyle: Line style to remove
        :type linestyle: 'FreestyleLineStyle'
        :param do_unlink: Unlink all usages of this line style before deleting it
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this line style
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this line style
        :type do_ui_user: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataGreasePencils(bpy_prop_collection[GreasePencil], bpy_struct):
    """ Collection of grease pencils
    """

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    def new(self, name: str) -> 'GreasePencil':
        """ Add a new grease pencil datablock to the main database

        :param name: New name for the data-block
        :type name: str
        :rtype: 'GreasePencil'
        :return: New grease pencil data-block
        """
        pass

    def remove(self, grease_pencil: 'GreasePencil', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a grease pencil instance from the current blendfile

        :param grease_pencil: Grease Pencil to remove
        :type grease_pencil: 'GreasePencil'
        :param do_unlink: Unlink all usages of this grease pencil before deleting it
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this grease pencil
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this grease pencil
        :type do_ui_user: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataImages(bpy_prop_collection[Image], bpy_struct):
    """ Collection of images
    """

    def new(self, name: str, width: int, height: int, alpha: bool=False, float_buffer: bool=False, stereo3d: bool=False, is_data: bool=False, tiled: bool=False) -> 'Image':
        """ Add a new image to the main database

        :param name: New name for the data-block
        :type name: str
        :param width: Width of the image
        :type width: int
        :param height: Height of the image
        :type height: int
        :param alpha: Alpha, Use alpha channel
        :type alpha: bool
        :param float_buffer: Float Buffer, Create an image with floating-point color
        :type float_buffer: bool
        :param stereo3d: Stereo 3D, Create left and right views
        :type stereo3d: bool
        :param is_data: Is Data, Create image with non-color data color space
        :type is_data: bool
        :param tiled: Tiled, Create a tiled image
        :type tiled: bool
        :rtype: 'Image'
        :return: New image data-block
        """
        pass

    def load(self, filepath: str, check_existing: bool=False) -> 'Image':
        """ Load a new image into the main database

        :param filepath: Path of the file to load
        :type filepath: str
        :param check_existing: Using existing data-block if this file is already loaded
        :type check_existing: bool
        :rtype: 'Image'
        :return: New image data-block
        """
        pass

    def remove(self, image: 'Image', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove an image from the current blendfile

        :param image: Image to remove
        :type image: 'Image'
        :param do_unlink: Unlink all usages of this image before deleting it
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this image
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this image
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataLattices(bpy_prop_collection[Lattice], bpy_struct):
    """ Collection of lattices
    """

    def new(self, name: str) -> 'Lattice':
        """ Add a new lattice to the main database

        :param name: New name for the data-block
        :type name: str
        :rtype: 'Lattice'
        :return: New lattice data-block
        """
        pass

    def remove(self, lattice: 'Lattice', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a lattice from the current blendfile

        :param lattice: Lattice to remove
        :type lattice: 'Lattice'
        :param do_unlink: will also delete objects instancing that lattice data)
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this lattice data
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this lattice data
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataLibraries(bpy_prop_collection[Library], bpy_struct):
    """ Collection of libraries
    """

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    def remove(self, library: 'Library', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a library from the current blendfile

        :param library: Library to remove
        :type library: 'Library'
        :param do_unlink: Unlink all usages of this library before deleting it
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this library
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this library
        :type do_ui_user: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

    def load(self, filepath: str, link: bool=False, relative: bool=False, assets_only: bool=False):
        """ Returns a context manager which exposes 2 library objects on entering. Each object has attributes matching bpy.data which are lists of strings to be linked.

        :param filepath: The path to a blend file.
        :type filepath: str
        :param link: When False reference to the original file is lost.
        :type link: bool
        :param relative: When True the path is stored relative to the open blend file.
        :type relative: bool
        :param assets_only: If True, only list data-blocks marked as assets.
        :type assets_only: bool
        """
        pass

    def write(self, filepath: str, datablocks: typing.Set, path_remap: str=False, fake_user: bool=False, compress: bool=False):
        """ Write data-blocks into a blend file.

        :param filepath: The path to write the blend-file.
        :type filepath: str
        :param datablocks: `bpy.types.ID` instances).
        :type datablocks: typing.Set
        :param path_remap: - ``NONE`` No path manipulation (default). - ``RELATIVE`` Remap paths that are already relative to the new location. - ``RELATIVE_ALL`` Remap all paths to be relative to the new location. - ``ABSOLUTE`` Make all paths absolute on writing.
        :type path_remap: str
        :param fake_user: When True, data-blocks will be written with fake-user flag enabled.
        :type fake_user: bool
        :param compress: When True, write a compressed blend file.
        :type compress: bool
        """
        pass

class AreaLight(Light, ID, bpy_struct):
    """ Directional area Light
    """
    constant_coefficient: float = None
    ' Constant distance attenuation coefficient\n\n    :type: float\n    '
    contact_shadow_bias: float = None
    ' Bias to avoid self shadowing\n\n    :type: float\n    '
    contact_shadow_distance: float = None
    ' World space distance in which to search for screen space occluder\n\n    :type: float\n    '
    contact_shadow_thickness: float = None
    ' Pixel thickness used to detect occlusion\n\n    :type: float\n    '
    energy: float = None
    ' Light energy emitted over the entire area of the light in all directions\n\n    :type: float\n    '
    falloff_curve: 'CurveMapping' = None
    " Custom light falloff curve\n\n    :type: 'CurveMapping'\n    "
    falloff_type: typing.Union[str, int] = None
    ' Intensity Decay with distance\n\n    :type: typing.Union[str, int]\n    '
    linear_attenuation: float = None
    ' Linear distance attenuation\n\n    :type: float\n    '
    linear_coefficient: float = None
    ' Linear distance attenuation coefficient\n\n    :type: float\n    '
    quadratic_attenuation: float = None
    ' Quadratic distance attenuation\n\n    :type: float\n    '
    quadratic_coefficient: float = None
    ' Quadratic distance attenuation coefficient\n\n    :type: float\n    '
    shadow_buffer_bias: float = None
    ' Bias for reducing self shadowing\n\n    :type: float\n    '
    shadow_buffer_clip_start: float = None
    ' Shadow map clip start, below which objects will not generate shadows\n\n    :type: float\n    '
    shadow_buffer_samples: int = None
    ' Number of shadow buffer samples\n\n    :type: int\n    '
    shadow_buffer_size: int = None
    ' Resolution of the shadow buffer, higher values give crisper shadows but use more memory\n\n    :type: int\n    '
    shadow_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of shadows cast by the light\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    shadow_soft_size: float = None
    ' Light size for ray shadow sampling (Raytraced shadows)\n\n    :type: float\n    '
    shape: typing.Union[str, int] = None
    ' Shape of the area Light\n\n    :type: typing.Union[str, int]\n    '
    size: float = None
    ' Size of the area of the area light, X direction size for rectangle shapes\n\n    :type: float\n    '
    size_y: float = None
    ' Size of the area of the area light in the Y direction for rectangle shapes\n\n    :type: float\n    '
    spread: float = None
    ' How widely the emitted light fans out, as in the case of a gridded softbox\n\n    :type: float\n    '
    use_contact_shadow: bool = None
    ' Use screen space ray-tracing to have correct shadowing near occluder, or for small features that does not appear in shadow maps\n\n    :type: bool\n    '
    use_shadow: bool = None
    ' \n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataLights(bpy_prop_collection[Light], bpy_struct):
    """ Collection of lights
    """

    def new(self, name: str, type: typing.Union[str, int]) -> 'Light':
        """ Add a new light to the main database

        :param name: New name for the data-block
        :type name: str
        :param type: Type, The type of light to add
        :type type: typing.Union[str, int]
        :rtype: 'Light'
        :return: New light data-block
        """
        pass

    def remove(self, light: 'Light', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a light from the current blendfile

        :param light: Light to remove
        :type light: 'Light'
        :param do_unlink: will also delete objects instancing that light data)
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this light data
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this light data
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class PointLight(Light, ID, bpy_struct):
    """ Omnidirectional point Light
    """
    constant_coefficient: float = None
    ' Constant distance attenuation coefficient\n\n    :type: float\n    '
    contact_shadow_bias: float = None
    ' Bias to avoid self shadowing\n\n    :type: float\n    '
    contact_shadow_distance: float = None
    ' World space distance in which to search for screen space occluder\n\n    :type: float\n    '
    contact_shadow_thickness: float = None
    ' Pixel thickness used to detect occlusion\n\n    :type: float\n    '
    energy: float = None
    ' Light energy emitted over the entire area of the light in all directions\n\n    :type: float\n    '
    falloff_curve: 'CurveMapping' = None
    " Custom light falloff curve\n\n    :type: 'CurveMapping'\n    "
    falloff_type: typing.Union[str, int] = None
    ' Intensity Decay with distance\n\n    :type: typing.Union[str, int]\n    '
    linear_attenuation: float = None
    ' Linear distance attenuation\n\n    :type: float\n    '
    linear_coefficient: float = None
    ' Linear distance attenuation coefficient\n\n    :type: float\n    '
    quadratic_attenuation: float = None
    ' Quadratic distance attenuation\n\n    :type: float\n    '
    quadratic_coefficient: float = None
    ' Quadratic distance attenuation coefficient\n\n    :type: float\n    '
    shadow_buffer_bias: float = None
    ' Bias for reducing self shadowing\n\n    :type: float\n    '
    shadow_buffer_clip_start: float = None
    ' Shadow map clip start, below which objects will not generate shadows\n\n    :type: float\n    '
    shadow_buffer_samples: int = None
    ' Number of shadow buffer samples\n\n    :type: int\n    '
    shadow_buffer_size: int = None
    ' Resolution of the shadow buffer, higher values give crisper shadows but use more memory\n\n    :type: int\n    '
    shadow_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of shadows cast by the light\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    shadow_soft_size: float = None
    ' Light size for ray shadow sampling (Raytraced shadows)\n\n    :type: float\n    '
    use_contact_shadow: bool = None
    ' Use screen space ray-tracing to have correct shadowing near occluder, or for small features that does not appear in shadow maps\n\n    :type: bool\n    '
    use_shadow: bool = None
    ' \n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SpotLight(Light, ID, bpy_struct):
    """ Directional cone Light
    """
    constant_coefficient: float = None
    ' Constant distance attenuation coefficient\n\n    :type: float\n    '
    contact_shadow_bias: float = None
    ' Bias to avoid self shadowing\n\n    :type: float\n    '
    contact_shadow_distance: float = None
    ' World space distance in which to search for screen space occluder\n\n    :type: float\n    '
    contact_shadow_thickness: float = None
    ' Pixel thickness used to detect occlusion\n\n    :type: float\n    '
    energy: float = None
    " The energy this light would emit over its entire area if it wasn't limited by the spot angle\n\n    :type: float\n    "
    falloff_curve: 'CurveMapping' = None
    " Custom light falloff curve\n\n    :type: 'CurveMapping'\n    "
    falloff_type: typing.Union[str, int] = None
    ' Intensity Decay with distance\n\n    :type: typing.Union[str, int]\n    '
    linear_attenuation: float = None
    ' Linear distance attenuation\n\n    :type: float\n    '
    linear_coefficient: float = None
    ' Linear distance attenuation coefficient\n\n    :type: float\n    '
    quadratic_attenuation: float = None
    ' Quadratic distance attenuation\n\n    :type: float\n    '
    quadratic_coefficient: float = None
    ' Quadratic distance attenuation coefficient\n\n    :type: float\n    '
    shadow_buffer_bias: float = None
    ' Bias for reducing self shadowing\n\n    :type: float\n    '
    shadow_buffer_clip_start: float = None
    ' Shadow map clip start, below which objects will not generate shadows\n\n    :type: float\n    '
    shadow_buffer_samples: int = None
    ' Number of shadow buffer samples\n\n    :type: int\n    '
    shadow_buffer_size: int = None
    ' Resolution of the shadow buffer, higher values give crisper shadows but use more memory\n\n    :type: int\n    '
    shadow_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of shadows cast by the light\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    shadow_soft_size: float = None
    ' Light size for ray shadow sampling (Raytraced shadows)\n\n    :type: float\n    '
    show_cone: bool = None
    ' Display transparent cone in 3D view to visualize which objects are contained in it\n\n    :type: bool\n    '
    spot_blend: float = None
    ' The softness of the spotlight edge\n\n    :type: float\n    '
    spot_size: float = None
    ' Angle of the spotlight beam\n\n    :type: float\n    '
    use_contact_shadow: bool = None
    ' Use screen space ray-tracing to have correct shadowing near occluder, or for small features that does not appear in shadow maps\n\n    :type: bool\n    '
    use_shadow: bool = None
    ' \n\n    :type: bool\n    '
    use_square: bool = None
    ' Cast a square spot light shape\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SunLight(Light, ID, bpy_struct):
    """ Constant direction parallel ray Light
    """
    angle: float = None
    ' Angular diameter of the Sun as seen from the Earth\n\n    :type: float\n    '
    contact_shadow_bias: float = None
    ' Bias to avoid self shadowing\n\n    :type: float\n    '
    contact_shadow_distance: float = None
    ' World space distance in which to search for screen space occluder\n\n    :type: float\n    '
    contact_shadow_thickness: float = None
    ' Pixel thickness used to detect occlusion\n\n    :type: float\n    '
    energy: float = None
    ' Sunlight strength in watts per meter squared (W/m^2)\n\n    :type: float\n    '
    shadow_buffer_bias: float = None
    ' Bias for reducing self shadowing\n\n    :type: float\n    '
    shadow_buffer_clip_start: float = None
    ' Shadow map clip start, below which objects will not generate shadows\n\n    :type: float\n    '
    shadow_buffer_samples: int = None
    ' Number of shadow buffer samples\n\n    :type: int\n    '
    shadow_buffer_size: int = None
    ' Resolution of the shadow buffer, higher values give crisper shadows but use more memory\n\n    :type: int\n    '
    shadow_cascade_count: int = None
    ' Number of texture used by the cascaded shadow map\n\n    :type: int\n    '
    shadow_cascade_exponent: float = None
    ' Higher value increase resolution towards the viewpoint\n\n    :type: float\n    '
    shadow_cascade_fade: float = None
    ' How smooth is the transition between each cascade\n\n    :type: float\n    '
    shadow_cascade_max_distance: float = None
    ' End distance of the cascaded shadow map (only in perspective view)\n\n    :type: float\n    '
    shadow_color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Color of shadows cast by the light\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    shadow_soft_size: float = None
    ' Light size for ray shadow sampling (Raytraced shadows)\n\n    :type: float\n    '
    use_contact_shadow: bool = None
    ' Use screen space ray-tracing to have correct shadowing near occluder, or for small features that does not appear in shadow maps\n\n    :type: bool\n    '
    use_shadow: bool = None
    ' \n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataProbes(bpy_prop_collection[LightProbe], bpy_struct):
    """ Collection of light probes
    """

    def new(self, name: str, type: typing.Union[str, int]) -> 'LightProbe':
        """ Add a new light probe to the main database

        :param name: New name for the data-block
        :type name: str
        :param type: Type, The type of light probe to add
        :type type: typing.Union[str, int]
        :rtype: 'LightProbe'
        :return: New light probe data-block
        """
        pass

    def remove(self, lightprobe: 'LightProbe', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a light probe from the current blendfile

        :param lightprobe: Light probe to remove
        :type lightprobe: 'LightProbe'
        :param do_unlink: will also delete objects instancing that light probe data)
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this light probe
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this light probe
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataMasks(bpy_prop_collection[Mask], bpy_struct):
    """ Collection of masks
    """

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    def new(self, name: str) -> 'Mask':
        """ Add a new mask with a given name to the main database

        :param name: Mask, Name of new mask data-block
        :type name: str
        :rtype: 'Mask'
        :return: New mask data-block
        """
        pass

    def remove(self, mask: 'Mask', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a mask from the current blendfile

        :param mask: Mask to remove
        :type mask: 'Mask'
        :param do_unlink: Unlink all usages of this mask before deleting it
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this mask
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this mask
        :type do_ui_user: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataMaterials(bpy_prop_collection[Material], bpy_struct):
    """ Collection of materials
    """

    def new(self, name: str) -> 'Material':
        """ Add a new material to the main database

        :param name: New name for the data-block
        :type name: str
        :rtype: 'Material'
        :return: New material data-block
        """
        pass

    def create_gpencil_data(self, material: 'Material'):
        """ Add grease pencil material settings

        :param material: Material
        :type material: 'Material'
        """
        pass

    def remove_gpencil_data(self, material: 'Material'):
        """ Remove grease pencil material settings

        :param material: Material
        :type material: 'Material'
        """
        pass

    def remove(self, material: 'Material', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a material from the current blendfile

        :param material: Material to remove
        :type material: 'Material'
        :param do_unlink: Unlink all usages of this material before deleting it
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this material
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this material
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class IDMaterials(bpy_prop_collection[Material], bpy_struct):
    """ Collection of materials
    """

    def append(self, material: 'Material'):
        """ Add a new material to the data-block

        :param material: Material to add
        :type material: 'Material'
        """
        pass

    def pop(self, index: int=-1) -> 'Material':
        """ Remove a material from the data-block

        :param index: Index of material to remove
        :type index: int
        :rtype: 'Material'
        :return: Material to remove
        """
        pass

    def clear(self):
        """ Remove all materials from the data-block

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataMeshes(bpy_prop_collection[Mesh], bpy_struct):
    """ Collection of meshes
    """

    def new(self, name: str) -> 'Mesh':
        """ Add a new mesh to the main database

        :param name: New name for the data-block
        :type name: str
        :rtype: 'Mesh'
        :return: New mesh data-block
        """
        pass

    def new_from_object(self, object: 'Object', preserve_all_data_layers: bool=False, depsgraph: 'Depsgraph'=None) -> 'Mesh':
        """ Add a new mesh created from given object (undeformed geometry if object is original, and final evaluated geometry, with all modifiers etc., if object is evaluated)

        :param object: Object to create mesh from
        :type object: 'Object'
        :param preserve_all_data_layers: Preserve all data layers in the mesh, like UV maps and vertex groups. By default Blender only computes the subset of data layers needed for viewport display and rendering, for better performance
        :type preserve_all_data_layers: bool
        :param depsgraph: Dependency Graph, Evaluated dependency graph which is required when preserve_all_data_layers is true
        :type depsgraph: 'Depsgraph'
        :rtype: 'Mesh'
        :return: Mesh created from object, remove it if it is only used for export
        """
        pass

    def remove(self, mesh: 'Mesh', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a mesh from the current blendfile

        :param mesh: Mesh to remove
        :type mesh: 'Mesh'
        :param do_unlink: will also delete objects instancing that mesh data)
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this mesh data
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this mesh data
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataMetaBalls(bpy_prop_collection[MetaBall], bpy_struct):
    """ Collection of metaballs
    """

    def new(self, name: str) -> 'MetaBall':
        """ Add a new metaball to the main database

        :param name: New name for the data-block
        :type name: str
        :rtype: 'MetaBall'
        :return: New metaball data-block
        """
        pass

    def remove(self, metaball: 'MetaBall', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a metaball from the current blendfile

        :param metaball: Metaball to remove
        :type metaball: 'MetaBall'
        :param do_unlink: will also delete objects instancing that metaball data)
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this metaball data
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this metaball data
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataMovieClips(bpy_prop_collection[MovieClip], bpy_struct):
    """ Collection of movie clips
    """

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    def remove(self, clip: 'MovieClip', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a movie clip from the current blendfile.

        :param clip: Movie clip to remove
        :type clip: 'MovieClip'
        :param do_unlink: Unlink all usages of this movie clip before deleting it
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this movie clip
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this movie clip
        :type do_ui_user: bool
        """
        pass

    def load(self, filepath: str, check_existing: bool=False) -> 'MovieClip':
        """ Add a new movie clip to the main database from a file (while ``check_existing`` is disabled for consistency with other load functions, behavior with multiple movie-clips using the same file may incorrectly generate proxies)

        :param filepath: path for the data-block
        :type filepath: str
        :param check_existing: Using existing data-block if this file is already loaded
        :type check_existing: bool
        :rtype: 'MovieClip'
        :return: New movie clip data-block
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataNodeTrees(bpy_prop_collection[NodeTree], bpy_struct):
    """ Collection of node trees
    """

    def new(self, name: str, type: typing.Union[str, int]) -> 'NodeTree':
        """ Add a new node tree to the main database

        :param name: New name for the data-block
        :type name: str
        :param type: Type, The type of node_group to add
        :type type: typing.Union[str, int]
        :rtype: 'NodeTree'
        :return: New node tree data-block
        """
        pass

    def remove(self, tree: 'NodeTree', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a node tree from the current blendfile

        :param tree: Node tree to remove
        :type tree: 'NodeTree'
        :param do_unlink: Unlink all usages of this node tree before deleting it
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this node tree
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this node tree
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeTree(NodeTree, ID, bpy_struct):
    """ Node tree consisting of linked nodes used for compositing
    """
    chunk_size: typing.Union[str, int] = None
    ' Max size of a tile (smaller values gives better distribution of multiple threads, but more overhead) * ``32`` 32x32 -- Chunksize of 32x32. * ``64`` 64x64 -- Chunksize of 64x64. * ``128`` 128x128 -- Chunksize of 128x128. * ``256`` 256x256 -- Chunksize of 256x256. * ``512`` 512x512 -- Chunksize of 512x512. * ``1024`` 1024x1024 -- Chunksize of 1024x1024.\n\n    :type: typing.Union[str, int]\n    '
    edit_quality: typing.Union[str, int] = None
    ' Quality when editing * ``HIGH`` High -- High quality. * ``MEDIUM`` Medium -- Medium quality. * ``LOW`` Low -- Low quality.\n\n    :type: typing.Union[str, int]\n    '
    execution_mode: typing.Union[str, int] = None
    ' Set how compositing is executed * ``TILED`` Tiled -- Compositing is tiled, having as priority to display first tiles as fast as possible. * ``FULL_FRAME`` Full Frame -- Composites full image result as fast as possible.\n\n    :type: typing.Union[str, int]\n    '
    render_quality: typing.Union[str, int] = None
    ' Quality when rendering * ``HIGH`` High -- High quality. * ``MEDIUM`` Medium -- Medium quality. * ``LOW`` Low -- Low quality.\n\n    :type: typing.Union[str, int]\n    '
    use_groupnode_buffer: bool = None
    ' Enable buffering of group nodes\n\n    :type: bool\n    '
    use_opencl: bool = None
    ' Enable GPU calculations\n\n    :type: bool\n    '
    use_two_pass: bool = None
    ' Use two pass execution during editing: first calculate fast nodes, second pass calculate all nodes\n\n    :type: bool\n    '
    use_viewer_border: bool = None
    ' Use boundaries for viewer nodes and composite backdrop\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeTree(NodeTree, ID, bpy_struct):
    """ Node tree consisting of linked nodes used for geometries
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeTree(NodeTree, ID, bpy_struct):
    """ Node tree consisting of linked nodes used for materials (and other shading data-blocks)
    """

    def get_output_node(self, target: typing.Union[str, int]) -> 'ShaderNode':
        """ Return active shader output node for the specified target

        :param target: Target * ``ALL`` All -- Use shaders for all renderers and viewports, unless there exists a more specific output. * ``EEVEE`` Eevee -- Use shaders for Eevee renderer. * ``CYCLES`` Cycles -- Use shaders for Cycles renderer.
        :type target: typing.Union[str, int]
        :rtype: 'ShaderNode'
        :return: Node
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeTree(NodeTree, ID, bpy_struct):
    """ Node tree consisting of linked nodes used for textures
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataObjects(bpy_prop_collection[Object], bpy_struct):
    """ Collection of objects
    """

    def new(self, name: str, object_data: 'ID') -> 'Object':
        """ Add a new object to the main database

        :param name: New name for the data-block
        :type name: str
        :param object_data: Object data or None for an empty object
        :type object_data: 'ID'
        :rtype: 'Object'
        :return: New object data-block
        """
        pass

    def remove(self, object: 'Object', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove an object from the current blendfile

        :param object: Object to remove
        :type object: 'Object'
        :param do_unlink: Unlink all usages of this object before deleting it
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this object
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this object
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CollectionObjects(bpy_prop_collection[Object], bpy_struct):
    """ Collection of collection objects
    """

    def link(self, object: 'Object'):
        """ Add this object to a collection

        :param object: Object to add
        :type object: 'Object'
        """
        pass

    def unlink(self, object: 'Object'):
        """ Remove this object from a collection

        :param object: Object to remove
        :type object: 'Object'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LayerObjects(bpy_prop_collection[Object], bpy_struct):
    """ Collections of objects
    """
    active: 'Object' = None
    " Active object for this layer\n\n    :type: 'Object'\n    "
    selected: bpy_prop_collection['Object'] = None
    " All the selected objects of this layer\n\n    :type: bpy_prop_collection['Object']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SceneObjects(bpy_prop_collection[Object], bpy_struct):
    """ All of the scene objects
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataPaintCurves(bpy_prop_collection[PaintCurve], bpy_struct):
    """ Collection of paint curves
    """

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataPalettes(bpy_prop_collection[Palette], bpy_struct):
    """ Collection of palettes
    """

    def new(self, name: str) -> 'Palette':
        """ Add a new palette to the main database

        :param name: New name for the data-block
        :type name: str
        :rtype: 'Palette'
        :return: New palette data-block
        """
        pass

    def remove(self, palette: 'Palette', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a palette from the current blendfile

        :param palette: Palette to remove
        :type palette: 'Palette'
        :param do_unlink: Unlink all usages of this palette before deleting it
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this palette
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this palette
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataParticles(bpy_prop_collection[ParticleSettings], bpy_struct):
    """ Collection of particle settings
    """

    def new(self, name: str) -> 'ParticleSettings':
        """ Add a new particle settings instance to the main database

        :param name: New name for the data-block
        :type name: str
        :rtype: 'ParticleSettings'
        :return: New particle settings data-block
        """
        pass

    def remove(self, particle: 'ParticleSettings', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a particle settings instance from the current blendfile

        :param particle: Particle Settings to remove
        :type particle: 'ParticleSettings'
        :param do_unlink: Unlink all usages of those particle settings before deleting them
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this particle settings
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this particle settings
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataPointClouds(bpy_prop_collection[PointCloud], bpy_struct):
    """ Collection of point clouds
    """

    def new(self, name: str) -> 'PointCloud':
        """ Add a new point cloud to the main database

        :param name: New name for the data-block
        :type name: str
        :rtype: 'PointCloud'
        :return: New point cloud data-block
        """
        pass

    def remove(self, pointcloud: 'PointCloud', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a point cloud from the current blendfile

        :param pointcloud: Point cloud to remove
        :type pointcloud: 'PointCloud'
        :param do_unlink: will also delete objects instancing that point cloud data)
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this point cloud data
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this point cloud data
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataScenes(bpy_prop_collection[Scene], bpy_struct):
    """ Collection of scenes
    """

    def new(self, name: str) -> 'Scene':
        """ Add a new scene to the main database

        :param name: New name for the data-block
        :type name: str
        :rtype: 'Scene'
        :return: New scene data-block
        """
        pass

    def remove(self, scene: 'Scene', do_unlink: bool=True):
        """ Remove a scene from the current blendfile

        :param scene: Scene to remove
        :type scene: 'Scene'
        :param do_unlink: Unlink all usages of this scene before deleting it
        :type do_unlink: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataScreens(bpy_prop_collection[Screen], bpy_struct):
    """ Collection of screens
    """

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataSimulations(bpy_prop_collection[Simulation], bpy_struct):
    """ Collection of simulations
    """

    def new(self, name: str) -> 'Simulation':
        """ Add a new simulation to the main database

        :param name: New name for the data-block
        :type name: str
        :rtype: 'Simulation'
        :return: New simulation data-block
        """
        pass

    def remove(self, simulation: 'Simulation', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a simulation from the current blendfile

        :param simulation: Simulation to remove
        :type simulation: 'Simulation'
        :param do_unlink: Unlink all usages of this simulation before deleting it
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this simulation data
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this simulation data
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataSounds(bpy_prop_collection[Sound], bpy_struct):
    """ Collection of sounds
    """

    def load(self, filepath: str, check_existing: bool=False) -> 'Sound':
        """ Add a new sound to the main database from a file

        :param filepath: path for the data-block
        :type filepath: str
        :param check_existing: Using existing data-block if this file is already loaded
        :type check_existing: bool
        :rtype: 'Sound'
        :return: New text data-block
        """
        pass

    def remove(self, sound: 'Sound', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a sound from the current blendfile

        :param sound: Sound to remove
        :type sound: 'Sound'
        :param do_unlink: Unlink all usages of this sound before deleting it
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this sound
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this sound
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataSpeakers(bpy_prop_collection[Speaker], bpy_struct):
    """ Collection of speakers
    """

    def new(self, name: str) -> 'Speaker':
        """ Add a new speaker to the main database

        :param name: New name for the data-block
        :type name: str
        :rtype: 'Speaker'
        :return: New speaker data-block
        """
        pass

    def remove(self, speaker: 'Speaker', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a speaker from the current blendfile

        :param speaker: Speaker to remove
        :type speaker: 'Speaker'
        :param do_unlink: will also delete objects instancing that speaker data)
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this speaker data
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this speaker data
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataTexts(bpy_prop_collection[Text], bpy_struct):
    """ Collection of texts
    """

    def new(self, name: str) -> 'Text':
        """ Add a new text to the main database

        :param name: New name for the data-block
        :type name: str
        :rtype: 'Text'
        :return: New text data-block
        """
        pass

    def remove(self, text: 'Text', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a text from the current blendfile

        :param text: Text to remove
        :type text: 'Text'
        :param do_unlink: Unlink all usages of this text before deleting it
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this text
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this text
        :type do_ui_user: bool
        """
        pass

    def load(self, filepath: str, internal: bool=False) -> 'Text':
        """ Add a new text to the main database from a file

        :param filepath: path for the data-block
        :type filepath: str
        :param internal: Make internal, Make text file internal after loading
        :type internal: bool
        :rtype: 'Text'
        :return: New text data-block
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataTextures(bpy_prop_collection[Texture], bpy_struct):
    """ Collection of textures
    """

    def new(self, name: str, type: typing.Union[str, int]) -> 'Texture':
        """ Add a new texture to the main database

        :param name: New name for the data-block
        :type name: str
        :param type: Type, The type of texture to add
        :type type: typing.Union[str, int]
        :rtype: 'Texture'
        :return: New texture data-block
        """
        pass

    def remove(self, texture: 'Texture', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a texture from the current blendfile

        :param texture: Texture to remove
        :type texture: 'Texture'
        :param do_unlink: Unlink all usages of this texture before deleting it
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this texture
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this texture
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendTexture(Texture, ID, bpy_struct):
    """ Procedural color blending texture
    """
    progression: typing.Union[str, int] = None
    ' Style of the color blending * ``LINEAR`` Linear -- Create a linear progression. * ``QUADRATIC`` Quadratic -- Create a quadratic progression. * ``EASING`` Easing -- Create a progression easing from one step to the next. * ``DIAGONAL`` Diagonal -- Create a diagonal progression. * ``SPHERICAL`` Spherical -- Create a spherical progression. * ``QUADRATIC_SPHERE`` Quadratic Sphere -- Create a quadratic progression in the shape of a sphere. * ``RADIAL`` Radial -- Create a radial progression.\n\n    :type: typing.Union[str, int]\n    '
    use_flip_axis: typing.Union[str, int] = None
    " Flip the texture's X and Y axis * ``HORIZONTAL`` Horizontal -- No flipping. * ``VERTICAL`` Vertical -- Flip the texture's X and Y axis.\n\n    :type: typing.Union[str, int]\n    "
    users_material = None
    ' Materials that use this texture (readonly)'
    users_object_modifier = None
    ' Object modifiers that use this texture (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CloudsTexture(Texture, ID, bpy_struct):
    """ Procedural noise texture
    """
    cloud_type: typing.Union[str, int] = None
    ' Determine whether Noise returns grayscale or RGB values\n\n    :type: typing.Union[str, int]\n    '
    nabla: float = None
    ' Size of derivative offset used for calculating normal\n\n    :type: float\n    '
    noise_basis: typing.Union[str, int] = None
    ' Noise basis used for turbulence * ``BLENDER_ORIGINAL`` Blender Original -- Noise algorithm - Blender original: Smooth interpolated noise. * ``ORIGINAL_PERLIN`` Original Perlin -- Noise algorithm - Original Perlin: Smooth interpolated noise. * ``IMPROVED_PERLIN`` Improved Perlin -- Noise algorithm - Improved Perlin: Smooth interpolated noise. * ``VORONOI_F1`` Voronoi F1 -- Noise algorithm - Voronoi F1: Returns distance to the closest feature point. * ``VORONOI_F2`` Voronoi F2 -- Noise algorithm - Voronoi F2: Returns distance to the 2nd closest feature point. * ``VORONOI_F3`` Voronoi F3 -- Noise algorithm - Voronoi F3: Returns distance to the 3rd closest feature point. * ``VORONOI_F4`` Voronoi F4 -- Noise algorithm - Voronoi F4: Returns distance to the 4th closest feature point. * ``VORONOI_F2_F1`` Voronoi F2-F1 -- Noise algorithm - Voronoi F1-F2. * ``VORONOI_CRACKLE`` Voronoi Crackle -- Noise algorithm - Voronoi Crackle: Voronoi tessellation with sharp edges. * ``CELL_NOISE`` Cell Noise -- Noise algorithm - Cell Noise: Square cell tessellation.\n\n    :type: typing.Union[str, int]\n    '
    noise_depth: int = None
    ' Depth of the cloud calculation\n\n    :type: int\n    '
    noise_scale: float = None
    ' Scaling for noise input\n\n    :type: float\n    '
    noise_type: typing.Union[str, int] = None
    ' * ``SOFT_NOISE`` Soft -- Generate soft noise (smooth transitions). * ``HARD_NOISE`` Hard -- Generate hard noise (sharp transitions).\n\n    :type: typing.Union[str, int]\n    '
    users_material = None
    ' Materials that use this texture (readonly)'
    users_object_modifier = None
    ' Object modifiers that use this texture (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class DistortedNoiseTexture(Texture, ID, bpy_struct):
    """ Procedural distorted noise texture
    """
    distortion: float = None
    ' Amount of distortion\n\n    :type: float\n    '
    nabla: float = None
    ' Size of derivative offset used for calculating normal\n\n    :type: float\n    '
    noise_basis: typing.Union[str, int] = None
    ' Noise basis used for turbulence * ``BLENDER_ORIGINAL`` Blender Original -- Noise algorithm - Blender original: Smooth interpolated noise. * ``ORIGINAL_PERLIN`` Original Perlin -- Noise algorithm - Original Perlin: Smooth interpolated noise. * ``IMPROVED_PERLIN`` Improved Perlin -- Noise algorithm - Improved Perlin: Smooth interpolated noise. * ``VORONOI_F1`` Voronoi F1 -- Noise algorithm - Voronoi F1: Returns distance to the closest feature point. * ``VORONOI_F2`` Voronoi F2 -- Noise algorithm - Voronoi F2: Returns distance to the 2nd closest feature point. * ``VORONOI_F3`` Voronoi F3 -- Noise algorithm - Voronoi F3: Returns distance to the 3rd closest feature point. * ``VORONOI_F4`` Voronoi F4 -- Noise algorithm - Voronoi F4: Returns distance to the 4th closest feature point. * ``VORONOI_F2_F1`` Voronoi F2-F1 -- Noise algorithm - Voronoi F1-F2. * ``VORONOI_CRACKLE`` Voronoi Crackle -- Noise algorithm - Voronoi Crackle: Voronoi tessellation with sharp edges. * ``CELL_NOISE`` Cell Noise -- Noise algorithm - Cell Noise: Square cell tessellation.\n\n    :type: typing.Union[str, int]\n    '
    noise_distortion: typing.Union[str, int] = None
    ' Noise basis for the distortion * ``BLENDER_ORIGINAL`` Blender Original -- Noise algorithm - Blender original: Smooth interpolated noise. * ``ORIGINAL_PERLIN`` Original Perlin -- Noise algorithm - Original Perlin: Smooth interpolated noise. * ``IMPROVED_PERLIN`` Improved Perlin -- Noise algorithm - Improved Perlin: Smooth interpolated noise. * ``VORONOI_F1`` Voronoi F1 -- Noise algorithm - Voronoi F1: Returns distance to the closest feature point. * ``VORONOI_F2`` Voronoi F2 -- Noise algorithm - Voronoi F2: Returns distance to the 2nd closest feature point. * ``VORONOI_F3`` Voronoi F3 -- Noise algorithm - Voronoi F3: Returns distance to the 3rd closest feature point. * ``VORONOI_F4`` Voronoi F4 -- Noise algorithm - Voronoi F4: Returns distance to the 4th closest feature point. * ``VORONOI_F2_F1`` Voronoi F2-F1 -- Noise algorithm - Voronoi F1-F2. * ``VORONOI_CRACKLE`` Voronoi Crackle -- Noise algorithm - Voronoi Crackle: Voronoi tessellation with sharp edges. * ``CELL_NOISE`` Cell Noise -- Noise algorithm - Cell Noise: Square cell tessellation.\n\n    :type: typing.Union[str, int]\n    '
    noise_scale: float = None
    ' Scaling for noise input\n\n    :type: float\n    '
    users_material = None
    ' Materials that use this texture (readonly)'
    users_object_modifier = None
    ' Object modifiers that use this texture (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ImageTexture(Texture, ID, bpy_struct):
    checker_distance: float = None
    ' Distance between checker tiles\n\n    :type: float\n    '
    crop_max_x: float = None
    ' Maximum X value to crop the image\n\n    :type: float\n    '
    crop_max_y: float = None
    ' Maximum Y value to crop the image\n\n    :type: float\n    '
    crop_min_x: float = None
    ' Minimum X value to crop the image\n\n    :type: float\n    '
    crop_min_y: float = None
    ' Minimum Y value to crop the image\n\n    :type: float\n    '
    extension: typing.Union[str, int] = None
    ' How the image is extrapolated past its original bounds * ``EXTEND`` Extend -- Extend by repeating edge pixels of the image. * ``CLIP`` Clip -- Clip to image size and set exterior pixels as transparent. * ``CLIP_CUBE`` Clip Cube -- Clip to cubic-shaped area around the image and set exterior pixels as transparent. * ``REPEAT`` Repeat -- Cause the image to repeat horizontally and vertically. * ``CHECKER`` Checker -- Cause the image to repeat in checker board pattern.\n\n    :type: typing.Union[str, int]\n    '
    filter_eccentricity: int = None
    ' Maximum eccentricity (higher gives less blur at distant/oblique angles, but is also slower)\n\n    :type: int\n    '
    filter_lightprobes: int = None
    ' Maximum number of samples (higher gives less blur at distant/oblique angles, but is also slower)\n\n    :type: int\n    '
    filter_size: float = None
    ' Multiply the filter size used by MIP Map and Interpolation\n\n    :type: float\n    '
    filter_type: typing.Union[str, int] = None
    ' Texture filter to use for sampling image\n\n    :type: typing.Union[str, int]\n    '
    image: 'Image' = None
    " \n\n    :type: 'Image'\n    "
    image_user: 'ImageUser' = None
    " Parameters defining which layer, pass and frame of the image is displayed\n\n    :type: 'ImageUser'\n    "
    invert_alpha: bool = None
    ' Invert all the alpha values in the image\n\n    :type: bool\n    '
    repeat_x: int = None
    ' Repetition multiplier in the X direction\n\n    :type: int\n    '
    repeat_y: int = None
    ' Repetition multiplier in the Y direction\n\n    :type: int\n    '
    use_alpha: bool = None
    ' Use the alpha channel information in the image\n\n    :type: bool\n    '
    use_calculate_alpha: bool = None
    ' Calculate an alpha channel based on RGB values in the image\n\n    :type: bool\n    '
    use_checker_even: bool = None
    ' Even checker tiles\n\n    :type: bool\n    '
    use_checker_odd: bool = None
    ' Odd checker tiles\n\n    :type: bool\n    '
    use_filter_size_min: bool = None
    ' Use Filter Size as a minimal filter value in pixels\n\n    :type: bool\n    '
    use_flip_axis: bool = None
    " Flip the texture's X and Y axis\n\n    :type: bool\n    "
    use_interpolation: bool = None
    ' Interpolate pixels using selected filter\n\n    :type: bool\n    '
    use_mipmap: bool = None
    ' Use auto-generated MIP maps for the image\n\n    :type: bool\n    '
    use_mipmap_gauss: bool = None
    ' Use Gauss filter to sample down MIP maps\n\n    :type: bool\n    '
    use_mirror_x: bool = None
    ' Mirror the image repetition on the X direction\n\n    :type: bool\n    '
    use_mirror_y: bool = None
    ' Mirror the image repetition on the Y direction\n\n    :type: bool\n    '
    use_normal_map: bool = None
    ' Use image RGB values for normal mapping\n\n    :type: bool\n    '
    users_material = None
    ' Materials that use this texture (readonly)'
    users_object_modifier = None
    ' Object modifiers that use this texture (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MagicTexture(Texture, ID, bpy_struct):
    """ Procedural noise texture
    """
    noise_depth: int = None
    ' Depth of the noise\n\n    :type: int\n    '
    turbulence: float = None
    ' Turbulence of the noise\n\n    :type: float\n    '
    users_material = None
    ' Materials that use this texture (readonly)'
    users_object_modifier = None
    ' Object modifiers that use this texture (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MarbleTexture(Texture, ID, bpy_struct):
    """ Procedural noise texture
    """
    marble_type: typing.Union[str, int] = None
    ' * ``SOFT`` Soft -- Use soft marble. * ``SHARP`` Sharp -- Use more clearly defined marble. * ``SHARPER`` Sharper -- Use very clearly defined marble.\n\n    :type: typing.Union[str, int]\n    '
    nabla: float = None
    ' Size of derivative offset used for calculating normal\n\n    :type: float\n    '
    noise_basis: typing.Union[str, int] = None
    ' Noise basis used for turbulence * ``BLENDER_ORIGINAL`` Blender Original -- Noise algorithm - Blender original: Smooth interpolated noise. * ``ORIGINAL_PERLIN`` Original Perlin -- Noise algorithm - Original Perlin: Smooth interpolated noise. * ``IMPROVED_PERLIN`` Improved Perlin -- Noise algorithm - Improved Perlin: Smooth interpolated noise. * ``VORONOI_F1`` Voronoi F1 -- Noise algorithm - Voronoi F1: Returns distance to the closest feature point. * ``VORONOI_F2`` Voronoi F2 -- Noise algorithm - Voronoi F2: Returns distance to the 2nd closest feature point. * ``VORONOI_F3`` Voronoi F3 -- Noise algorithm - Voronoi F3: Returns distance to the 3rd closest feature point. * ``VORONOI_F4`` Voronoi F4 -- Noise algorithm - Voronoi F4: Returns distance to the 4th closest feature point. * ``VORONOI_F2_F1`` Voronoi F2-F1 -- Noise algorithm - Voronoi F1-F2. * ``VORONOI_CRACKLE`` Voronoi Crackle -- Noise algorithm - Voronoi Crackle: Voronoi tessellation with sharp edges. * ``CELL_NOISE`` Cell Noise -- Noise algorithm - Cell Noise: Square cell tessellation.\n\n    :type: typing.Union[str, int]\n    '
    noise_basis_2: typing.Union[str, int] = None
    ' * ``SIN`` Sin -- Use a sine wave to produce bands. * ``SAW`` Saw -- Use a saw wave to produce bands. * ``TRI`` Tri -- Use a triangle wave to produce bands.\n\n    :type: typing.Union[str, int]\n    '
    noise_depth: int = None
    ' Depth of the cloud calculation\n\n    :type: int\n    '
    noise_scale: float = None
    ' Scaling for noise input\n\n    :type: float\n    '
    noise_type: typing.Union[str, int] = None
    ' * ``SOFT_NOISE`` Soft -- Generate soft noise (smooth transitions). * ``HARD_NOISE`` Hard -- Generate hard noise (sharp transitions).\n\n    :type: typing.Union[str, int]\n    '
    turbulence: float = None
    ' Turbulence of the bandnoise and ringnoise types\n\n    :type: float\n    '
    users_material = None
    ' Materials that use this texture (readonly)'
    users_object_modifier = None
    ' Object modifiers that use this texture (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MusgraveTexture(Texture, ID, bpy_struct):
    """ Procedural musgrave texture
    """
    dimension_max: float = None
    ' Highest fractal dimension\n\n    :type: float\n    '
    gain: float = None
    ' The gain multiplier\n\n    :type: float\n    '
    lacunarity: float = None
    ' Gap between successive frequencies\n\n    :type: float\n    '
    musgrave_type: typing.Union[str, int] = None
    ' Fractal noise algorithm * ``MULTIFRACTAL`` Multifractal -- Use Perlin noise as a basis. * ``RIDGED_MULTIFRACTAL`` Ridged Multifractal -- Use Perlin noise with inflection as a basis. * ``HYBRID_MULTIFRACTAL`` Hybrid Multifractal -- Use Perlin noise as a basis, with extended controls. * ``FBM`` fBM -- Fractal Brownian Motion, use Brownian noise as a basis. * ``HETERO_TERRAIN`` Hetero Terrain -- Similar to multifractal.\n\n    :type: typing.Union[str, int]\n    '
    nabla: float = None
    ' Size of derivative offset used for calculating normal\n\n    :type: float\n    '
    noise_basis: typing.Union[str, int] = None
    ' Noise basis used for turbulence * ``BLENDER_ORIGINAL`` Blender Original -- Noise algorithm - Blender original: Smooth interpolated noise. * ``ORIGINAL_PERLIN`` Original Perlin -- Noise algorithm - Original Perlin: Smooth interpolated noise. * ``IMPROVED_PERLIN`` Improved Perlin -- Noise algorithm - Improved Perlin: Smooth interpolated noise. * ``VORONOI_F1`` Voronoi F1 -- Noise algorithm - Voronoi F1: Returns distance to the closest feature point. * ``VORONOI_F2`` Voronoi F2 -- Noise algorithm - Voronoi F2: Returns distance to the 2nd closest feature point. * ``VORONOI_F3`` Voronoi F3 -- Noise algorithm - Voronoi F3: Returns distance to the 3rd closest feature point. * ``VORONOI_F4`` Voronoi F4 -- Noise algorithm - Voronoi F4: Returns distance to the 4th closest feature point. * ``VORONOI_F2_F1`` Voronoi F2-F1 -- Noise algorithm - Voronoi F1-F2. * ``VORONOI_CRACKLE`` Voronoi Crackle -- Noise algorithm - Voronoi Crackle: Voronoi tessellation with sharp edges. * ``CELL_NOISE`` Cell Noise -- Noise algorithm - Cell Noise: Square cell tessellation.\n\n    :type: typing.Union[str, int]\n    '
    noise_intensity: float = None
    ' Intensity of the noise\n\n    :type: float\n    '
    noise_scale: float = None
    ' Scaling for noise input\n\n    :type: float\n    '
    octaves: float = None
    ' Number of frequencies used\n\n    :type: float\n    '
    offset: float = None
    ' The fractal offset\n\n    :type: float\n    '
    users_material = None
    ' Materials that use this texture (readonly)'
    users_object_modifier = None
    ' Object modifiers that use this texture (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NoiseTexture(Texture, ID, bpy_struct):
    """ Procedural noise texture
    """
    users_material = None
    ' Materials that use this texture (readonly)'
    users_object_modifier = None
    ' Object modifiers that use this texture (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class StucciTexture(Texture, ID, bpy_struct):
    """ Procedural noise texture
    """
    noise_basis: typing.Union[str, int] = None
    ' Noise basis used for turbulence * ``BLENDER_ORIGINAL`` Blender Original -- Noise algorithm - Blender original: Smooth interpolated noise. * ``ORIGINAL_PERLIN`` Original Perlin -- Noise algorithm - Original Perlin: Smooth interpolated noise. * ``IMPROVED_PERLIN`` Improved Perlin -- Noise algorithm - Improved Perlin: Smooth interpolated noise. * ``VORONOI_F1`` Voronoi F1 -- Noise algorithm - Voronoi F1: Returns distance to the closest feature point. * ``VORONOI_F2`` Voronoi F2 -- Noise algorithm - Voronoi F2: Returns distance to the 2nd closest feature point. * ``VORONOI_F3`` Voronoi F3 -- Noise algorithm - Voronoi F3: Returns distance to the 3rd closest feature point. * ``VORONOI_F4`` Voronoi F4 -- Noise algorithm - Voronoi F4: Returns distance to the 4th closest feature point. * ``VORONOI_F2_F1`` Voronoi F2-F1 -- Noise algorithm - Voronoi F1-F2. * ``VORONOI_CRACKLE`` Voronoi Crackle -- Noise algorithm - Voronoi Crackle: Voronoi tessellation with sharp edges. * ``CELL_NOISE`` Cell Noise -- Noise algorithm - Cell Noise: Square cell tessellation.\n\n    :type: typing.Union[str, int]\n    '
    noise_scale: float = None
    ' Scaling for noise input\n\n    :type: float\n    '
    noise_type: typing.Union[str, int] = None
    ' * ``SOFT_NOISE`` Soft -- Generate soft noise (smooth transitions). * ``HARD_NOISE`` Hard -- Generate hard noise (sharp transitions).\n\n    :type: typing.Union[str, int]\n    '
    stucci_type: typing.Union[str, int] = None
    ' * ``PLASTIC`` Plastic -- Use standard stucci. * ``WALL_IN`` Wall In -- Create Dimples. * ``WALL_OUT`` Wall Out -- Create Ridges.\n\n    :type: typing.Union[str, int]\n    '
    turbulence: float = None
    ' Turbulence of the noise\n\n    :type: float\n    '
    users_material = None
    ' Materials that use this texture (readonly)'
    users_object_modifier = None
    ' Object modifiers that use this texture (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class VoronoiTexture(Texture, ID, bpy_struct):
    """ Procedural voronoi texture
    """
    color_mode: typing.Union[str, int] = None
    ' * ``INTENSITY`` Intensity -- Only calculate intensity. * ``POSITION`` Position -- Color cells by position. * ``POSITION_OUTLINE`` Position and Outline -- Use position plus an outline based on F2-F1. * ``POSITION_OUTLINE_INTENSITY`` Position, Outline, and Intensity -- Multiply position and outline by intensity.\n\n    :type: typing.Union[str, int]\n    '
    distance_metric: typing.Union[str, int] = None
    ' Algorithm used to calculate distance of sample points to feature points * ``DISTANCE`` Actual Distance -- sqrt(x\\*x+y\\*y+z\\*z). * ``DISTANCE_SQUARED`` Distance Squared -- (x\\*x+y\\*y+z\\*z). * ``MANHATTAN`` Manhattan -- The length of the distance in axial directions. * ``CHEBYCHEV`` Chebychev -- The length of the longest Axial journey. * ``MINKOVSKY_HALF`` Minkowski 1/2 -- Set Minkowski variable to 0.5. * ``MINKOVSKY_FOUR`` Minkowski 4 -- Set Minkowski variable to 4. * ``MINKOVSKY`` Minkowski -- Use the Minkowski function to calculate distance (exponent value determines the shape of the boundaries).\n\n    :type: typing.Union[str, int]\n    '
    minkovsky_exponent: float = None
    ' Minkowski exponent\n\n    :type: float\n    '
    nabla: float = None
    ' Size of derivative offset used for calculating normal\n\n    :type: float\n    '
    noise_intensity: float = None
    ' Scales the intensity of the noise\n\n    :type: float\n    '
    noise_scale: float = None
    ' Scaling for noise input\n\n    :type: float\n    '
    weight_1: float = None
    ' Voronoi feature weight 1\n\n    :type: float\n    '
    weight_2: float = None
    ' Voronoi feature weight 2\n\n    :type: float\n    '
    weight_3: float = None
    ' Voronoi feature weight 3\n\n    :type: float\n    '
    weight_4: float = None
    ' Voronoi feature weight 4\n\n    :type: float\n    '
    users_material = None
    ' Materials that use this texture (readonly)'
    users_object_modifier = None
    ' Object modifiers that use this texture (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class WoodTexture(Texture, ID, bpy_struct):
    """ Procedural noise texture
    """
    nabla: float = None
    ' Size of derivative offset used for calculating normal\n\n    :type: float\n    '
    noise_basis: typing.Union[str, int] = None
    ' Noise basis used for turbulence * ``BLENDER_ORIGINAL`` Blender Original -- Noise algorithm - Blender original: Smooth interpolated noise. * ``ORIGINAL_PERLIN`` Original Perlin -- Noise algorithm - Original Perlin: Smooth interpolated noise. * ``IMPROVED_PERLIN`` Improved Perlin -- Noise algorithm - Improved Perlin: Smooth interpolated noise. * ``VORONOI_F1`` Voronoi F1 -- Noise algorithm - Voronoi F1: Returns distance to the closest feature point. * ``VORONOI_F2`` Voronoi F2 -- Noise algorithm - Voronoi F2: Returns distance to the 2nd closest feature point. * ``VORONOI_F3`` Voronoi F3 -- Noise algorithm - Voronoi F3: Returns distance to the 3rd closest feature point. * ``VORONOI_F4`` Voronoi F4 -- Noise algorithm - Voronoi F4: Returns distance to the 4th closest feature point. * ``VORONOI_F2_F1`` Voronoi F2-F1 -- Noise algorithm - Voronoi F1-F2. * ``VORONOI_CRACKLE`` Voronoi Crackle -- Noise algorithm - Voronoi Crackle: Voronoi tessellation with sharp edges. * ``CELL_NOISE`` Cell Noise -- Noise algorithm - Cell Noise: Square cell tessellation.\n\n    :type: typing.Union[str, int]\n    '
    noise_basis_2: typing.Union[str, int] = None
    ' * ``SIN`` Sine -- Use a sine wave to produce bands. * ``SAW`` Saw -- Use a saw wave to produce bands. * ``TRI`` Tri -- Use a triangle wave to produce bands.\n\n    :type: typing.Union[str, int]\n    '
    noise_scale: float = None
    ' Scaling for noise input\n\n    :type: float\n    '
    noise_type: typing.Union[str, int] = None
    ' * ``SOFT_NOISE`` Soft -- Generate soft noise (smooth transitions). * ``HARD_NOISE`` Hard -- Generate hard noise (sharp transitions).\n\n    :type: typing.Union[str, int]\n    '
    turbulence: float = None
    ' Turbulence of the bandnoise and ringnoise types\n\n    :type: float\n    '
    wood_type: typing.Union[str, int] = None
    ' * ``BANDS`` Bands -- Use standard wood texture in bands. * ``RINGS`` Rings -- Use wood texture in rings. * ``BANDNOISE`` Band Noise -- Add noise to standard wood. * ``RINGNOISE`` Ring Noise -- Add noise to rings.\n\n    :type: typing.Union[str, int]\n    '
    users_material = None
    ' Materials that use this texture (readonly)'
    users_object_modifier = None
    ' Object modifiers that use this texture (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataFonts(bpy_prop_collection[VectorFont], bpy_struct):
    """ Collection of fonts
    """

    def load(self, filepath: str, check_existing: bool=False) -> 'VectorFont':
        """ Load a new font into the main database

        :param filepath: path of the font to load
        :type filepath: str
        :param check_existing: Using existing data-block if this file is already loaded
        :type check_existing: bool
        :rtype: 'VectorFont'
        :return: New font data-block
        """
        pass

    def remove(self, vfont: 'VectorFont', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a font from the current blendfile

        :param vfont: Font to remove
        :type vfont: 'VectorFont'
        :param do_unlink: Unlink all usages of this font before deleting it
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this font
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this font
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataVolumes(bpy_prop_collection[Volume], bpy_struct):
    """ Collection of volumes
    """

    def new(self, name: str) -> 'Volume':
        """ Add a new volume to the main database

        :param name: New name for the data-block
        :type name: str
        :rtype: 'Volume'
        :return: New volume data-block
        """
        pass

    def remove(self, volume: 'Volume', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a volume from the current blendfile

        :param volume: Volume to remove
        :type volume: 'Volume'
        :param do_unlink: will also delete objects instancing that volume data)
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this volume data
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this volume data
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataWindowManagers(bpy_prop_collection[WindowManager], bpy_struct):
    """ Collection of window managers
    """

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataWorkSpaces(bpy_prop_collection[WorkSpace], bpy_struct):
    """ Collection of workspaces
    """

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class BlendDataWorlds(bpy_prop_collection[World], bpy_struct):
    """ Collection of worlds
    """

    def new(self, name: str) -> 'World':
        """ Add a new world to the main database

        :param name: New name for the data-block
        :type name: str
        :rtype: 'World'
        :return: New world data-block
        """
        pass

    def remove(self, world: 'World', do_unlink: bool=True, do_id_user: bool=True, do_ui_user: bool=True):
        """ Remove a world from the current blendfile

        :param world: World to remove
        :type world: 'World'
        :param do_unlink: Unlink all usages of this world before deleting it
        :type do_unlink: bool
        :param do_id_user: Decrement user counter of all datablocks used by this world
        :type do_id_user: bool
        :param do_ui_user: Make sure interface does not reference this world
        :type do_ui_user: bool
        """
        pass

    def tag(self, value: bool):
        """ tag

        :param value: Value
        :type value: bool
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleAlphaModifier_AlongStroke(LineStyleAlphaModifier, LineStyleModifier, bpy_struct):
    """ Change alpha transparency along stroke
    """
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    curve: 'CurveMapping' = None
    " Curve used for the curve mapping\n\n    :type: 'CurveMapping'\n    "
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    invert: bool = None
    ' Invert the fade-out direction of the linear mapping\n\n    :type: bool\n    '
    mapping: typing.Union[str, int] = None
    ' Select the mapping type * ``LINEAR`` Linear -- Use linear mapping. * ``CURVE`` Curve -- Use curve mapping.\n\n    :type: typing.Union[str, int]\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleAlphaModifier_CreaseAngle(LineStyleAlphaModifier, LineStyleModifier, bpy_struct):
    """ Alpha transparency based on the angle between two adjacent faces
    """
    angle_max: float = None
    ' Maximum angle to modify thickness\n\n    :type: float\n    '
    angle_min: float = None
    ' Minimum angle to modify thickness\n\n    :type: float\n    '
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    curve: 'CurveMapping' = None
    " Curve used for the curve mapping\n\n    :type: 'CurveMapping'\n    "
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    invert: bool = None
    ' Invert the fade-out direction of the linear mapping\n\n    :type: bool\n    '
    mapping: typing.Union[str, int] = None
    ' Select the mapping type * ``LINEAR`` Linear -- Use linear mapping. * ``CURVE`` Curve -- Use curve mapping.\n\n    :type: typing.Union[str, int]\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleAlphaModifier_Curvature_3D(LineStyleAlphaModifier, LineStyleModifier, bpy_struct):
    """ Alpha transparency based on the radial curvature of 3D mesh surfaces
    """
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    curvature_max: float = None
    ' Maximum Curvature\n\n    :type: float\n    '
    curvature_min: float = None
    ' Minimum Curvature\n\n    :type: float\n    '
    curve: 'CurveMapping' = None
    " Curve used for the curve mapping\n\n    :type: 'CurveMapping'\n    "
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    invert: bool = None
    ' Invert the fade-out direction of the linear mapping\n\n    :type: bool\n    '
    mapping: typing.Union[str, int] = None
    ' Select the mapping type * ``LINEAR`` Linear -- Use linear mapping. * ``CURVE`` Curve -- Use curve mapping.\n\n    :type: typing.Union[str, int]\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleAlphaModifier_DistanceFromCamera(LineStyleAlphaModifier, LineStyleModifier, bpy_struct):
    """ Change alpha transparency based on the distance from the camera
    """
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    curve: 'CurveMapping' = None
    " Curve used for the curve mapping\n\n    :type: 'CurveMapping'\n    "
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    invert: bool = None
    ' Invert the fade-out direction of the linear mapping\n\n    :type: bool\n    '
    mapping: typing.Union[str, int] = None
    ' Select the mapping type * ``LINEAR`` Linear -- Use linear mapping. * ``CURVE`` Curve -- Use curve mapping.\n\n    :type: typing.Union[str, int]\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    range_max: float = None
    ' Upper bound of the input range the mapping is applied\n\n    :type: float\n    '
    range_min: float = None
    ' Lower bound of the input range the mapping is applied\n\n    :type: float\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleAlphaModifier_DistanceFromObject(LineStyleAlphaModifier, LineStyleModifier, bpy_struct):
    """ Change alpha transparency based on the distance from an object
    """
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    curve: 'CurveMapping' = None
    " Curve used for the curve mapping\n\n    :type: 'CurveMapping'\n    "
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    invert: bool = None
    ' Invert the fade-out direction of the linear mapping\n\n    :type: bool\n    '
    mapping: typing.Union[str, int] = None
    ' Select the mapping type * ``LINEAR`` Linear -- Use linear mapping. * ``CURVE`` Curve -- Use curve mapping.\n\n    :type: typing.Union[str, int]\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    range_max: float = None
    ' Upper bound of the input range the mapping is applied\n\n    :type: float\n    '
    range_min: float = None
    ' Lower bound of the input range the mapping is applied\n\n    :type: float\n    '
    target: 'Object' = None
    " Target object from which the distance is measured\n\n    :type: 'Object'\n    "
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleAlphaModifier_Material(LineStyleAlphaModifier, LineStyleModifier, bpy_struct):
    """ Change alpha transparency based on a material attribute
    """
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    curve: 'CurveMapping' = None
    " Curve used for the curve mapping\n\n    :type: 'CurveMapping'\n    "
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    invert: bool = None
    ' Invert the fade-out direction of the linear mapping\n\n    :type: bool\n    '
    mapping: typing.Union[str, int] = None
    ' Select the mapping type * ``LINEAR`` Linear -- Use linear mapping. * ``CURVE`` Curve -- Use curve mapping.\n\n    :type: typing.Union[str, int]\n    '
    material_attribute: typing.Union[str, int] = None
    ' Specify which material attribute is used\n\n    :type: typing.Union[str, int]\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleAlphaModifier_Noise(LineStyleAlphaModifier, LineStyleModifier, bpy_struct):
    """ Alpha transparency based on random noise
    """
    amplitude: float = None
    ' Amplitude of the noise\n\n    :type: float\n    '
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    curve: 'CurveMapping' = None
    " Curve used for the curve mapping\n\n    :type: 'CurveMapping'\n    "
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    invert: bool = None
    ' Invert the fade-out direction of the linear mapping\n\n    :type: bool\n    '
    mapping: typing.Union[str, int] = None
    ' Select the mapping type * ``LINEAR`` Linear -- Use linear mapping. * ``CURVE`` Curve -- Use curve mapping.\n\n    :type: typing.Union[str, int]\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    period: float = None
    ' Period of the noise\n\n    :type: float\n    '
    seed: int = None
    ' Seed for the noise generation\n\n    :type: int\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleAlphaModifier_Tangent(LineStyleAlphaModifier, LineStyleModifier, bpy_struct):
    """ Alpha transparency based on the direction of the stroke
    """
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    curve: 'CurveMapping' = None
    " Curve used for the curve mapping\n\n    :type: 'CurveMapping'\n    "
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    invert: bool = None
    ' Invert the fade-out direction of the linear mapping\n\n    :type: bool\n    '
    mapping: typing.Union[str, int] = None
    ' Select the mapping type * ``LINEAR`` Linear -- Use linear mapping. * ``CURVE`` Curve -- Use curve mapping.\n\n    :type: typing.Union[str, int]\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleAlphaModifiers(bpy_prop_collection[LineStyleAlphaModifier], bpy_struct):
    """ Alpha modifiers for changing line alphas
    """

    def new(self, name: str, type: typing.Union[str, int]) -> 'LineStyleAlphaModifier':
        """ Add a alpha modifier to line style

        :param name: New name for the alpha modifier (not unique)
        :type name: str
        :param type: Alpha modifier type to add
        :type type: typing.Union[str, int]
        :rtype: 'LineStyleAlphaModifier'
        :return: Newly added alpha modifier
        """
        pass

    def remove(self, modifier: 'LineStyleAlphaModifier'):
        """ Remove a alpha modifier from line style

        :param modifier: Alpha modifier to remove
        :type modifier: 'LineStyleAlphaModifier'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleColorModifier_AlongStroke(LineStyleColorModifier, LineStyleModifier, bpy_struct):
    """ Change line color along stroke
    """
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    color_ramp: 'ColorRamp' = None
    " Color ramp used to change line color\n\n    :type: 'ColorRamp'\n    "
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleColorModifier_CreaseAngle(LineStyleColorModifier, LineStyleModifier, bpy_struct):
    """ Change line color based on the underlying crease angle
    """
    angle_max: float = None
    ' Maximum angle to modify thickness\n\n    :type: float\n    '
    angle_min: float = None
    ' Minimum angle to modify thickness\n\n    :type: float\n    '
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    color_ramp: 'ColorRamp' = None
    " Color ramp used to change line color\n\n    :type: 'ColorRamp'\n    "
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleColorModifier_Curvature_3D(LineStyleColorModifier, LineStyleModifier, bpy_struct):
    """ Change line color based on the radial curvature of 3D mesh surfaces
    """
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    color_ramp: 'ColorRamp' = None
    " Color ramp used to change line color\n\n    :type: 'ColorRamp'\n    "
    curvature_max: float = None
    ' Maximum Curvature\n\n    :type: float\n    '
    curvature_min: float = None
    ' Minimum Curvature\n\n    :type: float\n    '
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleColorModifier_DistanceFromCamera(LineStyleColorModifier, LineStyleModifier, bpy_struct):
    """ Change line color based on the distance from the camera
    """
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    color_ramp: 'ColorRamp' = None
    " Color ramp used to change line color\n\n    :type: 'ColorRamp'\n    "
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    range_max: float = None
    ' Upper bound of the input range the mapping is applied\n\n    :type: float\n    '
    range_min: float = None
    ' Lower bound of the input range the mapping is applied\n\n    :type: float\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleColorModifier_DistanceFromObject(LineStyleColorModifier, LineStyleModifier, bpy_struct):
    """ Change line color based on the distance from an object
    """
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    color_ramp: 'ColorRamp' = None
    " Color ramp used to change line color\n\n    :type: 'ColorRamp'\n    "
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    range_max: float = None
    ' Upper bound of the input range the mapping is applied\n\n    :type: float\n    '
    range_min: float = None
    ' Lower bound of the input range the mapping is applied\n\n    :type: float\n    '
    target: 'Object' = None
    " Target object from which the distance is measured\n\n    :type: 'Object'\n    "
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleColorModifier_Material(LineStyleColorModifier, LineStyleModifier, bpy_struct):
    """ Change line color based on a material attribute
    """
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    color_ramp: 'ColorRamp' = None
    " Color ramp used to change line color\n\n    :type: 'ColorRamp'\n    "
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    material_attribute: typing.Union[str, int] = None
    ' Specify which material attribute is used\n\n    :type: typing.Union[str, int]\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '
    use_ramp: bool = None
    ' Use color ramp to map the BW average into an RGB color\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleColorModifier_Noise(LineStyleColorModifier, LineStyleModifier, bpy_struct):
    """ Change line color based on random noise
    """
    amplitude: float = None
    ' Amplitude of the noise\n\n    :type: float\n    '
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    color_ramp: 'ColorRamp' = None
    " Color ramp used to change line color\n\n    :type: 'ColorRamp'\n    "
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    period: float = None
    ' Period of the noise\n\n    :type: float\n    '
    seed: int = None
    ' Seed for the noise generation\n\n    :type: int\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleColorModifier_Tangent(LineStyleColorModifier, LineStyleModifier, bpy_struct):
    """ Change line color based on the direction of a stroke
    """
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    color_ramp: 'ColorRamp' = None
    " Color ramp used to change line color\n\n    :type: 'ColorRamp'\n    "
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleColorModifiers(bpy_prop_collection[LineStyleColorModifier], bpy_struct):
    """ Color modifiers for changing line colors
    """

    def new(self, name: str, type: typing.Union[str, int]) -> 'LineStyleColorModifier':
        """ Add a color modifier to line style

        :param name: New name for the color modifier (not unique)
        :type name: str
        :param type: Color modifier type to add
        :type type: typing.Union[str, int]
        :rtype: 'LineStyleColorModifier'
        :return: Newly added color modifier
        """
        pass

    def remove(self, modifier: 'LineStyleColorModifier'):
        """ Remove a color modifier from line style

        :param modifier: Color modifier to remove
        :type modifier: 'LineStyleColorModifier'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleGeometryModifier_2DOffset(LineStyleGeometryModifier, LineStyleModifier, bpy_struct):
    """ Add two-dimensional offsets to stroke backbone geometry
    """
    end: float = None
    ' Displacement that is applied from the end of the stroke\n\n    :type: float\n    '
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    start: float = None
    ' Displacement that is applied from the beginning of the stroke\n\n    :type: float\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '
    x: float = None
    ' Displacement that is applied to the X coordinates of stroke vertices\n\n    :type: float\n    '
    y: float = None
    ' Displacement that is applied to the Y coordinates of stroke vertices\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleGeometryModifier_2DTransform(LineStyleGeometryModifier, LineStyleModifier, bpy_struct):
    """ Apply two-dimensional scaling and rotation to stroke backbone geometry
    """
    angle: float = None
    ' Rotation angle\n\n    :type: float\n    '
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    pivot: typing.Union[str, int] = None
    ' Pivot of scaling and rotation operations\n\n    :type: typing.Union[str, int]\n    '
    pivot_u: float = None
    ' Pivot in terms of the stroke point parameter u (0 <= u <= 1)\n\n    :type: float\n    '
    pivot_x: float = None
    ' 2D X coordinate of the absolute pivot\n\n    :type: float\n    '
    pivot_y: float = None
    ' 2D Y coordinate of the absolute pivot\n\n    :type: float\n    '
    scale_x: float = None
    ' Scaling factor that is applied along the X axis\n\n    :type: float\n    '
    scale_y: float = None
    ' Scaling factor that is applied along the Y axis\n\n    :type: float\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleGeometryModifier_BackboneStretcher(LineStyleGeometryModifier, LineStyleModifier, bpy_struct):
    """ Stretch the beginning and the end of stroke backbone
    """
    backbone_length: float = None
    ' Amount of backbone stretching\n\n    :type: float\n    '
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleGeometryModifier_BezierCurve(LineStyleGeometryModifier, LineStyleModifier, bpy_struct):
    """ Replace stroke backbone geometry by a Bezier curve approximation of the original backbone geometry
    """
    error: float = None
    ' Maximum distance allowed between the new Bezier curve and the original backbone geometry\n\n    :type: float\n    '
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleGeometryModifier_Blueprint(LineStyleGeometryModifier, LineStyleModifier, bpy_struct):
    """ Produce a blueprint using circular, elliptic, and square contour strokes
    """
    backbone_length: float = None
    ' Amount of backbone stretching\n\n    :type: float\n    '
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    random_backbone: int = None
    ' Randomness of the backbone stretching\n\n    :type: int\n    '
    random_center: int = None
    ' Randomness of the center\n\n    :type: int\n    '
    random_radius: int = None
    ' Randomness of the radius\n\n    :type: int\n    '
    rounds: int = None
    ' Number of rounds in contour strokes\n\n    :type: int\n    '
    shape: typing.Union[str, int] = None
    ' Select the shape of blueprint contour strokes * ``CIRCLES`` Circles -- Draw a blueprint using circular contour strokes. * ``ELLIPSES`` Ellipses -- Draw a blueprint using elliptic contour strokes. * ``SQUARES`` Squares -- Draw a blueprint using square contour strokes.\n\n    :type: typing.Union[str, int]\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleGeometryModifier_GuidingLines(LineStyleGeometryModifier, LineStyleModifier, bpy_struct):
    """ Modify the stroke geometry so that it corresponds to its main direction line
    """
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    offset: float = None
    ' Displacement that is applied to the main direction line along its normal\n\n    :type: float\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleGeometryModifier_PerlinNoise1D(LineStyleGeometryModifier, LineStyleModifier, bpy_struct):
    """ Add one-dimensional Perlin noise to stroke backbone geometry
    """
    amplitude: float = None
    ' Amplitude of the Perlin noise\n\n    :type: float\n    '
    angle: float = None
    ' Displacement direction\n\n    :type: float\n    '
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    frequency: float = None
    ' Frequency of the Perlin noise\n\n    :type: float\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    octaves: int = None
    ' Number of octaves (i.e., the amount of detail of the Perlin noise)\n\n    :type: int\n    '
    seed: int = None
    ' Seed for random number generation (if negative, time is used as a seed instead)\n\n    :type: int\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleGeometryModifier_PerlinNoise2D(LineStyleGeometryModifier, LineStyleModifier, bpy_struct):
    """ Add two-dimensional Perlin noise to stroke backbone geometry
    """
    amplitude: float = None
    ' Amplitude of the Perlin noise\n\n    :type: float\n    '
    angle: float = None
    ' Displacement direction\n\n    :type: float\n    '
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    frequency: float = None
    ' Frequency of the Perlin noise\n\n    :type: float\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    octaves: int = None
    ' Number of octaves (i.e., the amount of detail of the Perlin noise)\n\n    :type: int\n    '
    seed: int = None
    ' Seed for random number generation (if negative, time is used as a seed instead)\n\n    :type: int\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleGeometryModifier_Polygonalization(LineStyleGeometryModifier, LineStyleModifier, bpy_struct):
    """ Modify the stroke geometry so that it looks more 'polygonal'
    """
    error: float = None
    ' Maximum distance between the original stroke and its polygonal approximation\n\n    :type: float\n    '
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleGeometryModifier_Sampling(LineStyleGeometryModifier, LineStyleModifier, bpy_struct):
    """ Specify a new sampling value that determines the resolution of stroke polylines
    """
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    sampling: float = None
    ' New sampling value to be used for subsequent modifiers\n\n    :type: float\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleGeometryModifier_Simplification(LineStyleGeometryModifier, LineStyleModifier, bpy_struct):
    """ Simplify the stroke set
    """
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    tolerance: float = None
    ' Distance below which segments will be merged\n\n    :type: float\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleGeometryModifier_SinusDisplacement(LineStyleGeometryModifier, LineStyleModifier, bpy_struct):
    """ Add sinus displacement to stroke backbone geometry
    """
    amplitude: float = None
    ' Amplitude of the sinus displacement\n\n    :type: float\n    '
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    phase: float = None
    ' Phase of the sinus displacement\n\n    :type: float\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '
    wavelength: float = None
    ' Wavelength of the sinus displacement\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleGeometryModifier_SpatialNoise(LineStyleGeometryModifier, LineStyleModifier, bpy_struct):
    """ Add spatial noise to stroke backbone geometry
    """
    amplitude: float = None
    ' Amplitude of the spatial noise\n\n    :type: float\n    '
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    octaves: int = None
    ' Number of octaves (i.e., the amount of detail of the spatial noise)\n\n    :type: int\n    '
    scale: float = None
    ' Scale of the spatial noise\n\n    :type: float\n    '
    smooth: bool = None
    ' If true, the spatial noise is smooth\n\n    :type: bool\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '
    use_pure_random: bool = None
    ' If true, the spatial noise does not show any coherence\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleGeometryModifier_TipRemover(LineStyleGeometryModifier, LineStyleModifier, bpy_struct):
    """ Remove a piece of stroke at the beginning and the end of stroke backbone
    """
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    tip_length: float = None
    ' Length of tips to be removed\n\n    :type: float\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleGeometryModifiers(bpy_prop_collection[LineStyleGeometryModifier], bpy_struct):
    """ Geometry modifiers for changing line geometries
    """

    def new(self, name: str, type: typing.Union[str, int]) -> 'LineStyleGeometryModifier':
        """ Add a geometry modifier to line style

        :param name: New name for the geometry modifier (not unique)
        :type name: str
        :param type: Geometry modifier type to add
        :type type: typing.Union[str, int]
        :rtype: 'LineStyleGeometryModifier'
        :return: Newly added geometry modifier
        """
        pass

    def remove(self, modifier: 'LineStyleGeometryModifier'):
        """ Remove a geometry modifier from line style

        :param modifier: Geometry modifier to remove
        :type modifier: 'LineStyleGeometryModifier'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleThicknessModifier_AlongStroke(LineStyleThicknessModifier, LineStyleModifier, bpy_struct):
    """ Change line thickness along stroke
    """
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    curve: 'CurveMapping' = None
    " Curve used for the curve mapping\n\n    :type: 'CurveMapping'\n    "
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    invert: bool = None
    ' Invert the fade-out direction of the linear mapping\n\n    :type: bool\n    '
    mapping: typing.Union[str, int] = None
    ' Select the mapping type * ``LINEAR`` Linear -- Use linear mapping. * ``CURVE`` Curve -- Use curve mapping.\n\n    :type: typing.Union[str, int]\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '
    value_max: float = None
    ' Maximum output value of the mapping\n\n    :type: float\n    '
    value_min: float = None
    ' Minimum output value of the mapping\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleThicknessModifier_Calligraphy(LineStyleThicknessModifier, LineStyleModifier, bpy_struct):
    """ Change line thickness so that stroke looks like made with a calligraphic pen
    """
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    orientation: float = None
    ' Angle of the main direction\n\n    :type: float\n    '
    thickness_max: float = None
    ' Maximum thickness in the main direction\n\n    :type: float\n    '
    thickness_min: float = None
    ' Minimum thickness in the direction perpendicular to the main direction\n\n    :type: float\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleThicknessModifier_CreaseAngle(LineStyleThicknessModifier, LineStyleModifier, bpy_struct):
    """ Line thickness based on the angle between two adjacent faces
    """
    angle_max: float = None
    ' Maximum angle to modify thickness\n\n    :type: float\n    '
    angle_min: float = None
    ' Minimum angle to modify thickness\n\n    :type: float\n    '
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    curve: 'CurveMapping' = None
    " Curve used for the curve mapping\n\n    :type: 'CurveMapping'\n    "
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    invert: bool = None
    ' Invert the fade-out direction of the linear mapping\n\n    :type: bool\n    '
    mapping: typing.Union[str, int] = None
    ' Select the mapping type * ``LINEAR`` Linear -- Use linear mapping. * ``CURVE`` Curve -- Use curve mapping.\n\n    :type: typing.Union[str, int]\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    thickness_max: float = None
    ' Maximum thickness\n\n    :type: float\n    '
    thickness_min: float = None
    ' Minimum thickness\n\n    :type: float\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleThicknessModifier_Curvature_3D(LineStyleThicknessModifier, LineStyleModifier, bpy_struct):
    """ Line thickness based on the radial curvature of 3D mesh surfaces
    """
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    curvature_max: float = None
    ' Maximum Curvature\n\n    :type: float\n    '
    curvature_min: float = None
    ' Minimum Curvature\n\n    :type: float\n    '
    curve: 'CurveMapping' = None
    " Curve used for the curve mapping\n\n    :type: 'CurveMapping'\n    "
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    invert: bool = None
    ' Invert the fade-out direction of the linear mapping\n\n    :type: bool\n    '
    mapping: typing.Union[str, int] = None
    ' Select the mapping type * ``LINEAR`` Linear -- Use linear mapping. * ``CURVE`` Curve -- Use curve mapping.\n\n    :type: typing.Union[str, int]\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    thickness_max: float = None
    ' Maximum thickness\n\n    :type: float\n    '
    thickness_min: float = None
    ' Minimum thickness\n\n    :type: float\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleThicknessModifier_DistanceFromCamera(LineStyleThicknessModifier, LineStyleModifier, bpy_struct):
    """ Change line thickness based on the distance from the camera
    """
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    curve: 'CurveMapping' = None
    " Curve used for the curve mapping\n\n    :type: 'CurveMapping'\n    "
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    invert: bool = None
    ' Invert the fade-out direction of the linear mapping\n\n    :type: bool\n    '
    mapping: typing.Union[str, int] = None
    ' Select the mapping type * ``LINEAR`` Linear -- Use linear mapping. * ``CURVE`` Curve -- Use curve mapping.\n\n    :type: typing.Union[str, int]\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    range_max: float = None
    ' Upper bound of the input range the mapping is applied\n\n    :type: float\n    '
    range_min: float = None
    ' Lower bound of the input range the mapping is applied\n\n    :type: float\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '
    value_max: float = None
    ' Maximum output value of the mapping\n\n    :type: float\n    '
    value_min: float = None
    ' Minimum output value of the mapping\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleThicknessModifier_DistanceFromObject(LineStyleThicknessModifier, LineStyleModifier, bpy_struct):
    """ Change line thickness based on the distance from an object
    """
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    curve: 'CurveMapping' = None
    " Curve used for the curve mapping\n\n    :type: 'CurveMapping'\n    "
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    invert: bool = None
    ' Invert the fade-out direction of the linear mapping\n\n    :type: bool\n    '
    mapping: typing.Union[str, int] = None
    ' Select the mapping type * ``LINEAR`` Linear -- Use linear mapping. * ``CURVE`` Curve -- Use curve mapping.\n\n    :type: typing.Union[str, int]\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    range_max: float = None
    ' Upper bound of the input range the mapping is applied\n\n    :type: float\n    '
    range_min: float = None
    ' Lower bound of the input range the mapping is applied\n\n    :type: float\n    '
    target: 'Object' = None
    " Target object from which the distance is measured\n\n    :type: 'Object'\n    "
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '
    value_max: float = None
    ' Maximum output value of the mapping\n\n    :type: float\n    '
    value_min: float = None
    ' Minimum output value of the mapping\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleThicknessModifier_Material(LineStyleThicknessModifier, LineStyleModifier, bpy_struct):
    """ Change line thickness based on a material attribute
    """
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    curve: 'CurveMapping' = None
    " Curve used for the curve mapping\n\n    :type: 'CurveMapping'\n    "
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    invert: bool = None
    ' Invert the fade-out direction of the linear mapping\n\n    :type: bool\n    '
    mapping: typing.Union[str, int] = None
    ' Select the mapping type * ``LINEAR`` Linear -- Use linear mapping. * ``CURVE`` Curve -- Use curve mapping.\n\n    :type: typing.Union[str, int]\n    '
    material_attribute: typing.Union[str, int] = None
    ' Specify which material attribute is used\n\n    :type: typing.Union[str, int]\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '
    value_max: float = None
    ' Maximum output value of the mapping\n\n    :type: float\n    '
    value_min: float = None
    ' Minimum output value of the mapping\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleThicknessModifier_Noise(LineStyleThicknessModifier, LineStyleModifier, bpy_struct):
    """ Line thickness based on random noise
    """
    amplitude: float = None
    ' Amplitude of the noise\n\n    :type: float\n    '
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    period: float = None
    ' Period of the noise\n\n    :type: float\n    '
    seed: int = None
    ' Seed for the noise generation\n\n    :type: int\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '
    use_asymmetric: bool = None
    ' Allow thickness to be assigned asymmetrically\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleThicknessModifier_Tangent(LineStyleThicknessModifier, LineStyleModifier, bpy_struct):
    """ Thickness based on the direction of the stroke
    """
    blend: typing.Union[str, int] = None
    ' Specify how the modifier value is blended into the base value\n\n    :type: typing.Union[str, int]\n    '
    curve: 'CurveMapping' = None
    " Curve used for the curve mapping\n\n    :type: 'CurveMapping'\n    "
    expanded: bool = None
    ' True if the modifier tab is expanded\n\n    :type: bool\n    '
    influence: float = None
    ' Influence factor by which the modifier changes the property\n\n    :type: float\n    '
    invert: bool = None
    ' Invert the fade-out direction of the linear mapping\n\n    :type: bool\n    '
    mapping: typing.Union[str, int] = None
    ' Select the mapping type * ``LINEAR`` Linear -- Use linear mapping. * ``CURVE`` Curve -- Use curve mapping.\n\n    :type: typing.Union[str, int]\n    '
    name: str = None
    ' Name of the modifier\n\n    :type: str\n    '
    thickness_max: float = None
    ' Maximum thickness\n\n    :type: float\n    '
    thickness_min: float = None
    ' Minimum thickness\n\n    :type: float\n    '
    type: typing.Union[str, int] = None
    ' Type of the modifier\n\n    :type: typing.Union[str, int]\n    '
    use: bool = None
    ' Enable or disable this modifier during stroke rendering\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleThicknessModifiers(bpy_prop_collection[LineStyleThicknessModifier], bpy_struct):
    """ Thickness modifiers for changing line thickness
    """

    def new(self, name: str, type: typing.Union[str, int]) -> 'LineStyleThicknessModifier':
        """ Add a thickness modifier to line style

        :param name: New name for the thickness modifier (not unique)
        :type name: str
        :param type: Thickness modifier type to add
        :type type: typing.Union[str, int]
        :rtype: 'LineStyleThicknessModifier'
        :return: Newly added thickness modifier
        """
        pass

    def remove(self, modifier: 'LineStyleThicknessModifier'):
        """ Remove a thickness modifier from line style

        :param modifier: Thickness modifier to remove
        :type modifier: 'LineStyleThicknessModifier'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNode(NodeInternal, Node, bpy_struct):

    def tag_need_exec(self):
        """ Tag the node for compositor update

        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FunctionNode(NodeInternal, Node, bpy_struct):

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNode(NodeInternal, Node, bpy_struct):

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeFrame(NodeInternal, Node, bpy_struct):
    """ Collect related nodes together in a common area. Useful for organization when the re-usability of a node group is not required
    """
    label_size: int = None
    ' Font size to use for displaying the label\n\n    :type: int\n    '
    shrink: bool = None
    ' Shrink the frame to minimal bounding box\n\n    :type: bool\n    '
    text: 'Text' = None
    " \n\n    :type: 'Text'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeGroup(NodeInternal, Node, bpy_struct):
    node_tree: 'NodeTree' = None
    " \n\n    :type: 'NodeTree'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeGroupInput(NodeInternal, Node, bpy_struct):
    """ Expose connected data from inside a node group as inputs to its interface
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeGroupOutput(NodeInternal, Node, bpy_struct):
    """ Output data from inside of a node group
    """
    is_active_output: bool = None
    ' True if this node is used as the active group output\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeReroute(NodeInternal, Node, bpy_struct):
    """ A single-socket organization tool that supports one input and multiple outputs
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNode(NodeInternal, Node, bpy_struct):
    """ Material shader node
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNode(NodeInternal, Node, bpy_struct):

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketBool(NodeSocketStandard, NodeSocket, bpy_struct):
    """ Boolean value socket of a node
    """
    default_value: bool = None
    ' Input value used for unconnected socket\n\n    :type: bool\n    '
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketCollection(NodeSocketStandard, NodeSocket, bpy_struct):
    """ Collection socket of a node
    """
    default_value: 'Collection' = None
    " Input value used for unconnected socket\n\n    :type: 'Collection'\n    "
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketColor(NodeSocketStandard, NodeSocket, bpy_struct):
    """ RGBA color socket of a node
    """
    default_value: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Input value used for unconnected socket\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketFloat(NodeSocketStandard, NodeSocket, bpy_struct):
    """ Floating-point number socket of a node
    """
    default_value: float = None
    ' Input value used for unconnected socket\n\n    :type: float\n    '
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketFloatAngle(NodeSocketStandard, NodeSocket, bpy_struct):
    """ Floating-point number socket of a node
    """
    default_value: float = None
    ' Input value used for unconnected socket\n\n    :type: float\n    '
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketFloatDistance(NodeSocketStandard, NodeSocket, bpy_struct):
    """ Floating-point number socket of a node
    """
    default_value: float = None
    ' Input value used for unconnected socket\n\n    :type: float\n    '
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketFloatFactor(NodeSocketStandard, NodeSocket, bpy_struct):
    """ Floating-point number socket of a node
    """
    default_value: float = None
    ' Input value used for unconnected socket\n\n    :type: float\n    '
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketFloatPercentage(NodeSocketStandard, NodeSocket, bpy_struct):
    """ Floating-point number socket of a node
    """
    default_value: float = None
    ' Input value used for unconnected socket\n\n    :type: float\n    '
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketFloatTime(NodeSocketStandard, NodeSocket, bpy_struct):
    """ Floating-point number socket of a node
    """
    default_value: float = None
    ' Input value used for unconnected socket\n\n    :type: float\n    '
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketFloatTimeAbsolute(NodeSocketStandard, NodeSocket, bpy_struct):
    """ Floating-point number socket of a node
    """
    default_value: float = None
    ' Input value used for unconnected socket\n\n    :type: float\n    '
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketFloatUnsigned(NodeSocketStandard, NodeSocket, bpy_struct):
    """ Floating-point number socket of a node
    """
    default_value: float = None
    ' Input value used for unconnected socket\n\n    :type: float\n    '
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketGeometry(NodeSocketStandard, NodeSocket, bpy_struct):
    """ Geometry socket of a node
    """
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketImage(NodeSocketStandard, NodeSocket, bpy_struct):
    """ Image socket of a node
    """
    default_value: 'Image' = None
    " Input value used for unconnected socket\n\n    :type: 'Image'\n    "
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInt(NodeSocketStandard, NodeSocket, bpy_struct):
    """ Integer number socket of a node
    """
    default_value: int = None
    ' Input value used for unconnected socket\n\n    :type: int\n    '
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketIntFactor(NodeSocketStandard, NodeSocket, bpy_struct):
    """ Integer number socket of a node
    """
    default_value: int = None
    ' Input value used for unconnected socket\n\n    :type: int\n    '
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketIntPercentage(NodeSocketStandard, NodeSocket, bpy_struct):
    """ Integer number socket of a node
    """
    default_value: int = None
    ' Input value used for unconnected socket\n\n    :type: int\n    '
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketIntUnsigned(NodeSocketStandard, NodeSocket, bpy_struct):
    """ Integer number socket of a node
    """
    default_value: int = None
    ' Input value used for unconnected socket\n\n    :type: int\n    '
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketMaterial(NodeSocketStandard, NodeSocket, bpy_struct):
    """ Material socket of a node
    """
    default_value: 'Material' = None
    " Input value used for unconnected socket\n\n    :type: 'Material'\n    "
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketObject(NodeSocketStandard, NodeSocket, bpy_struct):
    """ Object socket of a node
    """
    default_value: 'Object' = None
    " Input value used for unconnected socket\n\n    :type: 'Object'\n    "
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketShader(NodeSocketStandard, NodeSocket, bpy_struct):
    """ Shader socket of a node
    """
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketString(NodeSocketStandard, NodeSocket, bpy_struct):
    """ String socket of a node
    """
    default_value: str = None
    ' Input value used for unconnected socket\n\n    :type: str\n    '
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketTexture(NodeSocketStandard, NodeSocket, bpy_struct):
    """ Texture socket of a node
    """
    default_value: 'Texture' = None
    " Input value used for unconnected socket\n\n    :type: 'Texture'\n    "
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketVector(NodeSocketStandard, NodeSocket, bpy_struct):
    """ 3D vector socket of a node
    """
    default_value: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Input value used for unconnected socket\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketVectorAcceleration(NodeSocketStandard, NodeSocket, bpy_struct):
    """ 3D vector socket of a node
    """
    default_value: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Input value used for unconnected socket\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketVectorDirection(NodeSocketStandard, NodeSocket, bpy_struct):
    """ 3D vector socket of a node
    """
    default_value: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Input value used for unconnected socket\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketVectorEuler(NodeSocketStandard, NodeSocket, bpy_struct):
    """ 3D vector socket of a node
    """
    default_value: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler'] = None
    " Input value used for unconnected socket\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler']\n    "
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketVectorTranslation(NodeSocketStandard, NodeSocket, bpy_struct):
    """ 3D vector socket of a node
    """
    default_value: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Input value used for unconnected socket\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketVectorVelocity(NodeSocketStandard, NodeSocket, bpy_struct):
    """ 3D vector socket of a node
    """
    default_value: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Input value used for unconnected socket\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketVectorXYZ(NodeSocketStandard, NodeSocket, bpy_struct):
    """ 3D vector socket of a node
    """
    default_value: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Input value used for unconnected socket\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketVirtual(NodeSocketStandard, NodeSocket, bpy_struct):
    """ Virtual socket of a node
    """
    links = None
    ' List of node links from or to this socket. (readonly)'

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceBool(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ Boolean value socket of a node
    """
    default_value: bool = None
    ' Input value used for unconnected socket\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceCollection(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ Collection socket of a node
    """
    default_value: 'Collection' = None
    " Input value used for unconnected socket\n\n    :type: 'Collection'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceColor(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ RGBA color socket of a node
    """
    default_value: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Input value used for unconnected socket\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceFloat(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ Floating-point number socket of a node
    """
    default_value: float = None
    ' Input value used for unconnected socket\n\n    :type: float\n    '
    max_value: float = None
    ' Maximum value\n\n    :type: float\n    '
    min_value: float = None
    ' Minimum value\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceFloatAngle(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ Floating-point number socket of a node
    """
    default_value: float = None
    ' Input value used for unconnected socket\n\n    :type: float\n    '
    max_value: float = None
    ' Maximum value\n\n    :type: float\n    '
    min_value: float = None
    ' Minimum value\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceFloatDistance(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ Floating-point number socket of a node
    """
    default_value: float = None
    ' Input value used for unconnected socket\n\n    :type: float\n    '
    max_value: float = None
    ' Maximum value\n\n    :type: float\n    '
    min_value: float = None
    ' Minimum value\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceFloatFactor(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ Floating-point number socket of a node
    """
    default_value: float = None
    ' Input value used for unconnected socket\n\n    :type: float\n    '
    max_value: float = None
    ' Maximum value\n\n    :type: float\n    '
    min_value: float = None
    ' Minimum value\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceFloatPercentage(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ Floating-point number socket of a node
    """
    default_value: float = None
    ' Input value used for unconnected socket\n\n    :type: float\n    '
    max_value: float = None
    ' Maximum value\n\n    :type: float\n    '
    min_value: float = None
    ' Minimum value\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceFloatTime(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ Floating-point number socket of a node
    """
    default_value: float = None
    ' Input value used for unconnected socket\n\n    :type: float\n    '
    max_value: float = None
    ' Maximum value\n\n    :type: float\n    '
    min_value: float = None
    ' Minimum value\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceFloatTimeAbsolute(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ Floating-point number socket of a node
    """
    default_value: float = None
    ' Input value used for unconnected socket\n\n    :type: float\n    '
    max_value: float = None
    ' Maximum value\n\n    :type: float\n    '
    min_value: float = None
    ' Minimum value\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceFloatUnsigned(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ Floating-point number socket of a node
    """
    default_value: float = None
    ' Input value used for unconnected socket\n\n    :type: float\n    '
    max_value: float = None
    ' Maximum value\n\n    :type: float\n    '
    min_value: float = None
    ' Minimum value\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceGeometry(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ Geometry socket of a node
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceImage(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ Image socket of a node
    """
    default_value: 'Image' = None
    " Input value used for unconnected socket\n\n    :type: 'Image'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceInt(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ Integer number socket of a node
    """
    default_value: int = None
    ' Input value used for unconnected socket\n\n    :type: int\n    '
    max_value: int = None
    ' Maximum value\n\n    :type: int\n    '
    min_value: int = None
    ' Minimum value\n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceIntFactor(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ Integer number socket of a node
    """
    default_value: int = None
    ' Input value used for unconnected socket\n\n    :type: int\n    '
    max_value: int = None
    ' Maximum value\n\n    :type: int\n    '
    min_value: int = None
    ' Minimum value\n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceIntPercentage(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ Integer number socket of a node
    """
    default_value: int = None
    ' Input value used for unconnected socket\n\n    :type: int\n    '
    max_value: int = None
    ' Maximum value\n\n    :type: int\n    '
    min_value: int = None
    ' Minimum value\n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceIntUnsigned(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ Integer number socket of a node
    """
    default_value: int = None
    ' Input value used for unconnected socket\n\n    :type: int\n    '
    max_value: int = None
    ' Maximum value\n\n    :type: int\n    '
    min_value: int = None
    ' Minimum value\n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceMaterial(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ Material socket of a node
    """
    default_value: 'Material' = None
    " Input value used for unconnected socket\n\n    :type: 'Material'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceObject(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ Object socket of a node
    """
    default_value: 'Object' = None
    " Input value used for unconnected socket\n\n    :type: 'Object'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceShader(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ Shader socket of a node
    """

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceString(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ String socket of a node
    """
    default_value: str = None
    ' Input value used for unconnected socket\n\n    :type: str\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceTexture(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ Texture socket of a node
    """
    default_value: 'Texture' = None
    " Input value used for unconnected socket\n\n    :type: 'Texture'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceVector(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ 3D vector socket of a node
    """
    default_value: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Input value used for unconnected socket\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    max_value: float = None
    ' Maximum value\n\n    :type: float\n    '
    min_value: float = None
    ' Minimum value\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceVectorAcceleration(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ 3D vector socket of a node
    """
    default_value: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Input value used for unconnected socket\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    max_value: float = None
    ' Maximum value\n\n    :type: float\n    '
    min_value: float = None
    ' Minimum value\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceVectorDirection(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ 3D vector socket of a node
    """
    default_value: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Input value used for unconnected socket\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    max_value: float = None
    ' Maximum value\n\n    :type: float\n    '
    min_value: float = None
    ' Minimum value\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceVectorEuler(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ 3D vector socket of a node
    """
    default_value: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler'] = None
    " Input value used for unconnected socket\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Euler']\n    "
    max_value: float = None
    ' Maximum value\n\n    :type: float\n    '
    min_value: float = None
    ' Minimum value\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceVectorTranslation(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ 3D vector socket of a node
    """
    default_value: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Input value used for unconnected socket\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    max_value: float = None
    ' Maximum value\n\n    :type: float\n    '
    min_value: float = None
    ' Minimum value\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceVectorVelocity(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ 3D vector socket of a node
    """
    default_value: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Input value used for unconnected socket\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    max_value: float = None
    ' Maximum value\n\n    :type: float\n    '
    min_value: float = None
    ' Minimum value\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class NodeSocketInterfaceVectorXYZ(NodeSocketInterfaceStandard, NodeSocketInterface, bpy_struct):
    """ 3D vector socket of a node
    """
    default_value: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Input value used for unconnected socket\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    max_value: float = None
    ' Maximum value\n\n    :type: float\n    '
    min_value: float = None
    ' Minimum value\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class AddSequence(EffectSequence, Sequence, bpy_struct):
    """ Add Sequence
    """
    input_1: 'Sequence' = None
    " First input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_2: 'Sequence' = None
    " Second input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_count: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class AdjustmentSequence(EffectSequence, Sequence, bpy_struct):
    """ Sequence strip to perform filter adjustments to layers below
    """
    animation_offset_end: int = None
    ' Animation end offset (trim end)\n\n    :type: int\n    '
    animation_offset_start: int = None
    ' Animation start offset (trim start)\n\n    :type: int\n    '
    input_count: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class AlphaOverSequence(EffectSequence, Sequence, bpy_struct):
    """ Alpha Over Sequence
    """
    input_1: 'Sequence' = None
    " First input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_2: 'Sequence' = None
    " Second input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_count: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class AlphaUnderSequence(EffectSequence, Sequence, bpy_struct):
    """ Alpha Under Sequence
    """
    input_1: 'Sequence' = None
    " First input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_2: 'Sequence' = None
    " Second input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_count: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ColorMixSequence(EffectSequence, Sequence, bpy_struct):
    """ Color Mix Sequence
    """
    blend_effect: typing.Union[str, int] = None
    ' Method for controlling how the strip combines with other strips\n\n    :type: typing.Union[str, int]\n    '
    factor: float = None
    " Percentage of how much the strip's colors affect other strips\n\n    :type: float\n    "
    input_1: 'Sequence' = None
    " First input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_2: 'Sequence' = None
    " Second input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_count: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ColorSequence(EffectSequence, Sequence, bpy_struct):
    """ Sequence strip creating an image filled with a single color
    """
    color: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Effect Strip color\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    input_count: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CrossSequence(EffectSequence, Sequence, bpy_struct):
    """ Cross Sequence
    """
    input_1: 'Sequence' = None
    " First input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_2: 'Sequence' = None
    " Second input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_count: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GammaCrossSequence(EffectSequence, Sequence, bpy_struct):
    """ Gamma Cross Sequence
    """
    input_1: 'Sequence' = None
    " First input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_2: 'Sequence' = None
    " Second input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_count: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GaussianBlurSequence(EffectSequence, Sequence, bpy_struct):
    """ Sequence strip creating a gaussian blur
    """
    input_1: 'Sequence' = None
    " First input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_count: int = None
    ' \n\n    :type: int\n    '
    size_x: float = None
    ' Size of the blur along X axis\n\n    :type: float\n    '
    size_y: float = None
    ' Size of the blur along Y axis\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GlowSequence(EffectSequence, Sequence, bpy_struct):
    """ Sequence strip creating a glow effect
    """
    blur_radius: float = None
    ' Radius of glow effect\n\n    :type: float\n    '
    boost_factor: float = None
    ' Brightness multiplier\n\n    :type: float\n    '
    clamp: float = None
    ' Brightness limit of intensity\n\n    :type: float\n    '
    input_1: 'Sequence' = None
    " First input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_count: int = None
    ' \n\n    :type: int\n    '
    quality: int = None
    ' Accuracy of the blur effect\n\n    :type: int\n    '
    threshold: float = None
    ' Minimum intensity to trigger a glow\n\n    :type: float\n    '
    use_only_boost: bool = None
    ' Show the glow buffer only\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MulticamSequence(EffectSequence, Sequence, bpy_struct):
    """ Sequence strip to perform multicam editing
    """
    animation_offset_end: int = None
    ' Animation end offset (trim end)\n\n    :type: int\n    '
    animation_offset_start: int = None
    ' Animation start offset (trim start)\n\n    :type: int\n    '
    input_count: int = None
    ' \n\n    :type: int\n    '
    multicam_source: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class MultiplySequence(EffectSequence, Sequence, bpy_struct):
    """ Multiply Sequence
    """
    input_1: 'Sequence' = None
    " First input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_2: 'Sequence' = None
    " Second input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_count: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class OverDropSequence(EffectSequence, Sequence, bpy_struct):
    """ Over Drop Sequence
    """
    input_1: 'Sequence' = None
    " First input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_2: 'Sequence' = None
    " Second input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_count: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SpeedControlSequence(EffectSequence, Sequence, bpy_struct):
    """ Sequence strip to control the speed of other strips
    """
    input_1: 'Sequence' = None
    " First input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_count: int = None
    ' \n\n    :type: int\n    '
    speed_control: typing.Union[str, int] = None
    ' Speed control method * ``STRETCH`` Stretch -- Adjust input playback speed, so its duration fits strip length. * ``MULTIPLY`` Multiply -- Multiply with the speed factor. * ``FRAME_NUMBER`` Frame Number -- Frame number of the input strip. * ``LENGTH`` Length -- Percentage of the input strip length.\n\n    :type: typing.Union[str, int]\n    '
    speed_factor: float = None
    ' Multiply the current speed of the sequence with this number or remap current frame to this frame\n\n    :type: float\n    '
    speed_frame_number: float = None
    ' Frame number of input strip\n\n    :type: float\n    '
    speed_length: float = None
    ' Percentage of input strip length\n\n    :type: float\n    '
    use_frame_interpolate: bool = None
    ' Do crossfade blending between current and next frame\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class SubtractSequence(EffectSequence, Sequence, bpy_struct):
    """ Subtract Sequence
    """
    input_1: 'Sequence' = None
    " First input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_2: 'Sequence' = None
    " Second input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_count: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextSequence(EffectSequence, Sequence, bpy_struct):
    """ Sequence strip creating text
    """
    align_x: typing.Union[str, int] = None
    ' Align the text along the X axis, relative to the text bounds\n\n    :type: typing.Union[str, int]\n    '
    align_y: typing.Union[str, int] = None
    ' Align the text along the Y axis, relative to the text bounds\n\n    :type: typing.Union[str, int]\n    '
    box_color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    box_margin: float = None
    ' Box margin as factor of image width\n\n    :type: float\n    '
    color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " Text color\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    font: 'VectorFont' = None
    " Font of the text. Falls back to the UI font by default\n\n    :type: 'VectorFont'\n    "
    font_size: float = None
    ' Size of the text\n\n    :type: float\n    '
    input_count: int = None
    ' \n\n    :type: int\n    '
    location: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Location of the text\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "
    shadow_color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "
    text: str = None
    ' Text that will be displayed\n\n    :type: str\n    '
    use_bold: bool = None
    ' Display text as bold\n\n    :type: bool\n    '
    use_box: bool = None
    ' Display colored box behind text\n\n    :type: bool\n    '
    use_italic: bool = None
    ' Display text as italic\n\n    :type: bool\n    '
    use_shadow: bool = None
    ' Display shadow behind text\n\n    :type: bool\n    '
    wrap_width: float = None
    ' Word wrap width as factor, zero disables\n\n    :type: float\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TransformSequence(EffectSequence, Sequence, bpy_struct):
    """ Sequence strip applying affine transformations to other strips
    """
    input_1: 'Sequence' = None
    " First input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_count: int = None
    ' \n\n    :type: int\n    '
    interpolation: typing.Union[str, int] = None
    ' Method to determine how missing pixels are created * ``NONE`` None -- No interpolation. * ``BILINEAR`` Bilinear -- Bilinear interpolation. * ``BICUBIC`` Bicubic -- Bicubic interpolation.\n\n    :type: typing.Union[str, int]\n    '
    rotation_start: float = None
    ' Degrees to rotate the input\n\n    :type: float\n    '
    scale_start_x: float = None
    ' Amount to scale the input in the X axis\n\n    :type: float\n    '
    scale_start_y: float = None
    ' Amount to scale the input in the Y axis\n\n    :type: float\n    '
    translate_start_x: float = None
    ' Amount to move the input on the X axis\n\n    :type: float\n    '
    translate_start_y: float = None
    ' Amount to move the input on the Y axis\n\n    :type: float\n    '
    translation_unit: typing.Union[str, int] = None
    ' Unit of measure to translate the input\n\n    :type: typing.Union[str, int]\n    '
    use_uniform_scale: bool = None
    ' Scale uniformly, preserving aspect ratio\n\n    :type: bool\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class WipeSequence(EffectSequence, Sequence, bpy_struct):
    """ Sequence strip creating a wipe transition
    """
    angle: float = None
    ' Edge angle\n\n    :type: float\n    '
    blur_width: float = None
    ' Width of the blur edge, in percentage relative to the image size\n\n    :type: float\n    '
    direction: typing.Union[str, int] = None
    ' Wipe direction\n\n    :type: typing.Union[str, int]\n    '
    input_1: 'Sequence' = None
    " First input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_2: 'Sequence' = None
    " Second input for the effect strip\n\n    :type: 'Sequence'\n    "
    input_count: int = None
    ' \n\n    :type: int\n    '
    transition_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class LineStyleTextureSlots(bpy_prop_collection[LineStyleTextureSlot], bpy_struct):
    """ Collection of texture slots
    """

    @classmethod
    def add(cls) -> 'LineStyleTextureSlot':
        """ add

        :rtype: 'LineStyleTextureSlot'
        :return: The newly initialized mtex
        """
        pass

    @classmethod
    def create(cls, index: int) -> 'LineStyleTextureSlot':
        """ create

        :param index: Index, Slot index to initialize
        :type index: int
        :rtype: 'LineStyleTextureSlot'
        :return: The newly initialized mtex
        """
        pass

    @classmethod
    def clear(cls, index: int):
        """ clear

        :param index: Index, Slot index to clear
        :type index: int
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ParticleSettingsTextureSlots(bpy_prop_collection[ParticleSettingsTextureSlot], bpy_struct):
    """ Collection of texture slots
    """

    @classmethod
    def add(cls) -> 'ParticleSettingsTextureSlot':
        """ add

        :rtype: 'ParticleSettingsTextureSlot'
        :return: The newly initialized mtex
        """
        pass

    @classmethod
    def create(cls, index: int) -> 'ParticleSettingsTextureSlot':
        """ create

        :param index: Index, Slot index to initialize
        :type index: int
        :rtype: 'ParticleSettingsTextureSlot'
        :return: The newly initialized mtex
        """
        pass

    @classmethod
    def clear(cls, index: int):
        """ clear

        :param index: Index, Slot index to clear
        :type index: int
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeAlphaOver(CompositorNode, NodeInternal, Node, bpy_struct):
    premul: float = None
    ' Mix Factor\n\n    :type: float\n    '
    use_premultiply: bool = None
    ' \n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeAntiAliasing(CompositorNode, NodeInternal, Node, bpy_struct):
    contrast_limit: float = None
    ' How much to eliminate spurious edges to avoid artifacts (the larger value makes less active; the value 2.0, for example, means discard a detected edge if there is a neighboring edge that has 2.0 times bigger contrast than the current one)\n\n    :type: float\n    '
    corner_rounding: float = None
    ' How much sharp corners will be rounded\n\n    :type: float\n    '
    threshold: float = None
    ' Threshold to detect edges (smaller threshold makes more sensitive detection)\n\n    :type: float\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeBilateralblur(CompositorNode, NodeInternal, Node, bpy_struct):
    iterations: int = None
    ' \n\n    :type: int\n    '
    sigma_color: float = None
    ' \n\n    :type: float\n    '
    sigma_space: float = None
    ' \n\n    :type: float\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeBlur(CompositorNode, NodeInternal, Node, bpy_struct):
    aspect_correction: typing.Union[str, int] = None
    ' Type of aspect correction to use\n\n    :type: typing.Union[str, int]\n    '
    factor: float = None
    ' \n\n    :type: float\n    '
    factor_x: float = None
    ' \n\n    :type: float\n    '
    factor_y: float = None
    ' \n\n    :type: float\n    '
    filter_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    size_x: int = None
    ' \n\n    :type: int\n    '
    size_y: int = None
    ' \n\n    :type: int\n    '
    use_bokeh: bool = None
    ' Use circular filter (slower)\n\n    :type: bool\n    '
    use_extended_bounds: bool = None
    ' Extend bounds of the input image to fully fit blurred image\n\n    :type: bool\n    '
    use_gamma_correction: bool = None
    ' Apply filter on gamma corrected values\n\n    :type: bool\n    '
    use_relative: bool = None
    ' Use relative (percent) values to define blur radius\n\n    :type: bool\n    '
    use_variable_size: bool = None
    ' Support variable blur per pixel when using an image for size input\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeBokehBlur(CompositorNode, NodeInternal, Node, bpy_struct):
    blur_max: float = None
    ' Blur limit, maximum CoC radius\n\n    :type: float\n    '
    use_extended_bounds: bool = None
    ' Extend bounds of the input image to fully fit blurred image\n\n    :type: bool\n    '
    use_variable_size: bool = None
    ' Support variable blur per pixel when using an image for size input\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeBokehImage(CompositorNode, NodeInternal, Node, bpy_struct):
    angle: float = None
    ' Angle of the bokeh\n\n    :type: float\n    '
    catadioptric: float = None
    ' Level of catadioptric of the bokeh\n\n    :type: float\n    '
    flaps: int = None
    ' Number of flaps\n\n    :type: int\n    '
    rounding: float = None
    ' Level of rounding of the bokeh\n\n    :type: float\n    '
    shift: float = None
    ' Shift of the lens components\n\n    :type: float\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeBoxMask(CompositorNode, NodeInternal, Node, bpy_struct):
    height: float = None
    ' Height of the box\n\n    :type: float\n    '
    mask_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    rotation: float = None
    ' Rotation angle of the box\n\n    :type: float\n    '
    width: float = None
    ' Width of the box\n\n    :type: float\n    '
    x: float = None
    ' X position of the middle of the box\n\n    :type: float\n    '
    y: float = None
    ' Y position of the middle of the box\n\n    :type: float\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeBrightContrast(CompositorNode, NodeInternal, Node, bpy_struct):
    use_premultiply: bool = None
    ' Keep output image premultiplied alpha\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeChannelMatte(CompositorNode, NodeInternal, Node, bpy_struct):
    color_space: typing.Union[str, int] = None
    ' * ``RGB`` RGB -- RGB color space. * ``HSV`` HSV -- HSV color space. * ``YUV`` YUV -- YUV color space. * ``YCC`` YCbCr -- YCbCr color space.\n\n    :type: typing.Union[str, int]\n    '
    limit_channel: typing.Union[str, int] = None
    " Limit by this channel's value * ``R`` R -- Red. * ``G`` G -- Green. * ``B`` B -- Blue.\n\n    :type: typing.Union[str, int]\n    "
    limit_max: float = None
    ' Values higher than this setting are 100% opaque\n\n    :type: float\n    '
    limit_method: typing.Union[str, int] = None
    ' Algorithm to use to limit channel * ``SINGLE`` Single -- Limit by single channel. * ``MAX`` Max -- Limit by maximum of other channels.\n\n    :type: typing.Union[str, int]\n    '
    limit_min: float = None
    ' Values lower than this setting are 100% keyed\n\n    :type: float\n    '
    matte_channel: typing.Union[str, int] = None
    ' Channel used to determine matte * ``R`` R -- Red. * ``G`` G -- Green. * ``B`` B -- Blue.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeChromaMatte(CompositorNode, NodeInternal, Node, bpy_struct):
    gain: float = None
    ' Alpha falloff\n\n    :type: float\n    '
    lift: float = None
    ' Alpha lift\n\n    :type: float\n    '
    shadow_adjust: float = None
    ' Adjusts the brightness of any shadows captured\n\n    :type: float\n    '
    threshold: float = None
    ' Tolerance below which colors will be considered as exact matches\n\n    :type: float\n    '
    tolerance: float = None
    ' Tolerance for a color to be considered a keying color\n\n    :type: float\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeColorBalance(CompositorNode, NodeInternal, Node, bpy_struct):
    correction_method: typing.Union[str, int] = None
    ' * ``LIFT_GAMMA_GAIN`` Lift/Gamma/Gain. * ``OFFSET_POWER_SLOPE`` Offset/Power/Slope (ASC-CDL) -- ASC-CDL standard color correction.\n\n    :type: typing.Union[str, int]\n    '
    gain: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Correction for highlights\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    gamma: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Correction for midtones\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    lift: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Correction for shadows\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    offset: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Correction for entire tonal range\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    offset_basis: float = None
    ' Support negative color by using this as the RGB basis\n\n    :type: float\n    '
    power: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Correction for midtones\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    slope: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Correction for highlights\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeColorCorrection(CompositorNode, NodeInternal, Node, bpy_struct):
    blue: bool = None
    ' Blue channel active\n\n    :type: bool\n    '
    green: bool = None
    ' Green channel active\n\n    :type: bool\n    '
    highlights_contrast: float = None
    ' Highlights contrast\n\n    :type: float\n    '
    highlights_gain: float = None
    ' Highlights gain\n\n    :type: float\n    '
    highlights_gamma: float = None
    ' Highlights gamma\n\n    :type: float\n    '
    highlights_lift: float = None
    ' Highlights lift\n\n    :type: float\n    '
    highlights_saturation: float = None
    ' Highlights saturation\n\n    :type: float\n    '
    master_contrast: float = None
    ' Master contrast\n\n    :type: float\n    '
    master_gain: float = None
    ' Master gain\n\n    :type: float\n    '
    master_gamma: float = None
    ' Master gamma\n\n    :type: float\n    '
    master_lift: float = None
    ' Master lift\n\n    :type: float\n    '
    master_saturation: float = None
    ' Master saturation\n\n    :type: float\n    '
    midtones_contrast: float = None
    ' Midtones contrast\n\n    :type: float\n    '
    midtones_end: float = None
    ' End of midtones\n\n    :type: float\n    '
    midtones_gain: float = None
    ' Midtones gain\n\n    :type: float\n    '
    midtones_gamma: float = None
    ' Midtones gamma\n\n    :type: float\n    '
    midtones_lift: float = None
    ' Midtones lift\n\n    :type: float\n    '
    midtones_saturation: float = None
    ' Midtones saturation\n\n    :type: float\n    '
    midtones_start: float = None
    ' Start of midtones\n\n    :type: float\n    '
    red: bool = None
    ' Red channel active\n\n    :type: bool\n    '
    shadows_contrast: float = None
    ' Shadows contrast\n\n    :type: float\n    '
    shadows_gain: float = None
    ' Shadows gain\n\n    :type: float\n    '
    shadows_gamma: float = None
    ' Shadows gamma\n\n    :type: float\n    '
    shadows_lift: float = None
    ' Shadows lift\n\n    :type: float\n    '
    shadows_saturation: float = None
    ' Shadows saturation\n\n    :type: float\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeColorMatte(CompositorNode, NodeInternal, Node, bpy_struct):
    color_hue: float = None
    ' Hue tolerance for colors to be considered a keying color\n\n    :type: float\n    '
    color_saturation: float = None
    ' Saturation tolerance for the color\n\n    :type: float\n    '
    color_value: float = None
    ' Value tolerance for the color\n\n    :type: float\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeColorSpill(CompositorNode, NodeInternal, Node, bpy_struct):
    channel: typing.Union[str, int] = None
    ' * ``R`` R -- Red spill suppression. * ``G`` G -- Green spill suppression. * ``B`` B -- Blue spill suppression.\n\n    :type: typing.Union[str, int]\n    '
    limit_channel: typing.Union[str, int] = None
    ' * ``R`` R -- Limit by red. * ``G`` G -- Limit by green. * ``B`` B -- Limit by blue.\n\n    :type: typing.Union[str, int]\n    '
    limit_method: typing.Union[str, int] = None
    ' * ``SIMPLE`` Simple -- Simple limit algorithm. * ``AVERAGE`` Average -- Average limit algorithm.\n\n    :type: typing.Union[str, int]\n    '
    ratio: float = None
    ' Scale limit by value\n\n    :type: float\n    '
    unspill_blue: float = None
    ' Blue spillmap scale\n\n    :type: float\n    '
    unspill_green: float = None
    ' Green spillmap scale\n\n    :type: float\n    '
    unspill_red: float = None
    ' Red spillmap scale\n\n    :type: float\n    '
    use_unspill: bool = None
    ' Compensate all channels (differently) by hand\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeCombHSVA(CompositorNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeCombRGBA(CompositorNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeCombYCCA(CompositorNode, NodeInternal, Node, bpy_struct):
    mode: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeCombYUVA(CompositorNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeCombineColor(CompositorNode, NodeInternal, Node, bpy_struct):
    mode: typing.Union[str, int] = None
    ' Mode of color processing * ``RGB`` RGB -- Use RGB color processing. * ``HSV`` HSV -- Use HSV color processing. * ``HSL`` HSL -- Use HSL color processing. * ``YCC`` YCbCr -- Use YCbCr color processing. * ``YUV`` YUV -- Use YUV color processing.\n\n    :type: typing.Union[str, int]\n    '
    ycc_mode: typing.Union[str, int] = None
    ' Color space used for YCbCrA processing\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeCombineXYZ(CompositorNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeComposite(CompositorNode, NodeInternal, Node, bpy_struct):
    use_alpha: bool = None
    ' Colors are treated alpha premultiplied, or colors output straight (alpha gets set to 1)\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeConvertColorSpace(CompositorNode, NodeInternal, Node, bpy_struct):
    from_color_space: typing.Union[str, int] = None
    ' Color space of the input image\n\n    :type: typing.Union[str, int]\n    '
    to_color_space: typing.Union[str, int] = None
    ' Color space of the output image\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeCornerPin(CompositorNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeCrop(CompositorNode, NodeInternal, Node, bpy_struct):
    max_x: int = None
    ' \n\n    :type: int\n    '
    max_y: int = None
    ' \n\n    :type: int\n    '
    min_x: int = None
    ' \n\n    :type: int\n    '
    min_y: int = None
    ' \n\n    :type: int\n    '
    rel_max_x: float = None
    ' \n\n    :type: float\n    '
    rel_max_y: float = None
    ' \n\n    :type: float\n    '
    rel_min_x: float = None
    ' \n\n    :type: float\n    '
    rel_min_y: float = None
    ' \n\n    :type: float\n    '
    relative: bool = None
    ' Use relative values to crop image\n\n    :type: bool\n    '
    use_crop_size: bool = None
    ' Whether to crop the size of the input image\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeCryptomatte(CompositorNode, NodeInternal, Node, bpy_struct):
    add: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Add object or material to matte, by picking a color from the Pick output\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    matte_id: str = None
    ' List of object and material crypto IDs to include in matte\n\n    :type: str\n    '
    remove: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Remove object or material from matte, by picking a color from the Pick output\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeCryptomatteV2(CompositorNode, NodeInternal, Node, bpy_struct):
    add: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Add object or material to matte, by picking a color from the Pick output\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    entries: bpy_prop_collection['CryptomatteEntry'] = None
    " \n\n    :type: bpy_prop_collection['CryptomatteEntry']\n    "
    frame_duration: int = None
    ' Number of images of a movie to use\n\n    :type: int\n    '
    frame_offset: int = None
    ' Offset the number of the frame to use in the animation\n\n    :type: int\n    '
    frame_start: int = None
    ' Global starting frame of the movie/sequence, assuming first picture has a #1\n\n    :type: int\n    '
    has_layers: bool = None
    ' True if this image has any named layer\n\n    :type: bool\n    '
    has_views: bool = None
    ' True if this image has multiple views\n\n    :type: bool\n    '
    image: 'Image' = None
    " \n\n    :type: 'Image'\n    "
    layer: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    layer_name: typing.Union[str, int] = None
    ' What Cryptomatte layer is used * ``CryptoObject`` Object -- Use Object layer. * ``CryptoMaterial`` Material -- Use Material layer. * ``CryptoAsset`` Asset -- Use Asset layer.\n\n    :type: typing.Union[str, int]\n    '
    matte_id: str = None
    ' List of object and material crypto IDs to include in matte\n\n    :type: str\n    '
    remove: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color'] = None
    " Remove object or material from matte, by picking a color from the Pick output\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Color']\n    "
    scene: 'Scene' = None
    " \n\n    :type: 'Scene'\n    "
    source: typing.Union[str, int] = None
    ' Where the Cryptomatte passes are loaded from * ``RENDER`` Render -- Use Cryptomatte passes from a render. * ``IMAGE`` Image -- Use Cryptomatte passes from an image.\n\n    :type: typing.Union[str, int]\n    '
    use_auto_refresh: bool = None
    ' Always refresh image on frame changes\n\n    :type: bool\n    '
    use_cyclic: bool = None
    ' Cycle the images in the movie\n\n    :type: bool\n    '
    view: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeCurveRGB(CompositorNode, NodeInternal, Node, bpy_struct):
    mapping: 'CurveMapping' = None
    " \n\n    :type: 'CurveMapping'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeCurveVec(CompositorNode, NodeInternal, Node, bpy_struct):
    mapping: 'CurveMapping' = None
    " \n\n    :type: 'CurveMapping'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeCustomGroup(CompositorNode, NodeInternal, Node, bpy_struct):
    """ Custom Compositor Group Node for Python nodes
    """
    node_tree: 'NodeTree' = None
    " \n\n    :type: 'NodeTree'\n    "

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeDBlur(CompositorNode, NodeInternal, Node, bpy_struct):
    angle: float = None
    ' \n\n    :type: float\n    '
    center_x: float = None
    ' \n\n    :type: float\n    '
    center_y: float = None
    ' \n\n    :type: float\n    '
    distance: float = None
    ' \n\n    :type: float\n    '
    iterations: int = None
    ' \n\n    :type: int\n    '
    spin: float = None
    ' \n\n    :type: float\n    '
    zoom: float = None
    ' \n\n    :type: float\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeDefocus(CompositorNode, NodeInternal, Node, bpy_struct):
    angle: float = None
    ' Bokeh shape rotation offset\n\n    :type: float\n    '
    blur_max: float = None
    ' Blur limit, maximum CoC radius\n\n    :type: float\n    '
    bokeh: typing.Union[str, int] = None
    ' * ``OCTAGON`` Octagonal -- 8 sides. * ``HEPTAGON`` Heptagonal -- 7 sides. * ``HEXAGON`` Hexagonal -- 6 sides. * ``PENTAGON`` Pentagonal -- 5 sides. * ``SQUARE`` Square -- 4 sides. * ``TRIANGLE`` Triangular -- 3 sides. * ``CIRCLE`` Circular.\n\n    :type: typing.Union[str, int]\n    '
    f_stop: float = None
    ' Amount of focal blur, 128 (infinity) is perfect focus, half the value doubles the blur radius\n\n    :type: float\n    '
    scene: 'Scene' = None
    " Scene from which to select the active camera (render scene if undefined)\n\n    :type: 'Scene'\n    "
    threshold: float = None
    ' CoC radius threshold, prevents background bleed on in-focus midground, 0 is disabled\n\n    :type: float\n    '
    use_gamma_correction: bool = None
    ' Enable gamma correction before and after main process\n\n    :type: bool\n    '
    use_preview: bool = None
    ' Enable low quality mode, useful for preview\n\n    :type: bool\n    '
    use_zbuffer: bool = None
    ' Disable when using an image as input instead of actual z-buffer (auto enabled if node not image based, eg. time node)\n\n    :type: bool\n    '
    z_scale: float = None
    ' Scale the Z input when not using a z-buffer, controls maximum blur designated by the color white or input value 1\n\n    :type: float\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeDenoise(CompositorNode, NodeInternal, Node, bpy_struct):
    prefilter: typing.Union[str, int] = None
    ' Denoising prefilter * ``NONE`` None -- No prefiltering, use when guiding passes are noise-free. * ``FAST`` Fast -- Denoise image and guiding passes together. Improves quality when guiding passes are noisy using least amount of extra processing time. * ``ACCURATE`` Accurate -- Prefilter noisy guiding passes before denoising image. Improves quality when guiding passes are noisy using extra processing time.\n\n    :type: typing.Union[str, int]\n    '
    use_hdr: bool = None
    ' Process HDR images\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeDespeckle(CompositorNode, NodeInternal, Node, bpy_struct):
    threshold: float = None
    ' Threshold for detecting pixels to despeckle\n\n    :type: float\n    '
    threshold_neighbor: float = None
    ' Threshold for the number of neighbor pixels that must match\n\n    :type: float\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeDiffMatte(CompositorNode, NodeInternal, Node, bpy_struct):
    falloff: float = None
    ' Color distances below this additional threshold are partially keyed\n\n    :type: float\n    '
    tolerance: float = None
    ' Color distances below this threshold are keyed\n\n    :type: float\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeDilateErode(CompositorNode, NodeInternal, Node, bpy_struct):
    distance: int = None
    ' Distance to grow/shrink (number of iterations)\n\n    :type: int\n    '
    edge: float = None
    ' Edge to inset\n\n    :type: float\n    '
    falloff: typing.Union[str, int] = None
    ' Falloff type the feather\n\n    :type: typing.Union[str, int]\n    '
    mode: typing.Union[str, int] = None
    ' Growing/shrinking mode\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeDisplace(CompositorNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeDistanceMatte(CompositorNode, NodeInternal, Node, bpy_struct):
    channel: typing.Union[str, int] = None
    ' * ``RGB`` RGB -- RGB color space. * ``YCC`` YCC -- YCbCr suppression.\n\n    :type: typing.Union[str, int]\n    '
    falloff: float = None
    ' Color distances below this additional threshold are partially keyed\n\n    :type: float\n    '
    tolerance: float = None
    ' Color distances below this threshold are keyed\n\n    :type: float\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeDoubleEdgeMask(CompositorNode, NodeInternal, Node, bpy_struct):
    edge_mode: typing.Union[str, int] = None
    ' * ``BLEED_OUT`` Bleed Out -- Allow mask pixels to bleed along edges. * ``KEEP_IN`` Keep In -- Restrict mask pixels from touching edges.\n\n    :type: typing.Union[str, int]\n    '
    inner_mode: typing.Union[str, int] = None
    ' * ``ALL`` All -- All pixels on inner mask edge are considered during mask calculation. * ``ADJACENT_ONLY`` Adjacent Only -- Only inner mask pixels adjacent to outer mask pixels are considered during mask calculation.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeEllipseMask(CompositorNode, NodeInternal, Node, bpy_struct):
    height: float = None
    ' Height of the ellipse\n\n    :type: float\n    '
    mask_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    rotation: float = None
    ' Rotation angle of the ellipse\n\n    :type: float\n    '
    width: float = None
    ' Width of the ellipse\n\n    :type: float\n    '
    x: float = None
    ' X position of the middle of the ellipse\n\n    :type: float\n    '
    y: float = None
    ' Y position of the middle of the ellipse\n\n    :type: float\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeExposure(CompositorNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeFilter(CompositorNode, NodeInternal, Node, bpy_struct):
    filter_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeFlip(CompositorNode, NodeInternal, Node, bpy_struct):
    axis: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeGamma(CompositorNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeGlare(CompositorNode, NodeInternal, Node, bpy_struct):
    angle_offset: float = None
    ' Streak angle offset\n\n    :type: float\n    '
    color_modulation: float = None
    ' Amount of Color Modulation, modulates colors of streaks and ghosts for a spectral dispersion effect\n\n    :type: float\n    '
    fade: float = None
    ' Streak fade-out factor\n\n    :type: float\n    '
    glare_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    iterations: int = None
    ' \n\n    :type: int\n    '
    mix: float = None
    ' -1 is original image only, 0 is exact 50/50 mix, 1 is processed image only\n\n    :type: float\n    '
    quality: typing.Union[str, int] = None
    ' If not set to high quality, the effect will be applied to a low-res copy of the source image\n\n    :type: typing.Union[str, int]\n    '
    size: int = None
    ' Glow/glare size (not actual size; relative to initial size of bright area of pixels)\n\n    :type: int\n    '
    streaks: int = None
    ' Total number of streaks\n\n    :type: int\n    '
    threshold: float = None
    ' The glare filter will only be applied to pixels brighter than this value\n\n    :type: float\n    '
    use_rotate_45: bool = None
    ' Simple star filter: add 45 degree rotation offset\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeGroup(CompositorNode, NodeInternal, Node, bpy_struct):
    node_tree: 'NodeTree' = None
    " \n\n    :type: 'NodeTree'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeHueCorrect(CompositorNode, NodeInternal, Node, bpy_struct):
    mapping: 'CurveMapping' = None
    " \n\n    :type: 'CurveMapping'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeHueSat(CompositorNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeIDMask(CompositorNode, NodeInternal, Node, bpy_struct):
    index: int = None
    ' Pass index number to convert to alpha\n\n    :type: int\n    '
    use_antialiasing: bool = None
    ' Apply an anti-aliasing filter to the mask\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeImage(CompositorNode, NodeInternal, Node, bpy_struct):
    frame_duration: int = None
    ' Number of images of a movie to use\n\n    :type: int\n    '
    frame_offset: int = None
    ' Offset the number of the frame to use in the animation\n\n    :type: int\n    '
    frame_start: int = None
    ' Global starting frame of the movie/sequence, assuming first picture has a #1\n\n    :type: int\n    '
    has_layers: bool = None
    ' True if this image has any named layer\n\n    :type: bool\n    '
    has_views: bool = None
    ' True if this image has multiple views\n\n    :type: bool\n    '
    image: 'Image' = None
    " \n\n    :type: 'Image'\n    "
    layer: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    use_auto_refresh: bool = None
    ' Always refresh image on frame changes\n\n    :type: bool\n    '
    use_cyclic: bool = None
    ' Cycle the images in the movie\n\n    :type: bool\n    '
    use_straight_alpha_output: bool = None
    ' Put node output buffer to straight alpha instead of premultiplied\n\n    :type: bool\n    '
    view: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeInpaint(CompositorNode, NodeInternal, Node, bpy_struct):
    distance: int = None
    ' Distance to inpaint (number of iterations)\n\n    :type: int\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeInvert(CompositorNode, NodeInternal, Node, bpy_struct):
    invert_alpha: bool = None
    ' \n\n    :type: bool\n    '
    invert_rgb: bool = None
    ' \n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeKeying(CompositorNode, NodeInternal, Node, bpy_struct):
    blur_post: int = None
    ' Matte blur size which applies after clipping and dilate/eroding\n\n    :type: int\n    '
    blur_pre: int = None
    ' Chroma pre-blur size which applies before running keyer\n\n    :type: int\n    '
    clip_black: float = None
    ' Value of non-scaled matte pixel which considers as fully background pixel\n\n    :type: float\n    '
    clip_white: float = None
    ' Value of non-scaled matte pixel which considers as fully foreground pixel\n\n    :type: float\n    '
    despill_balance: float = None
    ' Balance between non-key colors used to detect amount of key color to be removed\n\n    :type: float\n    '
    despill_factor: float = None
    ' Factor of despilling screen color from image\n\n    :type: float\n    '
    dilate_distance: int = None
    ' Matte dilate/erode side\n\n    :type: int\n    '
    edge_kernel_radius: int = None
    ' Radius of kernel used to detect whether pixel belongs to edge\n\n    :type: int\n    '
    edge_kernel_tolerance: float = None
    ' Tolerance to pixels inside kernel which are treating as belonging to the same plane\n\n    :type: float\n    '
    feather_distance: int = None
    ' Distance to grow/shrink the feather\n\n    :type: int\n    '
    feather_falloff: typing.Union[str, int] = None
    ' Falloff type the feather\n\n    :type: typing.Union[str, int]\n    '
    screen_balance: float = None
    ' Balance between two non-primary channels primary channel is comparing against\n\n    :type: float\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeKeyingScreen(CompositorNode, NodeInternal, Node, bpy_struct):
    clip: 'MovieClip' = None
    " \n\n    :type: 'MovieClip'\n    "
    tracking_object: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeLensdist(CompositorNode, NodeInternal, Node, bpy_struct):
    use_fit: bool = None
    ' For positive distortion factor only: scale image such that black areas are not visible\n\n    :type: bool\n    '
    use_jitter: bool = None
    ' Enable/disable jittering (faster, but also noisier)\n\n    :type: bool\n    '
    use_projector: bool = None
    ' Enable/disable projector mode (the effect is applied in horizontal direction only)\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeLevels(CompositorNode, NodeInternal, Node, bpy_struct):
    channel: typing.Union[str, int] = None
    ' * ``COMBINED_RGB`` Combined -- Combined RGB. * ``RED`` Red -- Red Channel. * ``GREEN`` Green -- Green Channel. * ``BLUE`` Blue -- Blue Channel. * ``LUMINANCE`` Luminance -- Luminance Channel.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeLumaMatte(CompositorNode, NodeInternal, Node, bpy_struct):
    limit_max: float = None
    ' Values higher than this setting are 100% opaque\n\n    :type: float\n    '
    limit_min: float = None
    ' Values lower than this setting are 100% keyed\n\n    :type: float\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeMapRange(CompositorNode, NodeInternal, Node, bpy_struct):
    use_clamp: bool = None
    ' Clamp result of the node to 0.0 to 1.0 range\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeMapUV(CompositorNode, NodeInternal, Node, bpy_struct):
    alpha: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeMapValue(CompositorNode, NodeInternal, Node, bpy_struct):
    max: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float], 'mathutils.Vector']\n    "
    min: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float], 'mathutils.Vector']\n    "
    offset: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float], 'mathutils.Vector']\n    "
    size: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float], 'mathutils.Vector']\n    "
    use_max: bool = None
    ' \n\n    :type: bool\n    '
    use_min: bool = None
    ' \n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeMask(CompositorNode, NodeInternal, Node, bpy_struct):
    mask: 'Mask' = None
    " \n\n    :type: 'Mask'\n    "
    motion_blur_samples: int = None
    ' Number of motion blur samples\n\n    :type: int\n    '
    motion_blur_shutter: float = None
    ' Exposure for motion blur as a factor of FPS\n\n    :type: float\n    '
    size_source: typing.Union[str, int] = None
    ' Where to get the mask size from for aspect/size information * ``SCENE`` Scene Size. * ``FIXED`` Fixed -- Use pixel size for the buffer. * ``FIXED_SCENE`` Fixed/Scene -- Pixel size scaled by scene percentage.\n\n    :type: typing.Union[str, int]\n    '
    size_x: int = None
    ' \n\n    :type: int\n    '
    size_y: int = None
    ' \n\n    :type: int\n    '
    use_feather: bool = None
    ' Use feather information from the mask\n\n    :type: bool\n    '
    use_motion_blur: bool = None
    ' Use multi-sampled motion blur of the mask\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeMath(CompositorNode, NodeInternal, Node, bpy_struct):
    operation: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    use_clamp: bool = None
    ' Clamp result of the node to 0.0 to 1.0 range\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeMixRGB(CompositorNode, NodeInternal, Node, bpy_struct):
    blend_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    use_alpha: bool = None
    ' Include alpha of second input in this operation\n\n    :type: bool\n    '
    use_clamp: bool = None
    ' Clamp result of the node to 0.0 to 1.0 range\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeMovieClip(CompositorNode, NodeInternal, Node, bpy_struct):
    clip: 'MovieClip' = None
    " \n\n    :type: 'MovieClip'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeMovieDistortion(CompositorNode, NodeInternal, Node, bpy_struct):
    clip: 'MovieClip' = None
    " \n\n    :type: 'MovieClip'\n    "
    distortion_type: typing.Union[str, int] = None
    ' Distortion to use to filter image\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeNormal(CompositorNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeNormalize(CompositorNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeOutputFile(CompositorNode, NodeInternal, Node, bpy_struct):
    active_input_index: int = None
    ' Active input index in details view list\n\n    :type: int\n    '
    base_path: str = None
    ' Base output path for the image\n\n    :type: str\n    '
    file_slots: 'CompositorNodeOutputFileFileSlots' = None
    " \n\n    :type: 'CompositorNodeOutputFileFileSlots'\n    "
    format: 'ImageFormatSettings' = None
    " \n\n    :type: 'ImageFormatSettings'\n    "
    layer_slots: 'CompositorNodeOutputFileLayerSlots' = None
    " \n\n    :type: 'CompositorNodeOutputFileLayerSlots'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodePixelate(CompositorNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodePlaneTrackDeform(CompositorNode, NodeInternal, Node, bpy_struct):
    clip: 'MovieClip' = None
    " \n\n    :type: 'MovieClip'\n    "
    motion_blur_samples: int = None
    ' Number of motion blur samples\n\n    :type: int\n    '
    motion_blur_shutter: float = None
    ' Exposure for motion blur as a factor of FPS\n\n    :type: float\n    '
    plane_track_name: str = None
    ' \n\n    :type: str\n    '
    tracking_object: str = None
    ' \n\n    :type: str\n    '
    use_motion_blur: bool = None
    ' Use multi-sampled motion blur of the mask\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodePosterize(CompositorNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodePremulKey(CompositorNode, NodeInternal, Node, bpy_struct):
    mapping: typing.Union[str, int] = None
    ' Conversion between premultiplied alpha and key alpha * ``STRAIGHT_TO_PREMUL`` To Premultiplied -- Convert straight to premultiplied. * ``PREMUL_TO_STRAIGHT`` To Straight -- Convert premultiplied to straight.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeRGB(CompositorNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeRGBToBW(CompositorNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeRLayers(CompositorNode, NodeInternal, Node, bpy_struct):
    layer: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    scene: 'Scene' = None
    " \n\n    :type: 'Scene'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeRotate(CompositorNode, NodeInternal, Node, bpy_struct):
    filter_type: typing.Union[str, int] = None
    ' Method to use to filter rotation\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeScale(CompositorNode, NodeInternal, Node, bpy_struct):
    frame_method: typing.Union[str, int] = None
    ' How the image fits in the camera frame\n\n    :type: typing.Union[str, int]\n    '
    offset_x: float = None
    ' Offset image horizontally (factor of image size)\n\n    :type: float\n    '
    offset_y: float = None
    ' Offset image vertically (factor of image size)\n\n    :type: float\n    '
    space: typing.Union[str, int] = None
    ' Coordinate space to scale relative to\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeSceneTime(CompositorNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeSepHSVA(CompositorNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeSepRGBA(CompositorNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeSepYCCA(CompositorNode, NodeInternal, Node, bpy_struct):
    mode: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeSepYUVA(CompositorNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeSeparateColor(CompositorNode, NodeInternal, Node, bpy_struct):
    mode: typing.Union[str, int] = None
    ' Mode of color processing * ``RGB`` RGB -- Use RGB color processing. * ``HSV`` HSV -- Use HSV color processing. * ``HSL`` HSL -- Use HSL color processing. * ``YCC`` YCbCr -- Use YCbCr color processing. * ``YUV`` YUV -- Use YUV color processing.\n\n    :type: typing.Union[str, int]\n    '
    ycc_mode: typing.Union[str, int] = None
    ' Color space used for YCbCrA processing\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeSeparateXYZ(CompositorNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeSetAlpha(CompositorNode, NodeInternal, Node, bpy_struct):
    mode: typing.Union[str, int] = None
    " * ``APPLY`` Apply Mask -- Multiply the input image's RGBA channels by the alpha input value. * ``REPLACE_ALPHA`` Replace Alpha -- Replace the input image's alpha channel by the alpha input value.\n\n    :type: typing.Union[str, int]\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeSplitViewer(CompositorNode, NodeInternal, Node, bpy_struct):
    axis: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    factor: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeStabilize(CompositorNode, NodeInternal, Node, bpy_struct):
    clip: 'MovieClip' = None
    " \n\n    :type: 'MovieClip'\n    "
    filter_type: typing.Union[str, int] = None
    ' Method to use to filter stabilization\n\n    :type: typing.Union[str, int]\n    '
    invert: bool = None
    ' Invert stabilization to re-introduce motion to the frame\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeSunBeams(CompositorNode, NodeInternal, Node, bpy_struct):
    ray_length: float = None
    ' Length of rays as a factor of the image size\n\n    :type: float\n    '
    source: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector'] = None
    " Source point of rays as a factor of the image width and height\n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float], 'mathutils.Vector']\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeSwitch(CompositorNode, NodeInternal, Node, bpy_struct):
    check: bool = None
    ' Off: first socket, On: second socket\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeSwitchView(CompositorNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeTexture(CompositorNode, NodeInternal, Node, bpy_struct):
    node_output: int = None
    ' For node-based textures, which output node to use\n\n    :type: int\n    '
    texture: 'Texture' = None
    " \n\n    :type: 'Texture'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeTime(CompositorNode, NodeInternal, Node, bpy_struct):
    curve: 'CurveMapping' = None
    " \n\n    :type: 'CurveMapping'\n    "
    frame_end: int = None
    ' \n\n    :type: int\n    '
    frame_start: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeTonemap(CompositorNode, NodeInternal, Node, bpy_struct):
    adaptation: float = None
    ' If 0, global; if 1, based on pixel intensity\n\n    :type: float\n    '
    contrast: float = None
    ' Set to 0 to use estimate from input image\n\n    :type: float\n    '
    correction: float = None
    ' If 0, same for all channels; if 1, each independent\n\n    :type: float\n    '
    gamma: float = None
    ' If not used, set to 1\n\n    :type: float\n    '
    intensity: float = None
    ' If less than zero, darkens image; otherwise, makes it brighter\n\n    :type: float\n    '
    key: float = None
    ' The value the average luminance is mapped to\n\n    :type: float\n    '
    offset: float = None
    ' Normally always 1, but can be used as an extra control to alter the brightness curve\n\n    :type: float\n    '
    tonemap_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeTrackPos(CompositorNode, NodeInternal, Node, bpy_struct):
    clip: 'MovieClip' = None
    " \n\n    :type: 'MovieClip'\n    "
    frame_relative: int = None
    ' Frame to be used for relative position\n\n    :type: int\n    '
    position: typing.Union[str, int] = None
    ' Which marker position to use for output * ``ABSOLUTE`` Absolute -- Output absolute position of a marker. * ``RELATIVE_START`` Relative Start -- Output position of a marker relative to first marker of a track. * ``RELATIVE_FRAME`` Relative Frame -- Output position of a marker relative to marker at given frame number. * ``ABSOLUTE_FRAME`` Absolute Frame -- Output absolute position of a marker at given frame number.\n\n    :type: typing.Union[str, int]\n    '
    track_name: str = None
    ' \n\n    :type: str\n    '
    tracking_object: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeTransform(CompositorNode, NodeInternal, Node, bpy_struct):
    filter_type: typing.Union[str, int] = None
    ' Method to use to filter transform\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeTranslate(CompositorNode, NodeInternal, Node, bpy_struct):
    use_relative: bool = None
    ' Use relative (fraction of input image size) values to define translation\n\n    :type: bool\n    '
    wrap_axis: typing.Union[str, int] = None
    ' Wrap image on a specific axis * ``NONE`` None -- No wrapping on X and Y. * ``XAXIS`` X Axis -- Wrap all pixels on the X axis. * ``YAXIS`` Y Axis -- Wrap all pixels on the Y axis. * ``BOTH`` Both Axes -- Wrap all pixels on both axes.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeValToRGB(CompositorNode, NodeInternal, Node, bpy_struct):
    color_ramp: 'ColorRamp' = None
    " \n\n    :type: 'ColorRamp'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeValue(CompositorNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeVecBlur(CompositorNode, NodeInternal, Node, bpy_struct):
    factor: float = None
    " Scaling factor for motion vectors (actually, 'shutter speed', in frames)\n\n    :type: float\n    "
    samples: int = None
    ' \n\n    :type: int\n    '
    speed_max: int = None
    ' Maximum speed, or zero for none\n\n    :type: int\n    '
    speed_min: int = None
    ' Minimum speed for a pixel to be blurred (used to separate background from foreground)\n\n    :type: int\n    '
    use_curved: bool = None
    ' Interpolate between frames in a Bezier curve, rather than linearly\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeViewer(CompositorNode, NodeInternal, Node, bpy_struct):
    center_x: float = None
    ' \n\n    :type: float\n    '
    center_y: float = None
    ' \n\n    :type: float\n    '
    tile_order: typing.Union[str, int] = None
    ' Tile order * ``CENTEROUT`` Center -- Expand from center. * ``RANDOM`` Random -- Random tiles. * ``BOTTOMUP`` Bottom Up -- Expand from bottom. * ``RULE_OF_THIRDS`` Rule of Thirds -- Expand from 9 places.\n\n    :type: typing.Union[str, int]\n    '
    use_alpha: bool = None
    ' Colors are treated alpha premultiplied, or colors output straight (alpha gets set to 1)\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class CompositorNodeZcombine(CompositorNode, NodeInternal, Node, bpy_struct):
    use_alpha: bool = None
    ' Take alpha channel into account when doing the Z operation\n\n    :type: bool\n    '
    use_antialias_z: bool = None
    ' Anti-alias the z-buffer to try to avoid artifacts, mostly useful for Blender renders\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def update(self):
        """ 

        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FunctionNodeAlignEulerToVector(FunctionNode, NodeInternal, Node, bpy_struct):
    axis: typing.Union[str, int] = None
    ' Axis to align to the vector * ``X`` X -- Align the X axis with the vector. * ``Y`` Y -- Align the Y axis with the vector. * ``Z`` Z -- Align the Z axis with the vector.\n\n    :type: typing.Union[str, int]\n    '
    pivot_axis: typing.Union[str, int] = None
    ' Axis to rotate around * ``AUTO`` Auto -- Automatically detect the best rotation axis to rotate towards the vector. * ``X`` X -- Rotate around the local X axis. * ``Y`` Y -- Rotate around the local Y axis. * ``Z`` Z -- Rotate around the local Z axis.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FunctionNodeBooleanMath(FunctionNode, NodeInternal, Node, bpy_struct):
    operation: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FunctionNodeCombineColor(FunctionNode, NodeInternal, Node, bpy_struct):
    mode: typing.Union[str, int] = None
    ' Mode of color processing * ``RGB`` RGB -- Use RGB color processing. * ``HSV`` HSV -- Use HSV color processing. * ``HSL`` HSL -- Use HSL color processing.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FunctionNodeCompare(FunctionNode, NodeInternal, Node, bpy_struct):
    data_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    mode: typing.Union[str, int] = None
    ' * ``ELEMENT`` Element-Wise -- Compare each element of the input vectors. * ``LENGTH`` Length -- Compare the length of the input vectors. * ``AVERAGE`` Average -- Compare the average of the input vectors elements. * ``DOT_PRODUCT`` Dot Product -- Compare the dot products of the input vectors. * ``DIRECTION`` Direction -- Compare the direction of the input vectors.\n\n    :type: typing.Union[str, int]\n    '
    operation: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FunctionNodeFloatToInt(FunctionNode, NodeInternal, Node, bpy_struct):
    rounding_mode: typing.Union[str, int] = None
    ' Method used to convert the float to an integer\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FunctionNodeInputBool(FunctionNode, NodeInternal, Node, bpy_struct):
    boolean: bool = None
    ' Input value used for unconnected socket\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FunctionNodeInputColor(FunctionNode, NodeInternal, Node, bpy_struct):
    color: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float, float, float, float], 'mathutils.Vector']\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FunctionNodeInputInt(FunctionNode, NodeInternal, Node, bpy_struct):
    integer: int = None
    ' Input value used for unconnected socket\n\n    :type: int\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FunctionNodeInputSpecialCharacters(FunctionNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FunctionNodeInputString(FunctionNode, NodeInternal, Node, bpy_struct):
    string: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FunctionNodeInputVector(FunctionNode, NodeInternal, Node, bpy_struct):
    vector: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " \n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FunctionNodeRandomValue(FunctionNode, NodeInternal, Node, bpy_struct):
    data_type: typing.Union[str, int] = None
    ' Type of data stored in attribute\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FunctionNodeReplaceString(FunctionNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FunctionNodeRotateEuler(FunctionNode, NodeInternal, Node, bpy_struct):
    space: typing.Union[str, int] = None
    ' Base orientation for rotation * ``OBJECT`` Object -- Rotate the input rotation in the local space of the object. * ``LOCAL`` Local -- Rotate the input rotation in its local space.\n\n    :type: typing.Union[str, int]\n    '
    type: typing.Union[str, int] = None
    ' Method used to describe the rotation * ``AXIS_ANGLE`` Axis Angle -- Rotate around an axis by an angle. * ``EULER`` Euler -- Rotate around the X, Y, and Z axes.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FunctionNodeSeparateColor(FunctionNode, NodeInternal, Node, bpy_struct):
    mode: typing.Union[str, int] = None
    ' Mode of color processing * ``RGB`` RGB -- Use RGB color processing. * ``HSV`` HSV -- Use HSV color processing. * ``HSL`` HSL -- Use HSL color processing.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FunctionNodeSliceString(FunctionNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FunctionNodeStringLength(FunctionNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class FunctionNodeValueToString(FunctionNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeAccumulateField(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Add the values of an evaluated field together and output the running total for each element
    """
    data_type: typing.Union[str, int] = None
    ' Type of data stored in attribute\n\n    :type: typing.Union[str, int]\n    '
    domain: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeAttributeDomainSize(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve the number of elements in a geometry for each attribute domain
    """
    component: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeAttributeStatistic(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Calculate statistics about a data set from a field evaluated on a geometry
    """
    data_type: typing.Union[str, int] = None
    ' The data type the attribute is converted to before calculating the results\n\n    :type: typing.Union[str, int]\n    '
    domain: typing.Union[str, int] = None
    ' Which domain to read the data from\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeBlurAttribute(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Mix attribute values of neighboring elements
    """
    data_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeBoundBox(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Calculate the limits of a geometry's positions and generate a box mesh with those dimensions
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeCaptureAttribute(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Store the result of a field on a geometry and output the data as a node socket. Allows remembering or interpolating data as the geometry changes, such as positions before deformation
    """
    data_type: typing.Union[str, int] = None
    ' Type of data stored in attribute\n\n    :type: typing.Union[str, int]\n    '
    domain: typing.Union[str, int] = None
    ' Which domain to store the data in\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeCollectionInfo(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve geometry instances from a collection
    """
    transform_space: typing.Union[str, int] = None
    ' The transformation of the instances output. Does not affect the internal geometry * ``ORIGINAL`` Original -- Output the geometry relative to the collection offset. * ``RELATIVE`` Relative -- Bring the input collection geometry into the modified object, maintaining the relative position between the objects in the scene.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeConvexHull(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Create a mesh that encloses all points in the input geometry with the smallest number of points
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeCornersOfFace(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve corners that make up a face
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeCornersOfVertex(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve face corners connected to vertices
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeCurveArc(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a poly spline arc
    """
    mode: typing.Union[str, int] = None
    ' Method used to determine radius and placement * ``POINTS`` Points -- Define arc by 3 points on circle. Arc is calculated between start and end points. * ``RADIUS`` Radius -- Define radius with a float.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeCurveEndpointSelection(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Provide a selection for an arbitrary number of endpoints in each spline
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeCurveHandleTypeSelection(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Provide a selection based on the handle types of Bézier control points
    """
    handle_type: typing.Union[str, int] = None
    " * ``FREE`` Free -- The handle can be moved anywhere, and doesn't influence the point's other handle. * ``AUTO`` Auto -- The location is automatically calculated to be smooth. * ``VECTOR`` Vector -- The location is calculated to point to the next/previous control point. * ``ALIGN`` Align -- The location is constrained to point in the opposite direction as the other handle.\n\n    :type: typing.Union[str, int]\n    "
    mode: typing.Union[typing.Set[str], typing.Set[int]] = None
    ' Whether to check the type of left and right handles * ``LEFT`` Left -- Use the left handles. * ``RIGHT`` Right -- Use the right handles.\n\n    :type: typing.Union[typing.Set[str], typing.Set[int]]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeCurveLength(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve the length of all splines added together
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeCurveOfPoint(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve the curve a control point is part of
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeCurvePrimitiveBezierSegment(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a 2D Bézier spline from the given control points and handles
    """
    mode: typing.Union[str, int] = None
    " Method used to determine control handles * ``POSITION`` Position -- The start and end handles are fixed positions. * ``OFFSET`` Offset -- The start and end handles are offsets from the spline's control points.\n\n    :type: typing.Union[str, int]\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeCurvePrimitiveCircle(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a poly spline circle
    """
    mode: typing.Union[str, int] = None
    ' Method used to determine radius and placement * ``POINTS`` Points -- Define the radius and location with three points. * ``RADIUS`` Radius -- Define the radius with a float.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeCurvePrimitiveLine(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a poly spline line with two points
    """
    mode: typing.Union[str, int] = None
    ' Method used to determine radius and placement * ``POINTS`` Points -- Define the start and end points of the line. * ``DIRECTION`` Direction -- Define a line with a start point, direction and length.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeCurvePrimitiveQuadrilateral(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a polygon with four points
    """
    mode: typing.Union[str, int] = None
    ' * ``RECTANGLE`` Rectangle -- Create a rectangle. * ``PARALLELOGRAM`` Parallelogram -- Create a parallelogram. * ``TRAPEZOID`` Trapezoid -- Create a trapezoid. * ``KITE`` Kite -- Create a Kite / Dart. * ``POINTS`` Points -- Create a quadrilateral from four points.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeCurveQuadraticBezier(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a poly spline in a parabola shape with control points positions
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeCurveSetHandles(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Set the handle type for the control points of a Bézier curve
    """
    handle_type: typing.Union[str, int] = None
    " * ``FREE`` Free -- The handle can be moved anywhere, and doesn't influence the point's other handle. * ``AUTO`` Auto -- The location is automatically calculated to be smooth. * ``VECTOR`` Vector -- The location is calculated to point to the next/previous control point. * ``ALIGN`` Align -- The location is constrained to point in the opposite direction as the other handle.\n\n    :type: typing.Union[str, int]\n    "
    mode: typing.Union[typing.Set[str], typing.Set[int]] = None
    ' Whether to update left and right handles * ``LEFT`` Left -- Use the left handles. * ``RIGHT`` Right -- Use the right handles.\n\n    :type: typing.Union[typing.Set[str], typing.Set[int]]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeCurveSpiral(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a poly spline in a spiral shape
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeCurveSplineType(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Change the type of curves
    """
    spline_type: typing.Union[str, int] = None
    ' The curve type to change the selected curves to\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeCurveStar(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a poly spline in a star pattern by connecting alternating points of two circles
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeCurveToMesh(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Convert curves into a mesh, optionally with a custom profile shape defined by curves
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeCurveToPoints(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a point cloud by sampling positions along curves
    """
    mode: typing.Union[str, int] = None
    " How to generate points from the input curve * ``EVALUATED`` Evaluated -- Create points from the curve's evaluated points, based on the resolution attribute for NURBS and Bezier splines. * ``COUNT`` Count -- Sample each spline by evenly distributing the specified number of points. * ``LENGTH`` Length -- Sample each spline by splitting it into segments with the specified length.\n\n    :type: typing.Union[str, int]\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeCustomGroup(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Custom Geometry Group Node for Python nodes
    """
    node_tree: 'NodeTree' = None
    " \n\n    :type: 'NodeTree'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeDeformCurvesOnSurface(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Translate and rotate curves based on changes between the object's original and evaluated surface mesh
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeDeleteGeometry(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Remove selected elements of a geometry
    """
    domain: typing.Union[str, int] = None
    ' Which domain to delete in\n\n    :type: typing.Union[str, int]\n    '
    mode: typing.Union[str, int] = None
    ' Which parts of the mesh component to delete\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeDistributePointsInVolume(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate points inside a volume
    """
    mode: typing.Union[str, int] = None
    ' Method to use for scattering points * ``DENSITY_RANDOM`` Random -- Distribute points randomly inside of the volume. * ``DENSITY_GRID`` Grid -- Distribute the points in a grid pattern inside of the volume.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeDistributePointsOnFaces(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate points spread out on the surface of a mesh
    """
    distribute_method: typing.Union[str, int] = None
    ' Method to use for scattering points * ``RANDOM`` Random -- Distribute points randomly on the surface. * ``POISSON`` Poisson Disk -- Distribute the points randomly on the surface while taking a minimum distance between points into account.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeDualMesh(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Convert Faces into vertices and vertices into faces
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeDuplicateElements(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate an arbitrary number copies of each selected input element
    """
    domain: typing.Union[str, int] = None
    ' Which domain to duplicate\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeEdgePathsToCurves(GeometryNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeEdgePathsToSelection(GeometryNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeEdgesOfCorner(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve the edges on both sides of a face corner
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeEdgesOfVertex(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve the edges connected to each vertex
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeExtrudeMesh(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate new vertices, edges, or faces from selected elements and move them based on an offset while keeping them connected by their boundary
    """
    mode: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeFaceOfCorner(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve the face each face corner is part of
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeFieldAtIndex(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve data of other elements in the context's geometry
    """
    data_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    domain: typing.Union[str, int] = None
    ' Domain the field is evaluated in\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeFieldOnDomain(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve values from a field on a different domain besides the domain from the context
    """
    data_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    domain: typing.Union[str, int] = None
    ' Domain the field is evaluated in\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeFillCurve(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a mesh on the XY plane with faces on the inside of input curves
    """
    mode: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeFilletCurve(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Round corners by generating circular arcs on each control point
    """
    mode: typing.Union[str, int] = None
    ' How to choose number of vertices on fillet * ``BEZIER`` Bezier -- Align Bezier handles to create circular arcs at each control point. * ``POLY`` Poly -- Add control points along a circular arc (handle type is vector if Bezier Spline).\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeFlipFaces(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Reverse the order of the vertices and edges of selected faces, flipping their normal direction
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeGeometryToInstance(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Convert each input geometry into an instance, which can be much faster than the Join Geometry node when the inputs are large
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeGroup(GeometryNode, NodeInternal, Node, bpy_struct):
    node_tree: 'NodeTree' = None
    " \n\n    :type: 'NodeTree'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeImageInfo(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve information about an image
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeImageTexture(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Sample values from an image texture
    """
    extension: typing.Union[str, int] = None
    ' How the image is extrapolated past its original bounds * ``REPEAT`` Repeat -- Cause the image to repeat horizontally and vertically. * ``EXTEND`` Extend -- Extend by repeating edge pixels of the image. * ``CLIP`` Clip -- Clip to image size and set exterior pixels as transparent. * ``MIRROR`` Mirror -- Repeatedly flip the image horizontally and vertically.\n\n    :type: typing.Union[str, int]\n    '
    interpolation: typing.Union[str, int] = None
    ' Method for smoothing values between pixels * ``Linear`` Linear -- Linear interpolation. * ``Closest`` Closest -- No interpolation (sample closest texel). * ``Cubic`` Cubic -- Cubic interpolation.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputCurveHandlePositions(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve the position of each Bézier control point's handles
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputCurveTilt(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve the angle at each control point used to twist the curve's normal around its tangent
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputID(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve a stable random identifier value from the "id" attribute on the point domain, or the index if the attribute does not exist
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputImage(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Input image
    """
    image: 'Image' = None
    " \n\n    :type: 'Image'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputIndex(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve an integer value indicating the position of each element in the list, starting at zero
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputInstanceRotation(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve the rotation of each instance in the geometry
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputInstanceScale(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve the scale of each instance in the geometry
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputMaterial(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Output a single material
    """
    material: 'Material' = None
    " \n\n    :type: 'Material'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputMaterialIndex(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve the index of the material used for each element in the geometry's list of materials
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputMeshEdgeAngle(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Calculate the surface area of each face in a mesh
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputMeshEdgeNeighbors(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve the number of faces that use each edge as one of their sides
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputMeshEdgeVertices(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve topology information relating to each edge of a mesh
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputMeshFaceArea(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Calculate the surface area of a mesh's faces
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputMeshFaceIsPlanar(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve whether all triangles in a face are on the same plane, i.e. whether have the same normal
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputMeshFaceNeighbors(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve topology information relating to each face of a mesh
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputMeshIsland(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve information about separate connected regions in a mesh
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputMeshVertexNeighbors(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve topology information relating to each vertex of a mesh
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputNamedAttribute(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve the data of a specified attribute
    """
    data_type: typing.Union[str, int] = None
    ' The data type used to read the attribute values\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputNormal(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve a unit length vector indicating the direction pointing away from the geometry at each element
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputPosition(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve a vector indicating the location of each element
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputRadius(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve the radius at each point on curve or point cloud geometry
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputSceneTime(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve the current time in the scene's animation in units of seconds or frames
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputShadeSmooth(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve whether each face is marked for smooth shading
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputShortestEdgePaths(GeometryNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputSplineCyclic(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve whether each spline endpoint connects to the beginning
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputSplineResolution(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve the number of evaluated points that will be generated for every control point on curves
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInputTangent(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve the direction of curves at each control point
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInstanceOnPoints(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a reference to geometry at each of the input points, without duplicating its underlying data
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeInstancesToPoints(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate points at the origins of instances. Note: Nested instances are not affected by this node
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeIsViewport(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve whether the nodes are being evaluated for the viewport rather than the final render
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeJoinGeometry(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Merge separately generated geometries into a single one
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeMaterialSelection(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Provide a selection of faces that use the specified material
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeMergeByDistance(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Merge vertices or points within a given distance
    """
    mode: typing.Union[str, int] = None
    ' * ``ALL`` All -- Merge all close selected points, whether or not they are connected. * ``CONNECTED`` Connected -- Only merge mesh vertices along existing edges. This method can be much faster.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeMeshBoolean(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Cut, subtract, or join multiple mesh inputs
    """
    operation: typing.Union[str, int] = None
    ' * ``INTERSECT`` Intersect -- Keep the part of the mesh that is common between all operands. * ``UNION`` Union -- Combine meshes in an additive way. * ``DIFFERENCE`` Difference -- Combine meshes in a subtractive way.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeMeshCircle(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a circular ring of edges
    """
    fill_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeMeshCone(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a cone mesh
    """
    fill_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeMeshCube(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a cuboid mesh with variable side lengths and subdivisions
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeMeshCylinder(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a cylinder mesh
    """
    fill_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeMeshFaceSetBoundaries(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Find edges on the boundaries between face sets
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeMeshGrid(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a planar mesh on the XY plane
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeMeshIcoSphere(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a spherical mesh that consists of equally sized triangles
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeMeshLine(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate vertices in a line and connect them with edges
    """
    count_mode: typing.Union[str, int] = None
    ' * ``TOTAL`` Count -- Specify the total number of vertices. * ``RESOLUTION`` Resolution -- Specify the distance between vertices.\n\n    :type: typing.Union[str, int]\n    '
    mode: typing.Union[str, int] = None
    " * ``OFFSET`` Offset -- Specify the offset from one vertex to the next. * ``END_POINTS`` End Points -- Specify the line's start and end points.\n\n    :type: typing.Union[str, int]\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeMeshToCurve(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a curve from a mesh
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeMeshToPoints(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a point cloud from a mesh's vertices
    """
    mode: typing.Union[str, int] = None
    ' * ``VERTICES`` Vertices -- Create a point in the point cloud for each selected vertex. * ``EDGES`` Edges -- Create a point in the point cloud for each selected edge. * ``FACES`` Faces -- Create a point in the point cloud for each selected face. * ``CORNERS`` Corners -- Create a point in the point cloud for each selected face corner.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeMeshToVolume(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Create a fog volume with the shape of the input mesh's surface
    """
    resolution_mode: typing.Union[str, int] = None
    ' How the voxel size is specified * ``VOXEL_AMOUNT`` Amount -- Desired number of voxels along one axis. * ``VOXEL_SIZE`` Size -- Desired voxel side length.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeMeshUVSphere(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a spherical mesh with quads, except for triangles at the top and bottom
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeObjectInfo(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve information from an object
    """
    transform_space: typing.Union[str, int] = None
    ' The transformation of the vector and geometry outputs * ``ORIGINAL`` Original -- Output the geometry relative to the input object transform, and the location, rotation and scale relative to the world origin. * ``RELATIVE`` Relative -- Bring the input object geometry, location, rotation and scale into the modified object, maintaining the relative position between the two objects in the scene.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeOffsetCornerInFace(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve corners in the same face as another
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeOffsetPointInCurve(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Offset a control point index within its curve
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodePoints(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a point cloud with positions and radii defined by fields
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodePointsOfCurve(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve a point index within a curve
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodePointsToVertices(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a mesh vertex for each point cloud point
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodePointsToVolume(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a fog volume sphere around every point
    """
    resolution_mode: typing.Union[str, int] = None
    ' How the voxel size is specified * ``VOXEL_AMOUNT`` Amount -- Specify the approximate number of voxels along the diagonal. * ``VOXEL_SIZE`` Size -- Specify the voxel side length.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeProximity(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Compute the closest location on the target geometry
    """
    target_element: typing.Union[str, int] = None
    " Element of the target geometry to calculate the distance from * ``POINTS`` Points -- Calculate the proximity to the target's points (faster than the other modes). * ``EDGES`` Edges -- Calculate the proximity to the target's edges. * ``FACES`` Faces -- Calculate the proximity to the target's faces.\n\n    :type: typing.Union[str, int]\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeRaycast(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Cast rays from the context geometry onto a target geometry, and retrieve information from each hit point
    """
    data_type: typing.Union[str, int] = None
    ' Type of data stored in attribute\n\n    :type: typing.Union[str, int]\n    '
    mapping: typing.Union[str, int] = None
    ' Mapping from the target geometry to hit points * ``INTERPOLATED`` Interpolated -- Interpolate the attribute from the corners of the hit face. * ``NEAREST`` Nearest -- Use the attribute value of the closest mesh element.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeRealizeInstances(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Change the direction of the curve by swapping each spline's start and end data
    """
    legacy_behavior: bool = None
    ' Behave like before instance attributes existed\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeRemoveAttribute(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Delete an attribute with a specified name from a geometry. Typically used to optimize performance
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeReplaceMaterial(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Swap one material with another
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeResampleCurve(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a poly spline for each input spline
    """
    mode: typing.Union[str, int] = None
    " How to specify the amount of samples * ``EVALUATED`` Evaluated -- Output the input spline's evaluated points, based on the resolution attribute for NURBS and Bezier splines. Poly splines are unchanged. * ``COUNT`` Count -- Sample the specified number of points along each spline. * ``LENGTH`` Length -- Calculate the number of samples by splitting each spline into segments with the specified length.\n\n    :type: typing.Union[str, int]\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeReverseCurve(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Swap the start and end of splines
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeRotateInstances(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Rotate geometry instances in local or global space
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSampleCurve(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve data from a point on a curve at a certain distance from its start
    """
    data_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    mode: typing.Union[str, int] = None
    ' Method for sampling input * ``FACTOR`` Factor -- Find sample positions on the curve using a factor of its total length. * ``LENGTH`` Length -- Find sample positions on the curve using a distance from its beginning.\n\n    :type: typing.Union[str, int]\n    '
    use_all_curves: bool = None
    ' Sample lengths based on the total length of all curves, rather than using a length inside each selected curve\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSampleIndex(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve values from specific geometry elements
    """
    clamp: bool = None
    ' Clamp the indices to the size of the attribute domain instead of outputting a default value for invalid indices\n\n    :type: bool\n    '
    data_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    domain: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSampleNearest(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Find the element of a geometry closest to a position
    """
    domain: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSampleNearestSurface(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Calculate the interpolated value of a mesh attribute on the closest point of its surface
    """
    data_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSampleUVSurface(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Calculate the interpolated values of a mesh attribute at a UV coordinate
    """
    data_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeScaleElements(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Scale groups of connected edges and faces
    """
    domain: typing.Union[str, int] = None
    ' Element type to transform * ``FACE`` Face -- Scale individual faces or neighboring face islands. * ``EDGE`` Edge -- Scale individual edges or neighboring edge islands.\n\n    :type: typing.Union[str, int]\n    '
    scale_mode: typing.Union[str, int] = None
    ' * ``UNIFORM`` Uniform -- Scale elements by the same factor in every direction. * ``SINGLE_AXIS`` Single Axis -- Scale elements in a single direction.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeScaleInstances(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Scale geometry instances in local or global space
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSelfObject(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve the object that contains the geometry nodes modifier currently being executed
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSeparateComponents(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Split a geometry into a separate output for each type of data in the geometry
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSeparateGeometry(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Split a geometry into two geometry outputs based on a selection
    """
    domain: typing.Union[str, int] = None
    ' Which domain to separate on\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSetCurveHandlePositions(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Set the positions for the handles of Bézier curves
    """
    mode: typing.Union[str, int] = None
    ' Whether to update left and right handles * ``LEFT`` Left -- Use the left handles. * ``RIGHT`` Right -- Use the right handles.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSetCurveNormal(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Set the evaluation mode for curve normals
    """
    mode: typing.Union[str, int] = None
    ' Mode for curve normal evaluation\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSetCurveRadius(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Set the radius of the curve at each control point
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSetCurveTilt(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Set the tilt angle at each curve control point
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSetID(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Set the id attribute on the input geometry, mainly used internally for randomizing
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSetMaterial(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Assign a material to geometry elements
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSetMaterialIndex(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Set the material index for each selected geometry element
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSetPointRadius(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Set the display size of point cloud points
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSetPosition(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Set the location of each point
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSetShadeSmooth(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Control the smoothness of mesh normals around each face by changing the "shade smooth" attribute
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSetSplineCyclic(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Control whether each spline loops back on itself by changing the "cyclic" attribute
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSetSplineResolution(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Control how many evaluated points should be generated on every curve segment
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSplineLength(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve the total length of each spline, as a distance or as a number of points
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSplineParameter(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve how far along each spline a control point is
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSplitEdges(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Duplicate mesh edges and break connections with the surrounding faces
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeStoreNamedAttribute(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Store the result of a field on a geometry as an attribute with the specified name
    """
    data_type: typing.Union[str, int] = None
    ' Type of data stored in attribute\n\n    :type: typing.Union[str, int]\n    '
    domain: typing.Union[str, int] = None
    ' Which domain to store the data in\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeStringJoin(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Combine any number of input strings
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeStringToCurves(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a paragraph of text with a specific font, using a curve instance to store each character
    """
    align_x: typing.Union[str, int] = None
    ' * ``LEFT`` Left -- Align text to the left. * ``CENTER`` Center -- Align text to the center. * ``RIGHT`` Right -- Align text to the right. * ``JUSTIFY`` Justify -- Align text to the left and the right. * ``FLUSH`` Flush -- Align text to the left and the right, with equal character spacing.\n\n    :type: typing.Union[str, int]\n    '
    align_y: typing.Union[str, int] = None
    ' * ``TOP_BASELINE`` Top Baseline -- Align text to the top baseline. * ``TOP`` Top -- Align text to the top. * ``MIDDLE`` Middle -- Align text to the middle. * ``BOTTOM_BASELINE`` Bottom Baseline -- Align text to the bottom baseline. * ``BOTTOM`` Bottom -- Align text to the bottom.\n\n    :type: typing.Union[str, int]\n    '
    font: 'VectorFont' = None
    " Font of the text. Falls back to the UI font by default\n\n    :type: 'VectorFont'\n    "
    overflow: typing.Union[str, int] = None
    ' * ``OVERFLOW`` Overflow -- Let the text use more space than the specified height. * ``SCALE_TO_FIT`` Scale To Fit -- Scale the text size to fit inside the width and height. * ``TRUNCATE`` Truncate -- Only output curves that fit within the width and height. Output the remainder to the "Remainder" output.\n\n    :type: typing.Union[str, int]\n    '
    pivot_mode: typing.Union[str, int] = None
    ' Pivot point position relative to character * ``MIDPOINT`` Midpoint -- Midpoint. * ``TOP_LEFT`` Top Left -- Top Left. * ``TOP_CENTER`` Top Center -- Top Center. * ``TOP_RIGHT`` Top Right -- Top Right. * ``BOTTOM_LEFT`` Bottom Left -- Bottom Left. * ``BOTTOM_CENTER`` Bottom Center -- Bottom Center. * ``BOTTOM_RIGHT`` Bottom Right -- Bottom Right.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSubdivideCurve(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Dividing each curve segment into a specified number of pieces
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSubdivideMesh(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Divide mesh faces into smaller ones without changing the shape or volume, using linear interpolation to place the new vertices
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSubdivisionSurface(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Divide mesh faces to form a smooth surface, using the Catmull-Clark subdivision method
    """
    boundary_smooth: typing.Union[str, int] = None
    ' Controls how open boundaries are smoothed\n\n    :type: typing.Union[str, int]\n    '
    uv_smooth: typing.Union[str, int] = None
    ' Controls how smoothing is applied to UVs\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeSwitch(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Switch between two inputs
    """
    input_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeTransform(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Translate, rotate or scale the geometry
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeTranslateInstances(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Move top-level geometry instances in local or global space
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeTriangulate(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Convert all faces in a mesh to triangular faces
    """
    ngon_method: typing.Union[str, int] = None
    ' Method for splitting the n-gons into triangles * ``BEAUTY`` Beauty -- Arrange the new triangles evenly (slow). * ``CLIP`` Clip -- Split the polygons with an ear clipping algorithm.\n\n    :type: typing.Union[str, int]\n    '
    quad_method: typing.Union[str, int] = None
    ' Method for splitting the quads into triangles * ``BEAUTY`` Beauty -- Split the quads in nice triangles, slower method. * ``FIXED`` Fixed -- Split the quads on the first and third vertices. * ``FIXED_ALTERNATE`` Fixed Alternate -- Split the quads on the 2nd and 4th vertices. * ``SHORTEST_DIAGONAL`` Shortest Diagonal -- Split the quads along their shortest diagonal. * ``LONGEST_DIAGONAL`` Longest Diagonal -- Split the quads along their longest diagonal.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeTrimCurve(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Shorten curves by removing portions at the start or end
    """
    mode: typing.Union[str, int] = None
    " How to find endpoint positions for the trimmed spline * ``FACTOR`` Factor -- Find the endpoint positions using a factor of each spline's length. * ``LENGTH`` Length -- Find the endpoint positions using a length from the start of each spline.\n\n    :type: typing.Union[str, int]\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeUVPackIslands(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Scale islands of a UV map and move them so they fill the UV space as much as possible
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeUVUnwrap(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a UV map based on seam edges
    """
    method: typing.Union[str, int] = None
    ' * ``ANGLE_BASED`` Angle Based -- This method gives a good 2D representation of a mesh. * ``CONFORMAL`` Conformal -- Uses LSCM (Least Squares Conformal Mapping). This usually gives a less accurate UV mapping than Angle Based, but works better for simpler objects.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeVertexOfCorner(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Retrieve the vertex each face corner is attached to
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeViewer(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Display the input data in the Spreadsheet Editor
    """
    data_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    domain: typing.Union[str, int] = None
    ' Domain to evaluate the field on\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeVolumeCube(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a dense volume with a field that controls the density at each grid voxel based on its position
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class GeometryNodeVolumeToMesh(GeometryNode, NodeInternal, Node, bpy_struct):
    """ Generate a mesh on the "surface" of a volume
    """
    resolution_mode: typing.Union[str, int] = None
    ' How the voxel size is specified * ``GRID`` Grid -- Use resolution of the volume grid. * ``VOXEL_AMOUNT`` Amount -- Desired number of voxels along one axis. * ``VOXEL_SIZE`` Size -- Desired voxel side length.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeAddShader(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Add two Shaders together
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeAmbientOcclusion(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Compute how much the hemisphere above the shading point is occluded, for example to add weathering effects to corners. Note: For Cycles, this may slow down renders significantly
    """
    inside: bool = None
    ' Trace rays towards the inside of the object\n\n    :type: bool\n    '
    only_local: bool = None
    ' Only consider the object itself when computing AO\n\n    :type: bool\n    '
    samples: int = None
    ' Number of rays to trace per shader evaluation\n\n    :type: int\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeAttribute(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Retrieve attributes attached to objects or geometry
    """
    attribute_name: str = None
    ' \n\n    :type: str\n    '
    attribute_type: typing.Union[str, int] = None
    " General type of the attribute * ``GEOMETRY`` Geometry -- The attribute is associated with the object geometry, and its value varies from vertex to vertex, or within the object volume. * ``OBJECT`` Object -- The attribute is associated with the object or mesh data-block itself, and its value is uniform. * ``INSTANCER`` Instancer -- The attribute is associated with the instancer particle system or object, falling back to the Object mode if the attribute isn't found, or the object is not instanced. * ``VIEW_LAYER`` View Layer -- The attribute is associated with the View Layer, Scene or World that is being rendered.\n\n    :type: typing.Union[str, int]\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeBackground(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Add background light emission. Note: This node should only be used for the world surface output
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeBevel(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Generates normals with round corners. Note: only supported in Cycles, and may slow down renders
    """
    samples: int = None
    ' Number of rays to trace per shader evaluation\n\n    :type: int\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeBlackbody(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Convert a blackbody temperature to an RGB value
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeBrightContrast(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Control the brightness and contrast of the input color
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeBsdfAnisotropic(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Glossy reflection with separate control over U and V direction roughness
    """
    distribution: typing.Union[str, int] = None
    ' Light scattering distribution on rough surface * ``BECKMANN`` Beckmann. * ``GGX`` GGX. * ``MULTI_GGX`` Multiscatter GGX -- Slower than GGX but gives a more energy conserving results, which would otherwise be visible as excessive darkening. * ``ASHIKHMIN_SHIRLEY`` Ashikhmin-Shirley.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeBsdfDiffuse(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Lambertian and Oren-Nayar diffuse reflection
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeBsdfGlass(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Glass-like shader mixing refraction and reflection at grazing angles
    """
    distribution: typing.Union[str, int] = None
    ' Light scattering distribution on rough surface * ``SHARP`` Sharp -- Results in perfectly sharp reflections like a mirror. The Roughness value is not used. * ``BECKMANN`` Beckmann. * ``GGX`` GGX. * ``MULTI_GGX`` Multiscatter GGX -- Slower than GGX but gives a more energy conserving results, which would otherwise be visible as excessive darkening.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeBsdfGlossy(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Reflection with microfacet distribution, used for materials such as metal or mirrors
    """
    distribution: typing.Union[str, int] = None
    ' Light scattering distribution on rough surface * ``SHARP`` Sharp -- Results in perfectly sharp reflections like a mirror. The Roughness value is not used. * ``BECKMANN`` Beckmann. * ``GGX`` GGX. * ``ASHIKHMIN_SHIRLEY`` Ashikhmin-Shirley. * ``MULTI_GGX`` Multiscatter GGX -- Slower than GGX but gives a more energy conserving results, which would otherwise be visible as excessive darkening.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeBsdfHair(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Reflection and transmission shaders optimized for hair rendering
    """
    component: typing.Union[str, int] = None
    ' Hair BSDF component to use * ``Reflection`` Reflection -- The light that bounces off the surface of the hair. * ``Transmission`` Transmission -- The light that passes through the hair and exits on the other side.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeBsdfHairPrincipled(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Physically-based, easy-to-use shader for rendering hair and fur
    """
    parametrization: typing.Union[str, int] = None
    ' Select the shader\'s color parametrization * ``ABSORPTION`` Absorption Coefficient -- Directly set the absorption coefficient "sigma_a" (this is not the most intuitive way to color hair). * ``MELANIN`` Melanin Concentration -- Define the melanin concentrations below to get the most realistic-looking hair (you can get the concentrations for different types of hair online). * ``COLOR`` Direct Coloring -- Choose the color of your preference, and the shader will approximate the absorption coefficient to render lookalike hair.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeBsdfPrincipled(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Physically-based, easy-to-use shader for rendering surface materials, based on the Disney principled model also known as the "PBR" shader
    """
    distribution: typing.Union[str, int] = None
    ' Light scattering distribution on rough surface * ``GGX`` GGX. * ``MULTI_GGX`` Multiscatter GGX -- Slower than GGX but gives a more energy conserving results, which would otherwise be visible as excessive darkening.\n\n    :type: typing.Union[str, int]\n    '
    subsurface_method: typing.Union[str, int] = None
    ' Method for rendering subsurface scattering * ``BURLEY`` Christensen-Burley -- Approximation to physically based volume scattering. * ``RANDOM_WALK_FIXED_RADIUS`` Random Walk (Fixed Radius) -- Volumetric approximation to physically based volume scattering, using the scattering radius as specified. * ``RANDOM_WALK`` Random Walk -- Volumetric approximation to physically based volume scattering, with scattering radius automatically adjusted to match color textures.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeBsdfRefraction(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Glossy refraction with sharp or microfacet distribution, typically used for materials that transmit light
    """
    distribution: typing.Union[str, int] = None
    ' Light scattering distribution on rough surface * ``SHARP`` Sharp -- Results in perfectly sharp reflections like a mirror. The Roughness value is not used. * ``BECKMANN`` Beckmann. * ``GGX`` GGX.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeBsdfToon(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Diffuse and Glossy shaders with cartoon light effects
    """
    component: typing.Union[str, int] = None
    ' Toon BSDF component to use * ``DIFFUSE`` Diffuse -- Use diffuse BSDF. * ``GLOSSY`` Glossy -- Use glossy BSDF.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeBsdfTranslucent(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Lambertian diffuse transmission
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeBsdfTransparent(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Transparency without refraction, passing straight through the surface as if there were no geometry
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeBsdfVelvet(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Reflection for materials such as cloth. Typically mixed with other shaders (such as a Diffuse Shader) and is not particularly useful on its own
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeBump(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Generate a perturbed normal from a height texture for bump mapping. Typically used for faking highly detailed surfaces
    """
    invert: bool = None
    ' Invert the bump mapping direction to push into the surface instead of out\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeCameraData(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Retrieve information about the camera and how it relates to the current shading point's position
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeClamp(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Clamp a value between a minimum and a maximum
    """
    clamp_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeCombineColor(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Create a color from individual components using multiple models
    """
    mode: typing.Union[str, int] = None
    ' Mode of color processing * ``RGB`` RGB -- Use RGB color processing. * ``HSV`` HSV -- Use HSV color processing. * ``HSL`` HSL -- Use HSL color processing.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeCombineHSV(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Create a color from its hue, saturation, and value channels
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeCombineRGB(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Generate a color from its red, green, and blue channels (Deprecated)
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeCombineXYZ(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Create a vector from X, Y, and Z components
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeCustomGroup(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Custom Shader Group Node for Python nodes
    """
    node_tree: 'NodeTree' = None
    " \n\n    :type: 'NodeTree'\n    "

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeDisplacement(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Displace the surface along the surface normal
    """
    space: typing.Union[str, int] = None
    ' Space of the input height * ``OBJECT`` Object Space -- Displacement is in object space, affected by object scale. * ``WORLD`` World Space -- Displacement is in world space, not affected by object scale.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeEeveeSpecular(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Similar to the Principled BSDF node but uses the specular workflow instead of metallic, which functions by specifying the facing (along normal) reflection color. Energy is not conserved, so the result may not be physically accurate
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeEmission(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Lambertian emission shader
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeFloatCurve(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Map an input float to a curve and outputs a float value
    """
    mapping: 'CurveMapping' = None
    " \n\n    :type: 'CurveMapping'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeFresnel(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Produce a blending factor depending on the angle between the surface normal and the view direction using Fresnel equations. Typically used for mixing reflections at grazing angles
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeGamma(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Apply a gamma correction
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeGroup(ShaderNode, NodeInternal, Node, bpy_struct):
    node_tree: 'NodeTree' = None
    " \n\n    :type: 'NodeTree'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeHairInfo(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Retrieve hair curve information
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeHoldout(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Create a "hole" in the image with zero alpha transparency, which is useful for compositing. Note: the holdout shader can only create alpha when transparency is enabled in the film settings
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeHueSaturation(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Apply a color transformation in the HSV color model
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeInvert(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Invert a color, producing a negative
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeLayerWeight(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Produce a blending factor depending on the angle between the surface normal and the view direction. Typically used for layering shaders with the Mix Shader node
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeLightFalloff(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Manipulate how light intensity decreases over distance. Typically used for non-physically-based effects; in reality light always falls off quadratically
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeLightPath(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Retrieve the type of incoming ray for which the shader is being executed. Typically used for non-physically-based tricks
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeMapRange(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Remap a value from a range to a target range
    """
    clamp: bool = None
    ' Clamp the result to the target range [To Min, To Max]\n\n    :type: bool\n    '
    data_type: typing.Union[str, int] = None
    ' * ``FLOAT`` Float -- Floating-point value. * ``FLOAT_VECTOR`` Vector -- 3D vector with floating-point values.\n\n    :type: typing.Union[str, int]\n    '
    interpolation_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeMapping(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Transform the input vector by applying translation, rotation, and scale
    """
    vector_type: typing.Union[str, int] = None
    ' Type of vector that the mapping transforms\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeMath(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Perform math operations
    """
    operation: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    use_clamp: bool = None
    ' Clamp result of the node to 0.0 to 1.0 range\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeMix(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Mix values by a factor
    """
    blend_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    clamp_factor: bool = None
    ' Clamp the factor to [0,1] range\n\n    :type: bool\n    '
    clamp_result: bool = None
    ' Clamp the result to [0,1] range\n\n    :type: bool\n    '
    data_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    factor_mode: typing.Union[str, int] = None
    ' * ``UNIFORM`` Uniform -- Use a single factor for all components. * ``NON_UNIFORM`` Non-Uniform -- Per component factor.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeMixRGB(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Mix two input colors
    """
    blend_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    use_alpha: bool = None
    ' Include alpha of second input in this operation\n\n    :type: bool\n    '
    use_clamp: bool = None
    ' Clamp result of the node to 0.0 to 1.0 range\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeMixShader(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Mix two shaders together. Typically used for material layering
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeNewGeometry(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Retrieve geometric information about the current shading point
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeNormal(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Generate a normal vector and a dot product
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeNormalMap(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Generate a perturbed normal from an RGB normal map image. Typically used for faking highly detailed surfaces
    """
    space: typing.Union[str, int] = None
    ' Space of the input normal * ``TANGENT`` Tangent Space -- Tangent space normal mapping. * ``OBJECT`` Object Space -- Object space normal mapping. * ``WORLD`` World Space -- World space normal mapping. * ``BLENDER_OBJECT`` Blender Object Space -- Object space normal mapping, compatible with Blender render baking. * ``BLENDER_WORLD`` Blender World Space -- World space normal mapping, compatible with Blender render baking.\n\n    :type: typing.Union[str, int]\n    '
    uv_map: str = None
    ' UV Map for tangent space maps\n\n    :type: str\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeObjectInfo(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Retrieve information about the object instance
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeOutputAOV(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Arbitrary Output Variables. Provide custom render passes for arbitrary shader node outputs
    """
    name: str = None
    ' Name of the AOV that this output writes to\n\n    :type: str\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeOutputLight(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Output light information to a light object
    """
    is_active_output: bool = None
    ' True if this node is used as the active output\n\n    :type: bool\n    '
    target: typing.Union[str, int] = None
    ' Which renderer and viewport shading types to use the shaders for * ``ALL`` All -- Use shaders for all renderers and viewports, unless there exists a more specific output. * ``EEVEE`` Eevee -- Use shaders for Eevee renderer. * ``CYCLES`` Cycles -- Use shaders for Cycles renderer.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeOutputLineStyle(ShaderNode, NodeInternal, Node, bpy_struct):
    blend_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    is_active_output: bool = None
    ' True if this node is used as the active output\n\n    :type: bool\n    '
    target: typing.Union[str, int] = None
    ' Which renderer and viewport shading types to use the shaders for * ``ALL`` All -- Use shaders for all renderers and viewports, unless there exists a more specific output. * ``EEVEE`` Eevee -- Use shaders for Eevee renderer. * ``CYCLES`` Cycles -- Use shaders for Cycles renderer.\n\n    :type: typing.Union[str, int]\n    '
    use_alpha: bool = None
    ' Include alpha of second input in this operation\n\n    :type: bool\n    '
    use_clamp: bool = None
    ' Clamp result of the node to 0.0 to 1.0 range\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeOutputMaterial(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Output surface material information for use in rendering
    """
    is_active_output: bool = None
    ' True if this node is used as the active output\n\n    :type: bool\n    '
    target: typing.Union[str, int] = None
    ' Which renderer and viewport shading types to use the shaders for * ``ALL`` All -- Use shaders for all renderers and viewports, unless there exists a more specific output. * ``EEVEE`` Eevee -- Use shaders for Eevee renderer. * ``CYCLES`` Cycles -- Use shaders for Cycles renderer.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeOutputWorld(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Output light color information to the scene's World
    """
    is_active_output: bool = None
    ' True if this node is used as the active output\n\n    :type: bool\n    '
    target: typing.Union[str, int] = None
    ' Which renderer and viewport shading types to use the shaders for * ``ALL`` All -- Use shaders for all renderers and viewports, unless there exists a more specific output. * ``EEVEE`` Eevee -- Use shaders for Eevee renderer. * ``CYCLES`` Cycles -- Use shaders for Cycles renderer.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeParticleInfo(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Retrieve the data of the particle that spawned the object instance, for example to give variation to multiple instances of an object
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodePointInfo(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Retrieve information about points in a point cloud
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeRGB(ShaderNode, NodeInternal, Node, bpy_struct):
    """ A color picker
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeRGBCurve(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Apply color corrections for each color channel
    """
    mapping: 'CurveMapping' = None
    " \n\n    :type: 'CurveMapping'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeRGBToBW(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Convert a color's luminance to a grayscale value
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeScript(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Generate an OSL shader from a file or text data-block. Note: OSL shaders are not supported on the GPU
    """
    bytecode: str = None
    ' Compile bytecode for shader script node\n\n    :type: str\n    '
    bytecode_hash: str = None
    ' Hash of compile bytecode, for quick equality checking\n\n    :type: str\n    '
    filepath: str = None
    ' Shader script path\n\n    :type: str\n    '
    mode: typing.Union[str, int] = None
    ' * ``INTERNAL`` Internal -- Use internal text data-block. * ``EXTERNAL`` External -- Use external .osl or .oso file.\n\n    :type: typing.Union[str, int]\n    '
    script: 'Text' = None
    " Internal shader script to define the shader\n\n    :type: 'Text'\n    "
    use_auto_update: bool = None
    ' Automatically update the shader when the .osl file changes (external scripts only)\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeSeparateColor(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Split a color into its individual components using multiple models
    """
    mode: typing.Union[str, int] = None
    ' Mode of color processing * ``RGB`` RGB -- Use RGB color processing. * ``HSV`` HSV -- Use HSV color processing. * ``HSL`` HSL -- Use HSL color processing.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeSeparateHSV(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Split a color into its hue, saturation, and value channels
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeSeparateRGB(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Split a color into its red, green, and blue channels (Deprecated)
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeSeparateXYZ(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Split a vector into its X, Y, and Z components
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeShaderToRGB(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Convert rendering effect (such as light and shadow) to color. Typically used for non-photorealistic rendering, to apply additional effects on the output of BSDFs. Note: only supported for Eevee
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeSqueeze(ShaderNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeSubsurfaceScattering(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Subsurface multiple scattering shader to simulate light entering the surface and bouncing internally. Typically used for materials such as skin, wax, marble or milk
    """
    falloff: typing.Union[str, int] = None
    ' Method for rendering subsurface scattering * ``BURLEY`` Christensen-Burley -- Approximation to physically based volume scattering. * ``RANDOM_WALK_FIXED_RADIUS`` Random Walk (Fixed Radius) -- Volumetric approximation to physically based volume scattering, using the scattering radius as specified. * ``RANDOM_WALK`` Random Walk -- Volumetric approximation to physically based volume scattering, with scattering radius automatically adjusted to match color textures.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeTangent(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Generate a tangent direction for the Anisotropic BSDF
    """
    axis: typing.Union[str, int] = None
    ' Axis for radial tangents * ``X`` X -- X axis. * ``Y`` Y -- Y axis. * ``Z`` Z -- Z axis.\n\n    :type: typing.Union[str, int]\n    '
    direction_type: typing.Union[str, int] = None
    ' Method to use for the tangent * ``RADIAL`` Radial -- Radial tangent around the X, Y or Z axis. * ``UV_MAP`` UV Map -- Tangent from UV map.\n\n    :type: typing.Union[str, int]\n    '
    uv_map: str = None
    ' UV Map for tangent generated from UV\n\n    :type: str\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeTexBrick(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Generate a procedural texture producing bricks
    """
    color_mapping: 'ColorMapping' = None
    " Color mapping settings\n\n    :type: 'ColorMapping'\n    "
    offset: float = None
    ' \n\n    :type: float\n    '
    offset_frequency: int = None
    ' \n\n    :type: int\n    '
    squash: float = None
    ' \n\n    :type: float\n    '
    squash_frequency: int = None
    ' \n\n    :type: int\n    '
    texture_mapping: 'TexMapping' = None
    " Texture coordinate mapping settings\n\n    :type: 'TexMapping'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeTexChecker(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Generate a checkerboard texture
    """
    color_mapping: 'ColorMapping' = None
    " Color mapping settings\n\n    :type: 'ColorMapping'\n    "
    texture_mapping: 'TexMapping' = None
    " Texture coordinate mapping settings\n\n    :type: 'TexMapping'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeTexCoord(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Retrieve multiple types of texture coordinates. Typically used as inputs for texture nodes
    """
    from_instancer: bool = None
    ' Use the parent of the instance object if possible\n\n    :type: bool\n    '
    object: 'Object' = None
    " Use coordinates from this object (for object texture coordinates output)\n\n    :type: 'Object'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeTexEnvironment(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Sample an image file as an environment texture. Typically used to light the scene with the background node
    """
    color_mapping: 'ColorMapping' = None
    " Color mapping settings\n\n    :type: 'ColorMapping'\n    "
    image: 'Image' = None
    " \n\n    :type: 'Image'\n    "
    image_user: 'ImageUser' = None
    " Parameters defining which layer, pass and frame of the image is displayed\n\n    :type: 'ImageUser'\n    "
    interpolation: typing.Union[str, int] = None
    ' Texture interpolation * ``Linear`` Linear -- Linear interpolation. * ``Closest`` Closest -- No interpolation (sample closest texel). * ``Cubic`` Cubic -- Cubic interpolation. * ``Smart`` Smart -- Bicubic when magnifying, else bilinear (OSL only).\n\n    :type: typing.Union[str, int]\n    '
    projection: typing.Union[str, int] = None
    ' Projection of the input image * ``EQUIRECTANGULAR`` Equirectangular -- Equirectangular or latitude-longitude projection. * ``MIRROR_BALL`` Mirror Ball -- Projection from an orthographic photo of a mirror ball.\n\n    :type: typing.Union[str, int]\n    '
    texture_mapping: 'TexMapping' = None
    " Texture coordinate mapping settings\n\n    :type: 'TexMapping'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeTexGradient(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Generate interpolated color and intensity values based on the input vector
    """
    color_mapping: 'ColorMapping' = None
    " Color mapping settings\n\n    :type: 'ColorMapping'\n    "
    gradient_type: typing.Union[str, int] = None
    ' Style of the color blending * ``LINEAR`` Linear -- Create a linear progression. * ``QUADRATIC`` Quadratic -- Create a quadratic progression. * ``EASING`` Easing -- Create a progression easing from one step to the next. * ``DIAGONAL`` Diagonal -- Create a diagonal progression. * ``SPHERICAL`` Spherical -- Create a spherical progression. * ``QUADRATIC_SPHERE`` Quadratic Sphere -- Create a quadratic progression in the shape of a sphere. * ``RADIAL`` Radial -- Create a radial progression.\n\n    :type: typing.Union[str, int]\n    '
    texture_mapping: 'TexMapping' = None
    " Texture coordinate mapping settings\n\n    :type: 'TexMapping'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeTexIES(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Used to match real world lights with IES files, which store the directional intensity distribution of light sources
    """
    filepath: str = None
    ' IES light path\n\n    :type: str\n    '
    ies: 'Text' = None
    " Internal IES file\n\n    :type: 'Text'\n    "
    mode: typing.Union[str, int] = None
    ' Whether the IES file is loaded from disk or from a text data-block * ``INTERNAL`` Internal -- Use internal text data-block. * ``EXTERNAL`` External -- Use external .ies file.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeTexImage(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Sample an image file as a texture
    """
    color_mapping: 'ColorMapping' = None
    " Color mapping settings\n\n    :type: 'ColorMapping'\n    "
    extension: typing.Union[str, int] = None
    ' How the image is extrapolated past its original bounds * ``REPEAT`` Repeat -- Cause the image to repeat horizontally and vertically. * ``EXTEND`` Extend -- Extend by repeating edge pixels of the image. * ``CLIP`` Clip -- Clip to image size and set exterior pixels as transparent. * ``MIRROR`` Mirror -- Repeatedly flip the image horizontally and vertically.\n\n    :type: typing.Union[str, int]\n    '
    image: 'Image' = None
    " \n\n    :type: 'Image'\n    "
    image_user: 'ImageUser' = None
    " Parameters defining which layer, pass and frame of the image is displayed\n\n    :type: 'ImageUser'\n    "
    interpolation: typing.Union[str, int] = None
    ' Texture interpolation * ``Linear`` Linear -- Linear interpolation. * ``Closest`` Closest -- No interpolation (sample closest texel). * ``Cubic`` Cubic -- Cubic interpolation. * ``Smart`` Smart -- Bicubic when magnifying, else bilinear (OSL only).\n\n    :type: typing.Union[str, int]\n    '
    projection: typing.Union[str, int] = None
    ' Method to project 2D image on object with a 3D texture vector * ``FLAT`` Flat -- Image is projected flat using the X and Y coordinates of the texture vector. * ``BOX`` Box -- Image is projected using different components for each side of the object space bounding box. * ``SPHERE`` Sphere -- Image is projected spherically using the Z axis as central. * ``TUBE`` Tube -- Image is projected from the tube using the Z axis as central.\n\n    :type: typing.Union[str, int]\n    '
    projection_blend: float = None
    ' For box projection, amount of blend to use between sides\n\n    :type: float\n    '
    texture_mapping: 'TexMapping' = None
    " Texture coordinate mapping settings\n\n    :type: 'TexMapping'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeTexMagic(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Generate a psychedelic color texture
    """
    color_mapping: 'ColorMapping' = None
    " Color mapping settings\n\n    :type: 'ColorMapping'\n    "
    texture_mapping: 'TexMapping' = None
    " Texture coordinate mapping settings\n\n    :type: 'TexMapping'\n    "
    turbulence_depth: int = None
    ' Level of detail in the added turbulent noise\n\n    :type: int\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeTexMusgrave(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Generate fractal Perlin noise. Allows for greater control over how octaves are combined than the Noise Texture node
    """
    color_mapping: 'ColorMapping' = None
    " Color mapping settings\n\n    :type: 'ColorMapping'\n    "
    musgrave_dimensions: typing.Union[str, int] = None
    ' Number of dimensions to output noise for * ``1D`` 1D -- Use the scalar value W as input. * ``2D`` 2D -- Use the 2D vector (X, Y) as input. The Z component is ignored. * ``3D`` 3D -- Use the 3D vector (X, Y, Z) as input. * ``4D`` 4D -- Use the 4D vector (X, Y, Z, W) as input.\n\n    :type: typing.Union[str, int]\n    '
    musgrave_type: typing.Union[str, int] = None
    ' Type of the Musgrave texture * ``MULTIFRACTAL`` Multifractal -- More uneven result (varies with location), more similar to a real terrain. * ``RIDGED_MULTIFRACTAL`` Ridged Multifractal -- Create sharp peaks. * ``HYBRID_MULTIFRACTAL`` Hybrid Multifractal -- Create peaks and valleys with different roughness values. * ``FBM`` fBM -- Produce an unnatural homogeneous and isotropic result. * ``HETERO_TERRAIN`` Hetero Terrain -- Similar to Hybrid Multifractal creates a heterogeneous terrain, but with the likeness of river channels.\n\n    :type: typing.Union[str, int]\n    '
    texture_mapping: 'TexMapping' = None
    " Texture coordinate mapping settings\n\n    :type: 'TexMapping'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeTexNoise(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Generate fractal Perlin noise
    """
    color_mapping: 'ColorMapping' = None
    " Color mapping settings\n\n    :type: 'ColorMapping'\n    "
    noise_dimensions: typing.Union[str, int] = None
    ' Number of dimensions to output noise for * ``1D`` 1D -- Use the scalar value W as input. * ``2D`` 2D -- Use the 2D vector (X, Y) as input. The Z component is ignored. * ``3D`` 3D -- Use the 3D vector (X, Y, Z) as input. * ``4D`` 4D -- Use the 4D vector (X, Y, Z, W) as input.\n\n    :type: typing.Union[str, int]\n    '
    texture_mapping: 'TexMapping' = None
    " Texture coordinate mapping settings\n\n    :type: 'TexMapping'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeTexPointDensity(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Generate a volumetric point for each particle or vertex of another object
    """
    interpolation: typing.Union[str, int] = None
    ' Texture interpolation * ``Closest`` Closest -- No interpolation (sample closest texel). * ``Linear`` Linear -- Linear interpolation. * ``Cubic`` Cubic -- Cubic interpolation.\n\n    :type: typing.Union[str, int]\n    '
    object: 'Object' = None
    " Object to take point data from\n\n    :type: 'Object'\n    "
    particle_color_source: typing.Union[str, int] = None
    ' Data to derive color results from * ``PARTICLE_AGE`` Particle Age -- Lifetime mapped as 0.0 to 1.0 intensity. * ``PARTICLE_SPEED`` Particle Speed -- Particle speed (absolute magnitude of velocity) mapped as 0.0 to 1.0 intensity. * ``PARTICLE_VELOCITY`` Particle Velocity -- XYZ velocity mapped to RGB colors.\n\n    :type: typing.Union[str, int]\n    '
    particle_system: 'ParticleSystem' = None
    " Particle System to render as points\n\n    :type: 'ParticleSystem'\n    "
    point_source: typing.Union[str, int] = None
    " Point data to use as renderable point density * ``PARTICLE_SYSTEM`` Particle System -- Generate point density from a particle system. * ``OBJECT`` Object Vertices -- Generate point density from an object's vertices.\n\n    :type: typing.Union[str, int]\n    "
    radius: float = None
    ' Radius from the shaded sample to look for points within\n\n    :type: float\n    '
    resolution: int = None
    ' Resolution used by the texture holding the point density\n\n    :type: int\n    '
    space: typing.Union[str, int] = None
    ' Coordinate system to calculate voxels in\n\n    :type: typing.Union[str, int]\n    '
    vertex_attribute_name: str = None
    ' Vertex attribute to use for color\n\n    :type: str\n    '
    vertex_color_source: typing.Union[str, int] = None
    ' Data to derive color results from * ``VERTEX_COLOR`` Vertex Color -- Vertex color layer. * ``VERTEX_WEIGHT`` Vertex Weight -- Vertex group weight. * ``VERTEX_NORMAL`` Vertex Normal -- XYZ normal vector mapped to RGB colors.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    def cache_point_density(self, depsgraph: 'Depsgraph'=None):
        """ Cache point density data for later calculation

        :param depsgraph: 
        :type depsgraph: 'Depsgraph'
        """
        pass

    def calc_point_density(self, depsgraph: 'Depsgraph'=None) -> typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float], 'mathutils.Vector']:
        """ Calculate point density

        :param depsgraph: 
        :type depsgraph: 'Depsgraph'
        :rtype: typing.Union[bpy_prop_array[float], typing.Sequence[float], typing.Tuple[float], 'mathutils.Vector']
        :return: RGBA Values
        """
        pass

    def calc_point_density_minmax(self, depsgraph: 'Depsgraph'=None):
        """ Calculate point density

        :param depsgraph: 
        :type depsgraph: 'Depsgraph'
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeTexSky(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Generate a procedural sky texture
    """
    air_density: float = None
    ' Density of air molecules\n\n    :type: float\n    '
    altitude: float = None
    ' Height from sea level\n\n    :type: float\n    '
    color_mapping: 'ColorMapping' = None
    " Color mapping settings\n\n    :type: 'ColorMapping'\n    "
    dust_density: float = None
    ' Density of dust molecules and water droplets\n\n    :type: float\n    '
    ground_albedo: float = None
    ' Ground color that is subtly reflected in the sky\n\n    :type: float\n    '
    ozone_density: float = None
    ' Density of ozone layer\n\n    :type: float\n    '
    sky_type: typing.Union[str, int] = None
    ' Which sky model should be used * ``PREETHAM`` Preetham -- Preetham 1999. * ``HOSEK_WILKIE`` Hosek / Wilkie -- Hosek / Wilkie 2012. * ``NISHITA`` Nishita -- Nishita 1993 improved.\n\n    :type: typing.Union[str, int]\n    '
    sun_direction: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector'] = None
    " Direction from where the sun is shining\n\n    :type: typing.Union[typing.List[float], typing.Tuple[float, float, float], 'mathutils.Vector']\n    "
    sun_disc: bool = None
    ' Include the sun itself in the output\n\n    :type: bool\n    '
    sun_elevation: float = None
    ' Sun angle from horizon\n\n    :type: float\n    '
    sun_intensity: float = None
    ' Strength of sun\n\n    :type: float\n    '
    sun_rotation: float = None
    ' Rotation of sun around zenith\n\n    :type: float\n    '
    sun_size: float = None
    ' Size of sun disc\n\n    :type: float\n    '
    texture_mapping: 'TexMapping' = None
    " Texture coordinate mapping settings\n\n    :type: 'TexMapping'\n    "
    turbidity: float = None
    ' Atmospheric turbidity\n\n    :type: float\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeTexVoronoi(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Generate Worley noise based on the distance to random points. Typically used to generate textures such as stones, water, or biological cells
    """
    color_mapping: 'ColorMapping' = None
    " Color mapping settings\n\n    :type: 'ColorMapping'\n    "
    distance: typing.Union[str, int] = None
    ' The distance metric used to compute the texture * ``EUCLIDEAN`` Euclidean -- Euclidean distance. * ``MANHATTAN`` Manhattan -- Manhattan distance. * ``CHEBYCHEV`` Chebychev -- Chebychev distance. * ``MINKOWSKI`` Minkowski -- Minkowski distance.\n\n    :type: typing.Union[str, int]\n    '
    feature: typing.Union[str, int] = None
    ' The Voronoi feature that the node will compute * ``F1`` F1 -- Computes the distance to the closest point as well as its position and color. * ``F2`` F2 -- Computes the distance to the second closest point as well as its position and color. * ``SMOOTH_F1`` Smooth F1 -- Smoothed version of F1. Weighted sum of neighbor voronoi cells. * ``DISTANCE_TO_EDGE`` Distance to Edge -- Computes the distance to the edge of the voronoi cell. * ``N_SPHERE_RADIUS`` N-Sphere Radius -- Computes the radius of the n-sphere inscribed in the voronoi cell.\n\n    :type: typing.Union[str, int]\n    '
    texture_mapping: 'TexMapping' = None
    " Texture coordinate mapping settings\n\n    :type: 'TexMapping'\n    "
    voronoi_dimensions: typing.Union[str, int] = None
    ' Number of dimensions to output noise for * ``1D`` 1D -- Use the scalar value W as input. * ``2D`` 2D -- Use the 2D vector (X, Y) as input. The Z component is ignored. * ``3D`` 3D -- Use the 3D vector (X, Y, Z) as input. * ``4D`` 4D -- Use the 4D vector (X, Y, Z, W) as input.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeTexWave(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Generate procedural bands or rings with noise
    """
    bands_direction: typing.Union[str, int] = None
    ' * ``X`` X -- Bands across X axis. * ``Y`` Y -- Bands across Y axis. * ``Z`` Z -- Bands across Z axis. * ``DIAGONAL`` Diagonal -- Bands across diagonal axis.\n\n    :type: typing.Union[str, int]\n    '
    color_mapping: 'ColorMapping' = None
    " Color mapping settings\n\n    :type: 'ColorMapping'\n    "
    rings_direction: typing.Union[str, int] = None
    ' * ``X`` X -- Rings along X axis. * ``Y`` Y -- Rings along Y axis. * ``Z`` Z -- Rings along Z axis. * ``SPHERICAL`` Spherical -- Rings along spherical distance.\n\n    :type: typing.Union[str, int]\n    '
    texture_mapping: 'TexMapping' = None
    " Texture coordinate mapping settings\n\n    :type: 'TexMapping'\n    "
    wave_profile: typing.Union[str, int] = None
    ' * ``SIN`` Sine -- Use a standard sine profile. * ``SAW`` Saw -- Use a sawtooth profile. * ``TRI`` Triangle -- Use a triangle profile.\n\n    :type: typing.Union[str, int]\n    '
    wave_type: typing.Union[str, int] = None
    ' * ``BANDS`` Bands -- Use standard wave texture in bands. * ``RINGS`` Rings -- Use wave texture in rings.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeTexWhiteNoise(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Return a random value or color based on an input seed
    """
    noise_dimensions: typing.Union[str, int] = None
    ' Number of dimensions to output noise for * ``1D`` 1D -- Use the scalar value W as input. * ``2D`` 2D -- Use the 2D vector (X, Y) as input. The Z component is ignored. * ``3D`` 3D -- Use the 3D vector (X, Y, Z) as input. * ``4D`` 4D -- Use the 4D vector (X, Y, Z, W) as input.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeUVAlongStroke(ShaderNode, NodeInternal, Node, bpy_struct):
    use_tips: bool = None
    ' Lower half of the texture is for tips of the stroke\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeUVMap(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Retrieve a UV map from the geometry, or the default fallback if none is specified
    """
    from_instancer: bool = None
    ' Use the parent of the instance object if possible\n\n    :type: bool\n    '
    uv_map: str = None
    ' UV coordinates to be used for mapping\n\n    :type: str\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeValToRGB(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Map values to colors with the use of a gradient
    """
    color_ramp: 'ColorRamp' = None
    " \n\n    :type: 'ColorRamp'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeValue(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Used to Input numerical values to other nodes in the tree
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeVectorCurve(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Map an input vectors to curves, used to fine-tune the interpolation of the input
    """
    mapping: 'CurveMapping' = None
    " \n\n    :type: 'CurveMapping'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeVectorDisplacement(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Displace the surface along an arbitrary direction
    """
    space: typing.Union[str, int] = None
    ' Space of the input height * ``TANGENT`` Tangent Space -- Tangent space vector displacement mapping. * ``OBJECT`` Object Space -- Object space vector displacement mapping. * ``WORLD`` World Space -- World space vector displacement mapping.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeVectorMath(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Perform vector math operation
    """
    operation: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeVectorRotate(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Rotate a vector around a pivot point (center)
    """
    invert: bool = None
    ' Invert angle\n\n    :type: bool\n    '
    rotation_type: typing.Union[str, int] = None
    ' Type of rotation * ``AXIS_ANGLE`` Axis Angle -- Rotate a point using axis angle. * ``X_AXIS`` X Axis -- Rotate a point using X axis. * ``Y_AXIS`` Y Axis -- Rotate a point using Y axis. * ``Z_AXIS`` Z Axis -- Rotate a point using Z axis. * ``EULER_XYZ`` Euler -- Rotate a point using XYZ order.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeVectorTransform(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Convert a vector, point, or normal between world, camera, and object coordinate space
    """
    convert_from: typing.Union[str, int] = None
    ' Space to convert from\n\n    :type: typing.Union[str, int]\n    '
    convert_to: typing.Union[str, int] = None
    ' Space to convert to\n\n    :type: typing.Union[str, int]\n    '
    vector_type: typing.Union[str, int] = None
    ' * ``POINT`` Point -- Transform a point. * ``VECTOR`` Vector -- Transform a direction vector. * ``NORMAL`` Normal -- Transform a normal vector with unit length.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeVertexColor(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Retrieve a color attribute, or the default fallback if none is specified
    """
    layer_name: str = None
    ' Color Attribute\n\n    :type: str\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeVolumeAbsorption(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Absorb light as it passes through the volume
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeVolumeInfo(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Read volume data attributes from volume grids
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeVolumePrincipled(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Combine all volume shading components into a single easy to use node
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeVolumeScatter(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Scatter light as it passes through the volume, often used to add fog to a scene
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeWavelength(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Convert a wavelength value to an RGB value
    """

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class ShaderNodeWireframe(ShaderNode, NodeInternal, Node, bpy_struct):
    """ Retrieve the edges of an object as it appears to Cycles. Note: as meshes are triangulated before being processed by Cycles, topology will always appear triangulated
    """
    use_pixel_size: bool = None
    ' Use screen pixel size instead of world units\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeAt(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeBricks(TextureNode, NodeInternal, Node, bpy_struct):
    offset: float = None
    ' \n\n    :type: float\n    '
    offset_frequency: int = None
    ' Offset every N rows\n\n    :type: int\n    '
    squash: float = None
    ' \n\n    :type: float\n    '
    squash_frequency: int = None
    ' Squash every N rows\n\n    :type: int\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeChecker(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeCombineColor(TextureNode, NodeInternal, Node, bpy_struct):
    mode: typing.Union[str, int] = None
    ' Mode of color processing * ``RGB`` RGB -- Use RGB color processing. * ``HSV`` HSV -- Use HSV color processing. * ``HSL`` HSL -- Use HSL color processing.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeCompose(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeCoordinates(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeCurveRGB(TextureNode, NodeInternal, Node, bpy_struct):
    mapping: 'CurveMapping' = None
    " \n\n    :type: 'CurveMapping'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeCurveTime(TextureNode, NodeInternal, Node, bpy_struct):
    curve: 'CurveMapping' = None
    " \n\n    :type: 'CurveMapping'\n    "
    frame_end: int = None
    ' \n\n    :type: int\n    '
    frame_start: int = None
    ' \n\n    :type: int\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeDecompose(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeDistance(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeGroup(TextureNode, NodeInternal, Node, bpy_struct):
    node_tree: 'NodeTree' = None
    " \n\n    :type: 'NodeTree'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeHueSaturation(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeImage(TextureNode, NodeInternal, Node, bpy_struct):
    image: 'Image' = None
    " \n\n    :type: 'Image'\n    "
    image_user: 'ImageUser' = None
    " Parameters defining the image duration, offset and related settings\n\n    :type: 'ImageUser'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeInvert(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeMath(TextureNode, NodeInternal, Node, bpy_struct):
    operation: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    use_clamp: bool = None
    ' Clamp result of the node to 0.0 to 1.0 range\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeMixRGB(TextureNode, NodeInternal, Node, bpy_struct):
    blend_type: typing.Union[str, int] = None
    ' \n\n    :type: typing.Union[str, int]\n    '
    use_alpha: bool = None
    ' Include alpha of second input in this operation\n\n    :type: bool\n    '
    use_clamp: bool = None
    ' Clamp result of the node to 0.0 to 1.0 range\n\n    :type: bool\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeOutput(TextureNode, NodeInternal, Node, bpy_struct):
    filepath: str = None
    ' \n\n    :type: str\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeRGBToBW(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeRotate(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeScale(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeSeparateColor(TextureNode, NodeInternal, Node, bpy_struct):
    mode: typing.Union[str, int] = None
    ' Mode of color processing * ``RGB`` RGB -- Use RGB color processing. * ``HSV`` HSV -- Use HSV color processing. * ``HSL`` HSL -- Use HSL color processing.\n\n    :type: typing.Union[str, int]\n    '

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeTexBlend(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeTexClouds(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeTexDistNoise(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeTexMagic(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeTexMarble(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeTexMusgrave(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeTexNoise(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeTexStucci(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeTexVoronoi(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeTexWood(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeTexture(TextureNode, NodeInternal, Node, bpy_struct):
    node_output: int = None
    ' For node-based textures, which output node to use\n\n    :type: int\n    '
    texture: 'Texture' = None
    " \n\n    :type: 'Texture'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeTranslate(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeValToNor(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeValToRGB(TextureNode, NodeInternal, Node, bpy_struct):
    color_ramp: 'ColorRamp' = None
    " \n\n    :type: 'ColorRamp'\n    "

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass

class TextureNodeViewer(TextureNode, NodeInternal, Node, bpy_struct):

    @classmethod
    def is_registered_node_type(cls) -> bool:
        """ True if a registered node type

        :rtype: bool
        :return: Result
        """
        pass

    @classmethod
    def input_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Input socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def output_template(cls, index: int) -> 'NodeInternalSocketTemplate':
        """ Output socket template

        :param index: Index
        :type index: int
        :rtype: 'NodeInternalSocketTemplate'
        :return: result
        """
        pass

    @classmethod
    def bl_rna_get_subclass(cls, id: str, default=None) -> 'Struct':
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: 'Struct'
        :return: The RNA type or default when not found.
        """
        pass

    @classmethod
    def bl_rna_get_subclass_py(cls, id: str, default=None) -> typing.Any:
        """ 

        :param id: The RNA type identifier.
        :type id: str
        :rtype: typing.Any
        :return: The class or default when not found.
        """
        pass
ANIM_OT_keying_set_export: 'bl_operators.anim.ANIM_OT_keying_set_export' = None
ASSETBROWSER_MT_catalog: 'bl_ui.space_filebrowser.ASSETBROWSER_MT_catalog' = None
ASSETBROWSER_MT_context_menu: 'bl_ui.space_filebrowser.ASSETBROWSER_MT_context_menu' = None
ASSETBROWSER_MT_editor_menus: 'bl_ui.space_filebrowser.ASSETBROWSER_MT_editor_menus' = None
ASSETBROWSER_MT_metadata_preview_menu: 'bl_ui.space_filebrowser.ASSETBROWSER_MT_metadata_preview_menu' = None
ASSETBROWSER_MT_select: 'bl_ui.space_filebrowser.ASSETBROWSER_MT_select' = None
ASSETBROWSER_MT_view: 'bl_ui.space_filebrowser.ASSETBROWSER_MT_view' = None
ASSETBROWSER_PT_display: 'bl_ui.space_filebrowser.ASSETBROWSER_PT_display' = None
ASSETBROWSER_PT_filter: 'bl_ui.space_filebrowser.ASSETBROWSER_PT_filter' = None
ASSETBROWSER_PT_metadata: 'bl_ui.space_filebrowser.ASSETBROWSER_PT_metadata' = None
ASSETBROWSER_PT_metadata_preview: 'bl_ui.space_filebrowser.ASSETBROWSER_PT_metadata_preview' = None
ASSETBROWSER_PT_metadata_tags: 'bl_ui.space_filebrowser.ASSETBROWSER_PT_metadata_tags' = None
ASSETBROWSER_UL_metadata_tags: 'bl_ui.space_filebrowser.ASSETBROWSER_UL_metadata_tags' = None
ASSET_OT_open_containing_blend_file: 'bl_operators.assets.ASSET_OT_open_containing_blend_file' = None
ASSET_OT_tag_add: 'bl_operators.assets.ASSET_OT_tag_add' = None
ASSET_OT_tag_remove: 'bl_operators.assets.ASSET_OT_tag_remove' = None
BONE_PT_bActionConstraint: 'bl_ui.properties_constraint.BONE_PT_bActionConstraint' = None
BONE_PT_bActionConstraint_action: 'bl_ui.properties_constraint.BONE_PT_bActionConstraint_action' = None
BONE_PT_bActionConstraint_target: 'bl_ui.properties_constraint.BONE_PT_bActionConstraint_target' = None
BONE_PT_bArmatureConstraint: 'bl_ui.properties_constraint.BONE_PT_bArmatureConstraint' = None
BONE_PT_bArmatureConstraint_bones: 'bl_ui.properties_constraint.BONE_PT_bArmatureConstraint_bones' = None
BONE_PT_bCameraSolverConstraint: 'bl_ui.properties_constraint.BONE_PT_bCameraSolverConstraint' = None
BONE_PT_bChildOfConstraint: 'bl_ui.properties_constraint.BONE_PT_bChildOfConstraint' = None
BONE_PT_bClampToConstraint: 'bl_ui.properties_constraint.BONE_PT_bClampToConstraint' = None
BONE_PT_bDampTrackConstraint: 'bl_ui.properties_constraint.BONE_PT_bDampTrackConstraint' = None
BONE_PT_bDistLimitConstraint: 'bl_ui.properties_constraint.BONE_PT_bDistLimitConstraint' = None
BONE_PT_bFollowPathConstraint: 'bl_ui.properties_constraint.BONE_PT_bFollowPathConstraint' = None
BONE_PT_bFollowTrackConstraint: 'bl_ui.properties_constraint.BONE_PT_bFollowTrackConstraint' = None
BONE_PT_bKinematicConstraint: 'bl_ui.properties_constraint.BONE_PT_bKinematicConstraint' = None
BONE_PT_bLocLimitConstraint: 'bl_ui.properties_constraint.BONE_PT_bLocLimitConstraint' = None
BONE_PT_bLocateLikeConstraint: 'bl_ui.properties_constraint.BONE_PT_bLocateLikeConstraint' = None
BONE_PT_bLockTrackConstraint: 'bl_ui.properties_constraint.BONE_PT_bLockTrackConstraint' = None
BONE_PT_bMinMaxConstraint: 'bl_ui.properties_constraint.BONE_PT_bMinMaxConstraint' = None
BONE_PT_bObjectSolverConstraint: 'bl_ui.properties_constraint.BONE_PT_bObjectSolverConstraint' = None
BONE_PT_bPivotConstraint: 'bl_ui.properties_constraint.BONE_PT_bPivotConstraint' = None
BONE_PT_bPythonConstraint: 'bl_ui.properties_constraint.BONE_PT_bPythonConstraint' = None
BONE_PT_bRotLimitConstraint: 'bl_ui.properties_constraint.BONE_PT_bRotLimitConstraint' = None
BONE_PT_bRotateLikeConstraint: 'bl_ui.properties_constraint.BONE_PT_bRotateLikeConstraint' = None
BONE_PT_bSameVolumeConstraint: 'bl_ui.properties_constraint.BONE_PT_bSameVolumeConstraint' = None
BONE_PT_bShrinkwrapConstraint: 'bl_ui.properties_constraint.BONE_PT_bShrinkwrapConstraint' = None
BONE_PT_bSizeLikeConstraint: 'bl_ui.properties_constraint.BONE_PT_bSizeLikeConstraint' = None
BONE_PT_bSizeLimitConstraint: 'bl_ui.properties_constraint.BONE_PT_bSizeLimitConstraint' = None
BONE_PT_bSplineIKConstraint: 'bl_ui.properties_constraint.BONE_PT_bSplineIKConstraint' = None
BONE_PT_bSplineIKConstraint_chain_scaling: 'bl_ui.properties_constraint.BONE_PT_bSplineIKConstraint_chain_scaling' = None
BONE_PT_bSplineIKConstraint_fitting: 'bl_ui.properties_constraint.BONE_PT_bSplineIKConstraint_fitting' = None
BONE_PT_bStretchToConstraint: 'bl_ui.properties_constraint.BONE_PT_bStretchToConstraint' = None
BONE_PT_bTrackToConstraint: 'bl_ui.properties_constraint.BONE_PT_bTrackToConstraint' = None
BONE_PT_bTransLikeConstraint: 'bl_ui.properties_constraint.BONE_PT_bTransLikeConstraint' = None
BONE_PT_bTransformCacheConstraint: 'bl_ui.properties_constraint.BONE_PT_bTransformCacheConstraint' = None
BONE_PT_bTransformCacheConstraint_layers: 'bl_ui.properties_constraint.BONE_PT_bTransformCacheConstraint_layers' = None
BONE_PT_bTransformCacheConstraint_procedural: 'bl_ui.properties_constraint.BONE_PT_bTransformCacheConstraint_procedural' = None
BONE_PT_bTransformCacheConstraint_time: 'bl_ui.properties_constraint.BONE_PT_bTransformCacheConstraint_time' = None
BONE_PT_bTransformCacheConstraint_velocity: 'bl_ui.properties_constraint.BONE_PT_bTransformCacheConstraint_velocity' = None
BONE_PT_bTransformConstraint: 'bl_ui.properties_constraint.BONE_PT_bTransformConstraint' = None
BONE_PT_bTransformConstraint_from: 'bl_ui.properties_constraint.BONE_PT_bTransformConstraint_from' = None
BONE_PT_bTransformConstraint_to: 'bl_ui.properties_constraint.BONE_PT_bTransformConstraint_to' = None
BONE_PT_constraints: 'bl_ui.properties_constraint.BONE_PT_constraints' = None
BONE_PT_context_bone: 'bl_ui.properties_data_bone.BONE_PT_context_bone' = None
BONE_PT_curved: 'bl_ui.properties_data_bone.BONE_PT_curved' = None
BONE_PT_custom_props: 'bl_ui.properties_data_bone.BONE_PT_custom_props' = None
BONE_PT_deform: 'bl_ui.properties_data_bone.BONE_PT_deform' = None
BONE_PT_display: 'bl_ui.properties_data_bone.BONE_PT_display' = None
BONE_PT_display_custom_shape: 'bl_ui.properties_data_bone.BONE_PT_display_custom_shape' = None
BONE_PT_inverse_kinematics: 'bl_ui.properties_data_bone.BONE_PT_inverse_kinematics' = None
BONE_PT_relations: 'bl_ui.properties_data_bone.BONE_PT_relations' = None
BONE_PT_transform: 'bl_ui.properties_data_bone.BONE_PT_transform' = None
CAMERA_PT_presets: 'bl_ui.properties_data_camera.CAMERA_PT_presets' = None
CLIP_HT_header: 'bl_ui.space_clip.CLIP_HT_header' = None
CLIP_MT_clip: 'bl_ui.space_clip.CLIP_MT_clip' = None
CLIP_MT_marker_pie: 'bl_ui.space_clip.CLIP_MT_marker_pie' = None
CLIP_MT_masking_editor_menus: 'bl_ui.space_clip.CLIP_MT_masking_editor_menus' = None
CLIP_MT_pivot_pie: 'bl_ui.space_clip.CLIP_MT_pivot_pie' = None
CLIP_MT_plane_track_image_context_menu: 'bl_ui.space_clip.CLIP_MT_plane_track_image_context_menu' = None
CLIP_MT_proxy: 'bl_ui.space_clip.CLIP_MT_proxy' = None
CLIP_MT_reconstruction: 'bl_ui.space_clip.CLIP_MT_reconstruction' = None
CLIP_MT_reconstruction_pie: 'bl_ui.space_clip.CLIP_MT_reconstruction_pie' = None
CLIP_MT_select: 'bl_ui.space_clip.CLIP_MT_select' = None
CLIP_MT_select_grouped: 'bl_ui.space_clip.CLIP_MT_select_grouped' = None
CLIP_MT_solving_pie: 'bl_ui.space_clip.CLIP_MT_solving_pie' = None
CLIP_MT_stabilize_2d_context_menu: 'bl_ui.space_clip.CLIP_MT_stabilize_2d_context_menu' = None
CLIP_MT_stabilize_2d_rotation_context_menu: 'bl_ui.space_clip.CLIP_MT_stabilize_2d_rotation_context_menu' = None
CLIP_MT_track: 'bl_ui.space_clip.CLIP_MT_track' = None
CLIP_MT_track_animation: 'bl_ui.space_clip.CLIP_MT_track_animation' = None
CLIP_MT_track_cleanup: 'bl_ui.space_clip.CLIP_MT_track_cleanup' = None
CLIP_MT_track_clear: 'bl_ui.space_clip.CLIP_MT_track_clear' = None
CLIP_MT_track_motion: 'bl_ui.space_clip.CLIP_MT_track_motion' = None
CLIP_MT_track_refine: 'bl_ui.space_clip.CLIP_MT_track_refine' = None
CLIP_MT_track_transform: 'bl_ui.space_clip.CLIP_MT_track_transform' = None
CLIP_MT_track_visibility: 'bl_ui.space_clip.CLIP_MT_track_visibility' = None
CLIP_MT_tracking_context_menu: 'bl_ui.space_clip.CLIP_MT_tracking_context_menu' = None
CLIP_MT_tracking_editor_menus: 'bl_ui.space_clip.CLIP_MT_tracking_editor_menus' = None
CLIP_MT_tracking_pie: 'bl_ui.space_clip.CLIP_MT_tracking_pie' = None
CLIP_MT_view: 'bl_ui.space_clip.CLIP_MT_view' = None
CLIP_MT_view_pie: 'bl_ui.space_clip.CLIP_MT_view_pie' = None
CLIP_MT_view_zoom: 'bl_ui.space_clip.CLIP_MT_view_zoom' = None
CLIP_OT_bundles_to_mesh: 'bl_operators.clip.CLIP_OT_bundles_to_mesh' = None
CLIP_OT_constraint_to_fcurve: 'bl_operators.clip.CLIP_OT_constraint_to_fcurve' = None
CLIP_OT_delete_proxy: 'bl_operators.clip.CLIP_OT_delete_proxy' = None
CLIP_OT_filter_tracks: 'bl_operators.clip.CLIP_OT_filter_tracks' = None
CLIP_OT_set_active_clip: 'bl_operators.clip.CLIP_OT_set_active_clip' = None
CLIP_OT_set_viewport_background: 'bl_operators.clip.CLIP_OT_set_viewport_background' = None
CLIP_OT_setup_tracking_scene: 'bl_operators.clip.CLIP_OT_setup_tracking_scene' = None
CLIP_OT_track_settings_as_default: 'bl_operators.clip.CLIP_OT_track_settings_as_default' = None
CLIP_OT_track_settings_to_track: 'bl_operators.clip.CLIP_OT_track_settings_to_track' = None
CLIP_OT_track_to_empty: 'bl_operators.clip.CLIP_OT_track_to_empty' = None
CLIP_PT_2d_cursor: 'bl_ui.space_clip.CLIP_PT_2d_cursor' = None
CLIP_PT_active_mask_point: 'bl_ui.space_clip.CLIP_PT_active_mask_point' = None
CLIP_PT_active_mask_spline: 'bl_ui.space_clip.CLIP_PT_active_mask_spline' = None
CLIP_PT_annotation: 'bl_ui.space_clip.CLIP_PT_annotation' = None
CLIP_PT_camera_presets: 'bl_ui.space_clip.CLIP_PT_camera_presets' = None
CLIP_PT_clip_display: 'bl_ui.space_clip.CLIP_PT_clip_display' = None
CLIP_PT_display: 'bl_ui.space_clip.CLIP_PT_display' = None
CLIP_PT_footage: 'bl_ui.space_clip.CLIP_PT_footage' = None
CLIP_PT_gizmo_display: 'bl_ui.space_clip.CLIP_PT_gizmo_display' = None
CLIP_PT_marker: 'bl_ui.space_clip.CLIP_PT_marker' = None
CLIP_PT_marker_display: 'bl_ui.space_clip.CLIP_PT_marker_display' = None
CLIP_PT_mask: 'bl_ui.space_clip.CLIP_PT_mask' = None
CLIP_PT_mask_display: 'bl_ui.space_clip.CLIP_PT_mask_display' = None
CLIP_PT_mask_layers: 'bl_ui.space_clip.CLIP_PT_mask_layers' = None
CLIP_PT_objects: 'bl_ui.space_clip.CLIP_PT_objects' = None
CLIP_PT_plane_track: 'bl_ui.space_clip.CLIP_PT_plane_track' = None
CLIP_PT_proxy: 'bl_ui.space_clip.CLIP_PT_proxy' = None
CLIP_PT_stabilization: 'bl_ui.space_clip.CLIP_PT_stabilization' = None
CLIP_PT_tools_cleanup: 'bl_ui.space_clip.CLIP_PT_tools_cleanup' = None
CLIP_PT_tools_clip: 'bl_ui.space_clip.CLIP_PT_tools_clip' = None
CLIP_PT_tools_geometry: 'bl_ui.space_clip.CLIP_PT_tools_geometry' = None
CLIP_PT_tools_grease_pencil_draw: 'bl_ui.space_clip.CLIP_PT_tools_grease_pencil_draw' = None
CLIP_PT_tools_marker: 'bl_ui.space_clip.CLIP_PT_tools_marker' = None
CLIP_PT_tools_mask_tools: 'bl_ui.space_clip.CLIP_PT_tools_mask_tools' = None
CLIP_PT_tools_mask_transforms: 'bl_ui.space_clip.CLIP_PT_tools_mask_transforms' = None
CLIP_PT_tools_object: 'bl_ui.space_clip.CLIP_PT_tools_object' = None
CLIP_PT_tools_orientation: 'bl_ui.space_clip.CLIP_PT_tools_orientation' = None
CLIP_PT_tools_plane_tracking: 'bl_ui.space_clip.CLIP_PT_tools_plane_tracking' = None
CLIP_PT_tools_scenesetup: 'bl_ui.space_clip.CLIP_PT_tools_scenesetup' = None
CLIP_PT_tools_solve: 'bl_ui.space_clip.CLIP_PT_tools_solve' = None
CLIP_PT_tools_tracking: 'bl_ui.space_clip.CLIP_PT_tools_tracking' = None
CLIP_PT_track: 'bl_ui.space_clip.CLIP_PT_track' = None
CLIP_PT_track_color_presets: 'bl_ui.space_clip.CLIP_PT_track_color_presets' = None
CLIP_PT_track_settings: 'bl_ui.space_clip.CLIP_PT_track_settings' = None
CLIP_PT_track_settings_extras: 'bl_ui.space_clip.CLIP_PT_track_settings_extras' = None
CLIP_PT_tracking_camera: 'bl_ui.space_clip.CLIP_PT_tracking_camera' = None
CLIP_PT_tracking_lens: 'bl_ui.space_clip.CLIP_PT_tracking_lens' = None
CLIP_PT_tracking_settings: 'bl_ui.space_clip.CLIP_PT_tracking_settings' = None
CLIP_PT_tracking_settings_extras: 'bl_ui.space_clip.CLIP_PT_tracking_settings_extras' = None
CLIP_PT_tracking_settings_presets: 'bl_ui.space_clip.CLIP_PT_tracking_settings_presets' = None
CLIP_UL_tracking_objects: 'bl_ui.space_clip.CLIP_UL_tracking_objects' = None
CLOTH_PT_presets: 'bl_ui.properties_physics_cloth.CLOTH_PT_presets' = None
COLLECTION_MT_context_menu: 'bl_ui.properties_object.COLLECTION_MT_context_menu' = None
COLLECTION_MT_context_menu_instance_offset: 'bl_ui.properties_collection.COLLECTION_MT_context_menu_instance_offset' = None
COLLECTION_PT_collection_custom_props: 'bl_ui.properties_collection.COLLECTION_PT_collection_custom_props' = None
COLLECTION_PT_collection_flags: 'bl_ui.properties_collection.COLLECTION_PT_collection_flags' = None
COLLECTION_PT_instancing: 'bl_ui.properties_collection.COLLECTION_PT_instancing' = None
COLLECTION_PT_lineart_collection: 'bl_ui.properties_collection.COLLECTION_PT_lineart_collection' = None
CONSOLE_HT_header: 'bl_ui.space_console.CONSOLE_HT_header' = None
CONSOLE_MT_console: 'bl_ui.space_console.CONSOLE_MT_console' = None
CONSOLE_MT_context_menu: 'bl_ui.space_console.CONSOLE_MT_context_menu' = None
CONSOLE_MT_editor_menus: 'bl_ui.space_console.CONSOLE_MT_editor_menus' = None
CONSOLE_MT_language: 'bl_ui.space_console.CONSOLE_MT_language' = None
CONSOLE_MT_view: 'bl_ui.space_console.CONSOLE_MT_view' = None
CONSTRAINT_OT_add_target: 'bl_operators.constraint.CONSTRAINT_OT_add_target' = None
CONSTRAINT_OT_disable_keep_transform: 'bl_operators.constraint.CONSTRAINT_OT_disable_keep_transform' = None
CONSTRAINT_OT_normalize_target_weights: 'bl_operators.constraint.CONSTRAINT_OT_normalize_target_weights' = None
CONSTRAINT_OT_remove_target: 'bl_operators.constraint.CONSTRAINT_OT_remove_target' = None
CURVES_MT_add_attribute: 'bl_ui.properties_data_curves.CURVES_MT_add_attribute' = None
CURVES_UL_attributes: 'bl_ui.properties_data_curves.CURVES_UL_attributes' = None
DATA_MT_bone_group_context_menu: 'bl_ui.properties_data_armature.DATA_MT_bone_group_context_menu' = None
DATA_PT_CURVES_attributes: 'bl_ui.properties_data_curves.DATA_PT_CURVES_attributes' = None
DATA_PT_EEVEE_light: 'bl_ui.properties_data_light.DATA_PT_EEVEE_light' = None
DATA_PT_EEVEE_light_distance: 'bl_ui.properties_data_light.DATA_PT_EEVEE_light_distance' = None
DATA_PT_EEVEE_shadow: 'bl_ui.properties_data_light.DATA_PT_EEVEE_shadow' = None
DATA_PT_EEVEE_shadow_cascaded_shadow_map: 'bl_ui.properties_data_light.DATA_PT_EEVEE_shadow_cascaded_shadow_map' = None
DATA_PT_EEVEE_shadow_contact: 'bl_ui.properties_data_light.DATA_PT_EEVEE_shadow_contact' = None
DATA_PT_active_spline: 'bl_ui.properties_data_curve.DATA_PT_active_spline' = None
DATA_PT_bone_groups: 'bl_ui.properties_data_armature.DATA_PT_bone_groups' = None
DATA_PT_camera: 'bl_ui.properties_data_camera.DATA_PT_camera' = None
DATA_PT_camera_background_image: 'bl_ui.properties_data_camera.DATA_PT_camera_background_image' = None
DATA_PT_camera_display: 'bl_ui.properties_data_camera.DATA_PT_camera_display' = None
DATA_PT_camera_display_composition_guides: 'bl_ui.properties_data_camera.DATA_PT_camera_display_composition_guides' = None
DATA_PT_camera_dof: 'bl_ui.properties_data_camera.DATA_PT_camera_dof' = None
DATA_PT_camera_dof_aperture: 'bl_ui.properties_data_camera.DATA_PT_camera_dof_aperture' = None
DATA_PT_camera_safe_areas: 'bl_ui.properties_data_camera.DATA_PT_camera_safe_areas' = None
DATA_PT_camera_safe_areas_center_cut: 'bl_ui.properties_data_camera.DATA_PT_camera_safe_areas_center_cut' = None
DATA_PT_camera_stereoscopy: 'bl_ui.properties_data_camera.DATA_PT_camera_stereoscopy' = None
DATA_PT_cone: 'bl_ui.properties_data_speaker.DATA_PT_cone' = None
DATA_PT_context_arm: 'bl_ui.properties_data_armature.DATA_PT_context_arm' = None
DATA_PT_context_camera: 'bl_ui.properties_data_camera.DATA_PT_context_camera' = None
DATA_PT_context_curve: 'bl_ui.properties_data_curve.DATA_PT_context_curve' = None
DATA_PT_context_curves: 'bl_ui.properties_data_curves.DATA_PT_context_curves' = None
DATA_PT_context_gpencil: 'bl_ui.properties_data_gpencil.DATA_PT_context_gpencil' = None
DATA_PT_context_lattice: 'bl_ui.properties_data_lattice.DATA_PT_context_lattice' = None
DATA_PT_context_light: 'bl_ui.properties_data_light.DATA_PT_context_light' = None
DATA_PT_context_lightprobe: 'bl_ui.properties_data_lightprobe.DATA_PT_context_lightprobe' = None
DATA_PT_context_mesh: 'bl_ui.properties_data_mesh.DATA_PT_context_mesh' = None
DATA_PT_context_metaball: 'bl_ui.properties_data_metaball.DATA_PT_context_metaball' = None
DATA_PT_context_pointcloud: 'bl_ui.properties_data_pointcloud.DATA_PT_context_pointcloud' = None
DATA_PT_context_speaker: 'bl_ui.properties_data_speaker.DATA_PT_context_speaker' = None
DATA_PT_context_volume: 'bl_ui.properties_data_volume.DATA_PT_context_volume' = None
DATA_PT_curve_texture_space: 'bl_ui.properties_data_curve.DATA_PT_curve_texture_space' = None
DATA_PT_curves_surface: 'bl_ui.properties_data_curves.DATA_PT_curves_surface' = None
DATA_PT_custom_props_arm: 'bl_ui.properties_data_armature.DATA_PT_custom_props_arm' = None
DATA_PT_custom_props_camera: 'bl_ui.properties_data_camera.DATA_PT_custom_props_camera' = None
DATA_PT_custom_props_curve: 'bl_ui.properties_data_curve.DATA_PT_custom_props_curve' = None
DATA_PT_custom_props_curves: 'bl_ui.properties_data_curves.DATA_PT_custom_props_curves' = None
DATA_PT_custom_props_gpencil: 'bl_ui.properties_data_gpencil.DATA_PT_custom_props_gpencil' = None
DATA_PT_custom_props_lattice: 'bl_ui.properties_data_lattice.DATA_PT_custom_props_lattice' = None
DATA_PT_custom_props_light: 'bl_ui.properties_data_light.DATA_PT_custom_props_light' = None
DATA_PT_custom_props_mesh: 'bl_ui.properties_data_mesh.DATA_PT_custom_props_mesh' = None
DATA_PT_custom_props_metaball: 'bl_ui.properties_data_metaball.DATA_PT_custom_props_metaball' = None
DATA_PT_custom_props_pointcloud: 'bl_ui.properties_data_pointcloud.DATA_PT_custom_props_pointcloud' = None
DATA_PT_custom_props_speaker: 'bl_ui.properties_data_speaker.DATA_PT_custom_props_speaker' = None
DATA_PT_custom_props_volume: 'bl_ui.properties_data_volume.DATA_PT_custom_props_volume' = None
DATA_PT_customdata: 'bl_ui.properties_data_mesh.DATA_PT_customdata' = None
DATA_PT_display: 'bl_ui.properties_data_armature.DATA_PT_display' = None
DATA_PT_distance: 'bl_ui.properties_data_speaker.DATA_PT_distance' = None
DATA_PT_empty: 'bl_ui.properties_data_empty.DATA_PT_empty' = None
DATA_PT_empty_image: 'bl_ui.properties_data_empty.DATA_PT_empty_image' = None
DATA_PT_face_maps: 'bl_ui.properties_data_mesh.DATA_PT_face_maps' = None
DATA_PT_falloff_curve: 'bl_ui.properties_data_light.DATA_PT_falloff_curve' = None
DATA_PT_font: 'bl_ui.properties_data_curve.DATA_PT_font' = None
DATA_PT_font_transform: 'bl_ui.properties_data_curve.DATA_PT_font_transform' = None
DATA_PT_geometry_curve: 'bl_ui.properties_data_curve.DATA_PT_geometry_curve' = None
DATA_PT_geometry_curve_bevel: 'bl_ui.properties_data_curve.DATA_PT_geometry_curve_bevel' = None
DATA_PT_geometry_curve_start_end: 'bl_ui.properties_data_curve.DATA_PT_geometry_curve_start_end' = None
DATA_PT_gpencil_canvas: 'bl_ui.properties_data_gpencil.DATA_PT_gpencil_canvas' = None
DATA_PT_gpencil_display: 'bl_ui.properties_data_gpencil.DATA_PT_gpencil_display' = None
DATA_PT_gpencil_layer_adjustments: 'bl_ui.properties_data_gpencil.DATA_PT_gpencil_layer_adjustments' = None
DATA_PT_gpencil_layer_display: 'bl_ui.properties_data_gpencil.DATA_PT_gpencil_layer_display' = None
DATA_PT_gpencil_layer_masks: 'bl_ui.properties_data_gpencil.DATA_PT_gpencil_layer_masks' = None
DATA_PT_gpencil_layer_relations: 'bl_ui.properties_data_gpencil.DATA_PT_gpencil_layer_relations' = None
DATA_PT_gpencil_layer_transform: 'bl_ui.properties_data_gpencil.DATA_PT_gpencil_layer_transform' = None
DATA_PT_gpencil_layers: 'bl_ui.properties_data_gpencil.DATA_PT_gpencil_layers' = None
DATA_PT_gpencil_modifiers: 'bl_ui.properties_data_modifier.DATA_PT_gpencil_modifiers' = None
DATA_PT_gpencil_onion_skinning: 'bl_ui.properties_data_gpencil.DATA_PT_gpencil_onion_skinning' = None
DATA_PT_gpencil_onion_skinning_custom_colors: 'bl_ui.properties_data_gpencil.DATA_PT_gpencil_onion_skinning_custom_colors' = None
DATA_PT_gpencil_onion_skinning_display: 'bl_ui.properties_data_gpencil.DATA_PT_gpencil_onion_skinning_display' = None
DATA_PT_gpencil_strokes: 'bl_ui.properties_data_gpencil.DATA_PT_gpencil_strokes' = None
DATA_PT_gpencil_vertex_groups: 'bl_ui.properties_data_gpencil.DATA_PT_gpencil_vertex_groups' = None
DATA_PT_iksolver_itasc: 'bl_ui.properties_data_armature.DATA_PT_iksolver_itasc' = None
DATA_PT_lattice: 'bl_ui.properties_data_lattice.DATA_PT_lattice' = None
DATA_PT_lens: 'bl_ui.properties_data_camera.DATA_PT_lens' = None
DATA_PT_light: 'bl_ui.properties_data_light.DATA_PT_light' = None
DATA_PT_lightprobe: 'bl_ui.properties_data_lightprobe.DATA_PT_lightprobe' = None
DATA_PT_lightprobe_display: 'bl_ui.properties_data_lightprobe.DATA_PT_lightprobe_display' = None
DATA_PT_lightprobe_parallax: 'bl_ui.properties_data_lightprobe.DATA_PT_lightprobe_parallax' = None
DATA_PT_lightprobe_visibility: 'bl_ui.properties_data_lightprobe.DATA_PT_lightprobe_visibility' = None
DATA_PT_mball_texture_space: 'bl_ui.properties_data_metaball.DATA_PT_mball_texture_space' = None
DATA_PT_mesh_attributes: 'bl_ui.properties_data_mesh.DATA_PT_mesh_attributes' = None
DATA_PT_metaball: 'bl_ui.properties_data_metaball.DATA_PT_metaball' = None
DATA_PT_metaball_element: 'bl_ui.properties_data_metaball.DATA_PT_metaball_element' = None
DATA_PT_modifiers: 'bl_ui.properties_data_modifier.DATA_PT_modifiers' = None
DATA_PT_motion_paths: 'bl_ui.properties_data_armature.DATA_PT_motion_paths' = None
DATA_PT_motion_paths_display: 'bl_ui.properties_data_armature.DATA_PT_motion_paths_display' = None
DATA_PT_normals: 'bl_ui.properties_data_mesh.DATA_PT_normals' = None
DATA_PT_paragraph: 'bl_ui.properties_data_curve.DATA_PT_paragraph' = None
DATA_PT_paragraph_alignment: 'bl_ui.properties_data_curve.DATA_PT_paragraph_alignment' = None
DATA_PT_paragraph_spacing: 'bl_ui.properties_data_curve.DATA_PT_paragraph_spacing' = None
DATA_PT_pathanim: 'bl_ui.properties_data_curve.DATA_PT_pathanim' = None
DATA_PT_pointcloud_attributes: 'bl_ui.properties_data_pointcloud.DATA_PT_pointcloud_attributes' = None
DATA_PT_preview: 'bl_ui.properties_data_light.DATA_PT_preview' = None
DATA_PT_remesh: 'bl_ui.properties_data_mesh.DATA_PT_remesh' = None
DATA_PT_shader_fx: 'bl_ui.properties_data_shaderfx.DATA_PT_shader_fx' = None
DATA_PT_shape_curve: 'bl_ui.properties_data_curve.DATA_PT_shape_curve' = None
DATA_PT_shape_keys: 'bl_ui.properties_data_mesh.DATA_PT_shape_keys' = None
DATA_PT_skeleton: 'bl_ui.properties_data_armature.DATA_PT_skeleton' = None
DATA_PT_speaker: 'bl_ui.properties_data_speaker.DATA_PT_speaker' = None
DATA_PT_spot: 'bl_ui.properties_data_light.DATA_PT_spot' = None
DATA_PT_text_boxes: 'bl_ui.properties_data_curve.DATA_PT_text_boxes' = None
DATA_PT_texture_space: 'bl_ui.properties_data_mesh.DATA_PT_texture_space' = None
DATA_PT_uv_texture: 'bl_ui.properties_data_mesh.DATA_PT_uv_texture' = None
DATA_PT_vertex_colors: 'bl_ui.properties_data_mesh.DATA_PT_vertex_colors' = None
DATA_PT_vertex_groups: 'bl_ui.properties_data_mesh.DATA_PT_vertex_groups' = None
DATA_PT_volume_file: 'bl_ui.properties_data_volume.DATA_PT_volume_file' = None
DATA_PT_volume_grids: 'bl_ui.properties_data_volume.DATA_PT_volume_grids' = None
DATA_PT_volume_render: 'bl_ui.properties_data_volume.DATA_PT_volume_render' = None
DATA_PT_volume_viewport_display: 'bl_ui.properties_data_volume.DATA_PT_volume_viewport_display' = None
DATA_PT_volume_viewport_display_slicing: 'bl_ui.properties_data_volume.DATA_PT_volume_viewport_display_slicing' = None
DOPESHEET_HT_header: 'bl_ui.space_dopesheet.DOPESHEET_HT_header' = None
DOPESHEET_MT_channel: 'bl_ui.space_dopesheet.DOPESHEET_MT_channel' = None
DOPESHEET_MT_channel_context_menu: 'bl_ui.space_dopesheet.DOPESHEET_MT_channel_context_menu' = None
DOPESHEET_MT_context_menu: 'bl_ui.space_dopesheet.DOPESHEET_MT_context_menu' = None
DOPESHEET_MT_delete: 'bl_ui.space_dopesheet.DOPESHEET_MT_delete' = None
DOPESHEET_MT_editor_menus: 'bl_ui.space_dopesheet.DOPESHEET_MT_editor_menus' = None
DOPESHEET_MT_gpencil_channel: 'bl_ui.space_dopesheet.DOPESHEET_MT_gpencil_channel' = None
DOPESHEET_MT_gpencil_key: 'bl_ui.space_dopesheet.DOPESHEET_MT_gpencil_key' = None
DOPESHEET_MT_key: 'bl_ui.space_dopesheet.DOPESHEET_MT_key' = None
DOPESHEET_MT_key_transform: 'bl_ui.space_dopesheet.DOPESHEET_MT_key_transform' = None
DOPESHEET_MT_marker: 'bl_ui.space_dopesheet.DOPESHEET_MT_marker' = None
DOPESHEET_MT_select: 'bl_ui.space_dopesheet.DOPESHEET_MT_select' = None
DOPESHEET_MT_snap_pie: 'bl_ui.space_dopesheet.DOPESHEET_MT_snap_pie' = None
DOPESHEET_MT_view: 'bl_ui.space_dopesheet.DOPESHEET_MT_view' = None
DOPESHEET_MT_view_pie: 'bl_ui.space_dopesheet.DOPESHEET_MT_view_pie' = None
DOPESHEET_PT_action: 'bl_ui.space_dopesheet.DOPESHEET_PT_action' = None
DOPESHEET_PT_custom_props_action: 'bl_ui.space_dopesheet.DOPESHEET_PT_custom_props_action' = None
DOPESHEET_PT_filters: 'bl_ui.space_dopesheet.DOPESHEET_PT_filters' = None
DOPESHEET_PT_gpencil_layer_adjustments: 'bl_ui.space_dopesheet.DOPESHEET_PT_gpencil_layer_adjustments' = None
DOPESHEET_PT_gpencil_layer_display: 'bl_ui.space_dopesheet.DOPESHEET_PT_gpencil_layer_display' = None
DOPESHEET_PT_gpencil_layer_masks: 'bl_ui.space_dopesheet.DOPESHEET_PT_gpencil_layer_masks' = None
DOPESHEET_PT_gpencil_layer_relations: 'bl_ui.space_dopesheet.DOPESHEET_PT_gpencil_layer_relations' = None
DOPESHEET_PT_gpencil_layer_transform: 'bl_ui.space_dopesheet.DOPESHEET_PT_gpencil_layer_transform' = None
DOPESHEET_PT_gpencil_mode: 'bl_ui.space_dopesheet.DOPESHEET_PT_gpencil_mode' = None
EEVEE_MATERIAL_PT_context_material: 'bl_ui.properties_material.EEVEE_MATERIAL_PT_context_material' = None
EEVEE_MATERIAL_PT_settings: 'bl_ui.properties_material.EEVEE_MATERIAL_PT_settings' = None
EEVEE_MATERIAL_PT_surface: 'bl_ui.properties_material.EEVEE_MATERIAL_PT_surface' = None
EEVEE_MATERIAL_PT_viewport_settings: 'bl_ui.properties_material.EEVEE_MATERIAL_PT_viewport_settings' = None
EEVEE_MATERIAL_PT_volume: 'bl_ui.properties_material.EEVEE_MATERIAL_PT_volume' = None
EEVEE_NEXT_MATERIAL_PT_settings: 'bl_ui.properties_material.EEVEE_NEXT_MATERIAL_PT_settings' = None
EEVEE_WORLD_PT_mist: 'bl_ui.properties_world.EEVEE_WORLD_PT_mist' = None
EEVEE_WORLD_PT_surface: 'bl_ui.properties_world.EEVEE_WORLD_PT_surface' = None
EEVEE_WORLD_PT_volume: 'bl_ui.properties_world.EEVEE_WORLD_PT_volume' = None
FILEBROWSER_HT_header: 'bl_ui.space_filebrowser.FILEBROWSER_HT_header' = None
FILEBROWSER_MT_bookmarks_context_menu: 'bl_ui.space_filebrowser.FILEBROWSER_MT_bookmarks_context_menu' = None
FILEBROWSER_MT_context_menu: 'bl_ui.space_filebrowser.FILEBROWSER_MT_context_menu' = None
FILEBROWSER_MT_editor_menus: 'bl_ui.space_filebrowser.FILEBROWSER_MT_editor_menus' = None
FILEBROWSER_MT_select: 'bl_ui.space_filebrowser.FILEBROWSER_MT_select' = None
FILEBROWSER_MT_view: 'bl_ui.space_filebrowser.FILEBROWSER_MT_view' = None
FILEBROWSER_MT_view_pie: 'bl_ui.space_filebrowser.FILEBROWSER_MT_view_pie' = None
FILEBROWSER_PT_advanced_filter: 'bl_ui.space_filebrowser.FILEBROWSER_PT_advanced_filter' = None
FILEBROWSER_PT_bookmarks_favorites: 'bl_ui.space_filebrowser.FILEBROWSER_PT_bookmarks_favorites' = None
FILEBROWSER_PT_bookmarks_recents: 'bl_ui.space_filebrowser.FILEBROWSER_PT_bookmarks_recents' = None
FILEBROWSER_PT_bookmarks_system: 'bl_ui.space_filebrowser.FILEBROWSER_PT_bookmarks_system' = None
FILEBROWSER_PT_bookmarks_volumes: 'bl_ui.space_filebrowser.FILEBROWSER_PT_bookmarks_volumes' = None
FILEBROWSER_PT_directory_path: 'bl_ui.space_filebrowser.FILEBROWSER_PT_directory_path' = None
FILEBROWSER_PT_display: 'bl_ui.space_filebrowser.FILEBROWSER_PT_display' = None
FILEBROWSER_PT_filter: 'bl_ui.space_filebrowser.FILEBROWSER_PT_filter' = None
FILEBROWSER_UL_dir: 'bl_ui.space_filebrowser.FILEBROWSER_UL_dir' = None
FLUID_PT_presets: 'bl_ui.properties_physics_fluid.FLUID_PT_presets' = None
GPENCIL_MT_cleanup: 'bl_ui.properties_grease_pencil_common.GPENCIL_MT_cleanup' = None
GPENCIL_MT_gpencil_draw_delete: 'bl_ui.properties_grease_pencil_common.GPENCIL_MT_gpencil_draw_delete' = None
GPENCIL_MT_gpencil_vertex_group: 'bl_ui.properties_data_gpencil.GPENCIL_MT_gpencil_vertex_group' = None
GPENCIL_MT_layer_active: 'bl_ui.properties_grease_pencil_common.GPENCIL_MT_layer_active' = None
GPENCIL_MT_layer_context_menu: 'bl_ui.properties_data_gpencil.GPENCIL_MT_layer_context_menu' = None
GPENCIL_MT_layer_mask_menu: 'bl_ui.properties_grease_pencil_common.GPENCIL_MT_layer_mask_menu' = None
GPENCIL_MT_material_active: 'bl_ui.properties_grease_pencil_common.GPENCIL_MT_material_active' = None
GPENCIL_MT_material_context_menu: 'bl_ui.properties_material_gpencil.GPENCIL_MT_material_context_menu' = None
GPENCIL_MT_move_to_layer: 'bl_ui.properties_grease_pencil_common.GPENCIL_MT_move_to_layer' = None
GPENCIL_MT_snap: 'bl_ui.properties_grease_pencil_common.GPENCIL_MT_snap' = None
GPENCIL_MT_snap_pie: 'bl_ui.properties_grease_pencil_common.GPENCIL_MT_snap_pie' = None
GPENCIL_UL_annotation_layer: 'bl_ui.properties_grease_pencil_common.GPENCIL_UL_annotation_layer' = None
GPENCIL_UL_layer: 'bl_ui.properties_grease_pencil_common.GPENCIL_UL_layer' = None
GPENCIL_UL_masks: 'bl_ui.properties_grease_pencil_common.GPENCIL_UL_masks' = None
GPENCIL_UL_matslots: 'bl_ui.properties_material_gpencil.GPENCIL_UL_matslots' = None
GPENCIL_UL_vgroups: 'bl_ui.properties_data_gpencil.GPENCIL_UL_vgroups' = None
GRAPH_HT_header: 'bl_ui.space_graph.GRAPH_HT_header' = None
GRAPH_MT_channel: 'bl_ui.space_graph.GRAPH_MT_channel' = None
GRAPH_MT_channel_context_menu: 'bl_ui.space_graph.GRAPH_MT_channel_context_menu' = None
GRAPH_MT_context_menu: 'bl_ui.space_graph.GRAPH_MT_context_menu' = None
GRAPH_MT_delete: 'bl_ui.space_graph.GRAPH_MT_delete' = None
GRAPH_MT_editor_menus: 'bl_ui.space_graph.GRAPH_MT_editor_menus' = None
GRAPH_MT_key: 'bl_ui.space_graph.GRAPH_MT_key' = None
GRAPH_MT_key_snap: 'bl_ui.space_graph.GRAPH_MT_key_snap' = None
GRAPH_MT_key_transform: 'bl_ui.space_graph.GRAPH_MT_key_transform' = None
GRAPH_MT_marker: 'bl_ui.space_graph.GRAPH_MT_marker' = None
GRAPH_MT_pivot_pie: 'bl_ui.space_graph.GRAPH_MT_pivot_pie' = None
GRAPH_MT_select: 'bl_ui.space_graph.GRAPH_MT_select' = None
GRAPH_MT_slider: 'bl_ui.space_graph.GRAPH_MT_slider' = None
GRAPH_MT_snap_pie: 'bl_ui.space_graph.GRAPH_MT_snap_pie' = None
GRAPH_MT_view: 'bl_ui.space_graph.GRAPH_MT_view' = None
GRAPH_MT_view_pie: 'bl_ui.space_graph.GRAPH_MT_view_pie' = None
GRAPH_PT_filters: 'bl_ui.space_graph.GRAPH_PT_filters' = None
IMAGE_HT_header: 'bl_ui.space_image.IMAGE_HT_header' = None
IMAGE_HT_tool_header: 'bl_ui.space_image.IMAGE_HT_tool_header' = None
IMAGE_MT_editor_menus: 'bl_ui.space_image.IMAGE_MT_editor_menus' = None
IMAGE_MT_image: 'bl_ui.space_image.IMAGE_MT_image' = None
IMAGE_MT_image_flip: 'bl_ui.space_image.IMAGE_MT_image_flip' = None
IMAGE_MT_image_invert: 'bl_ui.space_image.IMAGE_MT_image_invert' = None
IMAGE_MT_mask_context_menu: 'bl_ui.space_image.IMAGE_MT_mask_context_menu' = None
IMAGE_MT_pivot_pie: 'bl_ui.space_image.IMAGE_MT_pivot_pie' = None
IMAGE_MT_select: 'bl_ui.space_image.IMAGE_MT_select' = None
IMAGE_MT_select_linked: 'bl_ui.space_image.IMAGE_MT_select_linked' = None
IMAGE_MT_uvs: 'bl_ui.space_image.IMAGE_MT_uvs' = None
IMAGE_MT_uvs_align: 'bl_ui.space_image.IMAGE_MT_uvs_align' = None
IMAGE_MT_uvs_context_menu: 'bl_ui.space_image.IMAGE_MT_uvs_context_menu' = None
IMAGE_MT_uvs_merge: 'bl_ui.space_image.IMAGE_MT_uvs_merge' = None
IMAGE_MT_uvs_mirror: 'bl_ui.space_image.IMAGE_MT_uvs_mirror' = None
IMAGE_MT_uvs_select_mode: 'bl_ui.space_image.IMAGE_MT_uvs_select_mode' = None
IMAGE_MT_uvs_showhide: 'bl_ui.space_image.IMAGE_MT_uvs_showhide' = None
IMAGE_MT_uvs_snap: 'bl_ui.space_image.IMAGE_MT_uvs_snap' = None
IMAGE_MT_uvs_snap_pie: 'bl_ui.space_image.IMAGE_MT_uvs_snap_pie' = None
IMAGE_MT_uvs_split: 'bl_ui.space_image.IMAGE_MT_uvs_split' = None
IMAGE_MT_uvs_transform: 'bl_ui.space_image.IMAGE_MT_uvs_transform' = None
IMAGE_MT_uvs_unwrap: 'bl_ui.space_image.IMAGE_MT_uvs_unwrap' = None
IMAGE_MT_view: 'bl_ui.space_image.IMAGE_MT_view' = None
IMAGE_MT_view_pie: 'bl_ui.space_image.IMAGE_MT_view_pie' = None
IMAGE_MT_view_zoom: 'bl_ui.space_image.IMAGE_MT_view_zoom' = None
IMAGE_PT_active_mask_point: 'bl_ui.space_image.IMAGE_PT_active_mask_point' = None
IMAGE_PT_active_mask_spline: 'bl_ui.space_image.IMAGE_PT_active_mask_spline' = None
IMAGE_PT_active_tool: 'bl_ui.space_image.IMAGE_PT_active_tool' = None
IMAGE_PT_annotation: 'bl_ui.space_image.IMAGE_PT_annotation' = None
IMAGE_PT_gizmo_display: 'bl_ui.space_image.IMAGE_PT_gizmo_display' = None
IMAGE_PT_image_properties: 'bl_ui.space_image.IMAGE_PT_image_properties' = None
IMAGE_PT_mask: 'bl_ui.space_image.IMAGE_PT_mask' = None
IMAGE_PT_mask_display: 'bl_ui.space_image.IMAGE_PT_mask_display' = None
IMAGE_PT_mask_layers: 'bl_ui.space_image.IMAGE_PT_mask_layers' = None
IMAGE_PT_overlay: 'bl_ui.space_image.IMAGE_PT_overlay' = None
IMAGE_PT_overlay_guides: 'bl_ui.space_image.IMAGE_PT_overlay_guides' = None
IMAGE_PT_overlay_image: 'bl_ui.space_image.IMAGE_PT_overlay_image' = None
IMAGE_PT_overlay_texture_paint: 'bl_ui.space_image.IMAGE_PT_overlay_texture_paint' = None
IMAGE_PT_overlay_uv_edit: 'bl_ui.space_image.IMAGE_PT_overlay_uv_edit' = None
IMAGE_PT_overlay_uv_edit_geometry: 'bl_ui.space_image.IMAGE_PT_overlay_uv_edit_geometry' = None
IMAGE_PT_paint_clone: 'bl_ui.space_image.IMAGE_PT_paint_clone' = None
IMAGE_PT_paint_color: 'bl_ui.space_image.IMAGE_PT_paint_color' = None
IMAGE_PT_paint_curve: 'bl_ui.space_image.IMAGE_PT_paint_curve' = None
IMAGE_PT_paint_select: 'bl_ui.space_image.IMAGE_PT_paint_select' = None
IMAGE_PT_paint_settings: 'bl_ui.space_image.IMAGE_PT_paint_settings' = None
IMAGE_PT_paint_settings_advanced: 'bl_ui.space_image.IMAGE_PT_paint_settings_advanced' = None
IMAGE_PT_paint_stroke: 'bl_ui.space_image.IMAGE_PT_paint_stroke' = None
IMAGE_PT_paint_stroke_smooth_stroke: 'bl_ui.space_image.IMAGE_PT_paint_stroke_smooth_stroke' = None
IMAGE_PT_paint_swatches: 'bl_ui.space_image.IMAGE_PT_paint_swatches' = None
IMAGE_PT_proportional_edit: 'bl_ui.space_image.IMAGE_PT_proportional_edit' = None
IMAGE_PT_render_slots: 'bl_ui.space_image.IMAGE_PT_render_slots' = None
IMAGE_PT_sample_line: 'bl_ui.space_image.IMAGE_PT_sample_line' = None
IMAGE_PT_scope_sample: 'bl_ui.space_image.IMAGE_PT_scope_sample' = None
IMAGE_PT_snapping: 'bl_ui.space_image.IMAGE_PT_snapping' = None
IMAGE_PT_tools_active: 'bl_ui.space_toolsystem_toolbar.IMAGE_PT_tools_active' = None
IMAGE_PT_tools_brush_display: 'bl_ui.space_image.IMAGE_PT_tools_brush_display' = None
IMAGE_PT_tools_brush_texture: 'bl_ui.space_image.IMAGE_PT_tools_brush_texture' = None
IMAGE_PT_tools_imagepaint_symmetry: 'bl_ui.space_image.IMAGE_PT_tools_imagepaint_symmetry' = None
IMAGE_PT_tools_mask_texture: 'bl_ui.space_image.IMAGE_PT_tools_mask_texture' = None
IMAGE_PT_udim_tiles: 'bl_ui.space_image.IMAGE_PT_udim_tiles' = None
IMAGE_PT_uv_cursor: 'bl_ui.space_image.IMAGE_PT_uv_cursor' = None
IMAGE_PT_uv_sculpt_brush_select: 'bl_ui.space_image.IMAGE_PT_uv_sculpt_brush_select' = None
IMAGE_PT_uv_sculpt_brush_settings: 'bl_ui.space_image.IMAGE_PT_uv_sculpt_brush_settings' = None
IMAGE_PT_uv_sculpt_curve: 'bl_ui.space_image.IMAGE_PT_uv_sculpt_curve' = None
IMAGE_PT_uv_sculpt_options: 'bl_ui.space_image.IMAGE_PT_uv_sculpt_options' = None
IMAGE_PT_view_display: 'bl_ui.space_image.IMAGE_PT_view_display' = None
IMAGE_PT_view_histogram: 'bl_ui.space_image.IMAGE_PT_view_histogram' = None
IMAGE_PT_view_vectorscope: 'bl_ui.space_image.IMAGE_PT_view_vectorscope' = None
IMAGE_PT_view_waveform: 'bl_ui.space_image.IMAGE_PT_view_waveform' = None
IMAGE_UL_render_slots: 'bl_ui.space_image.IMAGE_UL_render_slots' = None
IMAGE_UL_udim_tiles: 'bl_ui.space_image.IMAGE_UL_udim_tiles' = None
INFO_HT_header: 'bl_ui.space_info.INFO_HT_header' = None
INFO_MT_area: 'bl_ui.space_info.INFO_MT_area' = None
INFO_MT_context_menu: 'bl_ui.space_info.INFO_MT_context_menu' = None
INFO_MT_editor_menus: 'bl_ui.space_info.INFO_MT_editor_menus' = None
INFO_MT_info: 'bl_ui.space_info.INFO_MT_info' = None
INFO_MT_view: 'bl_ui.space_info.INFO_MT_view' = None
MASK_MT_add: 'bl_ui.properties_mask_common.MASK_MT_add' = None
MASK_MT_animation: 'bl_ui.properties_mask_common.MASK_MT_animation' = None
MASK_MT_mask: 'bl_ui.properties_mask_common.MASK_MT_mask' = None
MASK_MT_select: 'bl_ui.properties_mask_common.MASK_MT_select' = None
MASK_MT_transform: 'bl_ui.properties_mask_common.MASK_MT_transform' = None
MASK_MT_visibility: 'bl_ui.properties_mask_common.MASK_MT_visibility' = None
MASK_UL_layers: 'bl_ui.properties_mask_common.MASK_UL_layers' = None
MATERIAL_MT_context_menu: 'bl_ui.properties_material.MATERIAL_MT_context_menu' = None
MATERIAL_PT_custom_props: 'bl_ui.properties_material.MATERIAL_PT_custom_props' = None
MATERIAL_PT_freestyle_line: 'bl_ui.properties_freestyle.MATERIAL_PT_freestyle_line' = None
MATERIAL_PT_gpencil_custom_props: 'bl_ui.properties_material_gpencil.MATERIAL_PT_gpencil_custom_props' = None
MATERIAL_PT_gpencil_fillcolor: 'bl_ui.properties_material_gpencil.MATERIAL_PT_gpencil_fillcolor' = None
MATERIAL_PT_gpencil_material_presets: 'bl_ui.properties_material_gpencil.MATERIAL_PT_gpencil_material_presets' = None
MATERIAL_PT_gpencil_preview: 'bl_ui.properties_material_gpencil.MATERIAL_PT_gpencil_preview' = None
MATERIAL_PT_gpencil_settings: 'bl_ui.properties_material_gpencil.MATERIAL_PT_gpencil_settings' = None
MATERIAL_PT_gpencil_slots: 'bl_ui.properties_material_gpencil.MATERIAL_PT_gpencil_slots' = None
MATERIAL_PT_gpencil_strokecolor: 'bl_ui.properties_material_gpencil.MATERIAL_PT_gpencil_strokecolor' = None
MATERIAL_PT_gpencil_surface: 'bl_ui.properties_material_gpencil.MATERIAL_PT_gpencil_surface' = None
MATERIAL_PT_lineart: 'bl_ui.properties_material.MATERIAL_PT_lineart' = None
MATERIAL_PT_preview: 'bl_ui.properties_material.MATERIAL_PT_preview' = None
MATERIAL_PT_viewport: 'bl_ui.properties_material.MATERIAL_PT_viewport' = None
MATERIAL_UL_matslots: 'bl_ui.properties_material.MATERIAL_UL_matslots' = None
MESH_MT_attribute_context_menu: 'bl_ui.properties_data_mesh.MESH_MT_attribute_context_menu' = None
MESH_MT_color_attribute_context_menu: 'bl_ui.properties_data_mesh.MESH_MT_color_attribute_context_menu' = None
MESH_MT_shape_key_context_menu: 'bl_ui.properties_data_mesh.MESH_MT_shape_key_context_menu' = None
MESH_MT_vertex_group_context_menu: 'bl_ui.properties_data_mesh.MESH_MT_vertex_group_context_menu' = None
MESH_UL_attributes: 'bl_ui.properties_data_mesh.MESH_UL_attributes' = None
MESH_UL_color_attributes: 'bl_ui.properties_data_mesh.MESH_UL_color_attributes' = None
MESH_UL_color_attributes_selector: 'bl_ui.properties_data_mesh.MESH_UL_color_attributes_selector' = None
MESH_UL_fmaps: 'bl_ui.properties_data_mesh.MESH_UL_fmaps' = None
MESH_UL_shape_keys: 'bl_ui.properties_data_mesh.MESH_UL_shape_keys' = None
MESH_UL_uvmaps: 'bl_ui.properties_data_mesh.MESH_UL_uvmaps' = None
MESH_UL_vgroups: 'bl_ui.properties_data_mesh.MESH_UL_vgroups' = None
NLA_HT_header: 'bl_ui.space_nla.NLA_HT_header' = None
NLA_MT_add: 'bl_ui.space_nla.NLA_MT_add' = None
NLA_MT_channel_context_menu: 'bl_ui.space_nla.NLA_MT_channel_context_menu' = None
NLA_MT_context_menu: 'bl_ui.space_nla.NLA_MT_context_menu' = None
NLA_MT_edit: 'bl_ui.space_nla.NLA_MT_edit' = None
NLA_MT_edit_transform: 'bl_ui.space_nla.NLA_MT_edit_transform' = None
NLA_MT_editor_menus: 'bl_ui.space_nla.NLA_MT_editor_menus' = None
NLA_MT_marker: 'bl_ui.space_nla.NLA_MT_marker' = None
NLA_MT_marker_select: 'bl_ui.space_nla.NLA_MT_marker_select' = None
NLA_MT_select: 'bl_ui.space_nla.NLA_MT_select' = None
NLA_MT_snap_pie: 'bl_ui.space_nla.NLA_MT_snap_pie' = None
NLA_MT_view: 'bl_ui.space_nla.NLA_MT_view' = None
NLA_MT_view_pie: 'bl_ui.space_nla.NLA_MT_view_pie' = None
NLA_OT_bake: 'bl_operators.anim.NLA_OT_bake' = None
NLA_PT_action: 'bl_ui.space_nla.NLA_PT_action' = None
NLA_PT_filters: 'bl_ui.space_nla.NLA_PT_filters' = None
NODE_HT_header: 'bl_ui.space_node.NODE_HT_header' = None
NODE_MT_add: 'bl_ui.space_node.NODE_MT_add' = None
NODE_MT_category_GEO_GROUP: 'bl_ui.node_add_menu_geometry.NODE_MT_category_GEO_GROUP' = None
NODE_MT_category_GEO_LAYOUT: 'bl_ui.node_add_menu_geometry.NODE_MT_category_GEO_LAYOUT' = None
NODE_MT_category_GEO_OUTPUT: 'bl_ui.node_add_menu_geometry.NODE_MT_category_GEO_OUTPUT' = None
NODE_MT_category_GEO_POINT: 'bl_ui.node_add_menu_geometry.NODE_MT_category_GEO_POINT' = None
NODE_MT_category_GEO_TEXT: 'bl_ui.node_add_menu_geometry.NODE_MT_category_GEO_TEXT' = None
NODE_MT_category_GEO_TEXTURE: 'bl_ui.node_add_menu_geometry.NODE_MT_category_GEO_TEXTURE' = None
NODE_MT_category_GEO_UTILITIES: 'bl_ui.node_add_menu_geometry.NODE_MT_category_GEO_UTILITIES' = None
NODE_MT_category_GEO_UV: 'bl_ui.node_add_menu_geometry.NODE_MT_category_GEO_UV' = None
NODE_MT_category_GEO_VECTOR: 'bl_ui.node_add_menu_geometry.NODE_MT_category_GEO_VECTOR' = None
NODE_MT_category_GEO_VOLUME: 'bl_ui.node_add_menu_geometry.NODE_MT_category_GEO_VOLUME' = None
NODE_MT_category_PRIMITIVES_MESH: 'bl_ui.node_add_menu_geometry.NODE_MT_category_PRIMITIVES_MESH' = None
NODE_MT_context_menu: 'bl_ui.space_node.NODE_MT_context_menu' = None
NODE_MT_context_menu_select_menu: 'bl_ui.space_node.NODE_MT_context_menu_select_menu' = None
NODE_MT_context_menu_show_hide_menu: 'bl_ui.space_node.NODE_MT_context_menu_show_hide_menu' = None
NODE_MT_editor_menus: 'bl_ui.space_node.NODE_MT_editor_menus' = None
NODE_MT_geometry_node_GEO_ATTRIBUTE: 'bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_ATTRIBUTE' = None
NODE_MT_geometry_node_GEO_COLOR: 'bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_COLOR' = None
NODE_MT_geometry_node_GEO_CURVE: 'bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_CURVE' = None
NODE_MT_geometry_node_GEO_GEOMETRY: 'bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_GEOMETRY' = None
NODE_MT_geometry_node_GEO_INPUT: 'bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_INPUT' = None
NODE_MT_geometry_node_GEO_INSTANCE: 'bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_INSTANCE' = None
NODE_MT_geometry_node_GEO_MATERIAL: 'bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_MATERIAL' = None
NODE_MT_geometry_node_GEO_MESH: 'bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_MESH' = None
NODE_MT_geometry_node_GEO_PRIMITIVES_CURVE: 'bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_GEO_PRIMITIVES_CURVE' = None
NODE_MT_geometry_node_add_all: 'bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_add_all' = None
NODE_MT_geometry_node_curve_topology: 'bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_curve_topology' = None
NODE_MT_geometry_node_mesh_topology: 'bl_ui.node_add_menu_geometry.NODE_MT_geometry_node_mesh_topology' = None
NODE_MT_node: 'bl_ui.space_node.NODE_MT_node' = None
NODE_MT_node_color_context_menu: 'bl_ui.space_node.NODE_MT_node_color_context_menu' = None
NODE_MT_select: 'bl_ui.space_node.NODE_MT_select' = None
NODE_MT_view: 'bl_ui.space_node.NODE_MT_view' = None
NODE_MT_view_pie: 'bl_ui.space_node.NODE_MT_view_pie' = None
NODE_OT_add_node: 'bl_operators.node.NODE_OT_add_node' = None
NODE_OT_collapse_hide_unused_toggle: 'bl_operators.node.NODE_OT_collapse_hide_unused_toggle' = None
NODE_OT_tree_path_parent: 'bl_operators.node.NODE_OT_tree_path_parent' = None
NODE_PT_active_node_color: 'bl_ui.space_node.NODE_PT_active_node_color' = None
NODE_PT_active_node_generic: 'bl_ui.space_node.NODE_PT_active_node_generic' = None
NODE_PT_active_node_properties: 'bl_ui.space_node.NODE_PT_active_node_properties' = None
NODE_PT_active_tool: 'bl_ui.space_node.NODE_PT_active_tool' = None
NODE_PT_annotation: 'bl_ui.space_node.NODE_PT_annotation' = None
NODE_PT_backdrop: 'bl_ui.space_node.NODE_PT_backdrop' = None
NODE_PT_material_slots: 'bl_ui.space_node.NODE_PT_material_slots' = None
NODE_PT_node_color_presets: 'bl_ui.space_node.NODE_PT_node_color_presets' = None
NODE_PT_node_tree_interface_inputs: 'bl_ui.space_node.NODE_PT_node_tree_interface_inputs' = None
NODE_PT_node_tree_interface_outputs: 'bl_ui.space_node.NODE_PT_node_tree_interface_outputs' = None
NODE_PT_overlay: 'bl_ui.space_node.NODE_PT_overlay' = None
NODE_PT_quality: 'bl_ui.space_node.NODE_PT_quality' = None
NODE_PT_texture_mapping: 'bl_ui.space_node.NODE_PT_texture_mapping' = None
NODE_PT_tools_active: 'bl_ui.space_toolsystem_toolbar.NODE_PT_tools_active' = None
NODE_UL_interface_sockets: 'bl_ui.space_node.NODE_UL_interface_sockets' = None
OBJECT_OT_assign_property_defaults: 'bl_operators.object.OBJECT_OT_assign_property_defaults' = None
OBJECT_PT_bActionConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bActionConstraint' = None
OBJECT_PT_bActionConstraint_action: 'bl_ui.properties_constraint.OBJECT_PT_bActionConstraint_action' = None
OBJECT_PT_bActionConstraint_target: 'bl_ui.properties_constraint.OBJECT_PT_bActionConstraint_target' = None
OBJECT_PT_bArmatureConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bArmatureConstraint' = None
OBJECT_PT_bArmatureConstraint_bones: 'bl_ui.properties_constraint.OBJECT_PT_bArmatureConstraint_bones' = None
OBJECT_PT_bCameraSolverConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bCameraSolverConstraint' = None
OBJECT_PT_bChildOfConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bChildOfConstraint' = None
OBJECT_PT_bClampToConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bClampToConstraint' = None
OBJECT_PT_bDampTrackConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bDampTrackConstraint' = None
OBJECT_PT_bDistLimitConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bDistLimitConstraint' = None
OBJECT_PT_bFollowPathConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bFollowPathConstraint' = None
OBJECT_PT_bFollowTrackConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bFollowTrackConstraint' = None
OBJECT_PT_bKinematicConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bKinematicConstraint' = None
OBJECT_PT_bLocLimitConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bLocLimitConstraint' = None
OBJECT_PT_bLocateLikeConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bLocateLikeConstraint' = None
OBJECT_PT_bLockTrackConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bLockTrackConstraint' = None
OBJECT_PT_bMinMaxConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bMinMaxConstraint' = None
OBJECT_PT_bObjectSolverConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bObjectSolverConstraint' = None
OBJECT_PT_bPivotConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bPivotConstraint' = None
OBJECT_PT_bPythonConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bPythonConstraint' = None
OBJECT_PT_bRotLimitConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bRotLimitConstraint' = None
OBJECT_PT_bRotateLikeConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bRotateLikeConstraint' = None
OBJECT_PT_bSameVolumeConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bSameVolumeConstraint' = None
OBJECT_PT_bShrinkwrapConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bShrinkwrapConstraint' = None
OBJECT_PT_bSizeLikeConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bSizeLikeConstraint' = None
OBJECT_PT_bSizeLimitConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bSizeLimitConstraint' = None
OBJECT_PT_bStretchToConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bStretchToConstraint' = None
OBJECT_PT_bTrackToConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bTrackToConstraint' = None
OBJECT_PT_bTransLikeConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bTransLikeConstraint' = None
OBJECT_PT_bTransformCacheConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bTransformCacheConstraint' = None
OBJECT_PT_bTransformCacheConstraint_layers: 'bl_ui.properties_constraint.OBJECT_PT_bTransformCacheConstraint_layers' = None
OBJECT_PT_bTransformCacheConstraint_procedural: 'bl_ui.properties_constraint.OBJECT_PT_bTransformCacheConstraint_procedural' = None
OBJECT_PT_bTransformCacheConstraint_time: 'bl_ui.properties_constraint.OBJECT_PT_bTransformCacheConstraint_time' = None
OBJECT_PT_bTransformCacheConstraint_velocity: 'bl_ui.properties_constraint.OBJECT_PT_bTransformCacheConstraint_velocity' = None
OBJECT_PT_bTransformConstraint: 'bl_ui.properties_constraint.OBJECT_PT_bTransformConstraint' = None
OBJECT_PT_bTransformConstraint_destination: 'bl_ui.properties_constraint.OBJECT_PT_bTransformConstraint_destination' = None
OBJECT_PT_bTransformConstraint_source: 'bl_ui.properties_constraint.OBJECT_PT_bTransformConstraint_source' = None
OBJECT_PT_collections: 'bl_ui.properties_object.OBJECT_PT_collections' = None
OBJECT_PT_constraints: 'bl_ui.properties_constraint.OBJECT_PT_constraints' = None
OBJECT_PT_context_object: 'bl_ui.properties_object.OBJECT_PT_context_object' = None
OBJECT_PT_custom_props: 'bl_ui.properties_object.OBJECT_PT_custom_props' = None
OBJECT_PT_delta_transform: 'bl_ui.properties_object.OBJECT_PT_delta_transform' = None
OBJECT_PT_display: 'bl_ui.properties_object.OBJECT_PT_display' = None
OBJECT_PT_instancing: 'bl_ui.properties_object.OBJECT_PT_instancing' = None
OBJECT_PT_instancing_size: 'bl_ui.properties_object.OBJECT_PT_instancing_size' = None
OBJECT_PT_lineart: 'bl_ui.properties_object.OBJECT_PT_lineart' = None
OBJECT_PT_motion_paths: 'bl_ui.properties_object.OBJECT_PT_motion_paths' = None
OBJECT_PT_motion_paths_display: 'bl_ui.properties_object.OBJECT_PT_motion_paths_display' = None
OBJECT_PT_relations: 'bl_ui.properties_object.OBJECT_PT_relations' = None
OBJECT_PT_transform: 'bl_ui.properties_object.OBJECT_PT_transform' = None
OBJECT_PT_visibility: 'bl_ui.properties_object.OBJECT_PT_visibility' = None
OUTLINER_HT_header: 'bl_ui.space_outliner.OUTLINER_HT_header' = None
OUTLINER_MT_asset: 'bl_ui.space_outliner.OUTLINER_MT_asset' = None
OUTLINER_MT_collection: 'bl_ui.space_outliner.OUTLINER_MT_collection' = None
OUTLINER_MT_collection_new: 'bl_ui.space_outliner.OUTLINER_MT_collection_new' = None
OUTLINER_MT_collection_view_layer: 'bl_ui.space_outliner.OUTLINER_MT_collection_view_layer' = None
OUTLINER_MT_collection_visibility: 'bl_ui.space_outliner.OUTLINER_MT_collection_visibility' = None
OUTLINER_MT_context_menu: 'bl_ui.space_outliner.OUTLINER_MT_context_menu' = None
OUTLINER_MT_context_menu_view: 'bl_ui.space_outliner.OUTLINER_MT_context_menu_view' = None
OUTLINER_MT_edit_datablocks: 'bl_ui.space_outliner.OUTLINER_MT_edit_datablocks' = None
OUTLINER_MT_editor_menus: 'bl_ui.space_outliner.OUTLINER_MT_editor_menus' = None
OUTLINER_MT_liboverride: 'bl_ui.space_outliner.OUTLINER_MT_liboverride' = None
OUTLINER_MT_object: 'bl_ui.space_outliner.OUTLINER_MT_object' = None
OUTLINER_MT_view_pie: 'bl_ui.space_outliner.OUTLINER_MT_view_pie' = None
OUTLINER_PT_filter: 'bl_ui.space_outliner.OUTLINER_PT_filter' = None
PARTICLE_MT_context_menu: 'bl_ui.properties_particle.PARTICLE_MT_context_menu' = None
PARTICLE_PT_boidbrain: 'bl_ui.properties_particle.PARTICLE_PT_boidbrain' = None
PARTICLE_PT_cache: 'bl_ui.properties_particle.PARTICLE_PT_cache' = None
PARTICLE_PT_children: 'bl_ui.properties_particle.PARTICLE_PT_children' = None
PARTICLE_PT_children_clumping: 'bl_ui.properties_particle.PARTICLE_PT_children_clumping' = None
PARTICLE_PT_children_clumping_noise: 'bl_ui.properties_particle.PARTICLE_PT_children_clumping_noise' = None
PARTICLE_PT_children_kink: 'bl_ui.properties_particle.PARTICLE_PT_children_kink' = None
PARTICLE_PT_children_parting: 'bl_ui.properties_particle.PARTICLE_PT_children_parting' = None
PARTICLE_PT_children_roughness: 'bl_ui.properties_particle.PARTICLE_PT_children_roughness' = None
PARTICLE_PT_context_particles: 'bl_ui.properties_particle.PARTICLE_PT_context_particles' = None
PARTICLE_PT_custom_props: 'bl_ui.properties_particle.PARTICLE_PT_custom_props' = None
PARTICLE_PT_draw: 'bl_ui.properties_particle.PARTICLE_PT_draw' = None
PARTICLE_PT_emission: 'bl_ui.properties_particle.PARTICLE_PT_emission' = None
PARTICLE_PT_emission_source: 'bl_ui.properties_particle.PARTICLE_PT_emission_source' = None
PARTICLE_PT_field_weights: 'bl_ui.properties_particle.PARTICLE_PT_field_weights' = None
PARTICLE_PT_force_fields: 'bl_ui.properties_particle.PARTICLE_PT_force_fields' = None
PARTICLE_PT_force_fields_type1: 'bl_ui.properties_particle.PARTICLE_PT_force_fields_type1' = None
PARTICLE_PT_force_fields_type1_falloff: 'bl_ui.properties_particle.PARTICLE_PT_force_fields_type1_falloff' = None
PARTICLE_PT_force_fields_type2: 'bl_ui.properties_particle.PARTICLE_PT_force_fields_type2' = None
PARTICLE_PT_force_fields_type2_falloff: 'bl_ui.properties_particle.PARTICLE_PT_force_fields_type2_falloff' = None
PARTICLE_PT_hair_dynamics: 'bl_ui.properties_particle.PARTICLE_PT_hair_dynamics' = None
PARTICLE_PT_hair_dynamics_collision: 'bl_ui.properties_particle.PARTICLE_PT_hair_dynamics_collision' = None
PARTICLE_PT_hair_dynamics_presets: 'bl_ui.properties_particle.PARTICLE_PT_hair_dynamics_presets' = None
PARTICLE_PT_hair_dynamics_structure: 'bl_ui.properties_particle.PARTICLE_PT_hair_dynamics_structure' = None
PARTICLE_PT_hair_dynamics_volume: 'bl_ui.properties_particle.PARTICLE_PT_hair_dynamics_volume' = None
PARTICLE_PT_hair_shape: 'bl_ui.properties_particle.PARTICLE_PT_hair_shape' = None
PARTICLE_PT_physics: 'bl_ui.properties_particle.PARTICLE_PT_physics' = None
PARTICLE_PT_physics_boids_battle: 'bl_ui.properties_particle.PARTICLE_PT_physics_boids_battle' = None
PARTICLE_PT_physics_boids_misc: 'bl_ui.properties_particle.PARTICLE_PT_physics_boids_misc' = None
PARTICLE_PT_physics_boids_movement: 'bl_ui.properties_particle.PARTICLE_PT_physics_boids_movement' = None
PARTICLE_PT_physics_deflection: 'bl_ui.properties_particle.PARTICLE_PT_physics_deflection' = None
PARTICLE_PT_physics_fluid_advanced: 'bl_ui.properties_particle.PARTICLE_PT_physics_fluid_advanced' = None
PARTICLE_PT_physics_fluid_interaction: 'bl_ui.properties_particle.PARTICLE_PT_physics_fluid_interaction' = None
PARTICLE_PT_physics_fluid_springs: 'bl_ui.properties_particle.PARTICLE_PT_physics_fluid_springs' = None
PARTICLE_PT_physics_fluid_springs_advanced: 'bl_ui.properties_particle.PARTICLE_PT_physics_fluid_springs_advanced' = None
PARTICLE_PT_physics_fluid_springs_viscoelastic: 'bl_ui.properties_particle.PARTICLE_PT_physics_fluid_springs_viscoelastic' = None
PARTICLE_PT_physics_forces: 'bl_ui.properties_particle.PARTICLE_PT_physics_forces' = None
PARTICLE_PT_physics_integration: 'bl_ui.properties_particle.PARTICLE_PT_physics_integration' = None
PARTICLE_PT_physics_relations: 'bl_ui.properties_particle.PARTICLE_PT_physics_relations' = None
PARTICLE_PT_render: 'bl_ui.properties_particle.PARTICLE_PT_render' = None
PARTICLE_PT_render_collection: 'bl_ui.properties_particle.PARTICLE_PT_render_collection' = None
PARTICLE_PT_render_collection_use_count: 'bl_ui.properties_particle.PARTICLE_PT_render_collection_use_count' = None
PARTICLE_PT_render_extra: 'bl_ui.properties_particle.PARTICLE_PT_render_extra' = None
PARTICLE_PT_render_object: 'bl_ui.properties_particle.PARTICLE_PT_render_object' = None
PARTICLE_PT_render_path: 'bl_ui.properties_particle.PARTICLE_PT_render_path' = None
PARTICLE_PT_render_path_timing: 'bl_ui.properties_particle.PARTICLE_PT_render_path_timing' = None
PARTICLE_PT_rotation: 'bl_ui.properties_particle.PARTICLE_PT_rotation' = None
PARTICLE_PT_rotation_angular_velocity: 'bl_ui.properties_particle.PARTICLE_PT_rotation_angular_velocity' = None
PARTICLE_PT_textures: 'bl_ui.properties_particle.PARTICLE_PT_textures' = None
PARTICLE_PT_velocity: 'bl_ui.properties_particle.PARTICLE_PT_velocity' = None
PARTICLE_PT_vertexgroups: 'bl_ui.properties_particle.PARTICLE_PT_vertexgroups' = None
PARTICLE_UL_particle_systems: 'bl_ui.properties_particle.PARTICLE_UL_particle_systems' = None
PHYSICS_PT_adaptive_domain: 'bl_ui.properties_physics_fluid.PHYSICS_PT_adaptive_domain' = None
PHYSICS_PT_add: 'bl_ui.properties_physics_common.PHYSICS_PT_add' = None
PHYSICS_PT_borders: 'bl_ui.properties_physics_fluid.PHYSICS_PT_borders' = None
PHYSICS_PT_cache: 'bl_ui.properties_physics_fluid.PHYSICS_PT_cache' = None
PHYSICS_PT_cloth: 'bl_ui.properties_physics_cloth.PHYSICS_PT_cloth' = None
PHYSICS_PT_cloth_cache: 'bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_cache' = None
PHYSICS_PT_cloth_collision: 'bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_collision' = None
PHYSICS_PT_cloth_damping: 'bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_damping' = None
PHYSICS_PT_cloth_field_weights: 'bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_field_weights' = None
PHYSICS_PT_cloth_internal_springs: 'bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_internal_springs' = None
PHYSICS_PT_cloth_object_collision: 'bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_object_collision' = None
PHYSICS_PT_cloth_physical_properties: 'bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_physical_properties' = None
PHYSICS_PT_cloth_pressure: 'bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_pressure' = None
PHYSICS_PT_cloth_property_weights: 'bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_property_weights' = None
PHYSICS_PT_cloth_self_collision: 'bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_self_collision' = None
PHYSICS_PT_cloth_shape: 'bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_shape' = None
PHYSICS_PT_cloth_stiffness: 'bl_ui.properties_physics_cloth.PHYSICS_PT_cloth_stiffness' = None
PHYSICS_PT_collections: 'bl_ui.properties_physics_fluid.PHYSICS_PT_collections' = None
PHYSICS_PT_collision: 'bl_ui.properties_physics_field.PHYSICS_PT_collision' = None
PHYSICS_PT_collision_particle: 'bl_ui.properties_physics_field.PHYSICS_PT_collision_particle' = None
PHYSICS_PT_collision_softbody: 'bl_ui.properties_physics_field.PHYSICS_PT_collision_softbody' = None
PHYSICS_PT_diffusion: 'bl_ui.properties_physics_fluid.PHYSICS_PT_diffusion' = None
PHYSICS_PT_dp_brush_source: 'bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_brush_source' = None
PHYSICS_PT_dp_brush_source_color_ramp: 'bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_brush_source_color_ramp' = None
PHYSICS_PT_dp_brush_velocity: 'bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_brush_velocity' = None
PHYSICS_PT_dp_brush_velocity_color_ramp: 'bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_brush_velocity_color_ramp' = None
PHYSICS_PT_dp_brush_velocity_smudge: 'bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_brush_velocity_smudge' = None
PHYSICS_PT_dp_brush_wave: 'bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_brush_wave' = None
PHYSICS_PT_dp_cache: 'bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_cache' = None
PHYSICS_PT_dp_canvas_initial_color: 'bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_canvas_initial_color' = None
PHYSICS_PT_dp_canvas_output: 'bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_canvas_output' = None
PHYSICS_PT_dp_canvas_output_paintmaps: 'bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_canvas_output_paintmaps' = None
PHYSICS_PT_dp_canvas_output_wetmaps: 'bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_canvas_output_wetmaps' = None
PHYSICS_PT_dp_effects: 'bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_effects' = None
PHYSICS_PT_dp_effects_drip: 'bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_effects_drip' = None
PHYSICS_PT_dp_effects_drip_weights: 'bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_effects_drip_weights' = None
PHYSICS_PT_dp_effects_shrink: 'bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_effects_shrink' = None
PHYSICS_PT_dp_effects_spread: 'bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_effects_spread' = None
PHYSICS_PT_dp_surface_canvas: 'bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_surface_canvas' = None
PHYSICS_PT_dp_surface_canvas_paint_dissolve: 'bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_surface_canvas_paint_dissolve' = None
PHYSICS_PT_dp_surface_canvas_paint_dry: 'bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dp_surface_canvas_paint_dry' = None
PHYSICS_PT_dynamic_paint: 'bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dynamic_paint' = None
PHYSICS_PT_dynamic_paint_settings: 'bl_ui.properties_physics_dynamicpaint.PHYSICS_PT_dynamic_paint_settings' = None
PHYSICS_PT_export: 'bl_ui.properties_physics_fluid.PHYSICS_PT_export' = None
PHYSICS_PT_field: 'bl_ui.properties_physics_field.PHYSICS_PT_field' = None
PHYSICS_PT_field_falloff: 'bl_ui.properties_physics_field.PHYSICS_PT_field_falloff' = None
PHYSICS_PT_field_falloff_angular: 'bl_ui.properties_physics_field.PHYSICS_PT_field_falloff_angular' = None
PHYSICS_PT_field_falloff_radial: 'bl_ui.properties_physics_field.PHYSICS_PT_field_falloff_radial' = None
PHYSICS_PT_field_settings: 'bl_ui.properties_physics_field.PHYSICS_PT_field_settings' = None
PHYSICS_PT_field_settings_kink: 'bl_ui.properties_physics_field.PHYSICS_PT_field_settings_kink' = None
PHYSICS_PT_field_settings_texture_select: 'bl_ui.properties_physics_field.PHYSICS_PT_field_settings_texture_select' = None
PHYSICS_PT_field_weights: 'bl_ui.properties_physics_fluid.PHYSICS_PT_field_weights' = None
PHYSICS_PT_fire: 'bl_ui.properties_physics_fluid.PHYSICS_PT_fire' = None
PHYSICS_PT_flow_initial_velocity: 'bl_ui.properties_physics_fluid.PHYSICS_PT_flow_initial_velocity' = None
PHYSICS_PT_flow_source: 'bl_ui.properties_physics_fluid.PHYSICS_PT_flow_source' = None
PHYSICS_PT_flow_texture: 'bl_ui.properties_physics_fluid.PHYSICS_PT_flow_texture' = None
PHYSICS_PT_fluid: 'bl_ui.properties_physics_fluid.PHYSICS_PT_fluid' = None
PHYSICS_PT_fluid_domain_render: 'bl_ui.properties_physics_fluid.PHYSICS_PT_fluid_domain_render' = None
PHYSICS_PT_guide: 'bl_ui.properties_physics_fluid.PHYSICS_PT_guide' = None
PHYSICS_PT_liquid: 'bl_ui.properties_physics_fluid.PHYSICS_PT_liquid' = None
PHYSICS_PT_mesh: 'bl_ui.properties_physics_fluid.PHYSICS_PT_mesh' = None
PHYSICS_PT_noise: 'bl_ui.properties_physics_fluid.PHYSICS_PT_noise' = None
PHYSICS_PT_particles: 'bl_ui.properties_physics_fluid.PHYSICS_PT_particles' = None
PHYSICS_PT_rigid_body: 'bl_ui.properties_physics_rigidbody.PHYSICS_PT_rigid_body' = None
PHYSICS_PT_rigid_body_collisions: 'bl_ui.properties_physics_rigidbody.PHYSICS_PT_rigid_body_collisions' = None
PHYSICS_PT_rigid_body_collisions_collections: 'bl_ui.properties_physics_rigidbody.PHYSICS_PT_rigid_body_collisions_collections' = None
PHYSICS_PT_rigid_body_collisions_sensitivity: 'bl_ui.properties_physics_rigidbody.PHYSICS_PT_rigid_body_collisions_sensitivity' = None
PHYSICS_PT_rigid_body_collisions_surface: 'bl_ui.properties_physics_rigidbody.PHYSICS_PT_rigid_body_collisions_surface' = None
PHYSICS_PT_rigid_body_constraint: 'bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint' = None
PHYSICS_PT_rigid_body_constraint_limits: 'bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_limits' = None
PHYSICS_PT_rigid_body_constraint_limits_angular: 'bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_limits_angular' = None
PHYSICS_PT_rigid_body_constraint_limits_linear: 'bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_limits_linear' = None
PHYSICS_PT_rigid_body_constraint_motor: 'bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_motor' = None
PHYSICS_PT_rigid_body_constraint_motor_angular: 'bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_motor_angular' = None
PHYSICS_PT_rigid_body_constraint_motor_linear: 'bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_motor_linear' = None
PHYSICS_PT_rigid_body_constraint_objects: 'bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_objects' = None
PHYSICS_PT_rigid_body_constraint_override_iterations: 'bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_override_iterations' = None
PHYSICS_PT_rigid_body_constraint_settings: 'bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_settings' = None
PHYSICS_PT_rigid_body_constraint_springs: 'bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_springs' = None
PHYSICS_PT_rigid_body_constraint_springs_angular: 'bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_springs_angular' = None
PHYSICS_PT_rigid_body_constraint_springs_linear: 'bl_ui.properties_physics_rigidbody_constraint.PHYSICS_PT_rigid_body_constraint_springs_linear' = None
PHYSICS_PT_rigid_body_dynamics: 'bl_ui.properties_physics_rigidbody.PHYSICS_PT_rigid_body_dynamics' = None
PHYSICS_PT_rigid_body_dynamics_deactivation: 'bl_ui.properties_physics_rigidbody.PHYSICS_PT_rigid_body_dynamics_deactivation' = None
PHYSICS_PT_rigid_body_settings: 'bl_ui.properties_physics_rigidbody.PHYSICS_PT_rigid_body_settings' = None
PHYSICS_PT_settings: 'bl_ui.properties_physics_fluid.PHYSICS_PT_settings' = None
PHYSICS_PT_smoke: 'bl_ui.properties_physics_fluid.PHYSICS_PT_smoke' = None
PHYSICS_PT_smoke_dissolve: 'bl_ui.properties_physics_fluid.PHYSICS_PT_smoke_dissolve' = None
PHYSICS_PT_softbody: 'bl_ui.properties_physics_softbody.PHYSICS_PT_softbody' = None
PHYSICS_PT_softbody_cache: 'bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_cache' = None
PHYSICS_PT_softbody_collision: 'bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_collision' = None
PHYSICS_PT_softbody_edge: 'bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_edge' = None
PHYSICS_PT_softbody_edge_aerodynamics: 'bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_edge_aerodynamics' = None
PHYSICS_PT_softbody_edge_stiffness: 'bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_edge_stiffness' = None
PHYSICS_PT_softbody_field_weights: 'bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_field_weights' = None
PHYSICS_PT_softbody_goal: 'bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_goal' = None
PHYSICS_PT_softbody_goal_settings: 'bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_goal_settings' = None
PHYSICS_PT_softbody_goal_strengths: 'bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_goal_strengths' = None
PHYSICS_PT_softbody_object: 'bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_object' = None
PHYSICS_PT_softbody_simulation: 'bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_simulation' = None
PHYSICS_PT_softbody_solver: 'bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_solver' = None
PHYSICS_PT_softbody_solver_diagnostics: 'bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_solver_diagnostics' = None
PHYSICS_PT_softbody_solver_helpers: 'bl_ui.properties_physics_softbody.PHYSICS_PT_softbody_solver_helpers' = None
PHYSICS_PT_viewport_display: 'bl_ui.properties_physics_fluid.PHYSICS_PT_viewport_display' = None
PHYSICS_PT_viewport_display_advanced: 'bl_ui.properties_physics_fluid.PHYSICS_PT_viewport_display_advanced' = None
PHYSICS_PT_viewport_display_color: 'bl_ui.properties_physics_fluid.PHYSICS_PT_viewport_display_color' = None
PHYSICS_PT_viewport_display_debug: 'bl_ui.properties_physics_fluid.PHYSICS_PT_viewport_display_debug' = None
PHYSICS_PT_viewport_display_slicing: 'bl_ui.properties_physics_fluid.PHYSICS_PT_viewport_display_slicing' = None
PHYSICS_PT_viscosity: 'bl_ui.properties_physics_fluid.PHYSICS_PT_viscosity' = None
PHYSICS_UL_dynapaint_surfaces: 'bl_ui.properties_physics_dynamicpaint.PHYSICS_UL_dynapaint_surfaces' = None
POINTCLOUD_MT_add_attribute: 'bl_ui.properties_data_pointcloud.POINTCLOUD_MT_add_attribute' = None
POINTCLOUD_UL_attributes: 'bl_ui.properties_data_pointcloud.POINTCLOUD_UL_attributes' = None
PREFERENCES_OT_addon_disable: 'bl_operators.userpref.PREFERENCES_OT_addon_disable' = None
PREFERENCES_OT_addon_enable: 'bl_operators.userpref.PREFERENCES_OT_addon_enable' = None
PREFERENCES_OT_addon_expand: 'bl_operators.userpref.PREFERENCES_OT_addon_expand' = None
PREFERENCES_OT_addon_install: 'bl_operators.userpref.PREFERENCES_OT_addon_install' = None
PREFERENCES_OT_addon_refresh: 'bl_operators.userpref.PREFERENCES_OT_addon_refresh' = None
PREFERENCES_OT_addon_remove: 'bl_operators.userpref.PREFERENCES_OT_addon_remove' = None
PREFERENCES_OT_addon_show: 'bl_operators.userpref.PREFERENCES_OT_addon_show' = None
PREFERENCES_OT_app_template_install: 'bl_operators.userpref.PREFERENCES_OT_app_template_install' = None
PREFERENCES_OT_copy_prev: 'bl_operators.userpref.PREFERENCES_OT_copy_prev' = None
PREFERENCES_OT_keyconfig_activate: 'bl_operators.userpref.PREFERENCES_OT_keyconfig_activate' = None
PREFERENCES_OT_keyconfig_export: 'bl_operators.userpref.PREFERENCES_OT_keyconfig_export' = None
PREFERENCES_OT_keyconfig_import: 'bl_operators.userpref.PREFERENCES_OT_keyconfig_import' = None
PREFERENCES_OT_keyconfig_remove: 'bl_operators.userpref.PREFERENCES_OT_keyconfig_remove' = None
PREFERENCES_OT_keyconfig_test: 'bl_operators.userpref.PREFERENCES_OT_keyconfig_test' = None
PREFERENCES_OT_keyitem_add: 'bl_operators.userpref.PREFERENCES_OT_keyitem_add' = None
PREFERENCES_OT_keyitem_remove: 'bl_operators.userpref.PREFERENCES_OT_keyitem_remove' = None
PREFERENCES_OT_keyitem_restore: 'bl_operators.userpref.PREFERENCES_OT_keyitem_restore' = None
PREFERENCES_OT_keymap_restore: 'bl_operators.userpref.PREFERENCES_OT_keymap_restore' = None
PREFERENCES_OT_studiolight_copy_settings: 'bl_operators.userpref.PREFERENCES_OT_studiolight_copy_settings' = None
PREFERENCES_OT_studiolight_install: 'bl_operators.userpref.PREFERENCES_OT_studiolight_install' = None
PREFERENCES_OT_studiolight_new: 'bl_operators.userpref.PREFERENCES_OT_studiolight_new' = None
PREFERENCES_OT_studiolight_show: 'bl_operators.userpref.PREFERENCES_OT_studiolight_show' = None
PREFERENCES_OT_studiolight_uninstall: 'bl_operators.userpref.PREFERENCES_OT_studiolight_uninstall' = None
PREFERENCES_OT_theme_install: 'bl_operators.userpref.PREFERENCES_OT_theme_install' = None
PROPERTIES_HT_header: 'bl_ui.space_properties.PROPERTIES_HT_header' = None
PROPERTIES_PT_navigation_bar: 'bl_ui.space_properties.PROPERTIES_PT_navigation_bar' = None
PROPERTIES_PT_options: 'bl_ui.space_properties.PROPERTIES_PT_options' = None
RENDER_MT_framerate_presets: 'bl_ui.properties_output.RENDER_MT_framerate_presets' = None
RENDER_MT_lineset_context_menu: 'bl_ui.properties_freestyle.RENDER_MT_lineset_context_menu' = None
RENDER_PT_color_management: 'bl_ui.properties_render.RENDER_PT_color_management' = None
RENDER_PT_color_management_curves: 'bl_ui.properties_render.RENDER_PT_color_management_curves' = None
RENDER_PT_context: 'bl_ui.properties_render.RENDER_PT_context' = None
RENDER_PT_eevee_ambient_occlusion: 'bl_ui.properties_render.RENDER_PT_eevee_ambient_occlusion' = None
RENDER_PT_eevee_bloom: 'bl_ui.properties_render.RENDER_PT_eevee_bloom' = None
RENDER_PT_eevee_depth_of_field: 'bl_ui.properties_render.RENDER_PT_eevee_depth_of_field' = None
RENDER_PT_eevee_film: 'bl_ui.properties_render.RENDER_PT_eevee_film' = None
RENDER_PT_eevee_hair: 'bl_ui.properties_render.RENDER_PT_eevee_hair' = None
RENDER_PT_eevee_indirect_lighting: 'bl_ui.properties_render.RENDER_PT_eevee_indirect_lighting' = None
RENDER_PT_eevee_indirect_lighting_display: 'bl_ui.properties_render.RENDER_PT_eevee_indirect_lighting_display' = None
RENDER_PT_eevee_motion_blur: 'bl_ui.properties_render.RENDER_PT_eevee_motion_blur' = None
RENDER_PT_eevee_next_depth_of_field: 'bl_ui.properties_render.RENDER_PT_eevee_next_depth_of_field' = None
RENDER_PT_eevee_next_film: 'bl_ui.properties_render.RENDER_PT_eevee_next_film' = None
RENDER_PT_eevee_next_motion_blur: 'bl_ui.properties_render.RENDER_PT_eevee_next_motion_blur' = None
RENDER_PT_eevee_next_sampling: 'bl_ui.properties_render.RENDER_PT_eevee_next_sampling' = None
RENDER_PT_eevee_performance: 'bl_ui.properties_render.RENDER_PT_eevee_performance' = None
RENDER_PT_eevee_sampling: 'bl_ui.properties_render.RENDER_PT_eevee_sampling' = None
RENDER_PT_eevee_screen_space_reflections: 'bl_ui.properties_render.RENDER_PT_eevee_screen_space_reflections' = None
RENDER_PT_eevee_shadows: 'bl_ui.properties_render.RENDER_PT_eevee_shadows' = None
RENDER_PT_eevee_subsurface_scattering: 'bl_ui.properties_render.RENDER_PT_eevee_subsurface_scattering' = None
RENDER_PT_eevee_volumetric: 'bl_ui.properties_render.RENDER_PT_eevee_volumetric' = None
RENDER_PT_eevee_volumetric_lighting: 'bl_ui.properties_render.RENDER_PT_eevee_volumetric_lighting' = None
RENDER_PT_eevee_volumetric_shadows: 'bl_ui.properties_render.RENDER_PT_eevee_volumetric_shadows' = None
RENDER_PT_encoding: 'bl_ui.properties_output.RENDER_PT_encoding' = None
RENDER_PT_encoding_audio: 'bl_ui.properties_output.RENDER_PT_encoding_audio' = None
RENDER_PT_encoding_video: 'bl_ui.properties_output.RENDER_PT_encoding_video' = None
RENDER_PT_ffmpeg_presets: 'bl_ui.properties_output.RENDER_PT_ffmpeg_presets' = None
RENDER_PT_format: 'bl_ui.properties_output.RENDER_PT_format' = None
RENDER_PT_format_presets: 'bl_ui.properties_output.RENDER_PT_format_presets' = None
RENDER_PT_frame_range: 'bl_ui.properties_output.RENDER_PT_frame_range' = None
RENDER_PT_freestyle: 'bl_ui.properties_freestyle.RENDER_PT_freestyle' = None
RENDER_PT_gpencil: 'bl_ui.properties_render.RENDER_PT_gpencil' = None
RENDER_PT_motion_blur_curve: 'bl_ui.properties_render.RENDER_PT_motion_blur_curve' = None
RENDER_PT_opengl_color: 'bl_ui.properties_render.RENDER_PT_opengl_color' = None
RENDER_PT_opengl_film: 'bl_ui.properties_render.RENDER_PT_opengl_film' = None
RENDER_PT_opengl_lighting: 'bl_ui.properties_render.RENDER_PT_opengl_lighting' = None
RENDER_PT_opengl_options: 'bl_ui.properties_render.RENDER_PT_opengl_options' = None
RENDER_PT_opengl_sampling: 'bl_ui.properties_render.RENDER_PT_opengl_sampling' = None
RENDER_PT_output: 'bl_ui.properties_output.RENDER_PT_output' = None
RENDER_PT_output_color_management: 'bl_ui.properties_output.RENDER_PT_output_color_management' = None
RENDER_PT_output_views: 'bl_ui.properties_output.RENDER_PT_output_views' = None
RENDER_PT_post_processing: 'bl_ui.properties_output.RENDER_PT_post_processing' = None
RENDER_PT_simplify: 'bl_ui.properties_render.RENDER_PT_simplify' = None
RENDER_PT_simplify_greasepencil: 'bl_ui.properties_render.RENDER_PT_simplify_greasepencil' = None
RENDER_PT_simplify_render: 'bl_ui.properties_render.RENDER_PT_simplify_render' = None
RENDER_PT_simplify_viewport: 'bl_ui.properties_render.RENDER_PT_simplify_viewport' = None
RENDER_PT_stamp: 'bl_ui.properties_output.RENDER_PT_stamp' = None
RENDER_PT_stamp_burn: 'bl_ui.properties_output.RENDER_PT_stamp_burn' = None
RENDER_PT_stamp_note: 'bl_ui.properties_output.RENDER_PT_stamp_note' = None
RENDER_PT_stereoscopy: 'bl_ui.properties_output.RENDER_PT_stereoscopy' = None
RENDER_PT_time_stretching: 'bl_ui.properties_output.RENDER_PT_time_stretching' = None
RENDER_UL_renderviews: 'bl_ui.properties_output.RENDER_UL_renderviews' = None
SAFE_AREAS_PT_presets: 'bl_ui.properties_data_camera.SAFE_AREAS_PT_presets' = None
SCENE_OT_freestyle_add_edge_marks_to_keying_set: 'bl_operators.freestyle.SCENE_OT_freestyle_add_edge_marks_to_keying_set' = None
SCENE_OT_freestyle_add_face_marks_to_keying_set: 'bl_operators.freestyle.SCENE_OT_freestyle_add_face_marks_to_keying_set' = None
SCENE_OT_freestyle_fill_range_by_selection: 'bl_operators.freestyle.SCENE_OT_freestyle_fill_range_by_selection' = None
SCENE_OT_freestyle_module_open: 'bl_operators.freestyle.SCENE_OT_freestyle_module_open' = None
SCENE_PT_audio: 'bl_ui.properties_scene.SCENE_PT_audio' = None
SCENE_PT_custom_props: 'bl_ui.properties_scene.SCENE_PT_custom_props' = None
SCENE_PT_keyframing_settings: 'bl_ui.properties_scene.SCENE_PT_keyframing_settings' = None
SCENE_PT_keying_set_paths: 'bl_ui.properties_scene.SCENE_PT_keying_set_paths' = None
SCENE_PT_keying_sets: 'bl_ui.properties_scene.SCENE_PT_keying_sets' = None
SCENE_PT_physics: 'bl_ui.properties_scene.SCENE_PT_physics' = None
SCENE_PT_rigid_body_cache: 'bl_ui.properties_scene.SCENE_PT_rigid_body_cache' = None
SCENE_PT_rigid_body_field_weights: 'bl_ui.properties_scene.SCENE_PT_rigid_body_field_weights' = None
SCENE_PT_rigid_body_world: 'bl_ui.properties_scene.SCENE_PT_rigid_body_world' = None
SCENE_PT_rigid_body_world_settings: 'bl_ui.properties_scene.SCENE_PT_rigid_body_world_settings' = None
SCENE_PT_scene: 'bl_ui.properties_scene.SCENE_PT_scene' = None
SCENE_PT_unit: 'bl_ui.properties_scene.SCENE_PT_unit' = None
SCENE_UL_keying_set_paths: 'bl_ui.properties_scene.SCENE_UL_keying_set_paths' = None
SEQUENCER_HT_header: 'bl_ui.space_sequencer.SEQUENCER_HT_header' = None
SEQUENCER_HT_tool_header: 'bl_ui.space_sequencer.SEQUENCER_HT_tool_header' = None
SEQUENCER_MT_add: 'bl_ui.space_sequencer.SEQUENCER_MT_add' = None
SEQUENCER_MT_add_effect: 'bl_ui.space_sequencer.SEQUENCER_MT_add_effect' = None
SEQUENCER_MT_add_empty: 'bl_ui.space_sequencer.SEQUENCER_MT_add_empty' = None
SEQUENCER_MT_add_scene: 'bl_ui.space_sequencer.SEQUENCER_MT_add_scene' = None
SEQUENCER_MT_add_transitions: 'bl_ui.space_sequencer.SEQUENCER_MT_add_transitions' = None
SEQUENCER_MT_change: 'bl_ui.space_sequencer.SEQUENCER_MT_change' = None
SEQUENCER_MT_color_tag_picker: 'bl_ui.space_sequencer.SEQUENCER_MT_color_tag_picker' = None
SEQUENCER_MT_context_menu: 'bl_ui.space_sequencer.SEQUENCER_MT_context_menu' = None
SEQUENCER_MT_editor_menus: 'bl_ui.space_sequencer.SEQUENCER_MT_editor_menus' = None
SEQUENCER_MT_image: 'bl_ui.space_sequencer.SEQUENCER_MT_image' = None
SEQUENCER_MT_image_apply: 'bl_ui.space_sequencer.SEQUENCER_MT_image_apply' = None
SEQUENCER_MT_image_clear: 'bl_ui.space_sequencer.SEQUENCER_MT_image_clear' = None
SEQUENCER_MT_image_transform: 'bl_ui.space_sequencer.SEQUENCER_MT_image_transform' = None
SEQUENCER_MT_marker: 'bl_ui.space_sequencer.SEQUENCER_MT_marker' = None
SEQUENCER_MT_navigation: 'bl_ui.space_sequencer.SEQUENCER_MT_navigation' = None
SEQUENCER_MT_pivot_pie: 'bl_ui.space_sequencer.SEQUENCER_MT_pivot_pie' = None
SEQUENCER_MT_preview_context_menu: 'bl_ui.space_sequencer.SEQUENCER_MT_preview_context_menu' = None
SEQUENCER_MT_preview_view_pie: 'bl_ui.space_sequencer.SEQUENCER_MT_preview_view_pie' = None
SEQUENCER_MT_preview_zoom: 'bl_ui.space_sequencer.SEQUENCER_MT_preview_zoom' = None
SEQUENCER_MT_proxy: 'bl_ui.space_sequencer.SEQUENCER_MT_proxy' = None
SEQUENCER_MT_range: 'bl_ui.space_sequencer.SEQUENCER_MT_range' = None
SEQUENCER_MT_select: 'bl_ui.space_sequencer.SEQUENCER_MT_select' = None
SEQUENCER_MT_select_channel: 'bl_ui.space_sequencer.SEQUENCER_MT_select_channel' = None
SEQUENCER_MT_select_handle: 'bl_ui.space_sequencer.SEQUENCER_MT_select_handle' = None
SEQUENCER_MT_select_linked: 'bl_ui.space_sequencer.SEQUENCER_MT_select_linked' = None
SEQUENCER_MT_strip: 'bl_ui.space_sequencer.SEQUENCER_MT_strip' = None
SEQUENCER_MT_strip_effect: 'bl_ui.space_sequencer.SEQUENCER_MT_strip_effect' = None
SEQUENCER_MT_strip_input: 'bl_ui.space_sequencer.SEQUENCER_MT_strip_input' = None
SEQUENCER_MT_strip_lock_mute: 'bl_ui.space_sequencer.SEQUENCER_MT_strip_lock_mute' = None
SEQUENCER_MT_strip_movie: 'bl_ui.space_sequencer.SEQUENCER_MT_strip_movie' = None
SEQUENCER_MT_strip_transform: 'bl_ui.space_sequencer.SEQUENCER_MT_strip_transform' = None
SEQUENCER_MT_view: 'bl_ui.space_sequencer.SEQUENCER_MT_view' = None
SEQUENCER_MT_view_cache: 'bl_ui.space_sequencer.SEQUENCER_MT_view_cache' = None
SEQUENCER_MT_view_pie: 'bl_ui.space_sequencer.SEQUENCER_MT_view_pie' = None
SEQUENCER_PT_active_tool: 'bl_ui.space_sequencer.SEQUENCER_PT_active_tool' = None
SEQUENCER_PT_adjust_color: 'bl_ui.space_sequencer.SEQUENCER_PT_adjust_color' = None
SEQUENCER_PT_adjust_comp: 'bl_ui.space_sequencer.SEQUENCER_PT_adjust_comp' = None
SEQUENCER_PT_adjust_crop: 'bl_ui.space_sequencer.SEQUENCER_PT_adjust_crop' = None
SEQUENCER_PT_adjust_sound: 'bl_ui.space_sequencer.SEQUENCER_PT_adjust_sound' = None
SEQUENCER_PT_adjust_transform: 'bl_ui.space_sequencer.SEQUENCER_PT_adjust_transform' = None
SEQUENCER_PT_adjust_video: 'bl_ui.space_sequencer.SEQUENCER_PT_adjust_video' = None
SEQUENCER_PT_annotation: 'bl_ui.space_sequencer.SEQUENCER_PT_annotation' = None
SEQUENCER_PT_annotation_onion: 'bl_ui.space_sequencer.SEQUENCER_PT_annotation_onion' = None
SEQUENCER_PT_cache_settings: 'bl_ui.space_sequencer.SEQUENCER_PT_cache_settings' = None
SEQUENCER_PT_color_tag_picker: 'bl_ui.space_sequencer.SEQUENCER_PT_color_tag_picker' = None
SEQUENCER_PT_custom_props: 'bl_ui.space_sequencer.SEQUENCER_PT_custom_props' = None
SEQUENCER_PT_effect: 'bl_ui.space_sequencer.SEQUENCER_PT_effect' = None
SEQUENCER_PT_effect_text_layout: 'bl_ui.space_sequencer.SEQUENCER_PT_effect_text_layout' = None
SEQUENCER_PT_effect_text_style: 'bl_ui.space_sequencer.SEQUENCER_PT_effect_text_style' = None
SEQUENCER_PT_frame_overlay: 'bl_ui.space_sequencer.SEQUENCER_PT_frame_overlay' = None
SEQUENCER_PT_gizmo_display: 'bl_ui.space_sequencer.SEQUENCER_PT_gizmo_display' = None
SEQUENCER_PT_mask: 'bl_ui.space_sequencer.SEQUENCER_PT_mask' = None
SEQUENCER_PT_modifiers: 'bl_ui.space_sequencer.SEQUENCER_PT_modifiers' = None
SEQUENCER_PT_overlay: 'bl_ui.space_sequencer.SEQUENCER_PT_overlay' = None
SEQUENCER_PT_preview: 'bl_ui.space_sequencer.SEQUENCER_PT_preview' = None
SEQUENCER_PT_preview_overlay: 'bl_ui.space_sequencer.SEQUENCER_PT_preview_overlay' = None
SEQUENCER_PT_proxy_settings: 'bl_ui.space_sequencer.SEQUENCER_PT_proxy_settings' = None
SEQUENCER_PT_scene: 'bl_ui.space_sequencer.SEQUENCER_PT_scene' = None
SEQUENCER_PT_sequencer_overlay: 'bl_ui.space_sequencer.SEQUENCER_PT_sequencer_overlay' = None
SEQUENCER_PT_snapping: 'bl_ui.space_sequencer.SEQUENCER_PT_snapping' = None
SEQUENCER_PT_source: 'bl_ui.space_sequencer.SEQUENCER_PT_source' = None
SEQUENCER_PT_strip: 'bl_ui.space_sequencer.SEQUENCER_PT_strip' = None
SEQUENCER_PT_strip_cache: 'bl_ui.space_sequencer.SEQUENCER_PT_strip_cache' = None
SEQUENCER_PT_strip_proxy: 'bl_ui.space_sequencer.SEQUENCER_PT_strip_proxy' = None
SEQUENCER_PT_time: 'bl_ui.space_sequencer.SEQUENCER_PT_time' = None
SEQUENCER_PT_tools_active: 'bl_ui.space_toolsystem_toolbar.SEQUENCER_PT_tools_active' = None
SEQUENCER_PT_view: 'bl_ui.space_sequencer.SEQUENCER_PT_view' = None
SEQUENCER_PT_view_cursor: 'bl_ui.space_sequencer.SEQUENCER_PT_view_cursor' = None
SEQUENCER_PT_view_safe_areas: 'bl_ui.space_sequencer.SEQUENCER_PT_view_safe_areas' = None
SEQUENCER_PT_view_safe_areas_center_cut: 'bl_ui.space_sequencer.SEQUENCER_PT_view_safe_areas_center_cut' = None
SPREADSHEET_HT_header: 'bl_ui.space_spreadsheet.SPREADSHEET_HT_header' = None
SPREADSHEET_OT_toggle_pin: 'bl_operators.spreadsheet.SPREADSHEET_OT_toggle_pin' = None
STATUSBAR_HT_header: 'bl_ui.space_statusbar.STATUSBAR_HT_header' = None
TEXTURE_MT_context_menu: 'bl_ui.properties_texture.TEXTURE_MT_context_menu' = None
TEXTURE_PT_blend: 'bl_ui.properties_texture.TEXTURE_PT_blend' = None
TEXTURE_PT_clouds: 'bl_ui.properties_texture.TEXTURE_PT_clouds' = None
TEXTURE_PT_colors: 'bl_ui.properties_texture.TEXTURE_PT_colors' = None
TEXTURE_PT_colors_ramp: 'bl_ui.properties_texture.TEXTURE_PT_colors_ramp' = None
TEXTURE_PT_context: 'bl_ui.properties_texture.TEXTURE_PT_context' = None
TEXTURE_PT_custom_props: 'bl_ui.properties_texture.TEXTURE_PT_custom_props' = None
TEXTURE_PT_distortednoise: 'bl_ui.properties_texture.TEXTURE_PT_distortednoise' = None
TEXTURE_PT_image: 'bl_ui.properties_texture.TEXTURE_PT_image' = None
TEXTURE_PT_image_alpha: 'bl_ui.properties_texture.TEXTURE_PT_image_alpha' = None
TEXTURE_PT_image_mapping: 'bl_ui.properties_texture.TEXTURE_PT_image_mapping' = None
TEXTURE_PT_image_mapping_crop: 'bl_ui.properties_texture.TEXTURE_PT_image_mapping_crop' = None
TEXTURE_PT_image_sampling: 'bl_ui.properties_texture.TEXTURE_PT_image_sampling' = None
TEXTURE_PT_image_settings: 'bl_ui.properties_texture.TEXTURE_PT_image_settings' = None
TEXTURE_PT_influence: 'bl_ui.properties_texture.TEXTURE_PT_influence' = None
TEXTURE_PT_magic: 'bl_ui.properties_texture.TEXTURE_PT_magic' = None
TEXTURE_PT_mapping: 'bl_ui.properties_texture.TEXTURE_PT_mapping' = None
TEXTURE_PT_marble: 'bl_ui.properties_texture.TEXTURE_PT_marble' = None
TEXTURE_PT_musgrave: 'bl_ui.properties_texture.TEXTURE_PT_musgrave' = None
TEXTURE_PT_node: 'bl_ui.properties_texture.TEXTURE_PT_node' = None
TEXTURE_PT_preview: 'bl_ui.properties_texture.TEXTURE_PT_preview' = None
TEXTURE_PT_stucci: 'bl_ui.properties_texture.TEXTURE_PT_stucci' = None
TEXTURE_PT_voronoi: 'bl_ui.properties_texture.TEXTURE_PT_voronoi' = None
TEXTURE_PT_voronoi_feature_weights: 'bl_ui.properties_texture.TEXTURE_PT_voronoi_feature_weights' = None
TEXTURE_PT_wood: 'bl_ui.properties_texture.TEXTURE_PT_wood' = None
TEXTURE_UL_texpaintslots: 'bl_ui.space_view3d_toolbar.TEXTURE_UL_texpaintslots' = None
TEXTURE_UL_texslots: 'bl_ui.properties_texture.TEXTURE_UL_texslots' = None
TEXT_HT_footer: 'bl_ui.space_text.TEXT_HT_footer' = None
TEXT_HT_header: 'bl_ui.space_text.TEXT_HT_header' = None
TEXT_MT_context_menu: 'bl_ui.space_text.TEXT_MT_context_menu' = None
TEXT_MT_edit: 'bl_ui.space_text.TEXT_MT_edit' = None
TEXT_MT_edit_to3d: 'bl_ui.space_text.TEXT_MT_edit_to3d' = None
TEXT_MT_editor_menus: 'bl_ui.space_text.TEXT_MT_editor_menus' = None
TEXT_MT_format: 'bl_ui.space_text.TEXT_MT_format' = None
TEXT_MT_select: 'bl_ui.space_text.TEXT_MT_select' = None
TEXT_MT_templates: 'bl_ui.space_text.TEXT_MT_templates' = None
TEXT_MT_templates_osl: 'bl_ui.space_text.TEXT_MT_templates_osl' = None
TEXT_MT_templates_py: 'bl_ui.space_text.TEXT_MT_templates_py' = None
TEXT_MT_text: 'bl_ui.space_text.TEXT_MT_text' = None
TEXT_MT_view: 'bl_ui.space_text.TEXT_MT_view' = None
TEXT_MT_view_navigation: 'bl_ui.space_text.TEXT_MT_view_navigation' = None
TEXT_PT_find: 'bl_ui.space_text.TEXT_PT_find' = None
TEXT_PT_properties: 'bl_ui.space_text.TEXT_PT_properties' = None
TIME_MT_cache: 'bl_ui.space_time.TIME_MT_cache' = None
TIME_MT_editor_menus: 'bl_ui.space_time.TIME_MT_editor_menus' = None
TIME_MT_marker: 'bl_ui.space_time.TIME_MT_marker' = None
TIME_MT_view: 'bl_ui.space_time.TIME_MT_view' = None
TIME_PT_auto_keyframing: 'bl_ui.space_time.TIME_PT_auto_keyframing' = None
TIME_PT_keyframing_settings: 'bl_ui.space_time.TIME_PT_keyframing_settings' = None
TIME_PT_playback: 'bl_ui.space_time.TIME_PT_playback' = None
TOPBAR_HT_upper_bar: 'bl_ui.space_topbar.TOPBAR_HT_upper_bar' = None
TOPBAR_MT_blender: 'bl_ui.space_topbar.TOPBAR_MT_blender' = None
TOPBAR_MT_blender_system: 'bl_ui.space_topbar.TOPBAR_MT_blender_system' = None
TOPBAR_MT_edit: 'bl_ui.space_topbar.TOPBAR_MT_edit' = None
TOPBAR_MT_edit_armature_add: 'bl_ui.space_view3d.TOPBAR_MT_edit_armature_add' = None
TOPBAR_MT_edit_curve_add: 'bl_ui.space_view3d.TOPBAR_MT_edit_curve_add' = None
TOPBAR_MT_editor_menus: 'bl_ui.space_topbar.TOPBAR_MT_editor_menus' = None
TOPBAR_MT_file: 'bl_ui.space_topbar.TOPBAR_MT_file' = None
TOPBAR_MT_file_cleanup: 'bl_ui.space_topbar.TOPBAR_MT_file_cleanup' = None
TOPBAR_MT_file_context_menu: 'bl_ui.space_topbar.TOPBAR_MT_file_context_menu' = None
TOPBAR_MT_file_defaults: 'bl_ui.space_topbar.TOPBAR_MT_file_defaults' = None
TOPBAR_MT_file_export: 'bl_ui.space_topbar.TOPBAR_MT_file_export' = None
TOPBAR_MT_file_external_data: 'bl_ui.space_topbar.TOPBAR_MT_file_external_data' = None
TOPBAR_MT_file_import: 'bl_ui.space_topbar.TOPBAR_MT_file_import' = None
TOPBAR_MT_file_new: 'bl_ui.space_topbar.TOPBAR_MT_file_new' = None
TOPBAR_MT_file_previews: 'bl_ui.space_topbar.TOPBAR_MT_file_previews' = None
TOPBAR_MT_file_recover: 'bl_ui.space_topbar.TOPBAR_MT_file_recover' = None
TOPBAR_MT_help: 'bl_ui.space_topbar.TOPBAR_MT_help' = None
TOPBAR_MT_render: 'bl_ui.space_topbar.TOPBAR_MT_render' = None
TOPBAR_MT_templates_more: 'bl_ui.space_topbar.TOPBAR_MT_templates_more' = None
TOPBAR_MT_window: 'bl_ui.space_topbar.TOPBAR_MT_window' = None
TOPBAR_MT_workspace_menu: 'bl_ui.space_topbar.TOPBAR_MT_workspace_menu' = None
TOPBAR_PT_annotation_layers: 'bl_ui.space_view3d.TOPBAR_PT_annotation_layers' = None
TOPBAR_PT_gpencil_layers: 'bl_ui.space_topbar.TOPBAR_PT_gpencil_layers' = None
TOPBAR_PT_gpencil_materials: 'bl_ui.space_view3d.TOPBAR_PT_gpencil_materials' = None
TOPBAR_PT_gpencil_primitive: 'bl_ui.space_topbar.TOPBAR_PT_gpencil_primitive' = None
TOPBAR_PT_gpencil_vertexcolor: 'bl_ui.space_view3d.TOPBAR_PT_gpencil_vertexcolor' = None
TOPBAR_PT_name: 'bl_ui.space_topbar.TOPBAR_PT_name' = None
TOPBAR_PT_name_marker: 'bl_ui.space_topbar.TOPBAR_PT_name_marker' = None
TOPBAR_PT_tool_fallback: 'bl_ui.space_topbar.TOPBAR_PT_tool_fallback' = None
TOPBAR_PT_tool_settings_extra: 'bl_ui.space_topbar.TOPBAR_PT_tool_settings_extra' = None
UI_MT_button_context_menu: 'bl_ui.UI_MT_button_context_menu' = None
UI_MT_list_item_context_menu: 'bl_ui.UI_MT_list_item_context_menu' = None
UI_UL_list: 'bl_ui.UI_UL_list' = None
USERPREF_HT_header: 'bl_ui.space_userpref.USERPREF_HT_header' = None
USERPREF_MT_editor_menus: 'bl_ui.space_userpref.USERPREF_MT_editor_menus' = None
USERPREF_MT_interface_theme_presets: 'bl_ui.space_userpref.USERPREF_MT_interface_theme_presets' = None
USERPREF_MT_keyconfigs: 'bl_ui.space_userpref.USERPREF_MT_keyconfigs' = None
USERPREF_MT_save_load: 'bl_ui.space_userpref.USERPREF_MT_save_load' = None
USERPREF_MT_view: 'bl_ui.space_userpref.USERPREF_MT_view' = None
USERPREF_PT_addons: 'bl_ui.space_userpref.USERPREF_PT_addons' = None
USERPREF_PT_animation_fcurves: 'bl_ui.space_userpref.USERPREF_PT_animation_fcurves' = None
USERPREF_PT_animation_keyframes: 'bl_ui.space_userpref.USERPREF_PT_animation_keyframes' = None
USERPREF_PT_animation_timeline: 'bl_ui.space_userpref.USERPREF_PT_animation_timeline' = None
USERPREF_PT_edit_annotations: 'bl_ui.space_userpref.USERPREF_PT_edit_annotations' = None
USERPREF_PT_edit_cursor: 'bl_ui.space_userpref.USERPREF_PT_edit_cursor' = None
USERPREF_PT_edit_gpencil: 'bl_ui.space_userpref.USERPREF_PT_edit_gpencil' = None
USERPREF_PT_edit_misc: 'bl_ui.space_userpref.USERPREF_PT_edit_misc' = None
USERPREF_PT_edit_objects: 'bl_ui.space_userpref.USERPREF_PT_edit_objects' = None
USERPREF_PT_edit_objects_duplicate_data: 'bl_ui.space_userpref.USERPREF_PT_edit_objects_duplicate_data' = None
USERPREF_PT_edit_objects_new: 'bl_ui.space_userpref.USERPREF_PT_edit_objects_new' = None
USERPREF_PT_edit_text_editor: 'bl_ui.space_userpref.USERPREF_PT_edit_text_editor' = None
USERPREF_PT_edit_weight_paint: 'bl_ui.space_userpref.USERPREF_PT_edit_weight_paint' = None
USERPREF_PT_experimental_debugging: 'bl_ui.space_userpref.USERPREF_PT_experimental_debugging' = None
USERPREF_PT_experimental_new_features: 'bl_ui.space_userpref.USERPREF_PT_experimental_new_features' = None
USERPREF_PT_experimental_prototypes: 'bl_ui.space_userpref.USERPREF_PT_experimental_prototypes' = None
USERPREF_PT_file_paths_applications: 'bl_ui.space_userpref.USERPREF_PT_file_paths_applications' = None
USERPREF_PT_file_paths_asset_libraries: 'bl_ui.space_userpref.USERPREF_PT_file_paths_asset_libraries' = None
USERPREF_PT_file_paths_data: 'bl_ui.space_userpref.USERPREF_PT_file_paths_data' = None
USERPREF_PT_file_paths_development: 'bl_ui.space_userpref.USERPREF_PT_file_paths_development' = None
USERPREF_PT_file_paths_render: 'bl_ui.space_userpref.USERPREF_PT_file_paths_render' = None
USERPREF_PT_input_keyboard: 'bl_ui.space_userpref.USERPREF_PT_input_keyboard' = None
USERPREF_PT_input_mouse: 'bl_ui.space_userpref.USERPREF_PT_input_mouse' = None
USERPREF_PT_input_ndof: 'bl_ui.space_userpref.USERPREF_PT_input_ndof' = None
USERPREF_PT_input_tablet: 'bl_ui.space_userpref.USERPREF_PT_input_tablet' = None
USERPREF_PT_input_touchpad: 'bl_ui.space_userpref.USERPREF_PT_input_touchpad' = None
USERPREF_PT_interface_display: 'bl_ui.space_userpref.USERPREF_PT_interface_display' = None
USERPREF_PT_interface_editors: 'bl_ui.space_userpref.USERPREF_PT_interface_editors' = None
USERPREF_PT_interface_menus: 'bl_ui.space_userpref.USERPREF_PT_interface_menus' = None
USERPREF_PT_interface_menus_mouse_over: 'bl_ui.space_userpref.USERPREF_PT_interface_menus_mouse_over' = None
USERPREF_PT_interface_menus_pie: 'bl_ui.space_userpref.USERPREF_PT_interface_menus_pie' = None
USERPREF_PT_interface_statusbar: 'bl_ui.space_userpref.USERPREF_PT_interface_statusbar' = None
USERPREF_PT_interface_temporary_windows: 'bl_ui.space_userpref.USERPREF_PT_interface_temporary_windows' = None
USERPREF_PT_interface_text: 'bl_ui.space_userpref.USERPREF_PT_interface_text' = None
USERPREF_PT_interface_translation: 'bl_ui.space_userpref.USERPREF_PT_interface_translation' = None
USERPREF_PT_keymap: 'bl_ui.space_userpref.USERPREF_PT_keymap' = None
USERPREF_PT_navigation_bar: 'bl_ui.space_userpref.USERPREF_PT_navigation_bar' = None
USERPREF_PT_navigation_fly_walk: 'bl_ui.space_userpref.USERPREF_PT_navigation_fly_walk' = None
USERPREF_PT_navigation_fly_walk_gravity: 'bl_ui.space_userpref.USERPREF_PT_navigation_fly_walk_gravity' = None
USERPREF_PT_navigation_fly_walk_navigation: 'bl_ui.space_userpref.USERPREF_PT_navigation_fly_walk_navigation' = None
USERPREF_PT_navigation_orbit: 'bl_ui.space_userpref.USERPREF_PT_navigation_orbit' = None
USERPREF_PT_navigation_zoom: 'bl_ui.space_userpref.USERPREF_PT_navigation_zoom' = None
USERPREF_PT_ndof_settings: 'bl_ui.space_userpref.USERPREF_PT_ndof_settings' = None
USERPREF_PT_save_preferences: 'bl_ui.space_userpref.USERPREF_PT_save_preferences' = None
USERPREF_PT_saveload_autorun: 'bl_ui.space_userpref.USERPREF_PT_saveload_autorun' = None
USERPREF_PT_saveload_blend: 'bl_ui.space_userpref.USERPREF_PT_saveload_blend' = None
USERPREF_PT_saveload_blend_autosave: 'bl_ui.space_userpref.USERPREF_PT_saveload_blend_autosave' = None
USERPREF_PT_saveload_file_browser: 'bl_ui.space_userpref.USERPREF_PT_saveload_file_browser' = None
USERPREF_PT_studiolight_light_editor: 'bl_ui.space_userpref.USERPREF_PT_studiolight_light_editor' = None
USERPREF_PT_studiolight_lights: 'bl_ui.space_userpref.USERPREF_PT_studiolight_lights' = None
USERPREF_PT_studiolight_matcaps: 'bl_ui.space_userpref.USERPREF_PT_studiolight_matcaps' = None
USERPREF_PT_studiolight_world: 'bl_ui.space_userpref.USERPREF_PT_studiolight_world' = None
USERPREF_PT_system_cycles_devices: 'bl_ui.space_userpref.USERPREF_PT_system_cycles_devices' = None
USERPREF_PT_system_gpu_backend: 'bl_ui.space_userpref.USERPREF_PT_system_gpu_backend' = None
USERPREF_PT_system_memory: 'bl_ui.space_userpref.USERPREF_PT_system_memory' = None
USERPREF_PT_system_os_settings: 'bl_ui.space_userpref.USERPREF_PT_system_os_settings' = None
USERPREF_PT_system_sound: 'bl_ui.space_userpref.USERPREF_PT_system_sound' = None
USERPREF_PT_system_video_sequencer: 'bl_ui.space_userpref.USERPREF_PT_system_video_sequencer' = None
USERPREF_PT_theme: 'bl_ui.space_userpref.USERPREF_PT_theme' = None
USERPREF_PT_theme_bone_color_sets: 'bl_ui.space_userpref.USERPREF_PT_theme_bone_color_sets' = None
USERPREF_PT_theme_collection_colors: 'bl_ui.space_userpref.USERPREF_PT_theme_collection_colors' = None
USERPREF_PT_theme_interface_gizmos: 'bl_ui.space_userpref.USERPREF_PT_theme_interface_gizmos' = None
USERPREF_PT_theme_interface_icons: 'bl_ui.space_userpref.USERPREF_PT_theme_interface_icons' = None
USERPREF_PT_theme_interface_state: 'bl_ui.space_userpref.USERPREF_PT_theme_interface_state' = None
USERPREF_PT_theme_interface_styles: 'bl_ui.space_userpref.USERPREF_PT_theme_interface_styles' = None
USERPREF_PT_theme_interface_transparent_checker: 'bl_ui.space_userpref.USERPREF_PT_theme_interface_transparent_checker' = None
USERPREF_PT_theme_strip_colors: 'bl_ui.space_userpref.USERPREF_PT_theme_strip_colors' = None
USERPREF_PT_theme_text_style: 'bl_ui.space_userpref.USERPREF_PT_theme_text_style' = None
USERPREF_PT_theme_user_interface: 'bl_ui.space_userpref.USERPREF_PT_theme_user_interface' = None
USERPREF_PT_viewport_display: 'bl_ui.space_userpref.USERPREF_PT_viewport_display' = None
USERPREF_PT_viewport_quality: 'bl_ui.space_userpref.USERPREF_PT_viewport_quality' = None
USERPREF_PT_viewport_selection: 'bl_ui.space_userpref.USERPREF_PT_viewport_selection' = None
USERPREF_PT_viewport_subdivision: 'bl_ui.space_userpref.USERPREF_PT_viewport_subdivision' = None
USERPREF_PT_viewport_textures: 'bl_ui.space_userpref.USERPREF_PT_viewport_textures' = None
VIEW3D_HT_header: 'bl_ui.space_view3d.VIEW3D_HT_header' = None
VIEW3D_HT_tool_header: 'bl_ui.space_view3d.VIEW3D_HT_tool_header' = None
VIEW3D_MT_add: 'bl_ui.space_view3d.VIEW3D_MT_add' = None
VIEW3D_MT_angle_control: 'bl_ui.space_view3d.VIEW3D_MT_angle_control' = None
VIEW3D_MT_armature_add: 'bl_ui.space_view3d.VIEW3D_MT_armature_add' = None
VIEW3D_MT_armature_context_menu: 'bl_ui.space_view3d.VIEW3D_MT_armature_context_menu' = None
VIEW3D_MT_assign_material: 'bl_ui.space_view3d.VIEW3D_MT_assign_material' = None
VIEW3D_MT_bone_options_disable: 'bl_ui.space_view3d.VIEW3D_MT_bone_options_disable' = None
VIEW3D_MT_bone_options_enable: 'bl_ui.space_view3d.VIEW3D_MT_bone_options_enable' = None
VIEW3D_MT_bone_options_toggle: 'bl_ui.space_view3d.VIEW3D_MT_bone_options_toggle' = None
VIEW3D_MT_brush_context_menu: 'bl_ui.space_view3d_toolbar.VIEW3D_MT_brush_context_menu' = None
VIEW3D_MT_brush_gpencil_context_menu: 'bl_ui.space_view3d_toolbar.VIEW3D_MT_brush_gpencil_context_menu' = None
VIEW3D_MT_brush_paint_modes: 'bl_ui.space_view3d.VIEW3D_MT_brush_paint_modes' = None
VIEW3D_MT_camera_add: 'bl_ui.space_view3d.VIEW3D_MT_camera_add' = None
VIEW3D_MT_curve_add: 'bl_ui.space_view3d.VIEW3D_MT_curve_add' = None
VIEW3D_MT_draw_gpencil: 'bl_ui.space_view3d.VIEW3D_MT_draw_gpencil' = None
VIEW3D_MT_edit_armature: 'bl_ui.space_view3d.VIEW3D_MT_edit_armature' = None
VIEW3D_MT_edit_armature_delete: 'bl_ui.space_view3d.VIEW3D_MT_edit_armature_delete' = None
VIEW3D_MT_edit_armature_names: 'bl_ui.space_view3d.VIEW3D_MT_edit_armature_names' = None
VIEW3D_MT_edit_armature_parent: 'bl_ui.space_view3d.VIEW3D_MT_edit_armature_parent' = None
VIEW3D_MT_edit_armature_roll: 'bl_ui.space_view3d.VIEW3D_MT_edit_armature_roll' = None
VIEW3D_MT_edit_curve: 'bl_ui.space_view3d.VIEW3D_MT_edit_curve' = None
VIEW3D_MT_edit_curve_clean: 'bl_ui.space_view3d.VIEW3D_MT_edit_curve_clean' = None
VIEW3D_MT_edit_curve_context_menu: 'bl_ui.space_view3d.VIEW3D_MT_edit_curve_context_menu' = None
VIEW3D_MT_edit_curve_ctrlpoints: 'bl_ui.space_view3d.VIEW3D_MT_edit_curve_ctrlpoints' = None
VIEW3D_MT_edit_curve_delete: 'bl_ui.space_view3d.VIEW3D_MT_edit_curve_delete' = None
VIEW3D_MT_edit_curve_segments: 'bl_ui.space_view3d.VIEW3D_MT_edit_curve_segments' = None
VIEW3D_MT_edit_curve_showhide: 'bl_ui.space_view3d.VIEW3D_MT_edit_curve_showhide' = None
VIEW3D_MT_edit_curves: 'bl_ui.space_view3d.VIEW3D_MT_edit_curves' = None
VIEW3D_MT_edit_font: 'bl_ui.space_view3d.VIEW3D_MT_edit_font' = None
VIEW3D_MT_edit_font_chars: 'bl_ui.space_view3d.VIEW3D_MT_edit_font_chars' = None
VIEW3D_MT_edit_font_context_menu: 'bl_ui.space_view3d.VIEW3D_MT_edit_font_context_menu' = None
VIEW3D_MT_edit_font_delete: 'bl_ui.space_view3d.VIEW3D_MT_edit_font_delete' = None
VIEW3D_MT_edit_font_kerning: 'bl_ui.space_view3d.VIEW3D_MT_edit_font_kerning' = None
VIEW3D_MT_edit_gpencil: 'bl_ui.space_view3d.VIEW3D_MT_edit_gpencil' = None
VIEW3D_MT_edit_gpencil_delete: 'bl_ui.space_view3d.VIEW3D_MT_edit_gpencil_delete' = None
VIEW3D_MT_edit_gpencil_point: 'bl_ui.space_view3d.VIEW3D_MT_edit_gpencil_point' = None
VIEW3D_MT_edit_gpencil_showhide: 'bl_ui.space_view3d.VIEW3D_MT_edit_gpencil_showhide' = None
VIEW3D_MT_edit_gpencil_stroke: 'bl_ui.space_view3d.VIEW3D_MT_edit_gpencil_stroke' = None
VIEW3D_MT_edit_gpencil_transform: 'bl_ui.space_view3d.VIEW3D_MT_edit_gpencil_transform' = None
VIEW3D_MT_edit_lattice: 'bl_ui.space_view3d.VIEW3D_MT_edit_lattice' = None
VIEW3D_MT_edit_lattice_context_menu: 'bl_ui.space_view3d.VIEW3D_MT_edit_lattice_context_menu' = None
VIEW3D_MT_edit_mesh: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh' = None
VIEW3D_MT_edit_mesh_clean: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh_clean' = None
VIEW3D_MT_edit_mesh_context_menu: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh_context_menu' = None
VIEW3D_MT_edit_mesh_delete: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh_delete' = None
VIEW3D_MT_edit_mesh_edges: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh_edges' = None
VIEW3D_MT_edit_mesh_extrude: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh_extrude' = None
VIEW3D_MT_edit_mesh_faces: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh_faces' = None
VIEW3D_MT_edit_mesh_faces_data: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh_faces_data' = None
VIEW3D_MT_edit_mesh_merge: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh_merge' = None
VIEW3D_MT_edit_mesh_normals: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh_normals' = None
VIEW3D_MT_edit_mesh_normals_average: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh_normals_average' = None
VIEW3D_MT_edit_mesh_normals_select_strength: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh_normals_select_strength' = None
VIEW3D_MT_edit_mesh_normals_set_strength: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh_normals_set_strength' = None
VIEW3D_MT_edit_mesh_select_by_trait: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh_select_by_trait' = None
VIEW3D_MT_edit_mesh_select_linked: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh_select_linked' = None
VIEW3D_MT_edit_mesh_select_loops: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh_select_loops' = None
VIEW3D_MT_edit_mesh_select_mode: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh_select_mode' = None
VIEW3D_MT_edit_mesh_select_more_less: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh_select_more_less' = None
VIEW3D_MT_edit_mesh_select_similar: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh_select_similar' = None
VIEW3D_MT_edit_mesh_shading: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh_shading' = None
VIEW3D_MT_edit_mesh_showhide: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh_showhide' = None
VIEW3D_MT_edit_mesh_split: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh_split' = None
VIEW3D_MT_edit_mesh_vertices: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh_vertices' = None
VIEW3D_MT_edit_mesh_weights: 'bl_ui.space_view3d.VIEW3D_MT_edit_mesh_weights' = None
VIEW3D_MT_edit_meta: 'bl_ui.space_view3d.VIEW3D_MT_edit_meta' = None
VIEW3D_MT_edit_meta_showhide: 'bl_ui.space_view3d.VIEW3D_MT_edit_meta_showhide' = None
VIEW3D_MT_edit_metaball_context_menu: 'bl_ui.space_view3d.VIEW3D_MT_edit_metaball_context_menu' = None
VIEW3D_MT_edit_surface: 'bl_ui.space_view3d.VIEW3D_MT_edit_surface' = None
VIEW3D_MT_editor_menus: 'bl_ui.space_view3d.VIEW3D_MT_editor_menus' = None
VIEW3D_MT_face_sets: 'bl_ui.space_view3d.VIEW3D_MT_face_sets' = None
VIEW3D_MT_face_sets_init: 'bl_ui.space_view3d.VIEW3D_MT_face_sets_init' = None
VIEW3D_MT_gpencil_animation: 'bl_ui.space_view3d.VIEW3D_MT_gpencil_animation' = None
VIEW3D_MT_gpencil_autoweights: 'bl_ui.space_view3d.VIEW3D_MT_gpencil_autoweights' = None
VIEW3D_MT_gpencil_edit_context_menu: 'bl_ui.space_view3d.VIEW3D_MT_gpencil_edit_context_menu' = None
VIEW3D_MT_gpencil_simplify: 'bl_ui.space_view3d.VIEW3D_MT_gpencil_simplify' = None
VIEW3D_MT_gpencil_vertex_group: 'bl_ui.space_view3d.VIEW3D_MT_gpencil_vertex_group' = None
VIEW3D_MT_hook: 'bl_ui.space_view3d.VIEW3D_MT_hook' = None
VIEW3D_MT_image_add: 'bl_ui.space_view3d.VIEW3D_MT_image_add' = None
VIEW3D_MT_light_add: 'bl_ui.space_view3d.VIEW3D_MT_light_add' = None
VIEW3D_MT_lightprobe_add: 'bl_ui.space_view3d.VIEW3D_MT_lightprobe_add' = None
VIEW3D_MT_make_links: 'bl_ui.space_view3d.VIEW3D_MT_make_links' = None
VIEW3D_MT_make_single_user: 'bl_ui.space_view3d.VIEW3D_MT_make_single_user' = None
VIEW3D_MT_mask: 'bl_ui.space_view3d.VIEW3D_MT_mask' = None
VIEW3D_MT_mesh_add: 'bl_ui.space_view3d.VIEW3D_MT_mesh_add' = None
VIEW3D_MT_metaball_add: 'bl_ui.space_view3d.VIEW3D_MT_metaball_add' = None
VIEW3D_MT_mirror: 'bl_ui.space_view3d.VIEW3D_MT_mirror' = None
VIEW3D_MT_object: 'bl_ui.space_view3d.VIEW3D_MT_object' = None
VIEW3D_MT_object_animation: 'bl_ui.space_view3d.VIEW3D_MT_object_animation' = None
VIEW3D_MT_object_apply: 'bl_ui.space_view3d.VIEW3D_MT_object_apply' = None
VIEW3D_MT_object_asset: 'bl_ui.space_view3d.VIEW3D_MT_object_asset' = None
VIEW3D_MT_object_cleanup: 'bl_ui.space_view3d.VIEW3D_MT_object_cleanup' = None
VIEW3D_MT_object_clear: 'bl_ui.space_view3d.VIEW3D_MT_object_clear' = None
VIEW3D_MT_object_collection: 'bl_ui.space_view3d.VIEW3D_MT_object_collection' = None
VIEW3D_MT_object_constraints: 'bl_ui.space_view3d.VIEW3D_MT_object_constraints' = None
VIEW3D_MT_object_context_menu: 'bl_ui.space_view3d.VIEW3D_MT_object_context_menu' = None
VIEW3D_MT_object_convert: 'bl_ui.space_view3d.VIEW3D_MT_object_convert' = None
VIEW3D_MT_object_liboverride: 'bl_ui.space_view3d.VIEW3D_MT_object_liboverride' = None
VIEW3D_MT_object_mode_pie: 'bl_ui.space_view3d.VIEW3D_MT_object_mode_pie' = None
VIEW3D_MT_object_parent: 'bl_ui.space_view3d.VIEW3D_MT_object_parent' = None
VIEW3D_MT_object_quick_effects: 'bl_ui.space_view3d.VIEW3D_MT_object_quick_effects' = None
VIEW3D_MT_object_relations: 'bl_ui.space_view3d.VIEW3D_MT_object_relations' = None
VIEW3D_MT_object_rigid_body: 'bl_ui.space_view3d.VIEW3D_MT_object_rigid_body' = None
VIEW3D_MT_object_shading: 'bl_ui.space_view3d.VIEW3D_MT_object_shading' = None
VIEW3D_MT_object_showhide: 'bl_ui.space_view3d.VIEW3D_MT_object_showhide' = None
VIEW3D_MT_object_track: 'bl_ui.space_view3d.VIEW3D_MT_object_track' = None
VIEW3D_MT_orientations_pie: 'bl_ui.space_view3d.VIEW3D_MT_orientations_pie' = None
VIEW3D_MT_paint_gpencil: 'bl_ui.space_view3d.VIEW3D_MT_paint_gpencil' = None
VIEW3D_MT_paint_vertex: 'bl_ui.space_view3d.VIEW3D_MT_paint_vertex' = None
VIEW3D_MT_paint_weight: 'bl_ui.space_view3d.VIEW3D_MT_paint_weight' = None
VIEW3D_MT_paint_weight_lock: 'bl_ui.space_view3d.VIEW3D_MT_paint_weight_lock' = None
VIEW3D_MT_particle: 'bl_ui.space_view3d.VIEW3D_MT_particle' = None
VIEW3D_MT_particle_context_menu: 'bl_ui.space_view3d.VIEW3D_MT_particle_context_menu' = None
VIEW3D_MT_particle_showhide: 'bl_ui.space_view3d.VIEW3D_MT_particle_showhide' = None
VIEW3D_MT_pivot_pie: 'bl_ui.space_view3d.VIEW3D_MT_pivot_pie' = None
VIEW3D_MT_pose: 'bl_ui.space_view3d.VIEW3D_MT_pose' = None
VIEW3D_MT_pose_apply: 'bl_ui.space_view3d.VIEW3D_MT_pose_apply' = None
VIEW3D_MT_pose_constraints: 'bl_ui.space_view3d.VIEW3D_MT_pose_constraints' = None
VIEW3D_MT_pose_context_menu: 'bl_ui.space_view3d.VIEW3D_MT_pose_context_menu' = None
VIEW3D_MT_pose_group: 'bl_ui.space_view3d.VIEW3D_MT_pose_group' = None
VIEW3D_MT_pose_ik: 'bl_ui.space_view3d.VIEW3D_MT_pose_ik' = None
VIEW3D_MT_pose_motion: 'bl_ui.space_view3d.VIEW3D_MT_pose_motion' = None
VIEW3D_MT_pose_names: 'bl_ui.space_view3d.VIEW3D_MT_pose_names' = None
VIEW3D_MT_pose_propagate: 'bl_ui.space_view3d.VIEW3D_MT_pose_propagate' = None
VIEW3D_MT_pose_showhide: 'bl_ui.space_view3d.VIEW3D_MT_pose_showhide' = None
VIEW3D_MT_pose_slide: 'bl_ui.space_view3d.VIEW3D_MT_pose_slide' = None
VIEW3D_MT_pose_transform: 'bl_ui.space_view3d.VIEW3D_MT_pose_transform' = None
VIEW3D_MT_proportional_editing_falloff_pie: 'bl_ui.space_view3d.VIEW3D_MT_proportional_editing_falloff_pie' = None
VIEW3D_MT_random_mask: 'bl_ui.space_view3d.VIEW3D_MT_random_mask' = None
VIEW3D_MT_sculpt: 'bl_ui.space_view3d.VIEW3D_MT_sculpt' = None
VIEW3D_MT_sculpt_automasking_pie: 'bl_ui.space_view3d.VIEW3D_MT_sculpt_automasking_pie' = None
VIEW3D_MT_sculpt_curves: 'bl_ui.space_view3d.VIEW3D_MT_sculpt_curves' = None
VIEW3D_MT_sculpt_face_sets_edit_pie: 'bl_ui.space_view3d.VIEW3D_MT_sculpt_face_sets_edit_pie' = None
VIEW3D_MT_sculpt_gpencil_automasking_pie: 'bl_ui.space_view3d.VIEW3D_MT_sculpt_gpencil_automasking_pie' = None
VIEW3D_MT_sculpt_mask_edit_pie: 'bl_ui.space_view3d.VIEW3D_MT_sculpt_mask_edit_pie' = None
VIEW3D_MT_sculpt_set_pivot: 'bl_ui.space_view3d.VIEW3D_MT_sculpt_set_pivot' = None
VIEW3D_MT_select_edit_armature: 'bl_ui.space_view3d.VIEW3D_MT_select_edit_armature' = None
VIEW3D_MT_select_edit_curve: 'bl_ui.space_view3d.VIEW3D_MT_select_edit_curve' = None
VIEW3D_MT_select_edit_curves: 'bl_ui.space_view3d.VIEW3D_MT_select_edit_curves' = None
VIEW3D_MT_select_edit_lattice: 'bl_ui.space_view3d.VIEW3D_MT_select_edit_lattice' = None
VIEW3D_MT_select_edit_mesh: 'bl_ui.space_view3d.VIEW3D_MT_select_edit_mesh' = None
VIEW3D_MT_select_edit_metaball: 'bl_ui.space_view3d.VIEW3D_MT_select_edit_metaball' = None
VIEW3D_MT_select_edit_surface: 'bl_ui.space_view3d.VIEW3D_MT_select_edit_surface' = None
VIEW3D_MT_select_edit_text: 'bl_ui.space_view3d.VIEW3D_MT_select_edit_text' = None
VIEW3D_MT_select_gpencil: 'bl_ui.space_view3d.VIEW3D_MT_select_gpencil' = None
VIEW3D_MT_select_object: 'bl_ui.space_view3d.VIEW3D_MT_select_object' = None
VIEW3D_MT_select_object_more_less: 'bl_ui.space_view3d.VIEW3D_MT_select_object_more_less' = None
VIEW3D_MT_select_paint_mask: 'bl_ui.space_view3d.VIEW3D_MT_select_paint_mask' = None
VIEW3D_MT_select_paint_mask_vertex: 'bl_ui.space_view3d.VIEW3D_MT_select_paint_mask_vertex' = None
VIEW3D_MT_select_particle: 'bl_ui.space_view3d.VIEW3D_MT_select_particle' = None
VIEW3D_MT_select_pose: 'bl_ui.space_view3d.VIEW3D_MT_select_pose' = None
VIEW3D_MT_select_pose_more_less: 'bl_ui.space_view3d.VIEW3D_MT_select_pose_more_less' = None
VIEW3D_MT_select_sculpt_curves: 'bl_ui.space_view3d.VIEW3D_MT_select_sculpt_curves' = None
VIEW3D_MT_shading_ex_pie: 'bl_ui.space_view3d.VIEW3D_MT_shading_ex_pie' = None
VIEW3D_MT_shading_pie: 'bl_ui.space_view3d.VIEW3D_MT_shading_pie' = None
VIEW3D_MT_snap: 'bl_ui.space_view3d.VIEW3D_MT_snap' = None
VIEW3D_MT_snap_pie: 'bl_ui.space_view3d.VIEW3D_MT_snap_pie' = None
VIEW3D_MT_surface_add: 'bl_ui.space_view3d.VIEW3D_MT_surface_add' = None
VIEW3D_MT_tools_projectpaint_clone: 'bl_ui.properties_paint_common.VIEW3D_MT_tools_projectpaint_clone' = None
VIEW3D_MT_tools_projectpaint_stencil: 'bl_ui.space_view3d_toolbar.VIEW3D_MT_tools_projectpaint_stencil' = None
VIEW3D_MT_tools_projectpaint_uvlayer: 'bl_ui.space_view3d_toolbar.VIEW3D_MT_tools_projectpaint_uvlayer' = None
VIEW3D_MT_transform: 'bl_ui.space_view3d.VIEW3D_MT_transform' = None
VIEW3D_MT_transform_armature: 'bl_ui.space_view3d.VIEW3D_MT_transform_armature' = None
VIEW3D_MT_transform_gizmo_pie: 'bl_ui.space_view3d.VIEW3D_MT_transform_gizmo_pie' = None
VIEW3D_MT_transform_object: 'bl_ui.space_view3d.VIEW3D_MT_transform_object' = None
VIEW3D_MT_uv_map: 'bl_ui.space_view3d.VIEW3D_MT_uv_map' = None
VIEW3D_MT_vertex_group: 'bl_ui.space_view3d.VIEW3D_MT_vertex_group' = None
VIEW3D_MT_view: 'bl_ui.space_view3d.VIEW3D_MT_view' = None
VIEW3D_MT_view_align: 'bl_ui.space_view3d.VIEW3D_MT_view_align' = None
VIEW3D_MT_view_align_selected: 'bl_ui.space_view3d.VIEW3D_MT_view_align_selected' = None
VIEW3D_MT_view_cameras: 'bl_ui.space_view3d.VIEW3D_MT_view_cameras' = None
VIEW3D_MT_view_local: 'bl_ui.space_view3d.VIEW3D_MT_view_local' = None
VIEW3D_MT_view_navigation: 'bl_ui.space_view3d.VIEW3D_MT_view_navigation' = None
VIEW3D_MT_view_pie: 'bl_ui.space_view3d.VIEW3D_MT_view_pie' = None
VIEW3D_MT_view_regions: 'bl_ui.space_view3d.VIEW3D_MT_view_regions' = None
VIEW3D_MT_view_viewpoint: 'bl_ui.space_view3d.VIEW3D_MT_view_viewpoint' = None
VIEW3D_MT_volume_add: 'bl_ui.space_view3d.VIEW3D_MT_volume_add' = None
VIEW3D_MT_weight_gpencil: 'bl_ui.space_view3d.VIEW3D_MT_weight_gpencil' = None
VIEW3D_MT_wpaint_vgroup_lock_pie: 'bl_ui.space_view3d.VIEW3D_MT_wpaint_vgroup_lock_pie' = None
VIEW3D_OT_edit_mesh_extrude_individual_move: 'bl_operators.view3d.VIEW3D_OT_edit_mesh_extrude_individual_move' = None
VIEW3D_OT_edit_mesh_extrude_manifold_normal: 'bl_operators.view3d.VIEW3D_OT_edit_mesh_extrude_manifold_normal' = None
VIEW3D_OT_transform_gizmo_set: 'bl_operators.view3d.VIEW3D_OT_transform_gizmo_set' = None
VIEW3D_PT_active_tool: 'bl_ui.space_view3d.VIEW3D_PT_active_tool' = None
VIEW3D_PT_active_tool_duplicate: 'bl_ui.space_view3d.VIEW3D_PT_active_tool_duplicate' = None
VIEW3D_PT_annotation_onion: 'bl_ui.space_view3d.VIEW3D_PT_annotation_onion' = None
VIEW3D_PT_collections: 'bl_ui.space_view3d.VIEW3D_PT_collections' = None
VIEW3D_PT_context_properties: 'bl_ui.space_view3d.VIEW3D_PT_context_properties' = None
VIEW3D_PT_curves_sculpt_add_shape: 'bl_ui.space_view3d.VIEW3D_PT_curves_sculpt_add_shape' = None
VIEW3D_PT_curves_sculpt_grow_shrink_scaling: 'bl_ui.space_view3d.VIEW3D_PT_curves_sculpt_grow_shrink_scaling' = None
VIEW3D_PT_curves_sculpt_symmetry: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_curves_sculpt_symmetry' = None
VIEW3D_PT_curves_sculpt_symmetry_for_topbar: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_curves_sculpt_symmetry_for_topbar' = None
VIEW3D_PT_gizmo_display: 'bl_ui.space_view3d.VIEW3D_PT_gizmo_display' = None
VIEW3D_PT_gpencil_brush_presets: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_gpencil_brush_presets' = None
VIEW3D_PT_gpencil_curve_edit: 'bl_ui.space_view3d.VIEW3D_PT_gpencil_curve_edit' = None
VIEW3D_PT_gpencil_draw_context_menu: 'bl_ui.space_view3d.VIEW3D_PT_gpencil_draw_context_menu' = None
VIEW3D_PT_gpencil_guide: 'bl_ui.space_view3d.VIEW3D_PT_gpencil_guide' = None
VIEW3D_PT_gpencil_lock: 'bl_ui.space_view3d.VIEW3D_PT_gpencil_lock' = None
VIEW3D_PT_gpencil_multi_frame: 'bl_ui.space_view3d.VIEW3D_PT_gpencil_multi_frame' = None
VIEW3D_PT_gpencil_origin: 'bl_ui.space_view3d.VIEW3D_PT_gpencil_origin' = None
VIEW3D_PT_gpencil_sculpt_automasking: 'bl_ui.space_view3d.VIEW3D_PT_gpencil_sculpt_automasking' = None
VIEW3D_PT_gpencil_sculpt_context_menu: 'bl_ui.space_view3d.VIEW3D_PT_gpencil_sculpt_context_menu' = None
VIEW3D_PT_gpencil_vertex_context_menu: 'bl_ui.space_view3d.VIEW3D_PT_gpencil_vertex_context_menu' = None
VIEW3D_PT_gpencil_weight_context_menu: 'bl_ui.space_view3d.VIEW3D_PT_gpencil_weight_context_menu' = None
VIEW3D_PT_grease_pencil: 'bl_ui.space_view3d.VIEW3D_PT_grease_pencil' = None
VIEW3D_PT_mask: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_mask' = None
VIEW3D_PT_object_type_visibility: 'bl_ui.space_view3d.VIEW3D_PT_object_type_visibility' = None
VIEW3D_PT_overlay: 'bl_ui.space_view3d.VIEW3D_PT_overlay' = None
VIEW3D_PT_overlay_bones: 'bl_ui.space_view3d.VIEW3D_PT_overlay_bones' = None
VIEW3D_PT_overlay_edit_curve: 'bl_ui.space_view3d.VIEW3D_PT_overlay_edit_curve' = None
VIEW3D_PT_overlay_edit_mesh: 'bl_ui.space_view3d.VIEW3D_PT_overlay_edit_mesh' = None
VIEW3D_PT_overlay_edit_mesh_freestyle: 'bl_ui.space_view3d.VIEW3D_PT_overlay_edit_mesh_freestyle' = None
VIEW3D_PT_overlay_edit_mesh_measurement: 'bl_ui.space_view3d.VIEW3D_PT_overlay_edit_mesh_measurement' = None
VIEW3D_PT_overlay_edit_mesh_normals: 'bl_ui.space_view3d.VIEW3D_PT_overlay_edit_mesh_normals' = None
VIEW3D_PT_overlay_edit_mesh_shading: 'bl_ui.space_view3d.VIEW3D_PT_overlay_edit_mesh_shading' = None
VIEW3D_PT_overlay_geometry: 'bl_ui.space_view3d.VIEW3D_PT_overlay_geometry' = None
VIEW3D_PT_overlay_gpencil_options: 'bl_ui.space_view3d.VIEW3D_PT_overlay_gpencil_options' = None
VIEW3D_PT_overlay_guides: 'bl_ui.space_view3d.VIEW3D_PT_overlay_guides' = None
VIEW3D_PT_overlay_motion_tracking: 'bl_ui.space_view3d.VIEW3D_PT_overlay_motion_tracking' = None
VIEW3D_PT_overlay_object: 'bl_ui.space_view3d.VIEW3D_PT_overlay_object' = None
VIEW3D_PT_overlay_sculpt: 'bl_ui.space_view3d.VIEW3D_PT_overlay_sculpt' = None
VIEW3D_PT_overlay_sculpt_curves: 'bl_ui.space_view3d.VIEW3D_PT_overlay_sculpt_curves' = None
VIEW3D_PT_overlay_texture_paint: 'bl_ui.space_view3d.VIEW3D_PT_overlay_texture_paint' = None
VIEW3D_PT_overlay_vertex_paint: 'bl_ui.space_view3d.VIEW3D_PT_overlay_vertex_paint' = None
VIEW3D_PT_overlay_weight_paint: 'bl_ui.space_view3d.VIEW3D_PT_overlay_weight_paint' = None
VIEW3D_PT_paint_texture_context_menu: 'bl_ui.space_view3d.VIEW3D_PT_paint_texture_context_menu' = None
VIEW3D_PT_paint_vertex_context_menu: 'bl_ui.space_view3d.VIEW3D_PT_paint_vertex_context_menu' = None
VIEW3D_PT_paint_weight_context_menu: 'bl_ui.space_view3d.VIEW3D_PT_paint_weight_context_menu' = None
VIEW3D_PT_proportional_edit: 'bl_ui.space_view3d.VIEW3D_PT_proportional_edit' = None
VIEW3D_PT_quad_view: 'bl_ui.space_view3d.VIEW3D_PT_quad_view' = None
VIEW3D_PT_sculpt_automasking: 'bl_ui.space_view3d.VIEW3D_PT_sculpt_automasking' = None
VIEW3D_PT_sculpt_context_menu: 'bl_ui.space_view3d.VIEW3D_PT_sculpt_context_menu' = None
VIEW3D_PT_sculpt_dyntopo: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_sculpt_dyntopo' = None
VIEW3D_PT_sculpt_options: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_sculpt_options' = None
VIEW3D_PT_sculpt_options_gravity: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_sculpt_options_gravity' = None
VIEW3D_PT_sculpt_symmetry: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_sculpt_symmetry' = None
VIEW3D_PT_sculpt_symmetry_for_topbar: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_sculpt_symmetry_for_topbar' = None
VIEW3D_PT_sculpt_voxel_remesh: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_sculpt_voxel_remesh' = None
VIEW3D_PT_shading: 'bl_ui.space_view3d.VIEW3D_PT_shading' = None
VIEW3D_PT_shading_color: 'bl_ui.space_view3d.VIEW3D_PT_shading_color' = None
VIEW3D_PT_shading_compositor: 'bl_ui.space_view3d.VIEW3D_PT_shading_compositor' = None
VIEW3D_PT_shading_lighting: 'bl_ui.space_view3d.VIEW3D_PT_shading_lighting' = None
VIEW3D_PT_shading_options: 'bl_ui.space_view3d.VIEW3D_PT_shading_options' = None
VIEW3D_PT_shading_options_shadow: 'bl_ui.space_view3d.VIEW3D_PT_shading_options_shadow' = None
VIEW3D_PT_shading_options_ssao: 'bl_ui.space_view3d.VIEW3D_PT_shading_options_ssao' = None
VIEW3D_PT_shading_render_pass: 'bl_ui.space_view3d.VIEW3D_PT_shading_render_pass' = None
VIEW3D_PT_slots_paint_canvas: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_slots_paint_canvas' = None
VIEW3D_PT_slots_projectpaint: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_slots_projectpaint' = None
VIEW3D_PT_snapping: 'bl_ui.space_view3d.VIEW3D_PT_snapping' = None
VIEW3D_PT_stencil_projectpaint: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_stencil_projectpaint' = None
VIEW3D_PT_tools_active: 'bl_ui.space_toolsystem_toolbar.VIEW3D_PT_tools_active' = None
VIEW3D_PT_tools_armatureedit_options: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_armatureedit_options' = None
VIEW3D_PT_tools_brush_clone: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_clone' = None
VIEW3D_PT_tools_brush_color: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_color' = None
VIEW3D_PT_tools_brush_display: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_display' = None
VIEW3D_PT_tools_brush_falloff: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_falloff' = None
VIEW3D_PT_tools_brush_falloff_frontface: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_falloff_frontface' = None
VIEW3D_PT_tools_brush_falloff_normal: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_falloff_normal' = None
VIEW3D_PT_tools_brush_select: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_select' = None
VIEW3D_PT_tools_brush_settings: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_settings' = None
VIEW3D_PT_tools_brush_settings_advanced: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_settings_advanced' = None
VIEW3D_PT_tools_brush_stroke: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_stroke' = None
VIEW3D_PT_tools_brush_stroke_smooth_stroke: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_stroke_smooth_stroke' = None
VIEW3D_PT_tools_brush_swatches: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_swatches' = None
VIEW3D_PT_tools_brush_texture: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_brush_texture' = None
VIEW3D_PT_tools_grease_pencil_brush_advanced: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_advanced' = None
VIEW3D_PT_tools_grease_pencil_brush_gap_closure: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_gap_closure' = None
VIEW3D_PT_tools_grease_pencil_brush_mix_palette: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_mix_palette' = None
VIEW3D_PT_tools_grease_pencil_brush_mixcolor: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_mixcolor' = None
VIEW3D_PT_tools_grease_pencil_brush_paint_falloff: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_paint_falloff' = None
VIEW3D_PT_tools_grease_pencil_brush_post_processing: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_post_processing' = None
VIEW3D_PT_tools_grease_pencil_brush_random: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_random' = None
VIEW3D_PT_tools_grease_pencil_brush_sculpt_falloff: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_sculpt_falloff' = None
VIEW3D_PT_tools_grease_pencil_brush_select: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_select' = None
VIEW3D_PT_tools_grease_pencil_brush_settings: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_settings' = None
VIEW3D_PT_tools_grease_pencil_brush_stabilizer: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_stabilizer' = None
VIEW3D_PT_tools_grease_pencil_brush_stroke: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_stroke' = None
VIEW3D_PT_tools_grease_pencil_brush_vertex_color: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_vertex_color' = None
VIEW3D_PT_tools_grease_pencil_brush_vertex_falloff: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_vertex_falloff' = None
VIEW3D_PT_tools_grease_pencil_brush_vertex_palette: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_vertex_palette' = None
VIEW3D_PT_tools_grease_pencil_brush_weight_falloff: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_brush_weight_falloff' = None
VIEW3D_PT_tools_grease_pencil_paint_appearance: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_paint_appearance' = None
VIEW3D_PT_tools_grease_pencil_sculpt_appearance: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_sculpt_appearance' = None
VIEW3D_PT_tools_grease_pencil_sculpt_brush_advanced: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_sculpt_brush_advanced' = None
VIEW3D_PT_tools_grease_pencil_sculpt_brush_popover: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_sculpt_brush_popover' = None
VIEW3D_PT_tools_grease_pencil_sculpt_select: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_sculpt_select' = None
VIEW3D_PT_tools_grease_pencil_sculpt_settings: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_sculpt_settings' = None
VIEW3D_PT_tools_grease_pencil_vertex_appearance: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_vertex_appearance' = None
VIEW3D_PT_tools_grease_pencil_vertex_paint_select: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_vertex_paint_select' = None
VIEW3D_PT_tools_grease_pencil_vertex_paint_settings: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_vertex_paint_settings' = None
VIEW3D_PT_tools_grease_pencil_weight_appearance: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_weight_appearance' = None
VIEW3D_PT_tools_grease_pencil_weight_paint_select: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_weight_paint_select' = None
VIEW3D_PT_tools_grease_pencil_weight_paint_settings: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_grease_pencil_weight_paint_settings' = None
VIEW3D_PT_tools_imagepaint_options: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_imagepaint_options' = None
VIEW3D_PT_tools_imagepaint_options_cavity: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_imagepaint_options_cavity' = None
VIEW3D_PT_tools_imagepaint_options_external: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_imagepaint_options_external' = None
VIEW3D_PT_tools_imagepaint_symmetry: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_imagepaint_symmetry' = None
VIEW3D_PT_tools_mask_texture: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_mask_texture' = None
VIEW3D_PT_tools_meshedit_options: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_meshedit_options' = None
VIEW3D_PT_tools_meshedit_options_automerge: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_meshedit_options_automerge' = None
VIEW3D_PT_tools_object_options: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_object_options' = None
VIEW3D_PT_tools_object_options_transform: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_object_options_transform' = None
VIEW3D_PT_tools_particlemode: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_particlemode' = None
VIEW3D_PT_tools_particlemode_options: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_particlemode_options' = None
VIEW3D_PT_tools_particlemode_options_display: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_particlemode_options_display' = None
VIEW3D_PT_tools_particlemode_options_shapecut: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_particlemode_options_shapecut' = None
VIEW3D_PT_tools_posemode_options: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_posemode_options' = None
VIEW3D_PT_tools_vertexpaint_options: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_vertexpaint_options' = None
VIEW3D_PT_tools_vertexpaint_symmetry: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_vertexpaint_symmetry' = None
VIEW3D_PT_tools_vertexpaint_symmetry_for_topbar: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_vertexpaint_symmetry_for_topbar' = None
VIEW3D_PT_tools_weight_gradient: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_weight_gradient' = None
VIEW3D_PT_tools_weightpaint_options: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_weightpaint_options' = None
VIEW3D_PT_tools_weightpaint_symmetry: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_weightpaint_symmetry' = None
VIEW3D_PT_tools_weightpaint_symmetry_for_topbar: 'bl_ui.space_view3d_toolbar.VIEW3D_PT_tools_weightpaint_symmetry_for_topbar' = None
VIEW3D_PT_transform_orientations: 'bl_ui.space_view3d.VIEW3D_PT_transform_orientations' = None
VIEW3D_PT_view3d_cursor: 'bl_ui.space_view3d.VIEW3D_PT_view3d_cursor' = None
VIEW3D_PT_view3d_lock: 'bl_ui.space_view3d.VIEW3D_PT_view3d_lock' = None
VIEW3D_PT_view3d_properties: 'bl_ui.space_view3d.VIEW3D_PT_view3d_properties' = None
VIEW3D_PT_view3d_stereo: 'bl_ui.space_view3d.VIEW3D_PT_view3d_stereo' = None
VIEW3D_PT_viewport_debug: 'bl_ui.space_view3d.VIEW3D_PT_viewport_debug' = None
VIEWLAYER_MT_lightgroup_sync: 'bl_ui.properties_view_layer.VIEWLAYER_MT_lightgroup_sync' = None
VIEWLAYER_PT_eevee_layer_passes_data: 'bl_ui.properties_view_layer.VIEWLAYER_PT_eevee_layer_passes_data' = None
VIEWLAYER_PT_eevee_layer_passes_effects: 'bl_ui.properties_view_layer.VIEWLAYER_PT_eevee_layer_passes_effects' = None
VIEWLAYER_PT_eevee_layer_passes_light: 'bl_ui.properties_view_layer.VIEWLAYER_PT_eevee_layer_passes_light' = None
VIEWLAYER_PT_eevee_next_layer_passes_data: 'bl_ui.properties_view_layer.VIEWLAYER_PT_eevee_next_layer_passes_data' = None
VIEWLAYER_PT_freestyle: 'bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle' = None
VIEWLAYER_PT_freestyle_edge_detection: 'bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_edge_detection' = None
VIEWLAYER_PT_freestyle_lineset: 'bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_lineset' = None
VIEWLAYER_PT_freestyle_lineset_collection: 'bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_lineset_collection' = None
VIEWLAYER_PT_freestyle_lineset_edgetype: 'bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_lineset_edgetype' = None
VIEWLAYER_PT_freestyle_lineset_facemarks: 'bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_lineset_facemarks' = None
VIEWLAYER_PT_freestyle_lineset_visibilty: 'bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_lineset_visibilty' = None
VIEWLAYER_PT_freestyle_linestyle_alpha: 'bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_alpha' = None
VIEWLAYER_PT_freestyle_linestyle_color: 'bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_color' = None
VIEWLAYER_PT_freestyle_linestyle_geometry: 'bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_geometry' = None
VIEWLAYER_PT_freestyle_linestyle_strokes: 'bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_strokes' = None
VIEWLAYER_PT_freestyle_linestyle_strokes_chaining: 'bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_strokes_chaining' = None
VIEWLAYER_PT_freestyle_linestyle_strokes_dashedline: 'bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_strokes_dashedline' = None
VIEWLAYER_PT_freestyle_linestyle_strokes_selection: 'bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_strokes_selection' = None
VIEWLAYER_PT_freestyle_linestyle_strokes_sorting: 'bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_strokes_sorting' = None
VIEWLAYER_PT_freestyle_linestyle_strokes_splitting: 'bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_strokes_splitting' = None
VIEWLAYER_PT_freestyle_linestyle_strokes_splitting_pattern: 'bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_strokes_splitting_pattern' = None
VIEWLAYER_PT_freestyle_linestyle_texture: 'bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_texture' = None
VIEWLAYER_PT_freestyle_linestyle_thickness: 'bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_linestyle_thickness' = None
VIEWLAYER_PT_freestyle_style_modules: 'bl_ui.properties_freestyle.VIEWLAYER_PT_freestyle_style_modules' = None
VIEWLAYER_PT_layer: 'bl_ui.properties_view_layer.VIEWLAYER_PT_layer' = None
VIEWLAYER_PT_layer_custom_props: 'bl_ui.properties_view_layer.VIEWLAYER_PT_layer_custom_props' = None
VIEWLAYER_PT_layer_passes: 'bl_ui.properties_view_layer.VIEWLAYER_PT_layer_passes' = None
VIEWLAYER_PT_layer_passes_aov: 'bl_ui.properties_view_layer.VIEWLAYER_PT_layer_passes_aov' = None
VIEWLAYER_PT_layer_passes_cryptomatte: 'bl_ui.properties_view_layer.VIEWLAYER_PT_layer_passes_cryptomatte' = None
VIEWLAYER_PT_layer_passes_lightgroups: 'bl_ui.properties_view_layer.VIEWLAYER_PT_layer_passes_lightgroups' = None
VIEWLAYER_UL_aov: 'bl_ui.properties_view_layer.VIEWLAYER_UL_aov' = None
VIEWLAYER_UL_linesets: 'bl_ui.properties_freestyle.VIEWLAYER_UL_linesets' = None
VOLUME_UL_grids: 'bl_ui.properties_data_volume.VOLUME_UL_grids' = None
WM_MT_operator_presets: 'bl_operators.presets.WM_MT_operator_presets' = None
WM_MT_splash: 'bl_operators.wm.WM_MT_splash' = None
WM_MT_splash_about: 'bl_operators.wm.WM_MT_splash_about' = None
WM_MT_splash_quick_setup: 'bl_operators.wm.WM_MT_splash_quick_setup' = None
WM_MT_toolsystem_submenu: 'bl_ui.space_toolsystem_common.WM_MT_toolsystem_submenu' = None
WM_OT_batch_rename: 'bl_operators.wm.WM_OT_batch_rename' = None
WM_OT_blend_strings_utf8_validate: 'bl_operators.file.WM_OT_blend_strings_utf8_validate' = None
WM_OT_context_collection_boolean_set: 'bl_operators.wm.WM_OT_context_collection_boolean_set' = None
WM_OT_context_cycle_array: 'bl_operators.wm.WM_OT_context_cycle_array' = None
WM_OT_context_cycle_enum: 'bl_operators.wm.WM_OT_context_cycle_enum' = None
WM_OT_context_cycle_int: 'bl_operators.wm.WM_OT_context_cycle_int' = None
WM_OT_context_menu_enum: 'bl_operators.wm.WM_OT_context_menu_enum' = None
WM_OT_context_modal_mouse: 'bl_operators.wm.WM_OT_context_modal_mouse' = None
WM_OT_context_pie_enum: 'bl_operators.wm.WM_OT_context_pie_enum' = None
WM_OT_context_scale_float: 'bl_operators.wm.WM_OT_context_scale_float' = None
WM_OT_context_scale_int: 'bl_operators.wm.WM_OT_context_scale_int' = None
WM_OT_context_set_boolean: 'bl_operators.wm.WM_OT_context_set_boolean' = None
WM_OT_context_set_enum: 'bl_operators.wm.WM_OT_context_set_enum' = None
WM_OT_context_set_float: 'bl_operators.wm.WM_OT_context_set_float' = None
WM_OT_context_set_id: 'bl_operators.wm.WM_OT_context_set_id' = None
WM_OT_context_set_int: 'bl_operators.wm.WM_OT_context_set_int' = None
WM_OT_context_set_string: 'bl_operators.wm.WM_OT_context_set_string' = None
WM_OT_context_set_value: 'bl_operators.wm.WM_OT_context_set_value' = None
WM_OT_context_toggle: 'bl_operators.wm.WM_OT_context_toggle' = None
WM_OT_context_toggle_enum: 'bl_operators.wm.WM_OT_context_toggle_enum' = None
WM_OT_doc_view: 'bl_operators.wm.WM_OT_doc_view' = None
WM_OT_doc_view_manual: 'bl_operators.wm.WM_OT_doc_view_manual' = None
WM_OT_drop_blend_file: 'bl_operators.wm.WM_OT_drop_blend_file' = None
WM_OT_operator_cheat_sheet: 'bl_operators.wm.WM_OT_operator_cheat_sheet' = None
WM_OT_operator_pie_enum: 'bl_operators.wm.WM_OT_operator_pie_enum' = None
WM_OT_owner_disable: 'bl_operators.wm.WM_OT_owner_disable' = None
WM_OT_owner_enable: 'bl_operators.wm.WM_OT_owner_enable' = None
WM_OT_path_open: 'bl_operators.wm.WM_OT_path_open' = None
WM_OT_previews_batch_clear: 'bl_operators.file.WM_OT_previews_batch_clear' = None
WM_OT_previews_batch_generate: 'bl_operators.file.WM_OT_previews_batch_generate' = None
WM_OT_properties_add: 'bl_operators.wm.WM_OT_properties_add' = None
WM_OT_properties_context_change: 'bl_operators.wm.WM_OT_properties_context_change' = None
WM_OT_properties_edit: 'bl_operators.wm.WM_OT_properties_edit' = None
WM_OT_properties_edit_value: 'bl_operators.wm.WM_OT_properties_edit_value' = None
WM_OT_properties_remove: 'bl_operators.wm.WM_OT_properties_remove' = None
WM_OT_sysinfo: 'bl_operators.wm.WM_OT_sysinfo' = None
WM_OT_tool_set_by_id: 'bl_operators.wm.WM_OT_tool_set_by_id' = None
WM_OT_tool_set_by_index: 'bl_operators.wm.WM_OT_tool_set_by_index' = None
WM_OT_toolbar: 'bl_operators.wm.WM_OT_toolbar' = None
WM_OT_toolbar_fallback_pie: 'bl_operators.wm.WM_OT_toolbar_fallback_pie' = None
WM_OT_toolbar_prompt: 'bl_operators.wm.WM_OT_toolbar_prompt' = None
WM_OT_url_open: 'bl_operators.wm.WM_OT_url_open' = None
WM_OT_url_open_preset: 'bl_operators.wm.WM_OT_url_open_preset' = None
WORKSPACE_PT_addons: 'bl_ui.properties_workspace.WORKSPACE_PT_addons' = None
WORKSPACE_PT_custom_props: 'bl_ui.properties_workspace.WORKSPACE_PT_custom_props' = None
WORKSPACE_PT_main: 'bl_ui.properties_workspace.WORKSPACE_PT_main' = None
WORLD_PT_context_world: 'bl_ui.properties_world.WORLD_PT_context_world' = None
WORLD_PT_custom_props: 'bl_ui.properties_world.WORLD_PT_custom_props' = None
WORLD_PT_viewport_display: 'bl_ui.properties_world.WORLD_PT_viewport_display' = None