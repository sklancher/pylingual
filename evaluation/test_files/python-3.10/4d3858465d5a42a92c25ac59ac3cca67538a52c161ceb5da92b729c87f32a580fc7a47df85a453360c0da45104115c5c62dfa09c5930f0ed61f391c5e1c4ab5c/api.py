from __future__ import absolute_import, division, print_function
__metaclass__ = type

class ModuleDocFragment(object):
    DOCUMENTATION = '\noptions:\n  hostname:\n    description:\n      - RouterOS hostname API.\n    required: true\n    type: str\n  username:\n    description:\n      - RouterOS login user.\n    required: true\n    type: str\n  password:\n    description:\n      - RouterOS user password.\n    required: true\n    type: str\n  timeout:\n    description:\n      - Timeout for the request.\n    type: int\n    default: 10\n    version_added: 2.3.0\n  tls:\n    description:\n      - If is set TLS will be used for RouterOS API connection.\n    required: false\n    type: bool\n    default: false\n    aliases:\n      - ssl\n  port:\n    description:\n      - RouterOS api port. If I(tls) is set, port will apply to TLS/SSL connection.\n      - Defaults are C(8728) for the HTTP API, and C(8729) for the HTTPS API.\n    type: int\n  force_no_cert:\n    description:\n      - Set to C(true) to connect without a certificate when I(tls=true).\n      - See also I(validate_certs).\n      - B(Note:) this forces the use of anonymous Diffie-Hellman (ADH) ciphers. The protocol is susceptible\n        to Man-in-the-Middle attacks, because the keys used in the exchange are not authenticated.\n        Instead of simply connecting without a certificate to "make things work" have a look at\n        I(validate_certs) and I(ca_path).\n    type: bool\n    default: false\n    version_added: 2.4.0\n  validate_certs:\n    description:\n      - Set to C(false) to skip validation of TLS certificates.\n      - See also I(validate_cert_hostname). Only used when I(tls=true).\n      - B(Note:) instead of simply deactivating certificate validations to "make things work",\n        please consider creating your own CA certificate and using it to sign certificates used\n        for your router. You can tell the module about your CA certificate with the I(ca_path)\n        option.\n    type: bool\n    default: true\n    version_added: 1.2.0\n  validate_cert_hostname:\n    description:\n      - Set to C(true) to validate hostnames in certificates.\n      - See also I(validate_certs). Only used when I(tls=true) and I(validate_certs=true).\n    type: bool\n    default: false\n    version_added: 1.2.0\n  ca_path:\n    description:\n      - PEM formatted file that contains a CA certificate to be used for certificate validation.\n      - See also I(validate_cert_hostname). Only used when I(tls=true) and I(validate_certs=true).\n    type: path\n    version_added: 1.2.0\n  encoding:\n    description:\n      - Use the specified encoding when communicating with the RouterOS device.\n      - Default is C(ASCII). Note that C(UTF-8) requires librouteros 3.2.1 or newer.\n    type: str\n    default: ASCII\n    version_added: 2.1.0\nrequirements:\n  - librouteros\n  - Python >= 3.6 (for librouteros)\nseealso:\n  - ref: ansible_collections.community.routeros.docsite.api-guide\n    description: How to connect to RouterOS devices with the RouterOS API\n'