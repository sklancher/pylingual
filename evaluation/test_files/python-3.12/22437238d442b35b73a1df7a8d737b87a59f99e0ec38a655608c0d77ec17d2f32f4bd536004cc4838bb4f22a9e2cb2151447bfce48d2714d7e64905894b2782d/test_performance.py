import math
import random
import pytest
import time
import tornado.testing
from statistics import mean, median, stdev
from tornado.ioloop import IOLoop
from tinybird.sql_template import get_template_and_variables
from tinybird.sql_toolset import replace_tables_chquery_cached, sql_get_used_tables_cached
from tinybird.token_scope import scopes
from tinybird.user import Users, User
from .conftest import is_main_process
from .views.base_test import BaseTest

def get_cache_info():
    hits, misses, _, _ = get_template_and_variables.cache_info()
    return (hits, misses)

def flush_all_caches():
    get_template_and_variables.cache_clear()
    sql_get_used_tables_cached.cache_clear()
    replace_tables_chquery_cached.cache_clear()

@pytest.mark.serial
@pytest.mark.skipif(not is_main_process(), reason='Serial test')
class TestPerformance(BaseTest):
    ITERATIONS = 80

    def check_timings(self, timings, max_mean: float, max_p90: float, max_min: float):
        min_timings = min(timings)
        mean_timings = mean(timings)
        stdev_timings = stdev(timings)
        median_timings = median(timings)
        p90_timings = sorted(timings)[math.ceil(self.ITERATIONS * 0.9) - 1]
        print(f'Timing metrics:\n            min    {min_timings:.5f}\n            mean   {mean_timings:.5f}\n            stdev  {stdev_timings:.5f}\n            median {median_timings:.5f}\n            p90    {p90_timings:.5f}')
        self.assertTrue(min_timings < max_min, f'Invalid min time performance: {min_timings} < {max_min}')
        self.assertTrue(mean_timings < max_mean, f'Invalid mean time performance: {mean_timings} < {max_mean}')
        self.assertTrue(p90_timings < max_p90, f'Invalid P90 time performance: {p90_timings} < {max_p90}')

    async def replace_tables_with_options(self, flush=True, randomize=None, sync=False):
        if flush:
            await IOLoop.current().run_in_executor(User.replace_executor, flush_all_caches)
        if randomize:
            self.variables[randomize] = f'{random.randint(0, 1000000000)}'
        start = time.time()
        if sync:
            _ = self.u.replace_tables(f'SELECT * FROM {self.pipe.id}', readable_resources=self.readable_resources, pipe=self.pipe, use_pipe_nodes=False, variables=self.variables, template_execution_results=self.template_execution_results)
        else:
            _ = await self.u.replace_tables_async(f'SELECT * FROM {self.pipe.id}', readable_resources=self.readable_resources, pipe=self.pipe, use_pipe_nodes=False, variables=self.variables, template_execution_results=self.template_execution_results)
        return time.time() - start

    async def get_replace_timings(self, flush=False, randomize=None):
        times = []
        for _i in range(self.ITERATIONS):
            t = await self.replace_tables_with_options(flush=flush, sync=False, randomize=randomize)
            times.append(t)
        return times

    @tornado.testing.gen_test(timeout=360)
    async def test_template_cache_random_parameter(self):
        datasources = ['article_commercial_tags_join_global_parent_partnumber', 'articles_commercial_tags', 'articles_filters', 'articles_join', 'articles_join_global_partnumber', 'datetime_lut', 'product_rank_month_mt', 'product_rank_mt', 'product_rank_rt_mt', 'sales_historic_landing', 'sales_historic_last_date', 'sales_rt', 'stores', 'stores_join', 'tagging_array', 'worldwide_stores', 'worldwide_stores_join_by_country']
        nodes = [{'name': 'all_stores', 'sql': 'SELECT *\n                FROM stores\n                UNION ALL\n                SELECT *\n                FROM worldwide_stores '}, {'name': 'by_timestamp', 'sql': '%\n                with\n                    {% comment "prepare a map purchase_location -> offset to be used in query" %}\n                    (\n                        select length(location) > 0 ? location: [0] from (\n                            select groupArray(location) location from (select * from stores order by cod_store)\n                        )\n                    ) as countries,\n                    (\n                        select length(offsets) > 0 ? offsets: [0] from (\n                            select groupArray(-offset) offsets from\n                            (select timezone from stores order by cod_store)\n                            any left join\n                            (select timezone, offset from datetime_lut where date = toDate(now()))\n                            using timezone\n                        )\n                    ) as timezones\n                SELECT\n                cast(sku_rank_lc as String) sku_rank_lc,\n                groupUniqArrayState(parent_catentry) as parent_catentry_array,\n                {% for last, x in enumerate_with_last(split_to_array(attr, \'amount_return\')) %}\n                {% if x == \'order_count\' %}\n                        toInt64(uniq(cod_order_wcs)) as order_count,\n                {% elif x.startswith(\'amount\') %}\n                        sumIf(amount * joinGet({{TABLE(\'stores_join\', quote="\'")}}, \'exchange_rate\', toInt32(purchase_location))\n                        ,\n                            cod_transaction IN\n                            {{ {\'net\': (72, 772, 73, 808), \'net_req\': (72, 772, -73, -808), \'return\': (73, 808), \'gross\': (72, 772), \'return_req\': (-73, -808) }[x.split(\'_\', 1)[1]] }}\n                        )\n                {% elif x.startswith(\'units\') %}\n                        toInt64(sumIf(units, cod_transaction IN\n                            {{ { \'net\': (72, 772, 73, 808), \'net_req\': (72, 772, -73, -808), \'return\': (73, 808), \'gross\': (72, 772), \'return_req\': (-73, -808) }[x.split(\'_\', 1)[1]] }}\n                        ))\n                {% end %}\n                as {{symbol(x)}}\n                {% if not last %},{% end %}\n                {% end %}\n                FROM (\n                    WITH (select max(last_date) from sales_historic_last_date) as split_date\n                    select cod_brand, sku_rank_lc, local_timeplaced, purchase_location, amount, cod_order_wcs, cod_transaction, units, cod_device, parent_catentry\n                    {% if defined(commercial_tag) %}\n                        ,\n                        {% comment "this is a double join because the commercial tags filter" %}\n                        joinGet({{TABLE(\'article_commercial_tags_dates_join\', quote="\'")}}, \'date_range\',\n                            concat(\n                                joinGet({{TABLE(\'stores_join\', quote="\'")}}, \'country\', toInt32(purchase_location)),\n                                \'_\',\n                                joinGet({{TABLE(\'articles_join\', quote="\'")}}, \'parent_partnumber\', sku_rank_lc),\n                                \'_\',\n                                {{commercial_tag}}\n                            )\n                        ) as tag_range\n                    {% end %}\n                    from sales_rt\n                    PREWHERE\n                        local_timeplaced between toDateTime(toDate({{Date(date_start)}})) and toDateTime(toDate({{Date(date_end)}}) + 1) - 1\n                    WHERE\n                        local_timeplaced > toDateTime(split_date)\n                        {% if defined(commercial_tag) %}\n                            and local_timeplaced between toDateTime(tag_range[1]) and toDateTime(tag_range[2] + 1) - 1\n                        {% end %}\n                    and (cod_status <> \'X\' or cod_status is null) and replacement = 0\n                    {% comment "moved country filters here because there is an index by purchase_location" %}\n                    {% if defined(country) or defined(cod_brand) %}\n                        and purchase_location in (SELECT toInt16(location) from all_stores\n                            where {{sql_and(country__in=Array(country, defined=False), cod_brand__in=Array(cod_brand, \'Int32\', defined=False))}})\n                    {% end %}\n                    {% if defined(purchase_location) %}\n                        and purchase_location in {{Array(purchase_location, \'Int32\')}}\n                    {% end %}\n                    {% if defined(cod_order_type) %}\n                        and cod_order_type = {{Int32(cod_order_type)}}\n                    {% end %}\n                    UNION ALL\n                    WITH (select max(last_date) from sales_historic_last_date) as split_date\n                    select cod_brand,CAST(sku_rank AS LowCardinality(String)) sku_rank_lc,local_timeplaced, purchase_location, amount, cod_order_wcs, cod_transaction, units, cod_device, parent_catentry\n                    {% if defined(commercial_tag) %}\n                        ,\n                        {% comment "this is a double join because the commercial tags filter" %}\n                        joinGet({{TABLE(\'article_commercial_tags_dates_join\', quote="\'")}}, \'date_range\',\n                            concat(\n                                joinGet({{TABLE(\'stores_join\', quote="\'")}}, \'country\', toInt32(purchase_location)),\n                                \'_\',\n                                joinGet({{TABLE(\'articles_join\', quote="\'")}}, \'parent_partnumber\', sku_rank),\n                                \'_\',\n                                {{commercial_tag}}\n                            )\n                        ) as tag_range\n                    {% end %}\n                    from sales_historic_landing\n                    WHERE\n                        local_timeplaced between toDateTime(toDate({{Date(date_start)}})) and toDateTime(toDate({{Date(date_end)}}) + 1) - 1\n                        and local_timeplaced <= toDateTime(split_date)\n                        {% if defined(commercial_tag) %}\n                            and local_timeplaced between toDateTime(tag_range[1]) and toDateTime(tag_range[2] + 1) - 1\n                        {% end %}\n                    and (cod_status <> \'X\' or cod_status is null) and replacement = 0\n                    {% comment "moved country filters here because there is an index by purchase_location" %}\n                    {% if defined(country) or defined(cod_brand) %}\n                        and purchase_location in (SELECT toInt16(location) from all_stores\n                            where {{sql_and(country__in=Array(country, defined=False), cod_brand__in=Array(cod_brand, \'Int32\', defined=False))}})\n                    {% end %}\n                    {% if defined(purchase_location) %}\n                        and purchase_location in {{Array(purchase_location, \'Int32\')}}\n                    {% end %}\n                    {% if defined(cod_order_type) %}\n                        and cod_order_type = {{Int32(cod_order_type)}}\n                    {% end %}\n                )\n                WHERE local_timeplaced + transform(purchase_location, arrayConcat([0], countries), arrayConcat([0], timezones)) < {% if end_ts_utc == \'now\' %} now() {% else %} {{DateTime(end_ts_utc, \'2019-01-01 00:00:00\')}} {% end %}\n                -- cod_device filter (optional)\n                {% if defined(cod_device) %}\n                    and cod_device in {{Array(cod_device)}}\n                {% end %}\n                {% if defined(cod_section) or defined(cod_product) or defined(cod_family) or defined(campaign) or defined(cod_product_line) or defined(cod_subfamily) or defined(partnumber) %}\n                    and concat(\n                        toString(cod_brand),\n                        sku_rank_lc\n                    ) in (\n                        select concat(toString(cod_brand), sku_rank_lc) from {{TABLE(\'articles_filters\')}}\n                        prewhere 1\n                        {% if defined(cod_section) or defined(cod_product) or defined(cod_family) or defined(campaign) or defined(cod_product_line) or defined(cod_subfamily) %}\n                            AND {{sql_and(cod_section__in=Array(cod_section, \'Int\',defined=False), cod_product__in=Array(cod_product,\'Int\', defined=False),cod_family__in=Array(cod_family, \'Int\', defined=False), campaign__in=Array(campaign, defined=False), cod_product_line__in=Array(cod_product_line, \'Int\', defined=False), cod_subfamily__in=Array(cod_subfamily, \'Int\', defined=False))}}\n                        {% end %}\n                        {% if defined(country) or defined(cod_brand) %}\n                            and cod_brand in (\n                                SELECT cod_brand from all_stores\n                                where {{sql_and(country__in=Array(country, defined=False), cod_brand__in=Array(cod_brand, \'Int32\', defined=False))}}\n                            )\n                        {% end %}\n                        {% if defined(partnumber) %}\n                        AND\n                            {% if not defined(campaign) %}\n                                global_parent_partnumber\n                            {% else %}\n                                parent_partnumber\n                            {% end %}\n                            like {{partnumber}}\n                        {% end %}\n                    )\n                {% end %}\n                {% if defined(tags) %}\n                and parent_catentry in (select parent_catentry from {{TABLE(\'tagging\')}} where tag in {{Array(tags)}})\n                {% end %}\n                group by sku_rank_lc'}, {'name': 'historic', 'sql': '%\n                    WITH (select max(last_date) from sales_historic_last_date) as split_date\n                    SELECT\n                        cast(sku_rank_lc as String) sku_rank_lc,\n                        parent_catentry_array,\n                        purchase_location,\n                        {% if defined(commercial_tag) %}\n                            {% comment "this is a double join because the commercial tags filter" %}\n                            joinGet({{TABLE(\'article_commercial_tags_dates_join\', quote="\'")}}, \'date_range\',\n                                concat(\n                                    joinGet({{TABLE(\'stores_join\', quote="\'")}}, \'country\', toInt32(purchase_location)),\n                                    \'_\',\n                                    joinGet({{TABLE(\'articles_join\', quote="\'")}}, \'parent_partnumber\', sku_rank_lc),\n                                    \'_\',\n                                    {{commercial_tag}}\n                                )\n                            ) as tag_range,\n                        {% end %}\n                        {% for last, x in enumerate_with_last(split_to_array(attr, \'amount_return\')) %}\n                        {% if not defined(cod_device) %}\n                            {{symbol(x)}}\n                            {% if x.startswith(\'amount\') %}\n                                    * joinGet({{TABLE(\'stores_join\', quote="\'")}}, \'exchange_rate\', toInt32(purchase_location))\n                            {% end %}\n                        {% else %}\n                            {% if x == \'order_count\' %}\n                            toInt32(arraySum(\n                                arrayFilter(\n                                    (order_wcs, device_hash) -> device_hash IN (select arrayJoin(arrayMap(x -> reinterpretAsUInt64(x), {{split_to_array(cod_device, \'\')}}))),\n                                    `OrderMap.orders`,\n                                    `OrderMap.cod_device_hash`\n                                )\n                            ))\n                            {% else %}\n                                arraySum(\n                                    arrayFilter(\n                                        (amount, cod_tx, device_hash) ->\n                                            cod_tx IN {{ {\'net\': (72, 772, 73, 808), \'net_req\': (72, 772, -73, -808), \'return\': (73, 808), \'gross\': (72, 772), \'return_req\': (-73, -808) }[x.split(\'_\', 1)[1]] }}\n                                            and\n                                            device_hash IN (select arrayJoin(arrayMap(x -> reinterpretAsUInt64(x), {{split_to_array(cod_device, \'\')}}))),\n                                        {% if x.startswith(\'amount\') %}\n                                        `DeviceMap.amount`,\n                                        {% else %}\n                                        `DeviceMap.units`,\n                                        {% end %}\n                                        `DeviceMap.cod_transaction_Key`,\n                                        `DeviceMap.cod_device_hash`\n                                    )\n                                )\n                                {% if x.startswith(\'amount\') %}\n                                        * joinGet({{TABLE(\'stores_join\', quote="\'")}}, \'exchange_rate\', toInt32(purchase_location))\n                                {% end %}\n                            {% end %}\n                        {% end %}\n                        as {{symbol(x)}}\n                        {% if not last %},{% end %}\n                        {% end %}\n                    FROM\n                    {% if defined(cod_order_type) %}\n                        {{TABLE(\'product_rank_sint_mt\')}}\n                    {% else %}\n                        {{TABLE(\'product_rank_mt\')}}\n                    {% end %}\n                    WHERE\n                        date between {{Date(date_start)}} and {{Date(date_end)}}\n                        and date <= split_date\n                        {% if not defined(commercial_tag) %}\n                        and not date between\n                            addMonths(\n                                toStartOfMonth(toDate({{Date(date_start)}})),\n                                if(toStartOfMonth(toDate({{Date(date_start)}})) = toDate({{Date(date_start)}}), 0, 1)\n                            )\n                            and\n                            addMonths(\n                                toStartOfMonth(toDate({{Date(date_end)}})),\n                                if(toStartOfMonth(toDate({{Date(date_end)}})) = toStartOfMonth(toDate({{Date(date_end)}}) + 1), 0, 1)\n                            ) - 1\n                        {% else %}\n                            and date between tag_range[1] and tag_range[2]\n                        {% end %}\n                    -- country filter\n                    {% if defined(country) or defined(cod_brand) %}\n                        and purchase_location in (SELECT toUInt16(location) from all_stores\n                        where {{sql_and(country__in=Array(country, defined=False), cod_brand__in=Array(cod_brand, \'Int32\', defined=False))}})\n                    {% end %}\n                    {% if defined(purchase_location) %}\n                        and purchase_location in {{Array(purchase_location, \'Int32\')}}\n                    {% end %}'}, {'name': 'historic_month', 'sql': '%\n                    WITH (select max(last_date) from sales_historic_last_date) as split_date\n                    SELECT\n                        sku_rank_lc,\n                        parent_catentry_array,\n                        purchase_location,\n                        {% if defined(commercial_tag) %}\n                            {% comment "this is a double join because the commercial tags filter" %}\n                            joinGet({{TABLE(\'article_commercial_tags_dates_join\', quote="\'")}}, \'date_range\',\n                                concat(\n                                    joinGet({{TABLE(\'stores_join\', quote="\'")}}, \'country\', toInt32(purchase_location)),\n                                    \'_\',\n                                    joinGet({{TABLE(\'articles_join\', quote="\'")}}, \'parent_partnumber\', sku_rank_lc),\n                                    \'_\',\n                                    {{commercial_tag}}\n                                )\n                            ) as tag_range,\n                        {% end %}\n                        {% for last, x in enumerate_with_last(split_to_array(attr, \'amount_return\')) %}\n                        {% if not defined(cod_device) %}\n                            {{symbol(x)}}\n                            {% if x.startswith(\'amount\') %}\n                                    * joinGet({{TABLE(\'stores_join\', quote="\'")}}, \'exchange_rate\', toInt32(purchase_location))\n                            {% end %}\n                        {% else %}\n                            {% if x == \'order_count\' %}\n                            toInt32(arraySum(\n                                arrayFilter(\n                                    (order_wcs, device_hash) -> device_hash IN (select arrayJoin(arrayMap(x -> reinterpretAsUInt64(x), {{split_to_array(cod_device, \'\')}}))),\n                                    `OrderMap.orders`,\n                                    `OrderMap.cod_device_hash`\n                                )\n                            ))\n                            {% else %}\n                                arraySum(\n                                    arrayFilter(\n                                        (amount, cod_tx, device_hash) ->\n                                            cod_tx IN {{ {\'net\': (72, 772, 73, 808), \'net_req\': (72, 772, -73, -808), \'return\': (73, 808), \'gross\': (72, 772), \'return_req\': (-73, -808) }[x.split(\'_\', 1)[1]] }}\n                                            and\n                                            device_hash IN (select arrayJoin(arrayMap(x -> reinterpretAsUInt64(x), {{split_to_array(cod_device, \'\')}}))),\n                                        {% if x.startswith(\'amount\') %}\n                                        `DeviceMap.amount`,\n                                        {% else %}\n                                        `DeviceMap.units`,\n                                        {% end %}\n                                        `DeviceMap.cod_transaction_Key`,\n                                        `DeviceMap.cod_device_hash`\n                                    )\n                                )\n                                {% if x.startswith(\'amount\') %}\n                                        * joinGet({{TABLE(\'stores_join\', quote="\'")}}, \'exchange_rate\', toInt32(purchase_location))\n                                {% end %}\n                            {% end %}\n                        {% end %}\n                        as {{symbol(x)}}\n                        {% if not last %},{% end %}\n                        {% end %}\n                    FROM\n                    {% if defined(cod_order_type) %}\n                        {{TABLE(\'product_rank_sint_month_mt\')}}\n                    {% else %}\n                        {{TABLE(\'product_rank_month_mt\')}}\n                    {% end %}\n                    WHERE\n                        date BETWEEN\n                            addMonths(\n                                toStartOfMonth(toDate({{Date(date_start)}})),\n                                if(toStartOfMonth(toDate({{Date(date_start)}})) = toDate({{Date(date_start)}}), 0, 1)\n                            )\n                            and\n                            addMonths(\n                                toStartOfMonth(toDate({{Date(date_end)}})),\n                                if(toStartOfMonth(toDate({{Date(date_end)}})) = toStartOfMonth(toDate({{Date(date_end)}}) + 1), 0, 1)\n                            ) - 1\n                            {% if defined(commercial_tag) %}\n                                and date between tag_range[1] and tag_range[2]\n                            {% end %}\n                    -- country filter\n                    {% if defined(country) or defined(cod_brand) %}\n                        and purchase_location in (SELECT toUInt16(location) from all_stores\n                        where {{sql_and(country__in=Array(country, defined=False), cod_brand__in=Array(cod_brand, \'Int32\', defined=False))}})\n                    {% end %}\n                    {% if defined(purchase_location) %}\n                        and purchase_location in {{Array(purchase_location, \'Int32\')}}\n                    {% end %}'}, {'name': 'rt', 'sql': '%\n                    WITH (select max(last_date) from sales_historic_last_date) as split_date\n                    SELECT\n                        cast(sku_rank_lc as String) sku_rank_lc,\n                        parent_catentry_array,\n                        purchase_location,\n                        {% if defined(commercial_tag) %}\n                            {% comment "this is a double join because the commercial tags filter" %}\n                            joinGet({{TABLE(\'article_commercial_tags_dates_join\', quote="\'")}}, \'date_range\',\n                                concat(\n                                    joinGet({{TABLE(\'stores_join\', quote="\'")}}, \'country\', toInt32(purchase_location)),\n                                    \'_\',\n                                    joinGet({{TABLE(\'articles_join\', quote="\'")}}, \'parent_partnumber\', sku_rank_lc),\n                                    \'_\',\n                                    {{commercial_tag}}\n                                )\n                            ) as tag_range,\n                        {% end %}\n                        {% for last, x in enumerate_with_last(split_to_array(attr, \'amount_return\')) %}\n                        {% if not defined(cod_device) %}\n                            {{symbol(x)}}\n                            {% if x.startswith(\'amount\') %}\n                                    * joinGet({{TABLE(\'stores_join\', quote="\'")}}, \'exchange_rate\', toInt32(purchase_location))\n                            {% end %}\n                        {% else %}\n                            {% if x == \'order_count\' %}\n                            toInt32(arraySum(\n                                arrayFilter(\n                                    (order_wcs, device_hash) -> device_hash IN (select arrayJoin(arrayMap(x -> reinterpretAsUInt64(x), {{split_to_array(cod_device, \'\')}}))),\n                                    `OrderMap.orders`,\n                                    `OrderMap.cod_device_hash`\n                                )\n                            ))\n                            {% else %}\n                                arraySum(\n                                    arrayFilter(\n                                        (amount, cod_tx, device_hash) ->\n                                            cod_tx IN {{ {\'net\': (72, 772, 73, 808), \'net_req\': (72, 772, -73, -808), \'return\': (73, 808), \'gross\': (72, 772), \'return_req\': (-73, -808) }[x.split(\'_\', 1)[1]] }}\n                                            and\n                                            device_hash IN (select arrayJoin(arrayMap(x -> reinterpretAsUInt64(x), {{split_to_array(cod_device, \'\')}}))),\n                                        {% if x.startswith(\'amount\') %}\n                                        `DeviceMap.amount`,\n                                        {% else %}\n                                        `DeviceMap.units`,\n                                        {% end %}\n                                        `DeviceMap.cod_transaction_Key`,\n                                        `DeviceMap.cod_device_hash`\n                                    )\n                                )\n                                {% if x.startswith(\'amount\') %}\n                                        * joinGet({{TABLE(\'stores_join\', quote="\'")}}, \'exchange_rate\', toInt32(purchase_location))\n                                {% end %}\n                            {% end %}\n                        {% end %}\n                        as {{symbol(x)}}\n                        {% if not last %},{% end %}\n                        {% end %}\n                    FROM\n                    {% if defined(cod_order_type) %}\n                        {{TABLE(\'product_rank_rt_sint_mt\')}}\n                    {% else %}\n                        {{TABLE(\'product_rank_rt_mt\')}}\n                    {% end %}\n                    WHERE date between {{Date(date_start)}} and {{Date(date_end)}} and date > split_date\n                    {% if defined(commercial_tag) %}\n                        and date between tag_range[1] and tag_range[2]\n                    {% end %}\n                    -- country filter\n                    {% if defined(country) or defined(cod_brand) %}\n                        and purchase_location in (SELECT toUInt16(location) from all_stores\n                        where {{sql_and(country__in=Array(country, defined=False), cod_brand__in=Array(cod_brand, \'Int32\', defined=False))}})\n                    {% end %}\n                    {% if defined(purchase_location) %}\n                        and purchase_location in {{Array(purchase_location, \'Int32\')}}\n                    {% end %}'}, {'name': 'rank', 'sql': '%\n                    SELECT\n                        joinGet({{TABLE(\'articles_join\', quote="\'")}},\n                            {% if not defined(campaign) %}\n                                \'global_parent_partnumber\'\n                            {% else %}\n                                \'parent_partnumber\'\n                            {% end %}, sku_rank_lc) product_rank,\n                        groupUniqArray(sku_rank_lc) children,\n                        groupUniqArrayMerge(parent_catentry_array) as parent_catentry_array,\n                        {% for last, x in  enumerate_with_last(split_to_array(attr, \'amount_return\')) %}\n                            sum({{symbol(x)}}) as {{symbol(x)}}\n                            {% if not last %},{% end %}\n                        {% end %}\n                    FROM\n                    (\n                        select * from (\n                            {% if defined(end_ts_utc) %}\n                                SELECT * FROM by_timestamp\n                            {% else %}\n                                SELECT * from historic\n                                UNION ALL\n                                SELECT * from rt\n                                {% if not defined(commercial_tag) %}\n                                UNION ALL\n                                SELECT * from historic_month\n                                {% end %}\n                            {% end %}\n                        )\n                        {% if not defined(end_ts_utc) %}\n                        WHERE 1\n                        {% if defined(cod_section) or defined(cod_product) or defined(cod_family) or defined(campaign) or defined(cod_product_line) or defined(cod_subfamily) or defined(partnumber) %}\n                            and concat(\n                                toString(joinGet({{TABLE(\'stores_join\', quote="\'")}}, \'cod_brand\', toInt32(purchase_location))),\n                                sku_rank_lc\n                            ) in (\n                                select concat(toString(cod_brand), sku_rank_lc) from {{TABLE(\'articles_filters\')}}\n                                prewhere 1\n                                {% if defined(cod_section) or defined(cod_product) or defined(cod_family) or defined(campaign) or defined(cod_product_line) or defined(cod_subfamily) %}\n                                    AND {{sql_and(cod_section__in=Array(cod_section, \'Int\',defined=False), cod_product__in=Array(cod_product,\'Int\', defined=False),cod_family__in=Array(cod_family, \'Int\', defined=False), campaign__in=Array(campaign, defined=False), cod_product_line__in=Array(cod_product_line, \'Int\', defined=False), cod_subfamily__in=Array(cod_subfamily, \'Int\', defined=False))}}\n                                {% end %}\n                                {% if defined(country) or defined(cod_brand) %}\n                                    and cod_brand in (\n                                        SELECT distinct cod_brand from all_stores\n                                        where {{sql_and(country__in=Array(country, defined=False), cod_brand__in=Array(cod_brand, \'Int32\', defined=False))}}\n                                    )\n                                {% end %}\n                                {% if defined(partnumber) %}\n                                AND\n                                    {% if not defined(campaign) %}\n                                        global_parent_partnumber\n                                    {% else %}\n                                        parent_partnumber\n                                    {% end %}\n                                    like {{partnumber}}\n                                {% end %}\n                            )\n                        {% end %}\n                        {% end %}\n                    )\n                    WHERE product_rank != \'\'\n                    GROUP BY product_rank\n                    {% if defined(tags) %}\n                    having arraySum(arrayMap(x -> toInt64(x) in (select parent_catentry from {{TABLE(\'tagging\')}} where tag in {{Array(tags)}}) ? 1: 0,\n                        parent_catentry_array\n                    )) > 0\n                    {% end %}\n                    ORDER BY {{symbol(split_to_array(attr, \'amount_return\')[0])}}\n                        {% if defined(sort) and sort.lower() == \'asc\' %}\n                        ASC\n                        {% else %}\n                        DESC\n                        {% end %}\n                    LIMIT {{Int32(page_size, 32)}}\n                    OFFSET {{Int32(page, 0) * Int32(page_size, 32)}}'}, {'name': 'sales_in_units_and_amount_by_country', 'sql': '%\n                {% if defined(commercial_tag) %}\n                    {{max_threads(10)}}\n                {% else %}\n                    {{max_threads(8)}}\n                {% end %}\n                SELECT\n                        product_rank as sku,\n                        {% if not defined(campaign) %}\n                        joinGet({{TABLE(\'articles_join_global_partnumber\', quote="\'")}}, \'image\', product_rank) as image,\n                        joinGet({{TABLE(\'articles_join_global_partnumber\', quote="\'")}}, \'plain_image\', product_rank) as plain_image,\n                        joinGet({{TABLE(\'articles_join_global_partnumber\', quote="\'")}}, \'description\', product_rank) as description\n                        {% else %}\n                        joinGet({{TABLE(\'articles_join_parent_partnumber\', quote="\'")}}, \'image\', product_rank) as image,\n                        joinGet({{TABLE(\'articles_join_parent_partnumber\', quote="\'")}}, \'plain_image\', product_rank) as plain_image,\n                        joinGet({{TABLE(\'articles_join_parent_partnumber\', quote="\'")}}, \'description\', product_rank) as description\n                    {% end %},\n                    arrayMap(\n                        x -> joinGet({{TABLE(\'articles_join\', quote="\'")}}, \'parent_partnumber\', x),\n                        children\n                    ) as partnumbers,\n                    arrayDistinct(\n                    arrayFilter(\n                        x -> x != \'\',\n                        arrayFlatten(\n                            arrayMap(x-> joinGet(\'tagging_array\', \'tags\', toInt64(x)), parent_catentry_array)\n                        )\n                    )\n                    ) as tags,\n                    arrayDistinct(arrayFilter(\n                        x ->\n                            -- {tag} -> x.1, {country} -> x.2, {start_date} -> x.3, {end_date} -> x.4\n                            -- this is the basic algorithm to check if 1d segments overlap: https://eli.thegreenplace.net/2008/08/15/intersection-of-1d-segments\n                            {{Date(date_end)}} >= x.3 and  x.4 >= {{Date(date_start)}}\n                            {% if defined(country) %} and x.2 in {{Array(country)}} {% end %}\n                            {% if defined(commercial_tag) %} and x.1 in {{Array(commercial_tag)}} {% end %},\n                    arrayMap(x -> arrayMap(country, start_date, end_date, tag -> (tag, country, start_date, end_date), x.1, x.2, x.3, x.4) ,\n                        arrayMap(partnumber ->\n                        {% if not defined(campaign) %}\n                        joinGet({{TABLE(\'article_commercial_tags_join_global_parent_partnumber\', quote="\'")}}, \'groupped_fields\', partnumber),\n                        {% else %}\n                        joinGet({{TABLE(\'article_commercial_tags_join_parent_partnumber\', quote="\'")}}, \'groupped_fields\', partnumber),\n                        {% end %}\n                        partnumbers\n                        )\n                    )[1]\n                    )) commercial_tags,\n                    {% for last, x in  enumerate_with_last(split_to_array(attr, \'amount_return\')) %}\n                        {{symbol(x)}}\n                        {% if not last %},{% end %}\n                    {% end %}\n                    FROM rank\n                    {% if defined(symbol) %}\n                        WHERE sku == {{String(symbol)}}\n                    {% end %}\n                    '}]
        pipe_name = 'example'
        token_name = 'example endpoint api'
        u = Users.get_by_id(self.WORKSPACE_ID)
        with User.transaction(u.id) as user:
            for ds_name in datasources:
                user.add_datasource(ds_name)
            pipe = user.add_pipe(pipe_name, nodes=nodes)
            pipe.endpoint = pipe.pipeline.nodes[-1].id
            user.update_pipe(pipe)
            user.add_token(token_name, scopes.PIPES_READ, pipe.id)
        self.u = Users.get_by_id(self.WORKSPACE_ID)
        self.variables = {'date_start': '2020-09-03', 'date_end': '2020-09-03', 'attr': 'order_count', 'cod_section': '1', 'cod_brand': '1,16', 'page': '0', 'page_size': '200'}
        self.pipe = self.u.get_pipe(pipe_name)
        self.template_execution_results = {}
        access_info = self.u.get_token_access_info(token_name)
        self.readable_resources = access_info.get_resources_for_scope(scopes.DATASOURCES_READ, scopes.PIPES_READ)
        self.assertEqual(User.replace_executor._max_workers, 1, 'This test is designed for 1 worker only')
        await self.replace_tables_with_options(flush=False, randomize=None, sync=False)
        await IOLoop.current().run_in_executor(User.replace_executor, flush_all_caches)
        timings_with_cache = await self.get_replace_timings(flush=False, randomize='cod_section')
        hits, misses = await IOLoop.current().run_in_executor(User.replace_executor, get_cache_info)
        self.assertEqual(misses, 5)
        self.assertEqual(hits, 5 * (self.ITERATIONS - 1))
        total_cached = sum(timings_with_cache)
        print(f'Total with cache: {total_cached}')
        self.check_timings(timings_with_cache, max_mean=0.08, max_p90=0.09, max_min=0.07)
        timings_without_cache = await self.get_replace_timings(flush=True, randomize='cod_section')
        total_without_cache = sum(timings_without_cache)
        print(f'Total without cache: {total_without_cache}')
        self.check_timings(timings_without_cache, max_mean=0.16, max_p90=0.18, max_min=0.14)
        improvement = total_without_cache / total_cached
        print(f'Improvement: {improvement:.3f}x')
        self.assertGreater(improvement, 1.5, 'Timings with cache should be much faster than without it')

    @tornado.testing.gen_test(timeout=360)
    async def test_toolset_cache_constant_parameter(self):
        datasources = ['prd_rawdata.ds_stm_wpv', 'prd_benchdirect.currencies_exchange_join', 'prd_rawdata.ds_mv_currencies_join__v1', 'prd_rawdata.ds_org_currencies_historical_join', 'fingerprint_property_total_origins', 'fingerprint_property_group_by_day', 'fingerprint_group_by_day', 'property_grouped', 'fingerprint_grouped', 'fingerprint_chain_grouped', 'prd_rawdata.ds_stm_events__v1', 'fingerprint_property_group_by_tool', 'fingerprint_chain_group_by_tool', 'prd_rawdata.ds_mv_partner_hotels_join_by_property_id__v2', 'prd_rawdata.ds_mv_pages_join_by_id__v2', 'fingerprint_property_group_by_toolgroup', 'prd_rawdata.ds_db_toolgroup_tools', 'fingerprint_corporative_grouped', 'fingerprint_property_grouped', 'fingerprint_corporative_group_by_day', 'fingerprint_corporative_group_by_tool', 'fingerprint_corporative_group_by_toolgroup', 'ds_test', 'booking_ids', 'fingerprint_chain_group_by_day', 'browser_version_group_by_day', 'browser_group_by_day', 'country_group_by_day', 'device_group_by_day', 'geoname_group_by_day', 'language_group_by_day', 'network_group_by_day', 'os_group_by_day', 'os_version_group_by_day', 'property_group_by_day']
        nodes = [{'name': 'fingerprint_property_node', 'sql': "%\n                    SELECT\n                        -- Visits\n                        countMerge(review_visits_shown) as user_property_total_reviews_shown,\n                        -- Searches\n                        countMerge(saved_search_visits) as user_property_total_saved_searches,\n                        -- Package/Price\n                        countMerge(total_prices) as user_property_total_prices,\n                        max(last_price_date) as user_property_last_price_date,\n                        argMaxMerge(last_search_type) as user_property_last_search_type,\n                        argMaxMerge(last_search_price) as user_property_last_search_price,\n                        argMaxMerge(last_search_currency) as user_property_last_search_currency,\n                        argMaxMerge(last_search_start_date) as user_property_last_search_start_date,\n                        argMaxMerge(last_search_end_date) as user_property_last_search_end_date,\n                        argMaxMerge(last_search_adults) as user_property_last_search_adults,\n                        argMaxMerge(last_search_children) as user_property_last_search_children,\n                        argMaxMerge(last_search_babies) as user_property_last_search_babies,\n                        argMaxMerge(last_search_rooms) as user_property_last_search_rooms,\n                        argMaxMerge(last_search_status) as user_property_last_search_status,\n                        argMaxMerge(last_search_ab_test) as user_property_last_search_ab_test,\n                        argMaxMerge(last_search_showed) as user_property_last_search_showed,\n                        -- Last visit\n                        max(last_visit_date) as user_property_last_visit_date,\n                        countMerge(total_visits) as user_property_total_visits,\n                        uniqMerge(total_visit_days) as user_property_total_visit_days,\n                        max(last_index_date) as user_property_last_index_date,\n                        argMaxMerge(last_visit_page_id) as user_property_last_visit_page_id,\n                        argMaxMerge(last_visit_page_name) as user_property_last_visit_page_name,\n                        argMaxMerge(last_funnel_page_name) as user_property_last_funnel_page_name,\n                        argMaxMergeIf(furthest_funnel_page_name, datediff('day', (furthest_funnel_date), now()) <= 30) as user_property_furthest_funnel_page_name,\n                        argMaxMerge(last_visit_device) as user_property_last_device,\n                        argMaxMerge(last_search_url) as user_property_last_search_url,\n                        argMaxMerge(last_visit_referrer) as user_property_last_visit_referrer,\n                        -- Bookings\n                        countMerge(booking_visits) as user_property_total_bookings,\n                        max(last_booking_date) as user_property_last_booking_date,\n                        -- Origins\n                        max(last_origin_date) as user_property_last_origin_date,\n                        toDateTime(topKWeightedMerge(2)(last_origin_dates_uint32)[2]) as user_property_second_to_last_origin_date,\n                        argMaxMerge(last_origin_source) as user_property_last_origin_source,\n                        argMaxMerge(last_origin_retargeting) as user_property_last_origin_retargeting,\n                        argMaxMerge(last_origin_browser) as user_property_last_origin_browser,\n                        argMaxMerge(last_origin_browser_major) as user_property_last_origin_browser_major,\n                        argMaxMerge(last_origin_browser_version) as user_property_last_origin_browser_version,\n                        argMaxMerge(last_origin_os) as user_property_last_origin_os,\n                        argMaxMerge(last_origin_os_version) as user_property_last_origin_os_version,\n                        argMaxMerge(last_origin_user_agent) as user_property_last_origin_user_agent,\n                        argMaxMerge(last_origin_ntw_booked) as user_property_last_origin_ntw_booked,\n                        argMaxMerge(last_origin_ntw_visits) as user_property_last_origin_ntw_visits,\n                        argMaxMerge(last_origin_ntw_chains) as user_property_last_origin_ntw_chains,\n                        argMaxMerge(last_visit_geoname_id) as user_property_last_visit_geoname_id,\n                        countMerge(total_origin_search) as user_property_total_origin_search,\n                        countMerge(total_origin_facebook) as user_property_total_origin_facebook,\n                        countMerge(total_origin_twitter) as user_property_total_origin_twitter,\n                        countMerge(total_origin_instagram) as user_property_total_origin_instagram,\n                        countMerge(total_origin_kayak) as user_property_total_origin_kayak,\n                        countMerge(total_origin_tripadvisor) as user_property_total_origin_tripadvisor,\n                        countMerge(total_origin_trivago) as user_property_total_origin_trivago,\n                        countMerge(total_origin_direct) as user_property_total_origin_direct,\n                        countMerge(total_origin_noorigin) as user_property_total_origin_noorigin,\n                        countMerge(total_origin_retargeting) as user_property_total_origin_retargeting,\n                        -- tools\n                        countMerge(exit_visits_shown) as user_property_total_exits_shown,\n                        countMerge(inline_visits_shown) as user_property_total_inlines_shown,\n                        countMerge(layer_visits_shown) as user_property_total_layers_shown,\n                        countMerge(note_visits_shown) as user_property_total_notes_shown\n                    FROM fingerprint_property_grouped c\n                    PREWHERE cityHash64({{String(fingerprint, 'aa96f1b6362a46682193c4708cedfaff', required=True)}}, lower({{String(country, 'es', required=True)}}), lower({{String(device, 'desktop', required=True)}}), toUInt128({{UInt128(property_id, '1027947')}})) == c.key"}, {'name': 'results', 'sql': "%\n                    {{max_threads(1)}}\n                    SELECT\n                        cityHash64({{String(fingerprint, 'aa96f1b6362a46682193c4708cedfaff', required=True)}}, lower({{String(country, 'es', required=True)}}), lower({{String(device, 'desktop', required=True)}}), toUInt128({{UInt128(property_id, '1027947')}})) as key,\n                        -- fingerprint_property_node\n                        if(user_property_last_origin_date > '1970-01-01 00:00:00', user_property_last_origin_date, null) as user_property_last_origin_date,\n                        if(user_property_second_to_last_origin_date > '1970-01-01 00:00:00', user_property_second_to_last_origin_date, null) as user_property_second_to_last_origin_date,\n                        user_property_last_origin_source,\n                        user_property_last_origin_retargeting,\n                        user_property_last_origin_browser,\n                        user_property_last_origin_browser_major,\n                        user_property_last_origin_browser_version,\n                        user_property_last_origin_os,\n                        user_property_last_origin_os_version,\n                        user_property_last_origin_user_agent,\n                        user_property_last_origin_ntw_booked,\n                        user_property_last_origin_ntw_visits,\n                        user_property_last_origin_ntw_chains,\n                        user_property_last_visit_geoname_id,\n                        user_property_total_origin_search,\n                        user_property_total_origin_facebook,\n                        user_property_total_origin_twitter,\n                        user_property_total_origin_instagram,\n                        user_property_total_origin_kayak,\n                        user_property_total_origin_tripadvisor,\n                        user_property_total_origin_trivago,\n                        user_property_total_origin_direct,\n                        user_property_total_origin_noorigin,\n                        user_property_total_origin_retargeting,\n                        user_property_total_bookings,\n                        if(user_property_last_booking_date > '1970-01-01 00:00:00', user_property_last_booking_date, null) as user_property_last_booking_date,\n                        user_property_total_exits_shown,\n                        user_property_total_inlines_shown,\n                        user_property_total_layers_shown,\n                        user_property_total_notes_shown,\n                        CASE\n                            WHEN (user_property_last_origin_source <> 'google' and user_property_last_origin_source <> 'facebook' and user_property_last_origin_source <> 'twitter' and user_property_last_origin_source <> 'instagram' and user_property_last_origin_source <> 'kayak' and user_property_last_origin_source <> 'tripadvisor' and user_property_last_origin_source <> 'trivago' and user_property_last_origin_source <> '') THEN 'direct'\n                            WHEN user_property_last_origin_source = 'google' THEN 'search'\n                            WHEN user_property_last_origin_source = '' THEN 'noorigin'\n                            ELSE user_property_last_origin_source\n                        END as user_property_last_origin,\n                        user_property_total_reviews_shown,\n                        user_property_total_saved_searches,\n                        user_property_total_prices,\n                        if(user_property_last_price_date > '1970-01-01 00:00:00', user_property_last_price_date, null) as user_property_last_price_date,\n                        user_property_last_search_type,\n                        user_property_last_search_price,\n                        user_property_last_search_currency,\n                        if(user_property_last_search_start_date > '1970-01-01', user_property_last_search_start_date, null) as user_property_last_search_start_date,\n                        if(user_property_last_search_end_date > '1970-01-01', user_property_last_search_end_date, null) as user_property_last_search_end_date,\n                        user_property_last_search_adults,\n                        user_property_last_search_children,\n                        user_property_last_search_babies,\n                        user_property_last_search_rooms,\n                        user_property_last_search_status,\n                        user_property_last_search_ab_test,\n                        user_property_last_search_showed,\n                        if(user_property_last_visit_date > '1970-01-01 00:00:00', user_property_last_visit_date, null) as user_property_last_visit_date,\n                        user_property_total_visits,\n                        user_property_total_visit_days,\n                        if(user_property_last_index_date > '1970-01-01 00:00:00', user_property_last_index_date, null) as user_property_last_index_date,\n                        user_property_last_visit_page_id,\n                        user_property_last_visit_page_name,\n                        user_property_last_funnel_page_name,\n                        user_property_last_device,\n                        user_property_last_search_url,\n                        user_property_last_visit_referrer,\n                        CASE user_property_last_funnel_page_name\n                            WHEN 'Calendar' THEN 2\n                            WHEN 'Rooms and Rates' THEN 3\n                            WHEN 'Packages' THEN 3\n                            WHEN 'User Register Page' THEN 4\n                            WHEN 'Booking Confirmed' THEN 5\n                            ELSE 0\n                        END as user_property_last_funnel_page_code\n                    FROM\n                        fingerprint_property_node"}]
        pipe_name = 'example'
        token_name = 'example endpoint api'
        u = Users.get_by_id(self.WORKSPACE_ID)
        with User.transaction(u.id) as user:
            for ds_name in datasources:
                user.add_datasource(ds_name)
            pipe = user.add_pipe(pipe_name, nodes=nodes)
            pipe.endpoint = pipe.pipeline.nodes[-1].id
            user.update_pipe(pipe)
            user.add_token(token_name, scopes.PIPES_READ, pipe.id)
        self.u = Users.get_by_id(self.WORKSPACE_ID)
        self.variables = {'fingerprint': 'anything'}
        self.pipe = self.u.get_pipe(pipe_name)
        self.template_execution_results = {}
        access_info = self.u.get_token_access_info(token_name)
        self.readable_resources = access_info.get_resources_for_scope(scopes.DATASOURCES_READ, scopes.PIPES_READ)
        self.assertEqual(User.replace_executor._max_workers, 1, 'This test is designed for 1 worker only')
        await self.replace_tables_with_options(flush=False, randomize=None, sync=False)
        await IOLoop.current().run_in_executor(User.replace_executor, get_template_and_variables.cache_clear)
        timings_with_cache = await self.get_replace_timings(flush=False, randomize=None)
        total_cached = sum(timings_with_cache)
        print(f'Total with cache: {total_cached}')
        self.check_timings(timings_with_cache, max_mean=0.04, max_p90=0.045, max_min=0.035)
        timings_without_cache = await self.get_replace_timings(flush=True, randomize=None)
        total_without_cache = sum(timings_without_cache)
        print(f'Total without cache: {total_without_cache}')
        self.check_timings(timings_without_cache, max_mean=0.08, max_p90=0.9, max_min=0.7)
        improvement = total_without_cache / total_cached
        print(f'Improvement: {improvement:.3f}x')
        self.assertGreater(improvement, 1.3, 'Timings with cache should be much faster than without it')