"""
    farm API

    farm API documentation  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six

class TaskESCAChildrenDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'croppable_area_id': 'int', 'croppable_area_name': 'str', 'cu_count': 'int', 'task_count': 'dict(str, int)'}
    attribute_map = {'croppable_area_id': 'croppableAreaId', 'croppable_area_name': 'croppableAreaName', 'cu_count': 'cuCount', 'task_count': 'taskCount'}

    def __init__(self, croppable_area_id=None, croppable_area_name=None, cu_count=None, task_count=None):
        """TaskESCAChildrenDto - a model defined in Swagger"""
        self._croppable_area_id = None
        self._croppable_area_name = None
        self._cu_count = None
        self._task_count = None
        self.discriminator = None
        if croppable_area_id is not None:
            self.croppable_area_id = croppable_area_id
        if croppable_area_name is not None:
            self.croppable_area_name = croppable_area_name
        if cu_count is not None:
            self.cu_count = cu_count
        if task_count is not None:
            self.task_count = task_count

    @property
    def croppable_area_id(self):
        """Gets the croppable_area_id of this TaskESCAChildrenDto.  # noqa: E501


        :return: The croppable_area_id of this TaskESCAChildrenDto.  # noqa: E501
        :rtype: int
        """
        return self._croppable_area_id

    @croppable_area_id.setter
    def croppable_area_id(self, croppable_area_id):
        """Sets the croppable_area_id of this TaskESCAChildrenDto.


        :param croppable_area_id: The croppable_area_id of this TaskESCAChildrenDto.  # noqa: E501
        :type: int
        """
        self._croppable_area_id = croppable_area_id

    @property
    def croppable_area_name(self):
        """Gets the croppable_area_name of this TaskESCAChildrenDto.  # noqa: E501


        :return: The croppable_area_name of this TaskESCAChildrenDto.  # noqa: E501
        :rtype: str
        """
        return self._croppable_area_name

    @croppable_area_name.setter
    def croppable_area_name(self, croppable_area_name):
        """Sets the croppable_area_name of this TaskESCAChildrenDto.


        :param croppable_area_name: The croppable_area_name of this TaskESCAChildrenDto.  # noqa: E501
        :type: str
        """
        self._croppable_area_name = croppable_area_name

    @property
    def cu_count(self):
        """Gets the cu_count of this TaskESCAChildrenDto.  # noqa: E501


        :return: The cu_count of this TaskESCAChildrenDto.  # noqa: E501
        :rtype: int
        """
        return self._cu_count

    @cu_count.setter
    def cu_count(self, cu_count):
        """Sets the cu_count of this TaskESCAChildrenDto.


        :param cu_count: The cu_count of this TaskESCAChildrenDto.  # noqa: E501
        :type: int
        """
        self._cu_count = cu_count

    @property
    def task_count(self):
        """Gets the task_count of this TaskESCAChildrenDto.  # noqa: E501


        :return: The task_count of this TaskESCAChildrenDto.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._task_count

    @task_count.setter
    def task_count(self, task_count):
        """Sets the task_count of this TaskESCAChildrenDto.


        :param task_count: The task_count of this TaskESCAChildrenDto.  # noqa: E501
        :type: dict(str, int)
        """
        self._task_count = task_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(TaskESCAChildrenDto, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskESCAChildrenDto):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other