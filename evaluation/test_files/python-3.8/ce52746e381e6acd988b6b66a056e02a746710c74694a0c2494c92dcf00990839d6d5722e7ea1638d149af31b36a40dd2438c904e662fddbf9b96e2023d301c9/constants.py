TAG_DEST = b'cairo.dest'
TAG_LINK = b'Link'
STATUS_SUCCESS = 0
STATUS_NO_MEMORY = 1
STATUS_INVALID_RESTORE = 2
STATUS_INVALID_POP_GROUP = 3
STATUS_NO_CURRENT_POINT = 4
STATUS_INVALID_MATRIX = 5
STATUS_INVALID_STATUS = 6
STATUS_NULL_POINTER = 7
STATUS_INVALID_STRING = 8
STATUS_INVALID_PATH_DATA = 9
STATUS_READ_ERROR = 10
STATUS_WRITE_ERROR = 11
STATUS_SURFACE_FINISHED = 12
STATUS_SURFACE_TYPE_MISMATCH = 13
STATUS_PATTERN_TYPE_MISMATCH = 14
STATUS_INVALID_CONTENT = 15
STATUS_INVALID_FORMAT = 16
STATUS_INVALID_VISUAL = 17
STATUS_FILE_NOT_FOUND = 18
STATUS_INVALID_DASH = 19
STATUS_INVALID_DSC_COMMENT = 20
STATUS_INVALID_INDEX = 21
STATUS_CLIP_NOT_REPRESENTABLE = 22
STATUS_TEMP_FILE_ERROR = 23
STATUS_INVALID_STRIDE = 24
STATUS_FONT_TYPE_MISMATCH = 25
STATUS_USER_FONT_IMMUTABLE = 26
STATUS_USER_FONT_ERROR = 27
STATUS_NEGATIVE_COUNT = 28
STATUS_INVALID_CLUSTERS = 29
STATUS_INVALID_SLANT = 30
STATUS_INVALID_WEIGHT = 31
STATUS_INVALID_SIZE = 32
STATUS_USER_FONT_NOT_IMPLEMENTED = 33
STATUS_DEVICE_TYPE_MISMATCH = 34
STATUS_DEVICE_ERROR = 35
STATUS_INVALID_MESH_CONSTRUCTION = 36
STATUS_DEVICE_FINISHED = 37
STATUS_JBIG2_GLOBAL_MISSING = 38
STATUS_PNG_ERROR = 39
STATUS_FREETYPE_ERROR = 40
STATUS_WIN32_GDI_ERROR = 41
STATUS_TAG_ERROR = 42
STATUS_LAST_STATUS = 43
CONTENT_COLOR = 4096
CONTENT_ALPHA = 8192
CONTENT_COLOR_ALPHA = 12288
FORMAT_INVALID = -1
FORMAT_ARGB32 = 0
FORMAT_RGB24 = 1
FORMAT_A8 = 2
FORMAT_A1 = 3
FORMAT_RGB16_565 = 4
FORMAT_RGB30 = 5
FORMAT_RGB96F = 6
FORMAT_RGBA128F = 7
OPERATOR_CLEAR = 0
OPERATOR_SOURCE = 1
OPERATOR_OVER = 2
OPERATOR_IN = 3
OPERATOR_OUT = 4
OPERATOR_ATOP = 5
OPERATOR_DEST = 6
OPERATOR_DEST_OVER = 7
OPERATOR_DEST_IN = 8
OPERATOR_DEST_OUT = 9
OPERATOR_DEST_ATOP = 10
OPERATOR_XOR = 11
OPERATOR_ADD = 12
OPERATOR_SATURATE = 13
OPERATOR_MULTIPLY = 14
OPERATOR_SCREEN = 15
OPERATOR_OVERLAY = 16
OPERATOR_DARKEN = 17
OPERATOR_LIGHTEN = 18
OPERATOR_COLOR_DODGE = 19
OPERATOR_COLOR_BURN = 20
OPERATOR_HARD_LIGHT = 21
OPERATOR_SOFT_LIGHT = 22
OPERATOR_DIFFERENCE = 23
OPERATOR_EXCLUSION = 24
OPERATOR_HSL_HUE = 25
OPERATOR_HSL_SATURATION = 26
OPERATOR_HSL_COLOR = 27
OPERATOR_HSL_LUMINOSITY = 28
ANTIALIAS_DEFAULT = 0
ANTIALIAS_NONE = 1
ANTIALIAS_GRAY = 2
ANTIALIAS_SUBPIXEL = 3
ANTIALIAS_FAST = 4
ANTIALIAS_GOOD = 5
ANTIALIAS_BEST = 6
FILL_RULE_WINDING = 0
FILL_RULE_EVEN_ODD = 1
LINE_CAP_BUTT = 0
LINE_CAP_ROUND = 1
LINE_CAP_SQUARE = 2
LINE_JOIN_MITER = 0
LINE_JOIN_ROUND = 1
LINE_JOIN_BEVEL = 2
TEXT_CLUSTER_FLAG_BACKWARD = 1
FONT_SLANT_NORMAL = 0
FONT_SLANT_ITALIC = 1
FONT_SLANT_OBLIQUE = 2
FONT_WEIGHT_NORMAL = 0
FONT_WEIGHT_BOLD = 1
SUBPIXEL_ORDER_DEFAULT = 0
SUBPIXEL_ORDER_RGB = 1
SUBPIXEL_ORDER_BGR = 2
SUBPIXEL_ORDER_VRGB = 3
SUBPIXEL_ORDER_VBGR = 4
HINT_STYLE_DEFAULT = 0
HINT_STYLE_NONE = 1
HINT_STYLE_SLIGHT = 2
HINT_STYLE_MEDIUM = 3
HINT_STYLE_FULL = 4
HINT_METRICS_DEFAULT = 0
HINT_METRICS_OFF = 1
HINT_METRICS_ON = 2
FONT_TYPE_TOY = 0
FONT_TYPE_FT = 1
FONT_TYPE_WIN32 = 2
FONT_TYPE_QUARTZ = 3
FONT_TYPE_USER = 4
PATH_MOVE_TO = 0
PATH_LINE_TO = 1
PATH_CURVE_TO = 2
PATH_CLOSE_PATH = 3
DEVICE_TYPE_DRM = 0
DEVICE_TYPE_GL = 1
DEVICE_TYPE_SCRIPT = 2
DEVICE_TYPE_XCB = 3
DEVICE_TYPE_XLIB = 4
DEVICE_TYPE_XML = 5
DEVICE_TYPE_COGL = 6
DEVICE_TYPE_WIN32 = 7
DEVICE_TYPE_INVALID = -1
SURFACE_OBSERVER_NORMAL = 0
SURFACE_OBSERVER_RECORD_OPERATIONS = 1
SURFACE_TYPE_IMAGE = 0
SURFACE_TYPE_PDF = 1
SURFACE_TYPE_PS = 2
SURFACE_TYPE_XLIB = 3
SURFACE_TYPE_XCB = 4
SURFACE_TYPE_GLITZ = 5
SURFACE_TYPE_QUARTZ = 6
SURFACE_TYPE_WIN32 = 7
SURFACE_TYPE_BEOS = 8
SURFACE_TYPE_DIRECTFB = 9
SURFACE_TYPE_SVG = 10
SURFACE_TYPE_OS2 = 11
SURFACE_TYPE_WIN32_PRINTING = 12
SURFACE_TYPE_QUARTZ_IMAGE = 13
SURFACE_TYPE_SCRIPT = 14
SURFACE_TYPE_QT = 15
SURFACE_TYPE_RECORDING = 16
SURFACE_TYPE_VG = 17
SURFACE_TYPE_GL = 18
SURFACE_TYPE_DRM = 19
SURFACE_TYPE_TEE = 20
SURFACE_TYPE_XML = 21
SURFACE_TYPE_SKIA = 22
SURFACE_TYPE_SUBSURFACE = 23
SURFACE_TYPE_COGL = 24
PATTERN_TYPE_SOLID = 0
PATTERN_TYPE_SURFACE = 1
PATTERN_TYPE_LINEAR = 2
PATTERN_TYPE_RADIAL = 3
PATTERN_TYPE_MESH = 4
PATTERN_TYPE_RASTER_SOURCE = 5
EXTEND_NONE = 0
EXTEND_REPEAT = 1
EXTEND_REFLECT = 2
EXTEND_PAD = 3
FILTER_FAST = 0
FILTER_GOOD = 1
FILTER_BEST = 2
FILTER_NEAREST = 3
FILTER_BILINEAR = 4
FILTER_GAUSSIAN = 5
REGION_OVERLAP_IN = 0
REGION_OVERLAP_OUT = 1
REGION_OVERLAP_PART = 2
PDF_OUTLINE_ROOT = 0
PDF_VERSION_1_4 = 0
PDF_VERSION_1_5 = 1
PDF_OUTLINE_FLAG_OPEN = 1
PDF_OUTLINE_FLAG_BOLD = 2
PDF_OUTLINE_FLAG_ITALIC = 4
PDF_METADATA_TITLE = 0
PDF_METADATA_AUTHOR = 1
PDF_METADATA_SUBJECT = 2
PDF_METADATA_KEYWORDS = 3
PDF_METADATA_CREATOR = 4
PDF_METADATA_CREATE_DATE = 5
PDF_METADATA_MOD_DATE = 6
PS_LEVEL_2 = 0
PS_LEVEL_3 = 1
SVG_VERSION_1_1 = 0
SVG_VERSION_1_2 = 1
SVG_UNIT_USER = 0
SVG_UNIT_EM = 1
SVG_UNIT_EX = 2
SVG_UNIT_PX = 3
SVG_UNIT_IN = 4
SVG_UNIT_CM = 5
SVG_UNIT_MM = 6
SVG_UNIT_PT = 7
SVG_UNIT_PC = 8
SVG_UNIT_PERCENT = 9
_CAIRO_HEADERS = '\n\nint\ncairo_version (void);\n\nconst char*\ncairo_version_string (void);\n\ntypedef int cairo_bool_t;\n\ntypedef struct _cairo cairo_t;\n\ntypedef struct _cairo_surface cairo_surface_t;\n\ntypedef struct _cairo_device cairo_device_t;\n\ntypedef struct _cairo_matrix {\n    double xx; double yx;\n    double xy; double yy;\n    double x0; double y0;\n} cairo_matrix_t;\n\ntypedef struct _cairo_pattern cairo_pattern_t;\n\ntypedef void (*cairo_destroy_func_t) (void *data);\n\ntypedef struct _cairo_user_data_key {\n    int unused;\n} cairo_user_data_key_t;\n\ntypedef enum _cairo_status {\n    CAIRO_STATUS_SUCCESS = 0,\n\n    CAIRO_STATUS_NO_MEMORY,\n    CAIRO_STATUS_INVALID_RESTORE,\n    CAIRO_STATUS_INVALID_POP_GROUP,\n    CAIRO_STATUS_NO_CURRENT_POINT,\n    CAIRO_STATUS_INVALID_MATRIX,\n    CAIRO_STATUS_INVALID_STATUS,\n    CAIRO_STATUS_NULL_POINTER,\n    CAIRO_STATUS_INVALID_STRING,\n    CAIRO_STATUS_INVALID_PATH_DATA,\n    CAIRO_STATUS_READ_ERROR,\n    CAIRO_STATUS_WRITE_ERROR,\n    CAIRO_STATUS_SURFACE_FINISHED,\n    CAIRO_STATUS_SURFACE_TYPE_MISMATCH,\n    CAIRO_STATUS_PATTERN_TYPE_MISMATCH,\n    CAIRO_STATUS_INVALID_CONTENT,\n    CAIRO_STATUS_INVALID_FORMAT,\n    CAIRO_STATUS_INVALID_VISUAL,\n    CAIRO_STATUS_FILE_NOT_FOUND,\n    CAIRO_STATUS_INVALID_DASH,\n    CAIRO_STATUS_INVALID_DSC_COMMENT,\n    CAIRO_STATUS_INVALID_INDEX,\n    CAIRO_STATUS_CLIP_NOT_REPRESENTABLE,\n    CAIRO_STATUS_TEMP_FILE_ERROR,\n    CAIRO_STATUS_INVALID_STRIDE,\n    CAIRO_STATUS_FONT_TYPE_MISMATCH,\n    CAIRO_STATUS_USER_FONT_IMMUTABLE,\n    CAIRO_STATUS_USER_FONT_ERROR,\n    CAIRO_STATUS_NEGATIVE_COUNT,\n    CAIRO_STATUS_INVALID_CLUSTERS,\n    CAIRO_STATUS_INVALID_SLANT,\n    CAIRO_STATUS_INVALID_WEIGHT,\n    CAIRO_STATUS_INVALID_SIZE,\n    CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED,\n    CAIRO_STATUS_DEVICE_TYPE_MISMATCH,\n    CAIRO_STATUS_DEVICE_ERROR,\n    CAIRO_STATUS_INVALID_MESH_CONSTRUCTION,\n    CAIRO_STATUS_DEVICE_FINISHED,\n    CAIRO_STATUS_JBIG2_GLOBAL_MISSING,\n    CAIRO_STATUS_PNG_ERROR,\n    CAIRO_STATUS_FREETYPE_ERROR,\n    CAIRO_STATUS_WIN32_GDI_ERROR,\n    CAIRO_STATUS_TAG_ERROR,\n\n    CAIRO_STATUS_LAST_STATUS\n} cairo_status_t;\n\ntypedef enum _cairo_content {\n    CAIRO_CONTENT_COLOR\t\t= 0x1000,\n    CAIRO_CONTENT_ALPHA\t\t= 0x2000,\n    CAIRO_CONTENT_COLOR_ALPHA\t= 0x3000\n} cairo_content_t;\n\ntypedef enum _cairo_format {\n    CAIRO_FORMAT_INVALID   = -1,\n    CAIRO_FORMAT_ARGB32    = 0,\n    CAIRO_FORMAT_RGB24     = 1,\n    CAIRO_FORMAT_A8        = 2,\n    CAIRO_FORMAT_A1        = 3,\n    CAIRO_FORMAT_RGB16_565 = 4,\n    CAIRO_FORMAT_RGB30     = 5,\n    CAIRO_FORMAT_RGB96F    = 6,\n    CAIRO_FORMAT_RGBA128F  = 7\n} cairo_format_t;\n\ntypedef cairo_status_t (*cairo_write_func_t) (void\t\t  *closure,\n\t\t\t\t\t      const unsigned char *data,\n\t\t\t\t\t      unsigned int\t   length);\n\ntypedef cairo_status_t (*cairo_read_func_t) (void\t\t*closure,\n\t\t\t\t\t     unsigned char\t*data,\n\t\t\t\t\t     unsigned int\tlength);\n\ntypedef struct _cairo_rectangle_int {\n    int x, y;\n    int width, height;\n} cairo_rectangle_int_t;\n\ncairo_t *\ncairo_create (cairo_surface_t *target);\n\ncairo_t *\ncairo_reference (cairo_t *cr);\n\nvoid\ncairo_destroy (cairo_t *cr);\n\nunsigned int\ncairo_get_reference_count (cairo_t *cr);\n\nvoid *\ncairo_get_user_data (cairo_t\t\t\t *cr,\n\t\t     const cairo_user_data_key_t *key);\n\ncairo_status_t\ncairo_set_user_data (cairo_t\t\t\t *cr,\n\t\t     const cairo_user_data_key_t *key,\n\t\t     void\t\t\t *user_data,\n\t\t     cairo_destroy_func_t\t  destroy);\n\nvoid\ncairo_save (cairo_t *cr);\n\nvoid\ncairo_restore (cairo_t *cr);\n\nvoid\ncairo_push_group (cairo_t *cr);\n\nvoid\ncairo_push_group_with_content (cairo_t *cr, cairo_content_t content);\n\ncairo_pattern_t *\ncairo_pop_group (cairo_t *cr);\n\nvoid\ncairo_pop_group_to_source (cairo_t *cr);\n\ntypedef enum _cairo_operator {\n    CAIRO_OPERATOR_CLEAR,\n\n    CAIRO_OPERATOR_SOURCE,\n    CAIRO_OPERATOR_OVER,\n    CAIRO_OPERATOR_IN,\n    CAIRO_OPERATOR_OUT,\n    CAIRO_OPERATOR_ATOP,\n\n    CAIRO_OPERATOR_DEST,\n    CAIRO_OPERATOR_DEST_OVER,\n    CAIRO_OPERATOR_DEST_IN,\n    CAIRO_OPERATOR_DEST_OUT,\n    CAIRO_OPERATOR_DEST_ATOP,\n\n    CAIRO_OPERATOR_XOR,\n    CAIRO_OPERATOR_ADD,\n    CAIRO_OPERATOR_SATURATE,\n\n    CAIRO_OPERATOR_MULTIPLY,\n    CAIRO_OPERATOR_SCREEN,\n    CAIRO_OPERATOR_OVERLAY,\n    CAIRO_OPERATOR_DARKEN,\n    CAIRO_OPERATOR_LIGHTEN,\n    CAIRO_OPERATOR_COLOR_DODGE,\n    CAIRO_OPERATOR_COLOR_BURN,\n    CAIRO_OPERATOR_HARD_LIGHT,\n    CAIRO_OPERATOR_SOFT_LIGHT,\n    CAIRO_OPERATOR_DIFFERENCE,\n    CAIRO_OPERATOR_EXCLUSION,\n    CAIRO_OPERATOR_HSL_HUE,\n    CAIRO_OPERATOR_HSL_SATURATION,\n    CAIRO_OPERATOR_HSL_COLOR,\n    CAIRO_OPERATOR_HSL_LUMINOSITY\n} cairo_operator_t;\n\nvoid\ncairo_set_operator (cairo_t *cr, cairo_operator_t op);\n\nvoid\ncairo_set_source (cairo_t *cr, cairo_pattern_t *source);\n\nvoid\ncairo_set_source_rgb (cairo_t *cr, double red, double green, double blue);\n\nvoid\ncairo_set_source_rgba (cairo_t *cr,\n\t\t       double red, double green, double blue,\n\t\t       double alpha);\n\nvoid\ncairo_set_source_surface (cairo_t\t  *cr,\n\t\t\t  cairo_surface_t *surface,\n\t\t\t  double\t   x,\n\t\t\t  double\t   y);\n\nvoid\ncairo_set_tolerance (cairo_t *cr, double tolerance);\n\ntypedef enum _cairo_antialias {\n    CAIRO_ANTIALIAS_DEFAULT,\n\n    \n    CAIRO_ANTIALIAS_NONE,\n    CAIRO_ANTIALIAS_GRAY,\n    CAIRO_ANTIALIAS_SUBPIXEL,\n\n    \n    CAIRO_ANTIALIAS_FAST,\n    CAIRO_ANTIALIAS_GOOD,\n    CAIRO_ANTIALIAS_BEST\n} cairo_antialias_t;\n\nvoid\ncairo_set_antialias (cairo_t *cr, cairo_antialias_t antialias);\n\ntypedef enum _cairo_fill_rule {\n    CAIRO_FILL_RULE_WINDING,\n    CAIRO_FILL_RULE_EVEN_ODD\n} cairo_fill_rule_t;\n\nvoid\ncairo_set_fill_rule (cairo_t *cr, cairo_fill_rule_t fill_rule);\n\nvoid\ncairo_set_line_width (cairo_t *cr, double width);\n\ntypedef enum _cairo_line_cap {\n    CAIRO_LINE_CAP_BUTT,\n    CAIRO_LINE_CAP_ROUND,\n    CAIRO_LINE_CAP_SQUARE\n} cairo_line_cap_t;\n\nvoid\ncairo_set_line_cap (cairo_t *cr, cairo_line_cap_t line_cap);\n\ntypedef enum _cairo_line_join {\n    CAIRO_LINE_JOIN_MITER,\n    CAIRO_LINE_JOIN_ROUND,\n    CAIRO_LINE_JOIN_BEVEL\n} cairo_line_join_t;\n\nvoid\ncairo_set_line_join (cairo_t *cr, cairo_line_join_t line_join);\n\nvoid\ncairo_set_dash (cairo_t      *cr,\n\t\tconst double *dashes,\n\t\tint\t      num_dashes,\n\t\tdouble\t      offset);\n\nvoid\ncairo_set_miter_limit (cairo_t *cr, double limit);\n\nvoid\ncairo_translate (cairo_t *cr, double tx, double ty);\n\nvoid\ncairo_scale (cairo_t *cr, double sx, double sy);\n\nvoid\ncairo_rotate (cairo_t *cr, double angle);\n\nvoid\ncairo_transform (cairo_t\t      *cr,\n\t\t const cairo_matrix_t *matrix);\n\nvoid\ncairo_set_matrix (cairo_t\t       *cr,\n\t\t  const cairo_matrix_t *matrix);\n\nvoid\ncairo_identity_matrix (cairo_t *cr);\n\nvoid\ncairo_user_to_device (cairo_t *cr, double *x, double *y);\n\nvoid\ncairo_user_to_device_distance (cairo_t *cr, double *dx, double *dy);\n\nvoid\ncairo_device_to_user (cairo_t *cr, double *x, double *y);\n\nvoid\ncairo_device_to_user_distance (cairo_t *cr, double *dx, double *dy);\n\nvoid\ncairo_new_path (cairo_t *cr);\n\nvoid\ncairo_move_to (cairo_t *cr, double x, double y);\n\nvoid\ncairo_new_sub_path (cairo_t *cr);\n\nvoid\ncairo_line_to (cairo_t *cr, double x, double y);\n\nvoid\ncairo_curve_to (cairo_t *cr,\n\t\tdouble x1, double y1,\n\t\tdouble x2, double y2,\n\t\tdouble x3, double y3);\n\nvoid\ncairo_arc (cairo_t *cr,\n\t   double xc, double yc,\n\t   double radius,\n\t   double angle1, double angle2);\n\nvoid\ncairo_arc_negative (cairo_t *cr,\n\t\t    double xc, double yc,\n\t\t    double radius,\n\t\t    double angle1, double angle2);\n\nvoid\ncairo_rel_move_to (cairo_t *cr, double dx, double dy);\n\nvoid\ncairo_rel_line_to (cairo_t *cr, double dx, double dy);\n\nvoid\ncairo_rel_curve_to (cairo_t *cr,\n\t\t    double dx1, double dy1,\n\t\t    double dx2, double dy2,\n\t\t    double dx3, double dy3);\n\nvoid\ncairo_rectangle (cairo_t *cr,\n\t\t double x, double y,\n\t\t double width, double height);\n\nvoid\ncairo_close_path (cairo_t *cr);\n\nvoid\ncairo_path_extents (cairo_t *cr,\n\t\t    double *x1, double *y1,\n\t\t    double *x2, double *y2);\n\nvoid\ncairo_paint (cairo_t *cr);\n\nvoid\ncairo_paint_with_alpha (cairo_t *cr,\n\t\t\tdouble   alpha);\n\nvoid\ncairo_mask (cairo_t         *cr,\n\t    cairo_pattern_t *pattern);\n\nvoid\ncairo_mask_surface (cairo_t         *cr,\n\t\t    cairo_surface_t *surface,\n\t\t    double           surface_x,\n\t\t    double           surface_y);\n\nvoid\ncairo_stroke (cairo_t *cr);\n\nvoid\ncairo_stroke_preserve (cairo_t *cr);\n\nvoid\ncairo_fill (cairo_t *cr);\n\nvoid\ncairo_fill_preserve (cairo_t *cr);\n\nvoid\ncairo_copy_page (cairo_t *cr);\n\nvoid\ncairo_show_page (cairo_t *cr);\n\ncairo_bool_t\ncairo_in_stroke (cairo_t *cr, double x, double y);\n\ncairo_bool_t\ncairo_in_fill (cairo_t *cr, double x, double y);\n\ncairo_bool_t\ncairo_in_clip (cairo_t *cr, double x, double y);\n\nvoid\ncairo_stroke_extents (cairo_t *cr,\n\t\t      double *x1, double *y1,\n\t\t      double *x2, double *y2);\n\nvoid\ncairo_fill_extents (cairo_t *cr,\n\t\t    double *x1, double *y1,\n\t\t    double *x2, double *y2);\n\nvoid\ncairo_reset_clip (cairo_t *cr);\n\nvoid\ncairo_clip (cairo_t *cr);\n\nvoid\ncairo_clip_preserve (cairo_t *cr);\n\nvoid\ncairo_clip_extents (cairo_t *cr,\n\t\t    double *x1, double *y1,\n\t\t    double *x2, double *y2);\n\ntypedef struct _cairo_rectangle {\n    double x, y, width, height;\n} cairo_rectangle_t;\n\ntypedef struct _cairo_rectangle_list {\n    cairo_status_t     status;\n    cairo_rectangle_t *rectangles;\n    int                num_rectangles;\n} cairo_rectangle_list_t;\n\ncairo_rectangle_list_t *\ncairo_copy_clip_rectangle_list (cairo_t *cr);\n\nvoid\ncairo_rectangle_list_destroy (cairo_rectangle_list_t *rectangle_list);\n\nvoid\ncairo_tag_begin (cairo_t *cr, const char *tag_name, const char *attributes);\n\nvoid\ncairo_tag_end (cairo_t *cr, const char *tag_name);\n\ntypedef struct _cairo_scaled_font cairo_scaled_font_t;\n\ntypedef struct _cairo_font_face cairo_font_face_t;\n\ntypedef struct {\n    unsigned long        index;\n    double               x;\n    double               y;\n} cairo_glyph_t;\n\ncairo_glyph_t *\ncairo_glyph_allocate (int num_glyphs);\n\nvoid\ncairo_glyph_free (cairo_glyph_t *glyphs);\n\ntypedef struct {\n    int        num_bytes;\n    int        num_glyphs;\n} cairo_text_cluster_t;\n\ncairo_text_cluster_t *\ncairo_text_cluster_allocate (int num_clusters);\n\nvoid\ncairo_text_cluster_free (cairo_text_cluster_t *clusters);\n\ntypedef enum _cairo_text_cluster_flags {\n    CAIRO_TEXT_CLUSTER_FLAG_BACKWARD = 0x00000001\n} cairo_text_cluster_flags_t;\n\ntypedef struct {\n    double x_bearing;\n    double y_bearing;\n    double width;\n    double height;\n    double x_advance;\n    double y_advance;\n} cairo_text_extents_t;\n\ntypedef struct {\n    double ascent;\n    double descent;\n    double height;\n    double max_x_advance;\n    double max_y_advance;\n} cairo_font_extents_t;\n\ntypedef enum _cairo_font_slant {\n    CAIRO_FONT_SLANT_NORMAL,\n    CAIRO_FONT_SLANT_ITALIC,\n    CAIRO_FONT_SLANT_OBLIQUE\n} cairo_font_slant_t;\n\ntypedef enum _cairo_font_weight {\n    CAIRO_FONT_WEIGHT_NORMAL,\n    CAIRO_FONT_WEIGHT_BOLD\n} cairo_font_weight_t;\n\ntypedef enum _cairo_subpixel_order {\n    CAIRO_SUBPIXEL_ORDER_DEFAULT,\n    CAIRO_SUBPIXEL_ORDER_RGB,\n    CAIRO_SUBPIXEL_ORDER_BGR,\n    CAIRO_SUBPIXEL_ORDER_VRGB,\n    CAIRO_SUBPIXEL_ORDER_VBGR\n} cairo_subpixel_order_t;\n\ntypedef enum _cairo_hint_style {\n    CAIRO_HINT_STYLE_DEFAULT,\n    CAIRO_HINT_STYLE_NONE,\n    CAIRO_HINT_STYLE_SLIGHT,\n    CAIRO_HINT_STYLE_MEDIUM,\n    CAIRO_HINT_STYLE_FULL\n} cairo_hint_style_t;\n\ntypedef enum _cairo_hint_metrics {\n    CAIRO_HINT_METRICS_DEFAULT,\n    CAIRO_HINT_METRICS_OFF,\n    CAIRO_HINT_METRICS_ON\n} cairo_hint_metrics_t;\n\ntypedef struct _cairo_font_options cairo_font_options_t;\n\ncairo_font_options_t *\ncairo_font_options_create (void);\n\ncairo_font_options_t *\ncairo_font_options_copy (const cairo_font_options_t *original);\n\nvoid\ncairo_font_options_destroy (cairo_font_options_t *options);\n\ncairo_status_t\ncairo_font_options_status (cairo_font_options_t *options);\n\nvoid\ncairo_font_options_merge (cairo_font_options_t       *options,\n\t\t\t  const cairo_font_options_t *other);\ncairo_bool_t\ncairo_font_options_equal (const cairo_font_options_t *options,\n\t\t\t  const cairo_font_options_t *other);\n\nunsigned long\ncairo_font_options_hash (const cairo_font_options_t *options);\n\nvoid\ncairo_font_options_set_antialias (cairo_font_options_t *options,\n\t\t\t\t  cairo_antialias_t     antialias);\ncairo_antialias_t\ncairo_font_options_get_antialias (const cairo_font_options_t *options);\n\nvoid\ncairo_font_options_set_subpixel_order (cairo_font_options_t   *options,\n\t\t\t\t       cairo_subpixel_order_t  subpixel_order);\ncairo_subpixel_order_t\ncairo_font_options_get_subpixel_order (const cairo_font_options_t *options);\n\nvoid\ncairo_font_options_set_hint_style (cairo_font_options_t *options,\n\t\t\t\t   cairo_hint_style_t     hint_style);\ncairo_hint_style_t\ncairo_font_options_get_hint_style (const cairo_font_options_t *options);\n\nvoid\ncairo_font_options_set_hint_metrics (cairo_font_options_t *options,\n\t\t\t\t     cairo_hint_metrics_t  hint_metrics);\ncairo_hint_metrics_t\ncairo_font_options_get_hint_metrics (const cairo_font_options_t *options);\n\nconst char *\ncairo_font_options_get_variations (cairo_font_options_t *options);\n\nvoid\ncairo_font_options_set_variations (cairo_font_options_t *options,\n                                   const char           *variations);\n\nvoid\ncairo_select_font_face (cairo_t              *cr,\n\t\t\tconst char           *family,\n\t\t\tcairo_font_slant_t   slant,\n\t\t\tcairo_font_weight_t  weight);\n\nvoid\ncairo_set_font_size (cairo_t *cr, double size);\n\nvoid\ncairo_set_font_matrix (cairo_t\t\t    *cr,\n\t\t       const cairo_matrix_t *matrix);\n\nvoid\ncairo_get_font_matrix (cairo_t *cr,\n\t\t       cairo_matrix_t *matrix);\n\nvoid\ncairo_set_font_options (cairo_t                    *cr,\n\t\t\tconst cairo_font_options_t *options);\n\nvoid\ncairo_get_font_options (cairo_t              *cr,\n\t\t\tcairo_font_options_t *options);\n\nvoid\ncairo_set_font_face (cairo_t *cr, cairo_font_face_t *font_face);\n\ncairo_font_face_t *\ncairo_get_font_face (cairo_t *cr);\n\nvoid\ncairo_set_scaled_font (cairo_t                   *cr,\n\t\t       const cairo_scaled_font_t *scaled_font);\n\ncairo_scaled_font_t *\ncairo_get_scaled_font (cairo_t *cr);\n\nvoid\ncairo_show_text (cairo_t *cr, const char *utf8);\n\nvoid\ncairo_show_glyphs (cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs);\n\nvoid\ncairo_show_text_glyphs (cairo_t\t\t\t   *cr,\n\t\t\tconst char\t\t   *utf8,\n\t\t\tint\t\t\t    utf8_len,\n\t\t\tconst cairo_glyph_t\t   *glyphs,\n\t\t\tint\t\t\t    num_glyphs,\n\t\t\tconst cairo_text_cluster_t *clusters,\n\t\t\tint\t\t\t    num_clusters,\n\t\t\tcairo_text_cluster_flags_t  cluster_flags);\n\nvoid\ncairo_text_path  (cairo_t *cr, const char *utf8);\n\nvoid\ncairo_glyph_path (cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs);\n\nvoid\ncairo_text_extents (cairo_t              *cr,\n\t\t    const char    \t *utf8,\n\t\t    cairo_text_extents_t *extents);\n\nvoid\ncairo_glyph_extents (cairo_t               *cr,\n\t\t     const cairo_glyph_t   *glyphs,\n\t\t     int                   num_glyphs,\n\t\t     cairo_text_extents_t  *extents);\n\nvoid\ncairo_font_extents (cairo_t              *cr,\n\t\t    cairo_font_extents_t *extents);\n\ncairo_font_face_t *\ncairo_font_face_reference (cairo_font_face_t *font_face);\n\nvoid\ncairo_font_face_destroy (cairo_font_face_t *font_face);\n\nunsigned int\ncairo_font_face_get_reference_count (cairo_font_face_t *font_face);\n\ncairo_status_t\ncairo_font_face_status (cairo_font_face_t *font_face);\n\ntypedef enum _cairo_font_type {\n    CAIRO_FONT_TYPE_TOY,\n    CAIRO_FONT_TYPE_FT,\n    CAIRO_FONT_TYPE_WIN32,\n    CAIRO_FONT_TYPE_QUARTZ,\n    CAIRO_FONT_TYPE_USER\n} cairo_font_type_t;\n\ncairo_font_type_t\ncairo_font_face_get_type (cairo_font_face_t *font_face);\n\nvoid *\ncairo_font_face_get_user_data (cairo_font_face_t\t   *font_face,\n\t\t\t       const cairo_user_data_key_t *key);\n\ncairo_status_t\ncairo_font_face_set_user_data (cairo_font_face_t\t   *font_face,\n\t\t\t       const cairo_user_data_key_t *key,\n\t\t\t       void\t\t\t   *user_data,\n\t\t\t       cairo_destroy_func_t\t    destroy);\n\ncairo_scaled_font_t *\ncairo_scaled_font_create (cairo_font_face_t          *font_face,\n\t\t\t  const cairo_matrix_t       *font_matrix,\n\t\t\t  const cairo_matrix_t       *ctm,\n\t\t\t  const cairo_font_options_t *options);\n\ncairo_scaled_font_t *\ncairo_scaled_font_reference (cairo_scaled_font_t *scaled_font);\n\nvoid\ncairo_scaled_font_destroy (cairo_scaled_font_t *scaled_font);\n\nunsigned int\ncairo_scaled_font_get_reference_count (cairo_scaled_font_t *scaled_font);\n\ncairo_status_t\ncairo_scaled_font_status (cairo_scaled_font_t *scaled_font);\n\ncairo_font_type_t\ncairo_scaled_font_get_type (cairo_scaled_font_t *scaled_font);\n\nvoid *\ncairo_scaled_font_get_user_data (cairo_scaled_font_t         *scaled_font,\n\t\t\t\t const cairo_user_data_key_t *key);\n\ncairo_status_t\ncairo_scaled_font_set_user_data (cairo_scaled_font_t         *scaled_font,\n\t\t\t\t const cairo_user_data_key_t *key,\n\t\t\t\t void                        *user_data,\n\t\t\t\t cairo_destroy_func_t\t      destroy);\n\nvoid\ncairo_scaled_font_extents (cairo_scaled_font_t  *scaled_font,\n\t\t\t   cairo_font_extents_t *extents);\n\nvoid\ncairo_scaled_font_text_extents (cairo_scaled_font_t  *scaled_font,\n\t\t\t\tconst char  \t     *utf8,\n\t\t\t\tcairo_text_extents_t *extents);\n\nvoid\ncairo_scaled_font_glyph_extents (cairo_scaled_font_t   *scaled_font,\n\t\t\t\t const cairo_glyph_t   *glyphs,\n\t\t\t\t int                   num_glyphs,\n\t\t\t\t cairo_text_extents_t  *extents);\n\ncairo_status_t\ncairo_scaled_font_text_to_glyphs (cairo_scaled_font_t        *scaled_font,\n\t\t\t\t  double\t\t      x,\n\t\t\t\t  double\t\t      y,\n\t\t\t\t  const char\t             *utf8,\n\t\t\t\t  int\t\t              utf8_len,\n\t\t\t\t  cairo_glyph_t\t            **glyphs,\n\t\t\t\t  int\t\t             *num_glyphs,\n\t\t\t\t  cairo_text_cluster_t      **clusters,\n\t\t\t\t  int\t\t             *num_clusters,\n\t\t\t\t  cairo_text_cluster_flags_t *cluster_flags);\n\ncairo_font_face_t *\ncairo_scaled_font_get_font_face (cairo_scaled_font_t *scaled_font);\n\nvoid\ncairo_scaled_font_get_font_matrix (cairo_scaled_font_t\t*scaled_font,\n\t\t\t\t   cairo_matrix_t\t*font_matrix);\n\nvoid\ncairo_scaled_font_get_ctm (cairo_scaled_font_t\t*scaled_font,\n\t\t\t   cairo_matrix_t\t*ctm);\n\nvoid\ncairo_scaled_font_get_scale_matrix (cairo_scaled_font_t\t*scaled_font,\n\t\t\t\t    cairo_matrix_t\t*scale_matrix);\n\nvoid\ncairo_scaled_font_get_font_options (cairo_scaled_font_t\t\t*scaled_font,\n\t\t\t\t    cairo_font_options_t\t*options);\n\ncairo_font_face_t *\ncairo_toy_font_face_create (const char           *family,\n\t\t\t    cairo_font_slant_t    slant,\n\t\t\t    cairo_font_weight_t   weight);\n\nconst char *\ncairo_toy_font_face_get_family (cairo_font_face_t *font_face);\n\ncairo_font_slant_t\ncairo_toy_font_face_get_slant (cairo_font_face_t *font_face);\n\ncairo_font_weight_t\ncairo_toy_font_face_get_weight (cairo_font_face_t *font_face);\n\ncairo_font_face_t *\ncairo_user_font_face_create (void);\n\ntypedef cairo_status_t (*cairo_user_scaled_font_init_func_t) (cairo_scaled_font_t  *scaled_font,\n\t\t\t\t\t\t\t      cairo_t              *cr,\n\t\t\t\t\t\t\t      cairo_font_extents_t *extents);\n\ntypedef cairo_status_t (*cairo_user_scaled_font_render_glyph_func_t) (cairo_scaled_font_t  *scaled_font,\n\t\t\t\t\t\t\t\t      unsigned long         glyph,\n\t\t\t\t\t\t\t\t      cairo_t              *cr,\n\t\t\t\t\t\t\t\t      cairo_text_extents_t *extents);\n\ntypedef cairo_status_t (*cairo_user_scaled_font_text_to_glyphs_func_t) (cairo_scaled_font_t        *scaled_font,\n\t\t\t\t\t\t\t\t\tconst char\t           *utf8,\n\t\t\t\t\t\t\t\t\tint\t\t            utf8_len,\n\t\t\t\t\t\t\t\t\tcairo_glyph_t\t          **glyphs,\n\t\t\t\t\t\t\t\t\tint\t\t           *num_glyphs,\n\t\t\t\t\t\t\t\t\tcairo_text_cluster_t      **clusters,\n\t\t\t\t\t\t\t\t\tint\t\t           *num_clusters,\n\t\t\t\t\t\t\t\t\tcairo_text_cluster_flags_t *cluster_flags);\n\ntypedef cairo_status_t (*cairo_user_scaled_font_unicode_to_glyph_func_t) (cairo_scaled_font_t *scaled_font,\n\t\t\t\t\t\t\t\t\t  unsigned long        unicode,\n\t\t\t\t\t\t\t\t\t  unsigned long       *glyph_index);\n\nvoid\ncairo_user_font_face_set_init_func (cairo_font_face_t                  *font_face,\n\t\t\t\t    cairo_user_scaled_font_init_func_t  init_func);\n\nvoid\ncairo_user_font_face_set_render_glyph_func (cairo_font_face_t                          *font_face,\n\t\t\t\t\t    cairo_user_scaled_font_render_glyph_func_t  render_glyph_func);\n\nvoid\ncairo_user_font_face_set_text_to_glyphs_func (cairo_font_face_t                            *font_face,\n\t\t\t\t\t      cairo_user_scaled_font_text_to_glyphs_func_t  text_to_glyphs_func);\n\nvoid\ncairo_user_font_face_set_unicode_to_glyph_func (cairo_font_face_t                              *font_face,\n\t\t\t\t\t        cairo_user_scaled_font_unicode_to_glyph_func_t  unicode_to_glyph_func);\n\ncairo_user_scaled_font_init_func_t\ncairo_user_font_face_get_init_func (cairo_font_face_t *font_face);\n\ncairo_user_scaled_font_render_glyph_func_t\ncairo_user_font_face_get_render_glyph_func (cairo_font_face_t *font_face);\n\ncairo_user_scaled_font_text_to_glyphs_func_t\ncairo_user_font_face_get_text_to_glyphs_func (cairo_font_face_t *font_face);\n\ncairo_user_scaled_font_unicode_to_glyph_func_t\ncairo_user_font_face_get_unicode_to_glyph_func (cairo_font_face_t *font_face);\n\ncairo_operator_t\ncairo_get_operator (cairo_t *cr);\n\ncairo_pattern_t *\ncairo_get_source (cairo_t *cr);\n\ndouble\ncairo_get_tolerance (cairo_t *cr);\n\ncairo_antialias_t\ncairo_get_antialias (cairo_t *cr);\n\ncairo_bool_t\ncairo_has_current_point (cairo_t *cr);\n\nvoid\ncairo_get_current_point (cairo_t *cr, double *x, double *y);\n\ncairo_fill_rule_t\ncairo_get_fill_rule (cairo_t *cr);\n\ndouble\ncairo_get_line_width (cairo_t *cr);\n\ncairo_line_cap_t\ncairo_get_line_cap (cairo_t *cr);\n\ncairo_line_join_t\ncairo_get_line_join (cairo_t *cr);\n\ndouble\ncairo_get_miter_limit (cairo_t *cr);\n\nint\ncairo_get_dash_count (cairo_t *cr);\n\nvoid\ncairo_get_dash (cairo_t *cr, double *dashes, double *offset);\n\nvoid\ncairo_get_matrix (cairo_t *cr, cairo_matrix_t *matrix);\n\ncairo_surface_t *\ncairo_get_target (cairo_t *cr);\n\ncairo_surface_t *\ncairo_get_group_target (cairo_t *cr);\n\ntypedef enum _cairo_path_data_type {\n    CAIRO_PATH_MOVE_TO,\n    CAIRO_PATH_LINE_TO,\n    CAIRO_PATH_CURVE_TO,\n    CAIRO_PATH_CLOSE_PATH\n} cairo_path_data_type_t;\n\ntypedef union _cairo_path_data_t cairo_path_data_t;\nunion _cairo_path_data_t {\n    struct {\n\tcairo_path_data_type_t type;\n\tint length;\n    } header;\n    struct {\n\tdouble x, y;\n    } point;\n};\n\ntypedef struct cairo_path {\n    cairo_status_t status;\n    cairo_path_data_t *data;\n    int num_data;\n} cairo_path_t;\n\ncairo_path_t *\ncairo_copy_path (cairo_t *cr);\n\ncairo_path_t *\ncairo_copy_path_flat (cairo_t *cr);\n\nvoid\ncairo_append_path (cairo_t\t\t*cr,\n\t\t   const cairo_path_t\t*path);\n\nvoid\ncairo_path_destroy (cairo_path_t *path);\n\ncairo_status_t\ncairo_status (cairo_t *cr);\n\nconst char *\ncairo_status_to_string (cairo_status_t status);\n\ncairo_device_t *\ncairo_device_reference (cairo_device_t *device);\n\ntypedef enum _cairo_device_type {\n    CAIRO_DEVICE_TYPE_DRM,\n    CAIRO_DEVICE_TYPE_GL,\n    CAIRO_DEVICE_TYPE_SCRIPT,\n    CAIRO_DEVICE_TYPE_XCB,\n    CAIRO_DEVICE_TYPE_XLIB,\n    CAIRO_DEVICE_TYPE_XML,\n    CAIRO_DEVICE_TYPE_COGL,\n    CAIRO_DEVICE_TYPE_WIN32,\n\n    CAIRO_DEVICE_TYPE_INVALID = -1\n} cairo_device_type_t;\n\ncairo_device_type_t\ncairo_device_get_type (cairo_device_t *device);\n\ncairo_status_t\ncairo_device_status (cairo_device_t *device);\n\ncairo_status_t\ncairo_device_acquire (cairo_device_t *device);\n\nvoid\ncairo_device_release (cairo_device_t *device);\n\nvoid\ncairo_device_flush (cairo_device_t *device);\n\nvoid\ncairo_device_finish (cairo_device_t *device);\n\nvoid\ncairo_device_destroy (cairo_device_t *device);\n\nunsigned int\ncairo_device_get_reference_count (cairo_device_t *device);\n\nvoid *\ncairo_device_get_user_data (cairo_device_t\t\t *device,\n\t\t\t    const cairo_user_data_key_t *key);\n\ncairo_status_t\ncairo_device_set_user_data (cairo_device_t\t\t *device,\n\t\t\t    const cairo_user_data_key_t *key,\n\t\t\t    void\t\t\t *user_data,\n\t\t\t    cairo_destroy_func_t\t  destroy);\n\ncairo_surface_t *\ncairo_surface_create_similar (cairo_surface_t  *other,\n\t\t\t      cairo_content_t\tcontent,\n\t\t\t      int\t\twidth,\n\t\t\t      int\t\theight);\n\ncairo_surface_t *\ncairo_surface_create_similar_image (cairo_surface_t  *other,\n\t\t\t\t    cairo_format_t    format,\n\t\t\t\t    int\t\twidth,\n\t\t\t\t    int\t\theight);\n\ncairo_surface_t *\ncairo_surface_map_to_image (cairo_surface_t  *surface,\n\t\t\t    const cairo_rectangle_int_t *extents);\n\nvoid\ncairo_surface_unmap_image (cairo_surface_t *surface,\n\t\t\t   cairo_surface_t *image);\n\ncairo_surface_t *\ncairo_surface_create_for_rectangle (cairo_surface_t\t*target,\n                                    double\t\t x,\n                                    double\t\t y,\n                                    double\t\t width,\n                                    double\t\t height);\n\ntypedef enum {\n\tCAIRO_SURFACE_OBSERVER_NORMAL = 0,\n\tCAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS = 0x1\n} cairo_surface_observer_mode_t;\n\ncairo_surface_t *\ncairo_surface_create_observer (cairo_surface_t *target,\n\t\t\t       cairo_surface_observer_mode_t mode);\n\ntypedef void (*cairo_surface_observer_callback_t) (cairo_surface_t *observer,\n\t\t\t\t\t\t   cairo_surface_t *target,\n\t\t\t\t\t\t   void *data);\n\ncairo_status_t\ncairo_surface_observer_add_paint_callback (cairo_surface_t *abstract_surface,\n\t\t\t\t\t   cairo_surface_observer_callback_t func,\n\t\t\t\t\t   void *data);\n\ncairo_status_t\ncairo_surface_observer_add_mask_callback (cairo_surface_t *abstract_surface,\n\t\t\t\t\t  cairo_surface_observer_callback_t func,\n\t\t\t\t\t  void *data);\n\ncairo_status_t\ncairo_surface_observer_add_fill_callback (cairo_surface_t *abstract_surface,\n\t\t\t\t\t  cairo_surface_observer_callback_t func,\n\t\t\t\t\t  void *data);\n\ncairo_status_t\ncairo_surface_observer_add_stroke_callback (cairo_surface_t *abstract_surface,\n\t\t\t\t\t    cairo_surface_observer_callback_t func,\n\t\t\t\t\t    void *data);\n\ncairo_status_t\ncairo_surface_observer_add_glyphs_callback (cairo_surface_t *abstract_surface,\n\t\t\t\t\t    cairo_surface_observer_callback_t func,\n\t\t\t\t\t    void *data);\n\ncairo_status_t\ncairo_surface_observer_add_flush_callback (cairo_surface_t *abstract_surface,\n\t\t\t\t\t   cairo_surface_observer_callback_t func,\n\t\t\t\t\t   void *data);\n\ncairo_status_t\ncairo_surface_observer_add_finish_callback (cairo_surface_t *abstract_surface,\n\t\t\t\t\t    cairo_surface_observer_callback_t func,\n\t\t\t\t\t    void *data);\n\ncairo_status_t\ncairo_surface_observer_print (cairo_surface_t *surface,\n\t\t\t      cairo_write_func_t write_func,\n\t\t\t      void *closure);\ndouble\ncairo_surface_observer_elapsed (cairo_surface_t *surface);\n\ncairo_status_t\ncairo_device_observer_print (cairo_device_t *device,\n\t\t\t     cairo_write_func_t write_func,\n\t\t\t     void *closure);\n\ndouble\ncairo_device_observer_elapsed (cairo_device_t *device);\n\ndouble\ncairo_device_observer_paint_elapsed (cairo_device_t *device);\n\ndouble\ncairo_device_observer_mask_elapsed (cairo_device_t *device);\n\ndouble\ncairo_device_observer_fill_elapsed (cairo_device_t *device);\n\ndouble\ncairo_device_observer_stroke_elapsed (cairo_device_t *device);\n\ndouble\ncairo_device_observer_glyphs_elapsed (cairo_device_t *device);\n\ncairo_surface_t *\ncairo_surface_reference (cairo_surface_t *surface);\n\nvoid\ncairo_surface_finish (cairo_surface_t *surface);\n\nvoid\ncairo_surface_destroy (cairo_surface_t *surface);\n\ncairo_device_t *\ncairo_surface_get_device (cairo_surface_t *surface);\n\nunsigned int\ncairo_surface_get_reference_count (cairo_surface_t *surface);\n\ncairo_status_t\ncairo_surface_status (cairo_surface_t *surface);\n\ntypedef enum _cairo_surface_type {\n    CAIRO_SURFACE_TYPE_IMAGE,\n    CAIRO_SURFACE_TYPE_PDF,\n    CAIRO_SURFACE_TYPE_PS,\n    CAIRO_SURFACE_TYPE_XLIB,\n    CAIRO_SURFACE_TYPE_XCB,\n    CAIRO_SURFACE_TYPE_GLITZ,\n    CAIRO_SURFACE_TYPE_QUARTZ,\n    CAIRO_SURFACE_TYPE_WIN32,\n    CAIRO_SURFACE_TYPE_BEOS,\n    CAIRO_SURFACE_TYPE_DIRECTFB,\n    CAIRO_SURFACE_TYPE_SVG,\n    CAIRO_SURFACE_TYPE_OS2,\n    CAIRO_SURFACE_TYPE_WIN32_PRINTING,\n    CAIRO_SURFACE_TYPE_QUARTZ_IMAGE,\n    CAIRO_SURFACE_TYPE_SCRIPT,\n    CAIRO_SURFACE_TYPE_QT,\n    CAIRO_SURFACE_TYPE_RECORDING,\n    CAIRO_SURFACE_TYPE_VG,\n    CAIRO_SURFACE_TYPE_GL,\n    CAIRO_SURFACE_TYPE_DRM,\n    CAIRO_SURFACE_TYPE_TEE,\n    CAIRO_SURFACE_TYPE_XML,\n    CAIRO_SURFACE_TYPE_SKIA,\n    CAIRO_SURFACE_TYPE_SUBSURFACE,\n    CAIRO_SURFACE_TYPE_COGL\n} cairo_surface_type_t;\n\ncairo_surface_type_t\ncairo_surface_get_type (cairo_surface_t *surface);\n\ncairo_content_t\ncairo_surface_get_content (cairo_surface_t *surface);\n\ncairo_status_t\ncairo_surface_write_to_png (cairo_surface_t\t*surface,\n\t\t\t    const char\t\t*filename);\n\ncairo_status_t\ncairo_surface_write_to_png_stream (cairo_surface_t\t*surface,\n\t\t\t\t   cairo_write_func_t\twrite_func,\n\t\t\t\t   void\t\t\t*closure);\n\nvoid *\ncairo_surface_get_user_data (cairo_surface_t\t\t *surface,\n\t\t\t     const cairo_user_data_key_t *key);\n\ncairo_status_t\ncairo_surface_set_user_data (cairo_surface_t\t\t *surface,\n\t\t\t     const cairo_user_data_key_t *key,\n\t\t\t     void\t\t\t *user_data,\n\t\t\t     cairo_destroy_func_t\t destroy);\n\nvoid\ncairo_surface_get_mime_data (cairo_surface_t\t\t*surface,\n                             const char\t\t\t*mime_type,\n                             const unsigned char       **data,\n                             unsigned long\t\t*length);\n\ncairo_status_t\ncairo_surface_set_mime_data (cairo_surface_t\t\t*surface,\n                             const char\t\t\t*mime_type,\n                             const unsigned char\t*data,\n                             unsigned long\t\t length,\n\t\t\t     cairo_destroy_func_t\t destroy,\n\t\t\t     void\t\t\t*closure);\n\ncairo_bool_t\ncairo_surface_supports_mime_type (cairo_surface_t\t\t*surface,\n\t\t\t\t  const char\t\t        *mime_type);\n\nvoid\ncairo_surface_get_font_options (cairo_surface_t      *surface,\n\t\t\t\tcairo_font_options_t *options);\n\nvoid\ncairo_surface_flush (cairo_surface_t *surface);\n\nvoid\ncairo_surface_mark_dirty (cairo_surface_t *surface);\n\nvoid\ncairo_surface_mark_dirty_rectangle (cairo_surface_t *surface,\n\t\t\t\t    int              x,\n\t\t\t\t    int              y,\n\t\t\t\t    int              width,\n\t\t\t\t    int              height);\n\nvoid\ncairo_surface_set_device_scale (cairo_surface_t *surface,\n\t\t\t\tdouble           x_scale,\n\t\t\t\tdouble           y_scale);\n\nvoid\ncairo_surface_get_device_scale (cairo_surface_t *surface,\n\t\t\t\tdouble          *x_scale,\n\t\t\t\tdouble          *y_scale);\n\nvoid\ncairo_surface_set_device_offset (cairo_surface_t *surface,\n\t\t\t\t double           x_offset,\n\t\t\t\t double           y_offset);\n\nvoid\ncairo_surface_get_device_offset (cairo_surface_t *surface,\n\t\t\t\t double          *x_offset,\n\t\t\t\t double          *y_offset);\n\nvoid\ncairo_surface_set_fallback_resolution (cairo_surface_t\t*surface,\n\t\t\t\t       double\t\t x_pixels_per_inch,\n\t\t\t\t       double\t\t y_pixels_per_inch);\n\nvoid\ncairo_surface_get_fallback_resolution (cairo_surface_t\t*surface,\n\t\t\t\t       double\t\t*x_pixels_per_inch,\n\t\t\t\t       double\t\t*y_pixels_per_inch);\n\nvoid\ncairo_surface_copy_page (cairo_surface_t *surface);\n\nvoid\ncairo_surface_show_page (cairo_surface_t *surface);\n\ncairo_bool_t\ncairo_surface_has_show_text_glyphs (cairo_surface_t *surface);\n\ncairo_surface_t *\ncairo_image_surface_create (cairo_format_t\tformat,\n\t\t\t    int\t\t\twidth,\n\t\t\t    int\t\t\theight);\n\nint\ncairo_format_stride_for_width (cairo_format_t\tformat,\n\t\t\t       int\t\twidth);\n\ncairo_surface_t *\ncairo_image_surface_create_for_data (unsigned char\t       *data,\n\t\t\t\t     cairo_format_t\t\tformat,\n\t\t\t\t     int\t\t\twidth,\n\t\t\t\t     int\t\t\theight,\n\t\t\t\t     int\t\t\tstride);\n\nunsigned char *\ncairo_image_surface_get_data (cairo_surface_t *surface);\n\ncairo_format_t\ncairo_image_surface_get_format (cairo_surface_t *surface);\n\nint\ncairo_image_surface_get_width (cairo_surface_t *surface);\n\nint\ncairo_image_surface_get_height (cairo_surface_t *surface);\n\nint\ncairo_image_surface_get_stride (cairo_surface_t *surface);\n\ncairo_surface_t *\ncairo_image_surface_create_from_png (const char\t*filename);\n\ncairo_surface_t *\ncairo_image_surface_create_from_png_stream (cairo_read_func_t\tread_func,\n\t\t\t\t\t    void\t\t*closure);\n\ncairo_surface_t *\ncairo_recording_surface_create (cairo_content_t\t\t content,\n                                const cairo_rectangle_t *extents);\n\nvoid\ncairo_recording_surface_ink_extents (cairo_surface_t *surface,\n                                     double *x0,\n                                     double *y0,\n                                     double *width,\n                                     double *height);\n\ncairo_bool_t\ncairo_recording_surface_get_extents (cairo_surface_t *surface,\n\t\t\t\t     cairo_rectangle_t *extents);\n\ntypedef cairo_surface_t *\n(*cairo_raster_source_acquire_func_t) (cairo_pattern_t *pattern,\n\t\t\t\t       void *callback_data,\n\t\t\t\t       cairo_surface_t *target,\n\t\t\t\t       const cairo_rectangle_int_t *extents);\n\ntypedef void\n(*cairo_raster_source_release_func_t) (cairo_pattern_t *pattern,\n\t\t\t\t       void *callback_data,\n\t\t\t\t       cairo_surface_t *surface);\n\ntypedef cairo_status_t\n(*cairo_raster_source_snapshot_func_t) (cairo_pattern_t *pattern,\n\t\t\t\t\tvoid *callback_data);\n\ntypedef cairo_status_t\n(*cairo_raster_source_copy_func_t) (cairo_pattern_t *pattern,\n\t\t\t\t    void *callback_data,\n\t\t\t\t    const cairo_pattern_t *other);\n\ntypedef void\n(*cairo_raster_source_finish_func_t) (cairo_pattern_t *pattern,\n\t\t\t\t      void *callback_data);\n\ncairo_pattern_t *\ncairo_pattern_create_raster_source (void *user_data,\n\t\t\t\t    cairo_content_t content,\n\t\t\t\t    int width, int height);\n\nvoid\ncairo_raster_source_pattern_set_callback_data (cairo_pattern_t *pattern,\n\t\t\t\t\t       void *data);\n\nvoid *\ncairo_raster_source_pattern_get_callback_data (cairo_pattern_t *pattern);\n\nvoid\ncairo_raster_source_pattern_set_acquire (cairo_pattern_t *pattern,\n\t\t\t\t\t cairo_raster_source_acquire_func_t acquire,\n\t\t\t\t\t cairo_raster_source_release_func_t release);\n\nvoid\ncairo_raster_source_pattern_get_acquire (cairo_pattern_t *pattern,\n\t\t\t\t\t cairo_raster_source_acquire_func_t *acquire,\n\t\t\t\t\t cairo_raster_source_release_func_t *release);\nvoid\ncairo_raster_source_pattern_set_snapshot (cairo_pattern_t *pattern,\n\t\t\t\t\t  cairo_raster_source_snapshot_func_t snapshot);\n\ncairo_raster_source_snapshot_func_t\ncairo_raster_source_pattern_get_snapshot (cairo_pattern_t *pattern);\n\nvoid\ncairo_raster_source_pattern_set_copy (cairo_pattern_t *pattern,\n\t\t\t\t      cairo_raster_source_copy_func_t copy);\n\ncairo_raster_source_copy_func_t\ncairo_raster_source_pattern_get_copy (cairo_pattern_t *pattern);\n\nvoid\ncairo_raster_source_pattern_set_finish (cairo_pattern_t *pattern,\n\t\t\t\t\tcairo_raster_source_finish_func_t finish);\n\ncairo_raster_source_finish_func_t\ncairo_raster_source_pattern_get_finish (cairo_pattern_t *pattern);\n\ncairo_pattern_t *\ncairo_pattern_create_rgb (double red, double green, double blue);\n\ncairo_pattern_t *\ncairo_pattern_create_rgba (double red, double green, double blue,\n\t\t\t   double alpha);\n\ncairo_pattern_t *\ncairo_pattern_create_for_surface (cairo_surface_t *surface);\n\ncairo_pattern_t *\ncairo_pattern_create_linear (double x0, double y0,\n\t\t\t     double x1, double y1);\n\ncairo_pattern_t *\ncairo_pattern_create_radial (double cx0, double cy0, double radius0,\n\t\t\t     double cx1, double cy1, double radius1);\n\ncairo_pattern_t *\ncairo_pattern_create_mesh (void);\n\ncairo_pattern_t *\ncairo_pattern_reference (cairo_pattern_t *pattern);\n\nvoid\ncairo_pattern_destroy (cairo_pattern_t *pattern);\n\nunsigned int\ncairo_pattern_get_reference_count (cairo_pattern_t *pattern);\n\ncairo_status_t\ncairo_pattern_status (cairo_pattern_t *pattern);\n\nvoid *\ncairo_pattern_get_user_data (cairo_pattern_t\t\t *pattern,\n\t\t\t     const cairo_user_data_key_t *key);\n\ncairo_status_t\ncairo_pattern_set_user_data (cairo_pattern_t\t\t *pattern,\n\t\t\t     const cairo_user_data_key_t *key,\n\t\t\t     void\t\t\t *user_data,\n\t\t\t     cairo_destroy_func_t\t  destroy);\n\ntypedef enum _cairo_pattern_type {\n    CAIRO_PATTERN_TYPE_SOLID,\n    CAIRO_PATTERN_TYPE_SURFACE,\n    CAIRO_PATTERN_TYPE_LINEAR,\n    CAIRO_PATTERN_TYPE_RADIAL,\n    CAIRO_PATTERN_TYPE_MESH,\n    CAIRO_PATTERN_TYPE_RASTER_SOURCE\n} cairo_pattern_type_t;\n\ncairo_pattern_type_t\ncairo_pattern_get_type (cairo_pattern_t *pattern);\n\nvoid\ncairo_pattern_add_color_stop_rgb (cairo_pattern_t *pattern,\n\t\t\t\t  double offset,\n\t\t\t\t  double red, double green, double blue);\n\nvoid\ncairo_pattern_add_color_stop_rgba (cairo_pattern_t *pattern,\n\t\t\t\t   double offset,\n\t\t\t\t   double red, double green, double blue,\n\t\t\t\t   double alpha);\n\nvoid\ncairo_mesh_pattern_begin_patch (cairo_pattern_t *pattern);\n\nvoid\ncairo_mesh_pattern_end_patch (cairo_pattern_t *pattern);\n\nvoid\ncairo_mesh_pattern_curve_to (cairo_pattern_t *pattern,\n\t\t\t     double x1, double y1,\n\t\t\t     double x2, double y2,\n\t\t\t     double x3, double y3);\n\nvoid\ncairo_mesh_pattern_line_to (cairo_pattern_t *pattern,\n\t\t\t    double x, double y);\n\nvoid\ncairo_mesh_pattern_move_to (cairo_pattern_t *pattern,\n\t\t\t    double x, double y);\n\nvoid\ncairo_mesh_pattern_set_control_point (cairo_pattern_t *pattern,\n\t\t\t\t      unsigned int point_num,\n\t\t\t\t      double x, double y);\n\nvoid\ncairo_mesh_pattern_set_corner_color_rgb (cairo_pattern_t *pattern,\n\t\t\t\t\t unsigned int corner_num,\n\t\t\t\t\t double red, double green, double blue);\n\nvoid\ncairo_mesh_pattern_set_corner_color_rgba (cairo_pattern_t *pattern,\n\t\t\t\t\t  unsigned int corner_num,\n\t\t\t\t\t  double red, double green, double blue,\n\t\t\t\t\t  double alpha);\n\nvoid\ncairo_pattern_set_matrix (cairo_pattern_t      *pattern,\n\t\t\t  const cairo_matrix_t *matrix);\n\nvoid\ncairo_pattern_get_matrix (cairo_pattern_t *pattern,\n\t\t\t  cairo_matrix_t  *matrix);\n\ntypedef enum _cairo_extend {\n    CAIRO_EXTEND_NONE,\n    CAIRO_EXTEND_REPEAT,\n    CAIRO_EXTEND_REFLECT,\n    CAIRO_EXTEND_PAD\n} cairo_extend_t;\n\nvoid\ncairo_pattern_set_extend (cairo_pattern_t *pattern, cairo_extend_t extend);\n\ncairo_extend_t\ncairo_pattern_get_extend (cairo_pattern_t *pattern);\n\ntypedef enum _cairo_filter {\n    CAIRO_FILTER_FAST,\n    CAIRO_FILTER_GOOD,\n    CAIRO_FILTER_BEST,\n    CAIRO_FILTER_NEAREST,\n    CAIRO_FILTER_BILINEAR,\n    CAIRO_FILTER_GAUSSIAN\n} cairo_filter_t;\n\nvoid\ncairo_pattern_set_filter (cairo_pattern_t *pattern, cairo_filter_t filter);\n\ncairo_filter_t\ncairo_pattern_get_filter (cairo_pattern_t *pattern);\n\ncairo_status_t\ncairo_pattern_get_rgba (cairo_pattern_t *pattern,\n\t\t\tdouble *red, double *green,\n\t\t\tdouble *blue, double *alpha);\n\ncairo_status_t\ncairo_pattern_get_surface (cairo_pattern_t *pattern,\n\t\t\t   cairo_surface_t **surface);\n\ncairo_status_t\ncairo_pattern_get_color_stop_rgba (cairo_pattern_t *pattern,\n\t\t\t\t   int index, double *offset,\n\t\t\t\t   double *red, double *green,\n\t\t\t\t   double *blue, double *alpha);\n\ncairo_status_t\ncairo_pattern_get_color_stop_count (cairo_pattern_t *pattern,\n\t\t\t\t    int *count);\n\ncairo_status_t\ncairo_pattern_get_linear_points (cairo_pattern_t *pattern,\n\t\t\t\t double *x0, double *y0,\n\t\t\t\t double *x1, double *y1);\n\ncairo_status_t\ncairo_pattern_get_radial_circles (cairo_pattern_t *pattern,\n\t\t\t\t  double *x0, double *y0, double *r0,\n\t\t\t\t  double *x1, double *y1, double *r1);\n\ncairo_status_t\ncairo_mesh_pattern_get_patch_count (cairo_pattern_t *pattern,\n\t\t\t\t    unsigned int *count);\n\ncairo_path_t *\ncairo_mesh_pattern_get_path (cairo_pattern_t *pattern,\n\t\t\t     unsigned int patch_num);\n\ncairo_status_t\ncairo_mesh_pattern_get_corner_color_rgba (cairo_pattern_t *pattern,\n\t\t\t\t\t  unsigned int patch_num,\n\t\t\t\t\t  unsigned int corner_num,\n\t\t\t\t\t  double *red, double *green,\n\t\t\t\t\t  double *blue, double *alpha);\n\ncairo_status_t\ncairo_mesh_pattern_get_control_point (cairo_pattern_t *pattern,\n\t\t\t\t      unsigned int patch_num,\n\t\t\t\t      unsigned int point_num,\n\t\t\t\t      double *x, double *y);\n\nvoid\ncairo_matrix_init (cairo_matrix_t *matrix,\n\t\t   double  xx, double  yx,\n\t\t   double  xy, double  yy,\n\t\t   double  x0, double  y0);\n\nvoid\ncairo_matrix_init_identity (cairo_matrix_t *matrix);\n\nvoid\ncairo_matrix_init_translate (cairo_matrix_t *matrix,\n\t\t\t     double tx, double ty);\n\nvoid\ncairo_matrix_init_scale (cairo_matrix_t *matrix,\n\t\t\t double sx, double sy);\n\nvoid\ncairo_matrix_init_rotate (cairo_matrix_t *matrix,\n\t\t\t  double radians);\n\nvoid\ncairo_matrix_translate (cairo_matrix_t *matrix, double tx, double ty);\n\nvoid\ncairo_matrix_scale (cairo_matrix_t *matrix, double sx, double sy);\n\nvoid\ncairo_matrix_rotate (cairo_matrix_t *matrix, double radians);\n\ncairo_status_t\ncairo_matrix_invert (cairo_matrix_t *matrix);\n\nvoid\ncairo_matrix_multiply (cairo_matrix_t\t    *result,\n\t\t       const cairo_matrix_t *a,\n\t\t       const cairo_matrix_t *b);\n\nvoid\ncairo_matrix_transform_distance (const cairo_matrix_t *matrix,\n\t\t\t\t double *dx, double *dy);\n\nvoid\ncairo_matrix_transform_point (const cairo_matrix_t *matrix,\n\t\t\t      double *x, double *y);\n\ntypedef struct _cairo_region cairo_region_t;\n\ntypedef enum _cairo_region_overlap {\n    CAIRO_REGION_OVERLAP_IN,\t\t\n    CAIRO_REGION_OVERLAP_OUT,\t\t\n    CAIRO_REGION_OVERLAP_PART\t\t\n} cairo_region_overlap_t;\n\ncairo_region_t *\ncairo_region_create (void);\n\ncairo_region_t *\ncairo_region_create_rectangle (const cairo_rectangle_int_t *rectangle);\n\ncairo_region_t *\ncairo_region_create_rectangles (const cairo_rectangle_int_t *rects,\n\t\t\t\tint count);\n\ncairo_region_t *\ncairo_region_copy (const cairo_region_t *original);\n\ncairo_region_t *\ncairo_region_reference (cairo_region_t *region);\n\nvoid\ncairo_region_destroy (cairo_region_t *region);\n\ncairo_bool_t\ncairo_region_equal (const cairo_region_t *a, const cairo_region_t *b);\n\ncairo_status_t\ncairo_region_status (const cairo_region_t *region);\n\nvoid\ncairo_region_get_extents (const cairo_region_t        *region,\n\t\t\t  cairo_rectangle_int_t *extents);\n\nint\ncairo_region_num_rectangles (const cairo_region_t *region);\n\nvoid\ncairo_region_get_rectangle (const cairo_region_t  *region,\n\t\t\t    int                    nth,\n\t\t\t    cairo_rectangle_int_t *rectangle);\n\ncairo_bool_t\ncairo_region_is_empty (const cairo_region_t *region);\n\ncairo_region_overlap_t\ncairo_region_contains_rectangle (const cairo_region_t *region,\n\t\t\t\t const cairo_rectangle_int_t *rectangle);\n\ncairo_bool_t\ncairo_region_contains_point (const cairo_region_t *region, int x, int y);\n\nvoid\ncairo_region_translate (cairo_region_t *region, int dx, int dy);\n\ncairo_status_t\ncairo_region_subtract (cairo_region_t *dst, const cairo_region_t *other);\n\ncairo_status_t\ncairo_region_subtract_rectangle (cairo_region_t *dst,\n\t\t\t\t const cairo_rectangle_int_t *rectangle);\n\ncairo_status_t\ncairo_region_intersect (cairo_region_t *dst, const cairo_region_t *other);\n\ncairo_status_t\ncairo_region_intersect_rectangle (cairo_region_t *dst,\n\t\t\t\t  const cairo_rectangle_int_t *rectangle);\n\ncairo_status_t\ncairo_region_union (cairo_region_t *dst, const cairo_region_t *other);\n\ncairo_status_t\ncairo_region_union_rectangle (cairo_region_t *dst,\n\t\t\t      const cairo_rectangle_int_t *rectangle);\n\ncairo_status_t\ncairo_region_xor (cairo_region_t *dst, const cairo_region_t *other);\n\ncairo_status_t\ncairo_region_xor_rectangle (cairo_region_t *dst,\n\t\t\t    const cairo_rectangle_int_t *rectangle);\n\nvoid\ncairo_debug_reset_static_data (void);\n\nconst int CAIRO_PDF_OUTLINE_ROOT = 0;\n\n\ntypedef enum _cairo_pdf_version {\n    CAIRO_PDF_VERSION_1_4,\n    CAIRO_PDF_VERSION_1_5\n} cairo_pdf_version_t;\n\ncairo_surface_t *\ncairo_pdf_surface_create (const char\t\t*filename,\n\t\t\t  double\t\t width_in_points,\n\t\t\t  double\t\t height_in_points);\n\ncairo_surface_t *\ncairo_pdf_surface_create_for_stream (cairo_write_func_t\twrite_func,\n\t\t\t\t     void\t       *closure,\n\t\t\t\t     double\t\twidth_in_points,\n\t\t\t\t     double\t\theight_in_points);\n\nvoid\ncairo_pdf_surface_restrict_to_version (cairo_surface_t \t\t*surface,\n\t\t\t\t       cairo_pdf_version_t  \t version);\n\nvoid\ncairo_pdf_get_versions (cairo_pdf_version_t const\t**versions,\n                        int                      \t *num_versions);\n\nconst char *\ncairo_pdf_version_to_string (cairo_pdf_version_t version);\n\nvoid\ncairo_pdf_surface_set_size (cairo_surface_t\t*surface,\n\t\t\t    double\t\t width_in_points,\n\t\t\t    double\t\t height_in_points);\n\ntypedef enum _cairo_pdf_outline_flags {\n    CAIRO_PDF_OUTLINE_FLAG_OPEN   = 0x1,\n    CAIRO_PDF_OUTLINE_FLAG_BOLD   = 0x2,\n    CAIRO_PDF_OUTLINE_FLAG_ITALIC = 0x4,\n} cairo_pdf_outline_flags_t;\n\nint\ncairo_pdf_surface_add_outline (cairo_surface_t\t          *surface,\n\t\t\t       int                         parent_id,\n\t\t\t       const char                 *utf8,\n\t\t\t       const char                 *link_attribs,\n\t\t\t       cairo_pdf_outline_flags_t  flags);\n\ntypedef enum _cairo_pdf_metadata {\n    CAIRO_PDF_METADATA_TITLE,\n    CAIRO_PDF_METADATA_AUTHOR,\n    CAIRO_PDF_METADATA_SUBJECT,\n    CAIRO_PDF_METADATA_KEYWORDS,\n    CAIRO_PDF_METADATA_CREATOR,\n    CAIRO_PDF_METADATA_CREATE_DATE,\n    CAIRO_PDF_METADATA_MOD_DATE,\n} cairo_pdf_metadata_t;\n\nvoid\ncairo_pdf_surface_set_metadata (cairo_surface_t\t     *surface,\n\t\t\t\tcairo_pdf_metadata_t  metadata,\n                                const char           *utf8);\n\nvoid\ncairo_pdf_surface_set_page_label (cairo_surface_t *surface,\n                                  const char      *utf8);\n\nvoid\ncairo_pdf_surface_set_thumbnail_size (cairo_surface_t *surface,\n\t\t\t\t      int              width,\n\t\t\t\t      int              height);\n\n\n\ntypedef enum _cairo_ps_level {\n    CAIRO_PS_LEVEL_2,\n    CAIRO_PS_LEVEL_3\n} cairo_ps_level_t;\n\ncairo_surface_t *\ncairo_ps_surface_create (const char\t\t*filename,\n\t\t\t double\t\t\t width_in_points,\n\t\t\t double\t\t\t height_in_points);\n\ncairo_surface_t *\ncairo_ps_surface_create_for_stream (cairo_write_func_t\twrite_func,\n\t\t\t\t    void\t       *closure,\n\t\t\t\t    double\t\twidth_in_points,\n\t\t\t\t    double\t\theight_in_points);\n\nvoid\ncairo_ps_surface_restrict_to_level (cairo_surface_t    *surface,\n                                    cairo_ps_level_t    level);\n\nvoid\ncairo_ps_get_levels (cairo_ps_level_t const  **levels,\n                     int                      *num_levels);\n\nconst char *\ncairo_ps_level_to_string (cairo_ps_level_t level);\n\nvoid\ncairo_ps_surface_set_eps (cairo_surface_t\t*surface,\n\t\t\t  cairo_bool_t           eps);\n\ncairo_bool_t\ncairo_ps_surface_get_eps (cairo_surface_t\t*surface);\n\nvoid\ncairo_ps_surface_set_size (cairo_surface_t\t*surface,\n\t\t\t   double\t\t width_in_points,\n\t\t\t   double\t\t height_in_points);\n\nvoid\ncairo_ps_surface_dsc_comment (cairo_surface_t\t*surface,\n\t\t\t      const char\t*comment);\n\nvoid\ncairo_ps_surface_dsc_begin_setup (cairo_surface_t *surface);\n\nvoid\ncairo_ps_surface_dsc_begin_page_setup (cairo_surface_t *surface);\n\n\n\ntypedef enum _cairo_svg_version {\n    CAIRO_SVG_VERSION_1_1,\n    CAIRO_SVG_VERSION_1_2\n} cairo_svg_version_t;\n\ntypedef enum _cairo_svg_unit {\n    CAIRO_SVG_UNIT_USER = 0,\n    CAIRO_SVG_UNIT_EM,\n    CAIRO_SVG_UNIT_EX,\n    CAIRO_SVG_UNIT_PX,\n    CAIRO_SVG_UNIT_IN,\n    CAIRO_SVG_UNIT_CM,\n    CAIRO_SVG_UNIT_MM,\n    CAIRO_SVG_UNIT_PT,\n    CAIRO_SVG_UNIT_PC,\n    CAIRO_SVG_UNIT_PERCENT\n} cairo_svg_unit_t;\n\ncairo_surface_t *\ncairo_svg_surface_create (const char   *filename,\n\t\t\t  double\twidth_in_points,\n\t\t\t  double\theight_in_points);\n\ncairo_surface_t *\ncairo_svg_surface_create_for_stream (cairo_write_func_t\twrite_func,\n\t\t\t\t     void\t       *closure,\n\t\t\t\t     double\t\twidth_in_points,\n\t\t\t\t     double\t\theight_in_points);\n\nvoid\ncairo_svg_surface_restrict_to_version (cairo_surface_t \t\t*surface,\n\t\t\t\t       cairo_svg_version_t  \t version);\n\nvoid\ncairo_svg_get_versions (cairo_svg_version_t const\t**versions,\n                        int                      \t *num_versions);\n\nconst char *\ncairo_svg_version_to_string (cairo_svg_version_t version);\n\nvoid\ncairo_svg_surface_set_document_unit (cairo_surface_t\t*surface,\n\t\t\t\t     cairo_svg_unit_t\t unit);\n\ncairo_svg_unit_t\ncairo_svg_surface_get_document_unit (cairo_surface_t\t*surface);\n\n\n        typedef void* HDC;\n        typedef void* HFONT;\n        typedef void LOGFONTW;\n    \n\ncairo_surface_t *\ncairo_win32_surface_create (HDC hdc);\n\ncairo_surface_t *\ncairo_win32_surface_create_with_format (HDC hdc,\n                                        cairo_format_t format);\n\ncairo_surface_t *\ncairo_win32_printing_surface_create (HDC hdc);\n\ncairo_surface_t *\ncairo_win32_surface_create_with_ddb (HDC hdc,\n                                     cairo_format_t format,\n                                     int width,\n                                     int height);\n\ncairo_surface_t *\ncairo_win32_surface_create_with_dib (cairo_format_t format,\n                                     int width,\n                                     int height);\n\nHDC\ncairo_win32_surface_get_dc (cairo_surface_t *surface);\n\ncairo_surface_t *\ncairo_win32_surface_get_image (cairo_surface_t *surface);\n\ncairo_font_face_t *\ncairo_win32_font_face_create_for_logfontw (LOGFONTW *logfont);\n\ncairo_font_face_t *\ncairo_win32_font_face_create_for_hfont (HFONT font);\n\ncairo_font_face_t *\ncairo_win32_font_face_create_for_logfontw_hfont (LOGFONTW *logfont, HFONT font);\n\ncairo_status_t\ncairo_win32_scaled_font_select_font (cairo_scaled_font_t *scaled_font,\n\t\t\t\t     HDC                  hdc);\n\nvoid\ncairo_win32_scaled_font_done_font (cairo_scaled_font_t *scaled_font);\n\ndouble\ncairo_win32_scaled_font_get_metrics_factor (cairo_scaled_font_t *scaled_font);\n\nvoid\ncairo_win32_scaled_font_get_logical_to_device (cairo_scaled_font_t *scaled_font,\n\t\t\t\t\t       cairo_matrix_t *logical_to_device);\n\nvoid\ncairo_win32_scaled_font_get_device_to_logical (cairo_scaled_font_t *scaled_font,\n\t\t\t\t\t       cairo_matrix_t *device_to_logical);\n\n\n        typedef void* CGContextRef;\n        typedef void* CGFontRef;\n        typedef void* ATSUFontID;\n    \n\ncairo_surface_t *\ncairo_quartz_surface_create (cairo_format_t format,\n                             unsigned int width,\n                             unsigned int height);\n\ncairo_surface_t *\ncairo_quartz_surface_create_for_cg_context (CGContextRef cgContext,\n                                            unsigned int width,\n                                            unsigned int height);\n\nCGContextRef\ncairo_quartz_surface_get_cg_context (cairo_surface_t *surface);\n\ncairo_font_face_t *\ncairo_quartz_font_face_create_for_cgfont (CGFontRef font);\n\ncairo_font_face_t *\ncairo_quartz_font_face_create_for_atsu_font_id (ATSUFontID font_id);\n\n'
_CAIRO_XCB_HEADERS = '\n\ncairo_surface_t *\ncairo_xcb_surface_create (xcb_connection_t\t*connection,\n\t\t\t  xcb_drawable_t\t drawable,\n\t\t\t  xcb_visualtype_t\t*visual,\n\t\t\t  int\t\t\t width,\n\t\t\t  int\t\t\t height);\n\ncairo_surface_t *\ncairo_xcb_surface_create_for_bitmap (xcb_connection_t\t*connection,\n\t\t\t\t     xcb_screen_t\t*screen,\n\t\t\t\t     xcb_pixmap_t\t bitmap,\n\t\t\t\t     int\t\t width,\n\t\t\t\t     int\t\t height);\n\ncairo_surface_t *\ncairo_xcb_surface_create_with_xrender_format (xcb_connection_t\t\t\t*connection,\n\t\t\t\t\t      xcb_screen_t\t\t\t*screen,\n\t\t\t\t\t      xcb_drawable_t\t\t\t drawable,\n\t\t\t\t\t      xcb_render_pictforminfo_t\t\t*format,\n\t\t\t\t\t      int\t\t\t\t width,\n\t\t\t\t\t      int\t\t\t\t height);\n\nvoid\ncairo_xcb_surface_set_size (cairo_surface_t *surface,\n\t\t\t    int\t\t     width,\n\t\t\t    int\t\t     height);\n\nvoid\ncairo_xcb_surface_set_drawable (cairo_surface_t *surface,\n\t\t\t\txcb_drawable_t\tdrawable,\n\t\t\t\tint\t\twidth,\n\t\t\t\tint\t\theight);\n\nxcb_connection_t *\ncairo_xcb_device_get_connection (cairo_device_t *device);\n\nvoid\ncairo_xcb_device_debug_cap_xshm_version (cairo_device_t *device,\n                                         int major_version,\n                                         int minor_version);\n\nvoid\ncairo_xcb_device_debug_cap_xrender_version (cairo_device_t *device,\n                                            int major_version,\n                                            int minor_version);\n\nvoid\ncairo_xcb_device_debug_set_precision (cairo_device_t *device,\n\t\t\t\t      int precision);\n\nint\ncairo_xcb_device_debug_get_precision (cairo_device_t *device);\n\n'